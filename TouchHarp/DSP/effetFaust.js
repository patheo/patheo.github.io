/* ------------------------------------------------------------
Code generated with Faust 2.0.a41 (http://faust.grame.fr)
------------------------------------------------------------ */
/*
 faust2webaudio
 
 Primarily written by Myles Borins
 During the Spring 2013 offering of Music 420b with Julius Smith
 A bit during the Summer of 2013 with the help of Joshua Kit Clayton
 And finally a sprint during the late fall of 2013 to get everything working
 A Special thanks to Yann Orlarey and StÃ©phane Letz
 
 faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
 Choose the license that best suits your project. The text of the MIT and GPL
 licenses are at the root directory.
 
 Additional code : GRAME 2014
 
 */
 
'use strict';

var faust = faust || {};



function effetFaustModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF32 = new global.Float32Array(buffer);
	
	var imul = global.Math.imul;
	var log = global.Math.log;
	
	var abs = global.Math.abs;
	var atan2f = global.Math.atan2;
	var cosf = global.Math.cos;
	var fabsf = global.Math.abs;
	var floorf = global.Math.floor;
	var max = global.Math.max;
	var min = global.Math.min;
	var powf = global.Math.pow;
	var sinf = global.Math.sin;
	var sqrtf = global.Math.sqrt;
	var tanf = global.Math.tan;
	function faustpower2_f(value) {
		value = +(value);
		return +((value * value));
		
	}
	
	function faustpower2_i(value) {
		value = (value | 0);
		return (((value * value)) | 0);
		
	}
	
	function faustpower3_f(value) {
		value = +(value);
		return +(((value * value) * value));
		
	}
	
	function faustpower4_f(value) {
		value = +(value);
		return +((((value * value) * value) * value));
		
	}
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }

	function getNumInputseffetFaustSIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffetFaustSIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffetFaustSIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function filleffetFaustSIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[output + ((i | 0) << 2) >> 2] = 0.;
			
		}
		
	}

	function getNumInputseffetFaustSIG1(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffetFaustSIG1(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffetFaustSIG1(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i430 = 0;
		for (i430 = 0; (((i430 | 0) < 2) | 0); i430 = (((i430 | 0) + 1) | 0)) {
			HEAP32[dsp + 20950380 + ((i430 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function filleffetFaustSIG1(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 20950380 + (0 << 2) >> 2] = ((1 + (HEAP32[dsp + 20950380 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF32[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738e-05 * +((((HEAP32[dsp + 20950380 + (0 << 2) >> 2] | 0) - 1) | 0)))));
			HEAP32[dsp + 20950380 + (1 << 2) >> 2] = (HEAP32[dsp + 20950380 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceIniteffetFaustSIG1(dsp, (samplingFreq | 0));
		filleffetFaustSIG1(dsp, 65536, (dsp + 0 | 0));
		
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var i3 = 0;
		var i4 = 0;
		var i5 = 0;
		var i6 = 0;
		var i7 = 0;
		var i8 = 0;
		var i9 = 0;
		var i10 = 0;
		var i11 = 0;
		var i12 = 0;
		var i13 = 0;
		var i14 = 0;
		var i15 = 0;
		var i16 = 0;
		var i17 = 0;
		var i18 = 0;
		var i19 = 0;
		var i20 = 0;
		var i21 = 0;
		var i22 = 0;
		var i23 = 0;
		var i24 = 0;
		var i25 = 0;
		var i26 = 0;
		var i27 = 0;
		var i28 = 0;
		var i29 = 0;
		var i30 = 0;
		var i31 = 0;
		var i32 = 0;
		var i33 = 0;
		var i34 = 0;
		var i35 = 0;
		var i36 = 0;
		var i37 = 0;
		var i38 = 0;
		var i39 = 0;
		var i40 = 0;
		var i41 = 0;
		var i42 = 0;
		var i43 = 0;
		var i44 = 0;
		var i45 = 0;
		var i46 = 0;
		var i47 = 0;
		var i48 = 0;
		var i49 = 0;
		var i50 = 0;
		var i51 = 0;
		var i52 = 0;
		var i53 = 0;
		var i54 = 0;
		var i55 = 0;
		var i56 = 0;
		var i57 = 0;
		var i58 = 0;
		var i59 = 0;
		var i60 = 0;
		var i61 = 0;
		var i62 = 0;
		var i63 = 0;
		var i64 = 0;
		var i65 = 0;
		var i66 = 0;
		var i67 = 0;
		var i68 = 0;
		var i69 = 0;
		var i70 = 0;
		var i71 = 0;
		var i72 = 0;
		var i73 = 0;
		var i74 = 0;
		var i75 = 0;
		var i76 = 0;
		var i77 = 0;
		var i78 = 0;
		var i79 = 0;
		var i80 = 0;
		var i81 = 0;
		var i82 = 0;
		var i83 = 0;
		var i84 = 0;
		var i85 = 0;
		var i86 = 0;
		var i87 = 0;
		var i88 = 0;
		var i89 = 0;
		var i90 = 0;
		var i91 = 0;
		var i92 = 0;
		var i93 = 0;
		var i94 = 0;
		var i95 = 0;
		var i96 = 0;
		var i97 = 0;
		var i98 = 0;
		var i99 = 0;
		var i100 = 0;
		var i101 = 0;
		var i102 = 0;
		var i103 = 0;
		var i104 = 0;
		var i105 = 0;
		var i106 = 0;
		var i107 = 0;
		var i108 = 0;
		var i109 = 0;
		var i110 = 0;
		var i111 = 0;
		var i112 = 0;
		var i113 = 0;
		var i114 = 0;
		var i115 = 0;
		var i116 = 0;
		var i117 = 0;
		var i118 = 0;
		var i119 = 0;
		var i120 = 0;
		var i121 = 0;
		var i122 = 0;
		var i123 = 0;
		var i124 = 0;
		var i125 = 0;
		var i126 = 0;
		var i127 = 0;
		var i128 = 0;
		var i129 = 0;
		var i130 = 0;
		var i131 = 0;
		var i132 = 0;
		var i133 = 0;
		var i134 = 0;
		var i135 = 0;
		var i136 = 0;
		var i137 = 0;
		var i138 = 0;
		var i139 = 0;
		var i140 = 0;
		var i141 = 0;
		var i142 = 0;
		var i143 = 0;
		var i144 = 0;
		var i145 = 0;
		var i146 = 0;
		var i147 = 0;
		var i148 = 0;
		var i149 = 0;
		var i150 = 0;
		var i151 = 0;
		var i152 = 0;
		var i153 = 0;
		var i154 = 0;
		var i155 = 0;
		var i156 = 0;
		var i157 = 0;
		var i158 = 0;
		var i159 = 0;
		var i160 = 0;
		var i161 = 0;
		var i162 = 0;
		var i163 = 0;
		var i164 = 0;
		var i165 = 0;
		var i166 = 0;
		var i167 = 0;
		var i168 = 0;
		var i169 = 0;
		var i170 = 0;
		var i171 = 0;
		var i172 = 0;
		var i173 = 0;
		var i174 = 0;
		var i175 = 0;
		var i176 = 0;
		var i177 = 0;
		var i178 = 0;
		var i179 = 0;
		var i180 = 0;
		var i181 = 0;
		var i182 = 0;
		var i183 = 0;
		var i184 = 0;
		var i185 = 0;
		var i186 = 0;
		var i187 = 0;
		var i188 = 0;
		var i189 = 0;
		var i190 = 0;
		var i191 = 0;
		var i192 = 0;
		var i193 = 0;
		var i194 = 0;
		var i195 = 0;
		var i196 = 0;
		var i197 = 0;
		var i198 = 0;
		var i199 = 0;
		var i200 = 0;
		var i201 = 0;
		var i202 = 0;
		var i203 = 0;
		var i204 = 0;
		var i205 = 0;
		var i206 = 0;
		var i207 = 0;
		var i208 = 0;
		var i209 = 0;
		var i210 = 0;
		var i211 = 0;
		var i212 = 0;
		var i213 = 0;
		var i214 = 0;
		var i215 = 0;
		var i216 = 0;
		var i217 = 0;
		var i218 = 0;
		var i219 = 0;
		var i220 = 0;
		var i221 = 0;
		var i222 = 0;
		var i223 = 0;
		var i224 = 0;
		var i225 = 0;
		var i226 = 0;
		var i227 = 0;
		var i228 = 0;
		var i229 = 0;
		var i230 = 0;
		var i231 = 0;
		var i232 = 0;
		var i233 = 0;
		var i234 = 0;
		var i235 = 0;
		var i236 = 0;
		var i237 = 0;
		var i238 = 0;
		var i239 = 0;
		var i240 = 0;
		var i241 = 0;
		var i242 = 0;
		var i243 = 0;
		var i244 = 0;
		var i245 = 0;
		var i246 = 0;
		var i247 = 0;
		var i248 = 0;
		var i249 = 0;
		var i250 = 0;
		var i251 = 0;
		var i252 = 0;
		var i253 = 0;
		var i254 = 0;
		var i255 = 0;
		var i256 = 0;
		var i257 = 0;
		var i258 = 0;
		var i259 = 0;
		var i260 = 0;
		var i261 = 0;
		var i262 = 0;
		var i263 = 0;
		var i264 = 0;
		var i265 = 0;
		var i266 = 0;
		var i267 = 0;
		var i268 = 0;
		var i269 = 0;
		var i270 = 0;
		var i271 = 0;
		var i272 = 0;
		var i273 = 0;
		var i274 = 0;
		var i275 = 0;
		var i276 = 0;
		var i277 = 0;
		var i278 = 0;
		var i279 = 0;
		var i280 = 0;
		var i281 = 0;
		var i282 = 0;
		var i283 = 0;
		var i284 = 0;
		var i285 = 0;
		var i286 = 0;
		var i287 = 0;
		var i288 = 0;
		var i289 = 0;
		var i290 = 0;
		var i291 = 0;
		var i292 = 0;
		var i293 = 0;
		var i294 = 0;
		var i295 = 0;
		var i296 = 0;
		var i297 = 0;
		var i298 = 0;
		var i299 = 0;
		var i300 = 0;
		var i301 = 0;
		var i302 = 0;
		var i303 = 0;
		var i304 = 0;
		var i305 = 0;
		var i306 = 0;
		var i307 = 0;
		var i308 = 0;
		var i309 = 0;
		var i310 = 0;
		var i311 = 0;
		var i312 = 0;
		var i313 = 0;
		var i314 = 0;
		var i315 = 0;
		var i316 = 0;
		var i317 = 0;
		var i318 = 0;
		var i319 = 0;
		var i320 = 0;
		var i321 = 0;
		var i322 = 0;
		var i323 = 0;
		var i324 = 0;
		var i325 = 0;
		var i326 = 0;
		var i327 = 0;
		var i328 = 0;
		var i329 = 0;
		var i330 = 0;
		var i331 = 0;
		var i332 = 0;
		var i333 = 0;
		var i334 = 0;
		var i335 = 0;
		var i336 = 0;
		var i337 = 0;
		var i338 = 0;
		var i339 = 0;
		var i340 = 0;
		var i341 = 0;
		var i342 = 0;
		var i343 = 0;
		var i344 = 0;
		var i345 = 0;
		var i346 = 0;
		var i347 = 0;
		var i348 = 0;
		var i349 = 0;
		var i350 = 0;
		var i351 = 0;
		var i352 = 0;
		var i353 = 0;
		var i354 = 0;
		var i355 = 0;
		var i356 = 0;
		var i357 = 0;
		var i358 = 0;
		var i359 = 0;
		var i360 = 0;
		var i361 = 0;
		var i362 = 0;
		var i363 = 0;
		var i364 = 0;
		var i365 = 0;
		var i366 = 0;
		var i367 = 0;
		var i368 = 0;
		var i369 = 0;
		var i370 = 0;
		var i371 = 0;
		var i372 = 0;
		var i373 = 0;
		var i374 = 0;
		var i375 = 0;
		var i376 = 0;
		var i377 = 0;
		var i378 = 0;
		var i379 = 0;
		var i380 = 0;
		var i381 = 0;
		var i382 = 0;
		var i383 = 0;
		var i384 = 0;
		var i385 = 0;
		var i386 = 0;
		var i387 = 0;
		var i388 = 0;
		var i389 = 0;
		var i390 = 0;
		var i391 = 0;
		var i392 = 0;
		var i393 = 0;
		var i394 = 0;
		var i395 = 0;
		var i396 = 0;
		var i397 = 0;
		var i398 = 0;
		var i399 = 0;
		var i400 = 0;
		var i401 = 0;
		var i402 = 0;
		var i403 = 0;
		var i404 = 0;
		var i405 = 0;
		var i406 = 0;
		var i407 = 0;
		var i408 = 0;
		var i409 = 0;
		var i410 = 0;
		var i411 = 0;
		var i412 = 0;
		var i413 = 0;
		var i414 = 0;
		var i415 = 0;
		var i416 = 0;
		var i417 = 0;
		var i418 = 0;
		var i419 = 0;
		var i420 = 0;
		var i421 = 0;
		var i422 = 0;
		var i423 = 0;
		var i424 = 0;
		var i425 = 0;
		var i426 = 0;
		var i427 = 0;
		var i428 = 0;
		var i429 = 0;
		var i431 = 0;
		var i432 = 0;
		var i433 = 0;
		var i434 = 0;
		var i435 = 0;
		HEAP32[dsp + 20950400 >> 2] = (samplingFreq | 0);
		HEAPF32[dsp + 20950388 >> 2] = +(5.);
		for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947748 + ((i0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950392 >> 2] = +(0.);
		for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947756 + ((i1 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950396 >> 2] = +(0.);
		for (i2 = 0; (((i2 | 0) < 2) | 0); i2 = (((i2 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947764 + ((i2 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17137600 | 0));
		for (i3 = 0; (((i3 | 0) < 2) | 0); i3 = (((i3 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947772 + ((i3 | 0) << 2) >> 2] = 0;
			
		}
		HEAP32[dsp + 20950404 >> 2] = ((min(192000, ((max(1, (HEAP32[dsp + 20950400 >> 2] | 0))) | 0))) | 0);
		HEAPF32[dsp + 20950408 >> 2] = +((HEAP32[dsp + 20950404 >> 2] | 0));
		HEAPF32[dsp + 20950412 >> 2] = +(1. / +(HEAPF32[dsp + 20950408 >> 2]));
		HEAPF32[dsp + 20950416 >> 2] = +(faustpower2_f(+(HEAPF32[dsp + 20950412 >> 2])));
		HEAPF32[dsp + 20950420 >> 2] = +(4. * +(((faustpower2_i((HEAP32[dsp + 20950404 >> 2] | 0))) | 0)));
		HEAPF32[dsp + 20950424 >> 2] = +(3.14159 / +((HEAP32[dsp + 20950404 >> 2] | 0)));
		HEAPF32[dsp + 20950428 >> 2] = +(0.);
		HEAPF32[dsp + 20950432 >> 2] = +(1.64489 / +(HEAPF32[dsp + 20950408 >> 2]));
		HEAPF32[dsp + 20950436 >> 2] = +(2. * +((HEAP32[dsp + 20950404 >> 2] | 0)));
		HEAPF32[dsp + 20950440 >> 2] = +(0.5 / +((HEAP32[dsp + 20950404 >> 2] | 0)));
		HEAPF32[dsp + 20950444 >> 2] = +(2. / +(HEAPF32[dsp + 20950408 >> 2]));
		HEAPF32[dsp + 20950448 >> 2] = +(6.42109 / +(HEAPF32[dsp + 20950408 >> 2]));
		HEAPF32[dsp + 20950452 >> 2] = +(0.);
		for (i4 = 0; (((i4 | 0) < 2) | 0); i4 = (((i4 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947780 + ((i4 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950456 >> 2] = +(0.);
		for (i5 = 0; (((i5 | 0) < 2) | 0); i5 = (((i5 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947788 + ((i5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950460 >> 2] = +(0.);
		for (i6 = 0; (((i6 | 0) < 2) | 0); i6 = (((i6 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947796 + ((i6 | 0) << 2) >> 2] = 0.;
			
		}
		for (i7 = 0; (((i7 | 0) < 2) | 0); i7 = (((i7 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947804 + ((i7 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 262144 | 0));
		for (i8 = 0; (((i8 | 0) < 2) | 0); i8 = (((i8 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947812 + ((i8 | 0) << 2) >> 2] = 0;
			
		}
		for (i9 = 0; (((i9 | 0) < 2) | 0); i9 = (((i9 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947820 + ((i9 | 0) << 2) >> 2] = 0;
			
		}
		for (i10 = 0; (((i10 | 0) < 2) | 0); i10 = (((i10 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947828 + ((i10 | 0) << 2) >> 2] = 0;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 9, (dsp + 20947424 | 0));
		HEAP32[dsp + 20950464 >> 2] = (imul(15, (HEAP32[dsp + 20950404 >> 2] | 0)) | 0);
		for (i11 = 0; (((i11 | 0) < 2) | 0); i11 = (((i11 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947836 + ((i11 | 0) << 2) >> 2] = 0;
			
		}
		for (i12 = 0; (((i12 | 0) < 2) | 0); i12 = (((i12 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947844 + ((i12 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950468 >> 2] = +(0.);
		for (i13 = 0; (((i13 | 0) < 2) | 0); i13 = (((i13 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947852 + ((i13 | 0) << 2) >> 2] = 0;
			
		}
		for (i14 = 0; (((i14 | 0) < 2) | 0); i14 = (((i14 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947860 + ((i14 | 0) << 2) >> 2] = 0;
			
		}
		for (i15 = 0; (((i15 | 0) < 2) | 0); i15 = (((i15 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947868 + ((i15 | 0) << 2) >> 2] = 0;
			
		}
		for (i16 = 0; (((i16 | 0) < 2) | 0); i16 = (((i16 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947876 + ((i16 | 0) << 2) >> 2] = 0;
			
		}
		for (i17 = 0; (((i17 | 0) < 2) | 0); i17 = (((i17 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947884 + ((i17 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950472 >> 2] = 0;
		for (i18 = 0; (((i18 | 0) < 1024) | 0); i18 = (((i18 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20829664 + ((i18 | 0) << 2) >> 2] = 0.;
			
		}
		for (i19 = 0; (((i19 | 0) < 3) | 0); i19 = (((i19 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947580 + ((i19 | 0) << 2) >> 2] = 0.;
			
		}
		for (i20 = 0; (((i20 | 0) < 2) | 0); i20 = (((i20 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947892 + ((i20 | 0) << 2) >> 2] = 0;
			
		}
		for (i21 = 0; (((i21 | 0) < 2) | 0); i21 = (((i21 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947900 + ((i21 | 0) << 2) >> 2] = 0.;
			
		}
		for (i22 = 0; (((i22 | 0) < 1024) | 0); i22 = (((i22 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20833760 + ((i22 | 0) << 2) >> 2] = 0.;
			
		}
		for (i23 = 0; (((i23 | 0) < 3) | 0); i23 = (((i23 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947592 + ((i23 | 0) << 2) >> 2] = 0.;
			
		}
		for (i24 = 0; (((i24 | 0) < 2) | 0); i24 = (((i24 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947908 + ((i24 | 0) << 2) >> 2] = 0;
			
		}
		for (i25 = 0; (((i25 | 0) < 2) | 0); i25 = (((i25 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947916 + ((i25 | 0) << 2) >> 2] = 0.;
			
		}
		for (i26 = 0; (((i26 | 0) < 512) | 0); i26 = (((i26 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20936160 + ((i26 | 0) << 2) >> 2] = 0.;
			
		}
		for (i27 = 0; (((i27 | 0) < 3) | 0); i27 = (((i27 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947604 + ((i27 | 0) << 2) >> 2] = 0.;
			
		}
		for (i28 = 0; (((i28 | 0) < 2) | 0); i28 = (((i28 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947924 + ((i28 | 0) << 2) >> 2] = 0;
			
		}
		for (i29 = 0; (((i29 | 0) < 2) | 0); i29 = (((i29 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947932 + ((i29 | 0) << 2) >> 2] = 0.;
			
		}
		for (i30 = 0; (((i30 | 0) < 512) | 0); i30 = (((i30 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20938208 + ((i30 | 0) << 2) >> 2] = 0.;
			
		}
		for (i31 = 0; (((i31 | 0) < 3) | 0); i31 = (((i31 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947616 + ((i31 | 0) << 2) >> 2] = 0.;
			
		}
		for (i32 = 0; (((i32 | 0) < 2) | 0); i32 = (((i32 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947940 + ((i32 | 0) << 2) >> 2] = 0;
			
		}
		for (i33 = 0; (((i33 | 0) < 2) | 0); i33 = (((i33 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947948 + ((i33 | 0) << 2) >> 2] = 0.;
			
		}
		for (i34 = 0; (((i34 | 0) < 512) | 0); i34 = (((i34 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20940256 + ((i34 | 0) << 2) >> 2] = 0.;
			
		}
		for (i35 = 0; (((i35 | 0) < 3) | 0); i35 = (((i35 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947628 + ((i35 | 0) << 2) >> 2] = 0.;
			
		}
		for (i36 = 0; (((i36 | 0) < 2) | 0); i36 = (((i36 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947956 + ((i36 | 0) << 2) >> 2] = 0;
			
		}
		for (i37 = 0; (((i37 | 0) < 2) | 0); i37 = (((i37 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947964 + ((i37 | 0) << 2) >> 2] = 0.;
			
		}
		for (i38 = 0; (((i38 | 0) < 512) | 0); i38 = (((i38 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20942304 + ((i38 | 0) << 2) >> 2] = 0.;
			
		}
		for (i39 = 0; (((i39 | 0) < 3) | 0); i39 = (((i39 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947640 + ((i39 | 0) << 2) >> 2] = 0.;
			
		}
		for (i40 = 0; (((i40 | 0) < 2) | 0); i40 = (((i40 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947972 + ((i40 | 0) << 2) >> 2] = 0;
			
		}
		for (i41 = 0; (((i41 | 0) < 2) | 0); i41 = (((i41 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947980 + ((i41 | 0) << 2) >> 2] = 0.;
			
		}
		for (i42 = 0; (((i42 | 0) < 512) | 0); i42 = (((i42 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20944352 + ((i42 | 0) << 2) >> 2] = 0.;
			
		}
		for (i43 = 0; (((i43 | 0) < 3) | 0); i43 = (((i43 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947652 + ((i43 | 0) << 2) >> 2] = 0.;
			
		}
		for (i44 = 0; (((i44 | 0) < 2) | 0); i44 = (((i44 | 0) + 1) | 0)) {
			HEAP32[dsp + 20947988 + ((i44 | 0) << 2) >> 2] = 0;
			
		}
		for (i45 = 0; (((i45 | 0) < 2) | 0); i45 = (((i45 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947996 + ((i45 | 0) << 2) >> 2] = 0.;
			
		}
		for (i46 = 0; (((i46 | 0) < 256) | 0); i46 = (((i46 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20946400 + ((i46 | 0) << 2) >> 2] = 0.;
			
		}
		for (i47 = 0; (((i47 | 0) < 3) | 0); i47 = (((i47 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947664 + ((i47 | 0) << 2) >> 2] = 0.;
			
		}
		for (i48 = 0; (((i48 | 0) < 2) | 0); i48 = (((i48 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948004 + ((i48 | 0) << 2) >> 2] = 0;
			
		}
		for (i49 = 0; (((i49 | 0) < 2) | 0); i49 = (((i49 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948012 + ((i49 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950476 >> 2] = +(faustpower3_f(+(HEAPF32[dsp + 20950412 >> 2])));
		HEAPF32[dsp + 20950480 >> 2] = +(4. * +(HEAPF32[dsp + 20950412 >> 2]));
		HEAPF32[dsp + 20950484 >> 2] = +(12.8422 / +(HEAPF32[dsp + 20950408 >> 2]));
		HEAPF32[dsp + 20950488 >> 2] = +(6. * +(HEAPF32[dsp + 20950416 >> 2]));
		for (i50 = 0; (((i50 | 0) < 5) | 0); i50 = (((i50 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947460 + ((i50 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950492 >> 2] = +(0.0792366 * +(faustpower4_f(+(HEAPF32[dsp + 20950412 >> 2]))));
		HEAPF32[dsp + 20950496 >> 2] = +(0.118855 * +(HEAPF32[dsp + 20950416 >> 2]));
		HEAPF32[dsp + 20950500 >> 2] = +(0.0198091 * +(HEAPF32[dsp + 20950416 >> 2]));
		HEAPF32[dsp + 20950504 >> 2] = +(2. * +(HEAPF32[dsp + 20950416 >> 2]));
		for (i51 = 0; (((i51 | 0) < 3) | 0); i51 = (((i51 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947676 + ((i51 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950508 >> 2] = +(0.);
		for (i52 = 0; (((i52 | 0) < 2) | 0); i52 = (((i52 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948020 + ((i52 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950512 >> 2] = +(0.);
		HEAPF32[dsp + 20950516 >> 2] = +(0.);
		for (i53 = 0; (((i53 | 0) < 2) | 0); i53 = (((i53 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948028 + ((i53 | 0) << 2) >> 2] = 0.;
			
		}
		for (i54 = 0; (((i54 | 0) < 2) | 0); i54 = (((i54 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948036 + ((i54 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950520 >> 2] = +(0.);
		for (i55 = 0; (((i55 | 0) < 2) | 0); i55 = (((i55 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948044 + ((i55 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950524 >> 2] = +(0.);
		for (i56 = 0; (((i56 | 0) < 2) | 0); i56 = (((i56 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948052 + ((i56 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950528 >> 2] = +(0.);
		for (i57 = 0; (((i57 | 0) < 2) | 0); i57 = (((i57 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948060 + ((i57 | 0) << 2) >> 2] = 0.;
			
		}
		for (i58 = 0; (((i58 | 0) < 2) | 0); i58 = (((i58 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948068 + ((i58 | 0) << 2) >> 2] = 0.;
			
		}
		for (i59 = 0; (((i59 | 0) < 2) | 0); i59 = (((i59 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948076 + ((i59 | 0) << 2) >> 2] = 0.;
			
		}
		for (i60 = 0; (((i60 | 0) < 2) | 0); i60 = (((i60 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948084 + ((i60 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950532 >> 2] = +(0.);
		for (i61 = 0; (((i61 | 0) < 2) | 0); i61 = (((i61 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948092 + ((i61 | 0) << 2) >> 2] = 0.;
			
		}
		for (i62 = 0; (((i62 | 0) < 262144) | 0); i62 = (((i62 | 0) + 1) | 0)) {
			HEAPF32[dsp + 10846144 + ((i62 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950536 >> 2] = +(0.);
		for (i63 = 0; (((i63 | 0) < 2) | 0); i63 = (((i63 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948100 + ((i63 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950540 >> 2] = +(6.28319 / +((HEAP32[dsp + 20950404 >> 2] | 0)));
		HEAPF32[dsp + 20950544 >> 2] = +(0.);
		for (i64 = 0; (((i64 | 0) < 2) | 0); i64 = (((i64 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948108 + ((i64 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950548 >> 2] = +(0.);
		for (i65 = 0; (((i65 | 0) < 2) | 0); i65 = (((i65 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948116 + ((i65 | 0) << 2) >> 2] = 0.;
			
		}
		for (i66 = 0; (((i66 | 0) < 2) | 0); i66 = (((i66 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948124 + ((i66 | 0) << 2) >> 2] = 0.;
			
		}
		for (i67 = 0; (((i67 | 0) < 2) | 0); i67 = (((i67 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948132 + ((i67 | 0) << 2) >> 2] = 0.;
			
		}
		for (i68 = 0; (((i68 | 0) < 2) | 0); i68 = (((i68 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948140 + ((i68 | 0) << 2) >> 2] = 0.;
			
		}
		for (i69 = 0; (((i69 | 0) < 2) | 0); i69 = (((i69 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948148 + ((i69 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950552 >> 2] = +(0.);
		for (i70 = 0; (((i70 | 0) < 2) | 0); i70 = (((i70 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948156 + ((i70 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950556 >> 2] = +(0.);
		for (i71 = 0; (((i71 | 0) < 2) | 0); i71 = (((i71 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948164 + ((i71 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950560 >> 2] = +(0.);
		for (i72 = 0; (((i72 | 0) < 2) | 0); i72 = (((i72 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948172 + ((i72 | 0) << 2) >> 2] = 0.;
			
		}
		for (i73 = 0; (((i73 | 0) < 8192) | 0); i73 = (((i73 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19256800 + ((i73 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950564 >> 2] = ~~(+(0.5 + +(~~(+(0.0366667 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i74 = 0; (((i74 | 0) < 2) | 0); i74 = (((i74 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948180 + ((i74 | 0) << 2) >> 2] = 0.;
			
		}
		for (i75 = 0; (((i75 | 0) < 2) | 0); i75 = (((i75 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948188 + ((i75 | 0) << 2) >> 2] = 0.;
			
		}
		for (i76 = 0; (((i76 | 0) < 8192) | 0); i76 = (((i76 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19289568 + ((i76 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950568 >> 2] = ~~(+(0.5 + +(~~(+(0.0353061 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i77 = 0; (((i77 | 0) < 2) | 0); i77 = (((i77 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948196 + ((i77 | 0) << 2) >> 2] = 0.;
			
		}
		for (i78 = 0; (((i78 | 0) < 2) | 0); i78 = (((i78 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948204 + ((i78 | 0) << 2) >> 2] = 0.;
			
		}
		for (i79 = 0; (((i79 | 0) < 8192) | 0); i79 = (((i79 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19322336 + ((i79 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950572 >> 2] = ~~(+(0.5 + +(~~(+(0.0338095 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i80 = 0; (((i80 | 0) < 2) | 0); i80 = (((i80 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948212 + ((i80 | 0) << 2) >> 2] = 0.;
			
		}
		for (i81 = 0; (((i81 | 0) < 2) | 0); i81 = (((i81 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948220 + ((i81 | 0) << 2) >> 2] = 0.;
			
		}
		for (i82 = 0; (((i82 | 0) < 8192) | 0); i82 = (((i82 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19355104 + ((i82 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950576 >> 2] = ~~(+(0.5 + +(~~(+(0.0322449 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i83 = 0; (((i83 | 0) < 2) | 0); i83 = (((i83 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948228 + ((i83 | 0) << 2) >> 2] = 0.;
			
		}
		for (i84 = 0; (((i84 | 0) < 2) | 0); i84 = (((i84 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948236 + ((i84 | 0) << 2) >> 2] = 0.;
			
		}
		for (i85 = 0; (((i85 | 0) < 8192) | 0); i85 = (((i85 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19387872 + ((i85 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950580 >> 2] = ~~(+(0.5 + +(~~(+(0.0307483 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i86 = 0; (((i86 | 0) < 2) | 0); i86 = (((i86 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948244 + ((i86 | 0) << 2) >> 2] = 0.;
			
		}
		for (i87 = 0; (((i87 | 0) < 2) | 0); i87 = (((i87 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948252 + ((i87 | 0) << 2) >> 2] = 0.;
			
		}
		for (i88 = 0; (((i88 | 0) < 8192) | 0); i88 = (((i88 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19420640 + ((i88 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950584 >> 2] = ~~(+(0.5 + +(~~(+(0.0289569 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i89 = 0; (((i89 | 0) < 2) | 0); i89 = (((i89 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948260 + ((i89 | 0) << 2) >> 2] = 0.;
			
		}
		for (i90 = 0; (((i90 | 0) < 2) | 0); i90 = (((i90 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948268 + ((i90 | 0) << 2) >> 2] = 0.;
			
		}
		for (i91 = 0; (((i91 | 0) < 8192) | 0); i91 = (((i91 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19453408 + ((i91 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950588 >> 2] = ~~(+(0.5 + +(~~(+(0.0269388 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i92 = 0; (((i92 | 0) < 2) | 0); i92 = (((i92 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948276 + ((i92 | 0) << 2) >> 2] = 0.;
			
		}
		for (i93 = 0; (((i93 | 0) < 2) | 0); i93 = (((i93 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948284 + ((i93 | 0) << 2) >> 2] = 0.;
			
		}
		for (i94 = 0; (((i94 | 0) < 8192) | 0); i94 = (((i94 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19486176 + ((i94 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950592 >> 2] = ~~(+(0.5 + +(~~(+(0.0253061 * +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i95 = 0; (((i95 | 0) < 2) | 0); i95 = (((i95 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948292 + ((i95 | 0) << 2) >> 2] = 0.;
			
		}
		for (i96 = 0; (((i96 | 0) < 1024) | 0); i96 = (((i96 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20837856 + ((i96 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950596 >> 2] = ((~~(+(+(~~(+(0.0126077 * +((HEAP32[dsp + 20950404 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i97 = 0; (((i97 | 0) < 2) | 0); i97 = (((i97 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948300 + ((i97 | 0) << 2) >> 2] = 0.;
			
		}
		for (i98 = 0; (((i98 | 0) < 1024) | 0); i98 = (((i98 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20841952 + ((i98 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950600 >> 2] = ((~~(+(+(~~(+(0.01 * +((HEAP32[dsp + 20950404 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i99 = 0; (((i99 | 0) < 2) | 0); i99 = (((i99 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948308 + ((i99 | 0) << 2) >> 2] = 0.;
			
		}
		for (i100 = 0; (((i100 | 0) < 1024) | 0); i100 = (((i100 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20846048 + ((i100 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950604 >> 2] = ((~~(+(+(~~(+(0.00773243 * +((HEAP32[dsp + 20950404 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i101 = 0; (((i101 | 0) < 2) | 0); i101 = (((i101 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948316 + ((i101 | 0) << 2) >> 2] = 0.;
			
		}
		for (i102 = 0; (((i102 | 0) < 1024) | 0); i102 = (((i102 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20850144 + ((i102 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20950608 >> 2] = ((~~(+(+(~~(+(0.00510204 * +((HEAP32[dsp + 20950404 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i103 = 0; (((i103 | 0) < 2) | 0); i103 = (((i103 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948324 + ((i103 | 0) << 2) >> 2] = 0.;
			
		}
		for (i104 = 0; (((i104 | 0) < 2) | 0); i104 = (((i104 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948332 + ((i104 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950616 >> 2] = +(0.);
		for (i105 = 0; (((i105 | 0) < 2) | 0); i105 = (((i105 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948340 + ((i105 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950620 >> 2] = +(5.);
		for (i106 = 0; (((i106 | 0) < 2) | 0); i106 = (((i106 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948348 + ((i106 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950624 >> 2] = +(0.);
		for (i107 = 0; (((i107 | 0) < 2) | 0); i107 = (((i107 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948356 + ((i107 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950628 >> 2] = +(0.);
		for (i108 = 0; (((i108 | 0) < 2) | 0); i108 = (((i108 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948364 + ((i108 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950632 >> 2] = +(0.);
		for (i109 = 0; (((i109 | 0) < 2) | 0); i109 = (((i109 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948372 + ((i109 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950636 >> 2] = +(0.);
		for (i110 = 0; (((i110 | 0) < 2) | 0); i110 = (((i110 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948380 + ((i110 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950640 >> 2] = +(0.);
		for (i111 = 0; (((i111 | 0) < 2) | 0); i111 = (((i111 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948388 + ((i111 | 0) << 2) >> 2] = 0.;
			
		}
		for (i112 = 0; (((i112 | 0) < 2) | 0); i112 = (((i112 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948396 + ((i112 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950644 >> 2] = +(0.);
		for (i113 = 0; (((i113 | 0) < 2) | 0); i113 = (((i113 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948404 + ((i113 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 2026144 | 0));
		for (i114 = 0; (((i114 | 0) < 2) | 0); i114 = (((i114 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948412 + ((i114 | 0) << 2) >> 2] = 0;
			
		}
		for (i115 = 0; (((i115 | 0) < 2) | 0); i115 = (((i115 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948420 + ((i115 | 0) << 2) >> 2] = 0;
			
		}
		for (i116 = 0; (((i116 | 0) < 2) | 0); i116 = (((i116 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948428 + ((i116 | 0) << 2) >> 2] = 0;
			
		}
		for (i117 = 0; (((i117 | 0) < 2) | 0); i117 = (((i117 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948436 + ((i117 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950648 >> 2] = +(0.);
		HEAPF32[dsp + 20950652 >> 2] = +(0.);
		for (i118 = 0; (((i118 | 0) < 2) | 0); i118 = (((i118 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948444 + ((i118 | 0) << 2) >> 2] = 0.;
			
		}
		for (i119 = 0; (((i119 | 0) < 5) | 0); i119 = (((i119 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947480 + ((i119 | 0) << 2) >> 2] = 0.;
			
		}
		for (i120 = 0; (((i120 | 0) < 3) | 0); i120 = (((i120 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947688 + ((i120 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17490800 | 0));
		HEAPF32[dsp + 20950656 >> 2] = +(0.);
		HEAPF32[dsp + 20950660 >> 2] = +(0.);
		for (i121 = 0; (((i121 | 0) < 2) | 0); i121 = (((i121 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948452 + ((i121 | 0) << 2) >> 2] = 0.;
			
		}
		for (i122 = 0; (((i122 | 0) < 2) | 0); i122 = (((i122 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948460 + ((i122 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950664 >> 2] = +(0.);
		for (i123 = 0; (((i123 | 0) < 2) | 0); i123 = (((i123 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948468 + ((i123 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950668 >> 2] = +(0.);
		for (i124 = 0; (((i124 | 0) < 2) | 0); i124 = (((i124 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948476 + ((i124 | 0) << 2) >> 2] = 0.;
			
		}
		for (i125 = 0; (((i125 | 0) < 2) | 0); i125 = (((i125 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948484 + ((i125 | 0) << 2) >> 2] = 0.;
			
		}
		for (i126 = 0; (((i126 | 0) < 2) | 0); i126 = (((i126 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948492 + ((i126 | 0) << 2) >> 2] = 0.;
			
		}
		for (i127 = 0; (((i127 | 0) < 2) | 0); i127 = (((i127 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948500 + ((i127 | 0) << 2) >> 2] = 0.;
			
		}
		for (i128 = 0; (((i128 | 0) < 262144) | 0); i128 = (((i128 | 0) + 1) | 0)) {
			HEAPF32[dsp + 11894720 + ((i128 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950672 >> 2] = +(0.);
		for (i129 = 0; (((i129 | 0) < 2) | 0); i129 = (((i129 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948508 + ((i129 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950676 >> 2] = +(0.);
		HEAPF32[dsp + 20950680 >> 2] = +(0.);
		for (i130 = 0; (((i130 | 0) < 2) | 0); i130 = (((i130 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948516 + ((i130 | 0) << 2) >> 2] = 0.;
			
		}
		for (i131 = 0; (((i131 | 0) < 2) | 0); i131 = (((i131 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948524 + ((i131 | 0) << 2) >> 2] = 0.;
			
		}
		for (i132 = 0; (((i132 | 0) < 2) | 0); i132 = (((i132 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948532 + ((i132 | 0) << 2) >> 2] = 0.;
			
		}
		for (i133 = 0; (((i133 | 0) < 2) | 0); i133 = (((i133 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948540 + ((i133 | 0) << 2) >> 2] = 0.;
			
		}
		for (i134 = 0; (((i134 | 0) < 2) | 0); i134 = (((i134 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948548 + ((i134 | 0) << 2) >> 2] = 0.;
			
		}
		for (i135 = 0; (((i135 | 0) < 2) | 0); i135 = (((i135 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948556 + ((i135 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950684 >> 2] = +(0.);
		for (i136 = 0; (((i136 | 0) < 2) | 0); i136 = (((i136 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948564 + ((i136 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950688 >> 2] = +(0.);
		for (i137 = 0; (((i137 | 0) < 2) | 0); i137 = (((i137 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948572 + ((i137 | 0) << 2) >> 2] = 0.;
			
		}
		for (i138 = 0; (((i138 | 0) < 8192) | 0); i138 = (((i138 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19518944 + ((i138 | 0) << 2) >> 2] = 0.;
			
		}
		for (i139 = 0; (((i139 | 0) < 2) | 0); i139 = (((i139 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948580 + ((i139 | 0) << 2) >> 2] = 0.;
			
		}
		for (i140 = 0; (((i140 | 0) < 2) | 0); i140 = (((i140 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948588 + ((i140 | 0) << 2) >> 2] = 0.;
			
		}
		for (i141 = 0; (((i141 | 0) < 8192) | 0); i141 = (((i141 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19551712 + ((i141 | 0) << 2) >> 2] = 0.;
			
		}
		for (i142 = 0; (((i142 | 0) < 2) | 0); i142 = (((i142 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948596 + ((i142 | 0) << 2) >> 2] = 0.;
			
		}
		for (i143 = 0; (((i143 | 0) < 2) | 0); i143 = (((i143 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948604 + ((i143 | 0) << 2) >> 2] = 0.;
			
		}
		for (i144 = 0; (((i144 | 0) < 8192) | 0); i144 = (((i144 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19584480 + ((i144 | 0) << 2) >> 2] = 0.;
			
		}
		for (i145 = 0; (((i145 | 0) < 2) | 0); i145 = (((i145 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948612 + ((i145 | 0) << 2) >> 2] = 0.;
			
		}
		for (i146 = 0; (((i146 | 0) < 2) | 0); i146 = (((i146 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948620 + ((i146 | 0) << 2) >> 2] = 0.;
			
		}
		for (i147 = 0; (((i147 | 0) < 8192) | 0); i147 = (((i147 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19617248 + ((i147 | 0) << 2) >> 2] = 0.;
			
		}
		for (i148 = 0; (((i148 | 0) < 2) | 0); i148 = (((i148 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948628 + ((i148 | 0) << 2) >> 2] = 0.;
			
		}
		for (i149 = 0; (((i149 | 0) < 2) | 0); i149 = (((i149 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948636 + ((i149 | 0) << 2) >> 2] = 0.;
			
		}
		for (i150 = 0; (((i150 | 0) < 8192) | 0); i150 = (((i150 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19650016 + ((i150 | 0) << 2) >> 2] = 0.;
			
		}
		for (i151 = 0; (((i151 | 0) < 2) | 0); i151 = (((i151 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948644 + ((i151 | 0) << 2) >> 2] = 0.;
			
		}
		for (i152 = 0; (((i152 | 0) < 2) | 0); i152 = (((i152 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948652 + ((i152 | 0) << 2) >> 2] = 0.;
			
		}
		for (i153 = 0; (((i153 | 0) < 8192) | 0); i153 = (((i153 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19682784 + ((i153 | 0) << 2) >> 2] = 0.;
			
		}
		for (i154 = 0; (((i154 | 0) < 2) | 0); i154 = (((i154 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948660 + ((i154 | 0) << 2) >> 2] = 0.;
			
		}
		for (i155 = 0; (((i155 | 0) < 2) | 0); i155 = (((i155 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948668 + ((i155 | 0) << 2) >> 2] = 0.;
			
		}
		for (i156 = 0; (((i156 | 0) < 8192) | 0); i156 = (((i156 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19715552 + ((i156 | 0) << 2) >> 2] = 0.;
			
		}
		for (i157 = 0; (((i157 | 0) < 2) | 0); i157 = (((i157 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948676 + ((i157 | 0) << 2) >> 2] = 0.;
			
		}
		for (i158 = 0; (((i158 | 0) < 2) | 0); i158 = (((i158 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948684 + ((i158 | 0) << 2) >> 2] = 0.;
			
		}
		for (i159 = 0; (((i159 | 0) < 8192) | 0); i159 = (((i159 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19748320 + ((i159 | 0) << 2) >> 2] = 0.;
			
		}
		for (i160 = 0; (((i160 | 0) < 2) | 0); i160 = (((i160 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948692 + ((i160 | 0) << 2) >> 2] = 0.;
			
		}
		for (i161 = 0; (((i161 | 0) < 1024) | 0); i161 = (((i161 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20854240 + ((i161 | 0) << 2) >> 2] = 0.;
			
		}
		for (i162 = 0; (((i162 | 0) < 2) | 0); i162 = (((i162 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948700 + ((i162 | 0) << 2) >> 2] = 0.;
			
		}
		for (i163 = 0; (((i163 | 0) < 1024) | 0); i163 = (((i163 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20858336 + ((i163 | 0) << 2) >> 2] = 0.;
			
		}
		for (i164 = 0; (((i164 | 0) < 2) | 0); i164 = (((i164 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948708 + ((i164 | 0) << 2) >> 2] = 0.;
			
		}
		for (i165 = 0; (((i165 | 0) < 1024) | 0); i165 = (((i165 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20862432 + ((i165 | 0) << 2) >> 2] = 0.;
			
		}
		for (i166 = 0; (((i166 | 0) < 2) | 0); i166 = (((i166 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948716 + ((i166 | 0) << 2) >> 2] = 0.;
			
		}
		for (i167 = 0; (((i167 | 0) < 1024) | 0); i167 = (((i167 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20866528 + ((i167 | 0) << 2) >> 2] = 0.;
			
		}
		for (i168 = 0; (((i168 | 0) < 2) | 0); i168 = (((i168 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948724 + ((i168 | 0) << 2) >> 2] = 0.;
			
		}
		for (i169 = 0; (((i169 | 0) < 2) | 0); i169 = (((i169 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948732 + ((i169 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950696 >> 2] = +(0.);
		for (i170 = 0; (((i170 | 0) < 2) | 0); i170 = (((i170 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948740 + ((i170 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950700 >> 2] = +(5.);
		for (i171 = 0; (((i171 | 0) < 2) | 0); i171 = (((i171 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948748 + ((i171 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950704 >> 2] = +(0.);
		for (i172 = 0; (((i172 | 0) < 2) | 0); i172 = (((i172 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948756 + ((i172 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950708 >> 2] = +(0.);
		for (i173 = 0; (((i173 | 0) < 2) | 0); i173 = (((i173 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948764 + ((i173 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950712 >> 2] = +(0.);
		for (i174 = 0; (((i174 | 0) < 2) | 0); i174 = (((i174 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948772 + ((i174 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950716 >> 2] = +(0.);
		for (i175 = 0; (((i175 | 0) < 2) | 0); i175 = (((i175 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948780 + ((i175 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950720 >> 2] = +(0.);
		for (i176 = 0; (((i176 | 0) < 2) | 0); i176 = (((i176 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948788 + ((i176 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950724 >> 2] = +(0.);
		for (i177 = 0; (((i177 | 0) < 2) | 0); i177 = (((i177 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948796 + ((i177 | 0) << 2) >> 2] = 0.;
			
		}
		for (i178 = 0; (((i178 | 0) < 2) | 0); i178 = (((i178 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948804 + ((i178 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950728 >> 2] = +(0.);
		for (i179 = 0; (((i179 | 0) < 2) | 0); i179 = (((i179 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948812 + ((i179 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 3790144 | 0));
		for (i180 = 0; (((i180 | 0) < 2) | 0); i180 = (((i180 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948820 + ((i180 | 0) << 2) >> 2] = 0;
			
		}
		for (i181 = 0; (((i181 | 0) < 2) | 0); i181 = (((i181 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948828 + ((i181 | 0) << 2) >> 2] = 0;
			
		}
		for (i182 = 0; (((i182 | 0) < 2) | 0); i182 = (((i182 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948836 + ((i182 | 0) << 2) >> 2] = 0;
			
		}
		for (i183 = 0; (((i183 | 0) < 2) | 0); i183 = (((i183 | 0) + 1) | 0)) {
			HEAP32[dsp + 20948844 + ((i183 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950732 >> 2] = +(0.);
		HEAPF32[dsp + 20950736 >> 2] = +(0.);
		for (i184 = 0; (((i184 | 0) < 2) | 0); i184 = (((i184 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948852 + ((i184 | 0) << 2) >> 2] = 0.;
			
		}
		for (i185 = 0; (((i185 | 0) < 5) | 0); i185 = (((i185 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947500 + ((i185 | 0) << 2) >> 2] = 0.;
			
		}
		for (i186 = 0; (((i186 | 0) < 3) | 0); i186 = (((i186 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947700 + ((i186 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17844000 | 0));
		HEAPF32[dsp + 20950740 >> 2] = +(0.);
		HEAPF32[dsp + 20950744 >> 2] = +(0.);
		for (i187 = 0; (((i187 | 0) < 2) | 0); i187 = (((i187 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948860 + ((i187 | 0) << 2) >> 2] = 0.;
			
		}
		for (i188 = 0; (((i188 | 0) < 2) | 0); i188 = (((i188 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948868 + ((i188 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950748 >> 2] = +(0.);
		for (i189 = 0; (((i189 | 0) < 2) | 0); i189 = (((i189 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948876 + ((i189 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950752 >> 2] = +(0.);
		for (i190 = 0; (((i190 | 0) < 2) | 0); i190 = (((i190 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948884 + ((i190 | 0) << 2) >> 2] = 0.;
			
		}
		for (i191 = 0; (((i191 | 0) < 2) | 0); i191 = (((i191 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948892 + ((i191 | 0) << 2) >> 2] = 0.;
			
		}
		for (i192 = 0; (((i192 | 0) < 2) | 0); i192 = (((i192 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948900 + ((i192 | 0) << 2) >> 2] = 0.;
			
		}
		for (i193 = 0; (((i193 | 0) < 2) | 0); i193 = (((i193 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948908 + ((i193 | 0) << 2) >> 2] = 0.;
			
		}
		for (i194 = 0; (((i194 | 0) < 262144) | 0); i194 = (((i194 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12943296 + ((i194 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950756 >> 2] = +(0.);
		HEAPF32[dsp + 20950760 >> 2] = +(0.);
		for (i195 = 0; (((i195 | 0) < 2) | 0); i195 = (((i195 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948916 + ((i195 | 0) << 2) >> 2] = 0.;
			
		}
		for (i196 = 0; (((i196 | 0) < 2) | 0); i196 = (((i196 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948924 + ((i196 | 0) << 2) >> 2] = 0.;
			
		}
		for (i197 = 0; (((i197 | 0) < 2) | 0); i197 = (((i197 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948932 + ((i197 | 0) << 2) >> 2] = 0.;
			
		}
		for (i198 = 0; (((i198 | 0) < 2) | 0); i198 = (((i198 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948940 + ((i198 | 0) << 2) >> 2] = 0.;
			
		}
		for (i199 = 0; (((i199 | 0) < 2) | 0); i199 = (((i199 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948948 + ((i199 | 0) << 2) >> 2] = 0.;
			
		}
		for (i200 = 0; (((i200 | 0) < 2) | 0); i200 = (((i200 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948956 + ((i200 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950764 >> 2] = +(0.);
		for (i201 = 0; (((i201 | 0) < 2) | 0); i201 = (((i201 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948964 + ((i201 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950768 >> 2] = +(0.);
		for (i202 = 0; (((i202 | 0) < 2) | 0); i202 = (((i202 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948972 + ((i202 | 0) << 2) >> 2] = 0.;
			
		}
		for (i203 = 0; (((i203 | 0) < 8192) | 0); i203 = (((i203 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19781088 + ((i203 | 0) << 2) >> 2] = 0.;
			
		}
		for (i204 = 0; (((i204 | 0) < 2) | 0); i204 = (((i204 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948980 + ((i204 | 0) << 2) >> 2] = 0.;
			
		}
		for (i205 = 0; (((i205 | 0) < 2) | 0); i205 = (((i205 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948988 + ((i205 | 0) << 2) >> 2] = 0.;
			
		}
		for (i206 = 0; (((i206 | 0) < 8192) | 0); i206 = (((i206 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19813856 + ((i206 | 0) << 2) >> 2] = 0.;
			
		}
		for (i207 = 0; (((i207 | 0) < 2) | 0); i207 = (((i207 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20948996 + ((i207 | 0) << 2) >> 2] = 0.;
			
		}
		for (i208 = 0; (((i208 | 0) < 2) | 0); i208 = (((i208 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949004 + ((i208 | 0) << 2) >> 2] = 0.;
			
		}
		for (i209 = 0; (((i209 | 0) < 8192) | 0); i209 = (((i209 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19846624 + ((i209 | 0) << 2) >> 2] = 0.;
			
		}
		for (i210 = 0; (((i210 | 0) < 2) | 0); i210 = (((i210 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949012 + ((i210 | 0) << 2) >> 2] = 0.;
			
		}
		for (i211 = 0; (((i211 | 0) < 2) | 0); i211 = (((i211 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949020 + ((i211 | 0) << 2) >> 2] = 0.;
			
		}
		for (i212 = 0; (((i212 | 0) < 8192) | 0); i212 = (((i212 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19879392 + ((i212 | 0) << 2) >> 2] = 0.;
			
		}
		for (i213 = 0; (((i213 | 0) < 2) | 0); i213 = (((i213 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949028 + ((i213 | 0) << 2) >> 2] = 0.;
			
		}
		for (i214 = 0; (((i214 | 0) < 2) | 0); i214 = (((i214 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949036 + ((i214 | 0) << 2) >> 2] = 0.;
			
		}
		for (i215 = 0; (((i215 | 0) < 8192) | 0); i215 = (((i215 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19912160 + ((i215 | 0) << 2) >> 2] = 0.;
			
		}
		for (i216 = 0; (((i216 | 0) < 2) | 0); i216 = (((i216 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949044 + ((i216 | 0) << 2) >> 2] = 0.;
			
		}
		for (i217 = 0; (((i217 | 0) < 2) | 0); i217 = (((i217 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949052 + ((i217 | 0) << 2) >> 2] = 0.;
			
		}
		for (i218 = 0; (((i218 | 0) < 8192) | 0); i218 = (((i218 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19944928 + ((i218 | 0) << 2) >> 2] = 0.;
			
		}
		for (i219 = 0; (((i219 | 0) < 2) | 0); i219 = (((i219 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949060 + ((i219 | 0) << 2) >> 2] = 0.;
			
		}
		for (i220 = 0; (((i220 | 0) < 2) | 0); i220 = (((i220 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949068 + ((i220 | 0) << 2) >> 2] = 0.;
			
		}
		for (i221 = 0; (((i221 | 0) < 8192) | 0); i221 = (((i221 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19977696 + ((i221 | 0) << 2) >> 2] = 0.;
			
		}
		for (i222 = 0; (((i222 | 0) < 2) | 0); i222 = (((i222 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949076 + ((i222 | 0) << 2) >> 2] = 0.;
			
		}
		for (i223 = 0; (((i223 | 0) < 2) | 0); i223 = (((i223 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949084 + ((i223 | 0) << 2) >> 2] = 0.;
			
		}
		for (i224 = 0; (((i224 | 0) < 8192) | 0); i224 = (((i224 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20010464 + ((i224 | 0) << 2) >> 2] = 0.;
			
		}
		for (i225 = 0; (((i225 | 0) < 2) | 0); i225 = (((i225 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949092 + ((i225 | 0) << 2) >> 2] = 0.;
			
		}
		for (i226 = 0; (((i226 | 0) < 1024) | 0); i226 = (((i226 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20870624 + ((i226 | 0) << 2) >> 2] = 0.;
			
		}
		for (i227 = 0; (((i227 | 0) < 2) | 0); i227 = (((i227 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949100 + ((i227 | 0) << 2) >> 2] = 0.;
			
		}
		for (i228 = 0; (((i228 | 0) < 1024) | 0); i228 = (((i228 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20874720 + ((i228 | 0) << 2) >> 2] = 0.;
			
		}
		for (i229 = 0; (((i229 | 0) < 2) | 0); i229 = (((i229 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949108 + ((i229 | 0) << 2) >> 2] = 0.;
			
		}
		for (i230 = 0; (((i230 | 0) < 1024) | 0); i230 = (((i230 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20878816 + ((i230 | 0) << 2) >> 2] = 0.;
			
		}
		for (i231 = 0; (((i231 | 0) < 2) | 0); i231 = (((i231 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949116 + ((i231 | 0) << 2) >> 2] = 0.;
			
		}
		for (i232 = 0; (((i232 | 0) < 1024) | 0); i232 = (((i232 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20882912 + ((i232 | 0) << 2) >> 2] = 0.;
			
		}
		for (i233 = 0; (((i233 | 0) < 2) | 0); i233 = (((i233 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949124 + ((i233 | 0) << 2) >> 2] = 0.;
			
		}
		for (i234 = 0; (((i234 | 0) < 2) | 0); i234 = (((i234 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949132 + ((i234 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950776 >> 2] = +(0.);
		for (i235 = 0; (((i235 | 0) < 2) | 0); i235 = (((i235 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949140 + ((i235 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950780 >> 2] = +(5.);
		for (i236 = 0; (((i236 | 0) < 2) | 0); i236 = (((i236 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949148 + ((i236 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950784 >> 2] = +(0.);
		for (i237 = 0; (((i237 | 0) < 2) | 0); i237 = (((i237 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949156 + ((i237 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950788 >> 2] = +(0.);
		for (i238 = 0; (((i238 | 0) < 2) | 0); i238 = (((i238 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949164 + ((i238 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950792 >> 2] = +(0.);
		for (i239 = 0; (((i239 | 0) < 2) | 0); i239 = (((i239 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949172 + ((i239 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950796 >> 2] = +(0.);
		for (i240 = 0; (((i240 | 0) < 2) | 0); i240 = (((i240 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949180 + ((i240 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950800 >> 2] = +(0.);
		for (i241 = 0; (((i241 | 0) < 2) | 0); i241 = (((i241 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949188 + ((i241 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950804 >> 2] = +(0.);
		for (i242 = 0; (((i242 | 0) < 2) | 0); i242 = (((i242 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949196 + ((i242 | 0) << 2) >> 2] = 0.;
			
		}
		for (i243 = 0; (((i243 | 0) < 2) | 0); i243 = (((i243 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949204 + ((i243 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950808 >> 2] = +(0.);
		for (i244 = 0; (((i244 | 0) < 2) | 0); i244 = (((i244 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949212 + ((i244 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 5554144 | 0));
		for (i245 = 0; (((i245 | 0) < 2) | 0); i245 = (((i245 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949220 + ((i245 | 0) << 2) >> 2] = 0;
			
		}
		for (i246 = 0; (((i246 | 0) < 2) | 0); i246 = (((i246 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949228 + ((i246 | 0) << 2) >> 2] = 0;
			
		}
		for (i247 = 0; (((i247 | 0) < 2) | 0); i247 = (((i247 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949236 + ((i247 | 0) << 2) >> 2] = 0;
			
		}
		for (i248 = 0; (((i248 | 0) < 2) | 0); i248 = (((i248 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949244 + ((i248 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950812 >> 2] = +(0.);
		HEAPF32[dsp + 20950816 >> 2] = +(0.);
		for (i249 = 0; (((i249 | 0) < 2) | 0); i249 = (((i249 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949252 + ((i249 | 0) << 2) >> 2] = 0.;
			
		}
		for (i250 = 0; (((i250 | 0) < 5) | 0); i250 = (((i250 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947520 + ((i250 | 0) << 2) >> 2] = 0.;
			
		}
		for (i251 = 0; (((i251 | 0) < 3) | 0); i251 = (((i251 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947712 + ((i251 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18197200 | 0));
		HEAPF32[dsp + 20950820 >> 2] = +(0.);
		HEAPF32[dsp + 20950824 >> 2] = +(0.);
		for (i252 = 0; (((i252 | 0) < 2) | 0); i252 = (((i252 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949260 + ((i252 | 0) << 2) >> 2] = 0.;
			
		}
		for (i253 = 0; (((i253 | 0) < 2) | 0); i253 = (((i253 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949268 + ((i253 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950828 >> 2] = +(0.);
		for (i254 = 0; (((i254 | 0) < 2) | 0); i254 = (((i254 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949276 + ((i254 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950832 >> 2] = +(0.);
		for (i255 = 0; (((i255 | 0) < 2) | 0); i255 = (((i255 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949284 + ((i255 | 0) << 2) >> 2] = 0.;
			
		}
		for (i256 = 0; (((i256 | 0) < 2) | 0); i256 = (((i256 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949292 + ((i256 | 0) << 2) >> 2] = 0.;
			
		}
		for (i257 = 0; (((i257 | 0) < 2) | 0); i257 = (((i257 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949300 + ((i257 | 0) << 2) >> 2] = 0.;
			
		}
		for (i258 = 0; (((i258 | 0) < 2) | 0); i258 = (((i258 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949308 + ((i258 | 0) << 2) >> 2] = 0.;
			
		}
		for (i259 = 0; (((i259 | 0) < 262144) | 0); i259 = (((i259 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13991872 + ((i259 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950836 >> 2] = +(0.);
		HEAPF32[dsp + 20950840 >> 2] = +(0.);
		for (i260 = 0; (((i260 | 0) < 2) | 0); i260 = (((i260 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949316 + ((i260 | 0) << 2) >> 2] = 0.;
			
		}
		for (i261 = 0; (((i261 | 0) < 2) | 0); i261 = (((i261 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949324 + ((i261 | 0) << 2) >> 2] = 0.;
			
		}
		for (i262 = 0; (((i262 | 0) < 2) | 0); i262 = (((i262 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949332 + ((i262 | 0) << 2) >> 2] = 0.;
			
		}
		for (i263 = 0; (((i263 | 0) < 2) | 0); i263 = (((i263 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949340 + ((i263 | 0) << 2) >> 2] = 0.;
			
		}
		for (i264 = 0; (((i264 | 0) < 2) | 0); i264 = (((i264 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949348 + ((i264 | 0) << 2) >> 2] = 0.;
			
		}
		for (i265 = 0; (((i265 | 0) < 2) | 0); i265 = (((i265 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949356 + ((i265 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950844 >> 2] = +(0.);
		for (i266 = 0; (((i266 | 0) < 2) | 0); i266 = (((i266 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949364 + ((i266 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950848 >> 2] = +(0.);
		for (i267 = 0; (((i267 | 0) < 2) | 0); i267 = (((i267 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949372 + ((i267 | 0) << 2) >> 2] = 0.;
			
		}
		for (i268 = 0; (((i268 | 0) < 8192) | 0); i268 = (((i268 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20043232 + ((i268 | 0) << 2) >> 2] = 0.;
			
		}
		for (i269 = 0; (((i269 | 0) < 2) | 0); i269 = (((i269 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949380 + ((i269 | 0) << 2) >> 2] = 0.;
			
		}
		for (i270 = 0; (((i270 | 0) < 2) | 0); i270 = (((i270 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949388 + ((i270 | 0) << 2) >> 2] = 0.;
			
		}
		for (i271 = 0; (((i271 | 0) < 8192) | 0); i271 = (((i271 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20076000 + ((i271 | 0) << 2) >> 2] = 0.;
			
		}
		for (i272 = 0; (((i272 | 0) < 2) | 0); i272 = (((i272 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949396 + ((i272 | 0) << 2) >> 2] = 0.;
			
		}
		for (i273 = 0; (((i273 | 0) < 2) | 0); i273 = (((i273 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949404 + ((i273 | 0) << 2) >> 2] = 0.;
			
		}
		for (i274 = 0; (((i274 | 0) < 8192) | 0); i274 = (((i274 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20108768 + ((i274 | 0) << 2) >> 2] = 0.;
			
		}
		for (i275 = 0; (((i275 | 0) < 2) | 0); i275 = (((i275 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949412 + ((i275 | 0) << 2) >> 2] = 0.;
			
		}
		for (i276 = 0; (((i276 | 0) < 2) | 0); i276 = (((i276 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949420 + ((i276 | 0) << 2) >> 2] = 0.;
			
		}
		for (i277 = 0; (((i277 | 0) < 8192) | 0); i277 = (((i277 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20141536 + ((i277 | 0) << 2) >> 2] = 0.;
			
		}
		for (i278 = 0; (((i278 | 0) < 2) | 0); i278 = (((i278 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949428 + ((i278 | 0) << 2) >> 2] = 0.;
			
		}
		for (i279 = 0; (((i279 | 0) < 2) | 0); i279 = (((i279 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949436 + ((i279 | 0) << 2) >> 2] = 0.;
			
		}
		for (i280 = 0; (((i280 | 0) < 8192) | 0); i280 = (((i280 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20174304 + ((i280 | 0) << 2) >> 2] = 0.;
			
		}
		for (i281 = 0; (((i281 | 0) < 2) | 0); i281 = (((i281 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949444 + ((i281 | 0) << 2) >> 2] = 0.;
			
		}
		for (i282 = 0; (((i282 | 0) < 2) | 0); i282 = (((i282 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949452 + ((i282 | 0) << 2) >> 2] = 0.;
			
		}
		for (i283 = 0; (((i283 | 0) < 8192) | 0); i283 = (((i283 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20207072 + ((i283 | 0) << 2) >> 2] = 0.;
			
		}
		for (i284 = 0; (((i284 | 0) < 2) | 0); i284 = (((i284 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949460 + ((i284 | 0) << 2) >> 2] = 0.;
			
		}
		for (i285 = 0; (((i285 | 0) < 2) | 0); i285 = (((i285 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949468 + ((i285 | 0) << 2) >> 2] = 0.;
			
		}
		for (i286 = 0; (((i286 | 0) < 8192) | 0); i286 = (((i286 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20239840 + ((i286 | 0) << 2) >> 2] = 0.;
			
		}
		for (i287 = 0; (((i287 | 0) < 2) | 0); i287 = (((i287 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949476 + ((i287 | 0) << 2) >> 2] = 0.;
			
		}
		for (i288 = 0; (((i288 | 0) < 2) | 0); i288 = (((i288 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949484 + ((i288 | 0) << 2) >> 2] = 0.;
			
		}
		for (i289 = 0; (((i289 | 0) < 8192) | 0); i289 = (((i289 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20272608 + ((i289 | 0) << 2) >> 2] = 0.;
			
		}
		for (i290 = 0; (((i290 | 0) < 2) | 0); i290 = (((i290 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949492 + ((i290 | 0) << 2) >> 2] = 0.;
			
		}
		for (i291 = 0; (((i291 | 0) < 1024) | 0); i291 = (((i291 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20887008 + ((i291 | 0) << 2) >> 2] = 0.;
			
		}
		for (i292 = 0; (((i292 | 0) < 2) | 0); i292 = (((i292 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949500 + ((i292 | 0) << 2) >> 2] = 0.;
			
		}
		for (i293 = 0; (((i293 | 0) < 1024) | 0); i293 = (((i293 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20891104 + ((i293 | 0) << 2) >> 2] = 0.;
			
		}
		for (i294 = 0; (((i294 | 0) < 2) | 0); i294 = (((i294 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949508 + ((i294 | 0) << 2) >> 2] = 0.;
			
		}
		for (i295 = 0; (((i295 | 0) < 1024) | 0); i295 = (((i295 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20895200 + ((i295 | 0) << 2) >> 2] = 0.;
			
		}
		for (i296 = 0; (((i296 | 0) < 2) | 0); i296 = (((i296 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949516 + ((i296 | 0) << 2) >> 2] = 0.;
			
		}
		for (i297 = 0; (((i297 | 0) < 1024) | 0); i297 = (((i297 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20899296 + ((i297 | 0) << 2) >> 2] = 0.;
			
		}
		for (i298 = 0; (((i298 | 0) < 2) | 0); i298 = (((i298 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949524 + ((i298 | 0) << 2) >> 2] = 0.;
			
		}
		for (i299 = 0; (((i299 | 0) < 2) | 0); i299 = (((i299 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949532 + ((i299 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950856 >> 2] = +(0.);
		for (i300 = 0; (((i300 | 0) < 2) | 0); i300 = (((i300 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949540 + ((i300 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950860 >> 2] = +(5.);
		for (i301 = 0; (((i301 | 0) < 2) | 0); i301 = (((i301 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949548 + ((i301 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950864 >> 2] = +(0.);
		HEAPF32[dsp + 20950868 >> 2] = +(0.);
		for (i302 = 0; (((i302 | 0) < 2) | 0); i302 = (((i302 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949556 + ((i302 | 0) << 2) >> 2] = 0.;
			
		}
		for (i303 = 0; (((i303 | 0) < 2) | 0); i303 = (((i303 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949564 + ((i303 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 7318144 | 0));
		for (i304 = 0; (((i304 | 0) < 2) | 0); i304 = (((i304 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949572 + ((i304 | 0) << 2) >> 2] = 0;
			
		}
		for (i305 = 0; (((i305 | 0) < 2) | 0); i305 = (((i305 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949580 + ((i305 | 0) << 2) >> 2] = 0;
			
		}
		for (i306 = 0; (((i306 | 0) < 2) | 0); i306 = (((i306 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949588 + ((i306 | 0) << 2) >> 2] = 0;
			
		}
		for (i307 = 0; (((i307 | 0) < 2) | 0); i307 = (((i307 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949596 + ((i307 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20950872 >> 2] = +(0.);
		for (i308 = 0; (((i308 | 0) < 2) | 0); i308 = (((i308 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949604 + ((i308 | 0) << 2) >> 2] = 0.;
			
		}
		for (i309 = 0; (((i309 | 0) < 5) | 0); i309 = (((i309 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947540 + ((i309 | 0) << 2) >> 2] = 0.;
			
		}
		for (i310 = 0; (((i310 | 0) < 3) | 0); i310 = (((i310 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947724 + ((i310 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950876 >> 2] = +(0.);
		for (i311 = 0; (((i311 | 0) < 2) | 0); i311 = (((i311 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949612 + ((i311 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950880 >> 2] = +(0.);
		for (i312 = 0; (((i312 | 0) < 2) | 0); i312 = (((i312 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949620 + ((i312 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18550400 | 0));
		HEAPF32[dsp + 20950884 >> 2] = +(0.);
		HEAPF32[dsp + 20950888 >> 2] = +(0.);
		for (i313 = 0; (((i313 | 0) < 2) | 0); i313 = (((i313 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949628 + ((i313 | 0) << 2) >> 2] = 0.;
			
		}
		for (i314 = 0; (((i314 | 0) < 2) | 0); i314 = (((i314 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949636 + ((i314 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950892 >> 2] = +(0.);
		for (i315 = 0; (((i315 | 0) < 2) | 0); i315 = (((i315 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949644 + ((i315 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950896 >> 2] = +(0.);
		for (i316 = 0; (((i316 | 0) < 2) | 0); i316 = (((i316 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949652 + ((i316 | 0) << 2) >> 2] = 0.;
			
		}
		for (i317 = 0; (((i317 | 0) < 2) | 0); i317 = (((i317 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949660 + ((i317 | 0) << 2) >> 2] = 0.;
			
		}
		for (i318 = 0; (((i318 | 0) < 2) | 0); i318 = (((i318 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949668 + ((i318 | 0) << 2) >> 2] = 0.;
			
		}
		for (i319 = 0; (((i319 | 0) < 2) | 0); i319 = (((i319 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949676 + ((i319 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950900 >> 2] = +(0.);
		for (i320 = 0; (((i320 | 0) < 2) | 0); i320 = (((i320 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949684 + ((i320 | 0) << 2) >> 2] = 0.;
			
		}
		for (i321 = 0; (((i321 | 0) < 262144) | 0); i321 = (((i321 | 0) + 1) | 0)) {
			HEAPF32[dsp + 15040448 + ((i321 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950904 >> 2] = +(0.);
		for (i322 = 0; (((i322 | 0) < 2) | 0); i322 = (((i322 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949692 + ((i322 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950908 >> 2] = +(0.);
		for (i323 = 0; (((i323 | 0) < 2) | 0); i323 = (((i323 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949700 + ((i323 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950912 >> 2] = +(0.);
		for (i324 = 0; (((i324 | 0) < 2) | 0); i324 = (((i324 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949708 + ((i324 | 0) << 2) >> 2] = 0.;
			
		}
		for (i325 = 0; (((i325 | 0) < 2) | 0); i325 = (((i325 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949716 + ((i325 | 0) << 2) >> 2] = 0.;
			
		}
		for (i326 = 0; (((i326 | 0) < 2) | 0); i326 = (((i326 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949724 + ((i326 | 0) << 2) >> 2] = 0.;
			
		}
		for (i327 = 0; (((i327 | 0) < 2) | 0); i327 = (((i327 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949732 + ((i327 | 0) << 2) >> 2] = 0.;
			
		}
		for (i328 = 0; (((i328 | 0) < 2) | 0); i328 = (((i328 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949740 + ((i328 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950916 >> 2] = +(0.);
		for (i329 = 0; (((i329 | 0) < 2) | 0); i329 = (((i329 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949748 + ((i329 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950920 >> 2] = +(0.);
		for (i330 = 0; (((i330 | 0) < 2) | 0); i330 = (((i330 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949756 + ((i330 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950924 >> 2] = +(0.);
		for (i331 = 0; (((i331 | 0) < 2) | 0); i331 = (((i331 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949764 + ((i331 | 0) << 2) >> 2] = 0.;
			
		}
		for (i332 = 0; (((i332 | 0) < 8192) | 0); i332 = (((i332 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20305376 + ((i332 | 0) << 2) >> 2] = 0.;
			
		}
		for (i333 = 0; (((i333 | 0) < 2) | 0); i333 = (((i333 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949772 + ((i333 | 0) << 2) >> 2] = 0.;
			
		}
		for (i334 = 0; (((i334 | 0) < 2) | 0); i334 = (((i334 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949780 + ((i334 | 0) << 2) >> 2] = 0.;
			
		}
		for (i335 = 0; (((i335 | 0) < 8192) | 0); i335 = (((i335 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20338144 + ((i335 | 0) << 2) >> 2] = 0.;
			
		}
		for (i336 = 0; (((i336 | 0) < 2) | 0); i336 = (((i336 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949788 + ((i336 | 0) << 2) >> 2] = 0.;
			
		}
		for (i337 = 0; (((i337 | 0) < 2) | 0); i337 = (((i337 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949796 + ((i337 | 0) << 2) >> 2] = 0.;
			
		}
		for (i338 = 0; (((i338 | 0) < 8192) | 0); i338 = (((i338 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20370912 + ((i338 | 0) << 2) >> 2] = 0.;
			
		}
		for (i339 = 0; (((i339 | 0) < 2) | 0); i339 = (((i339 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949804 + ((i339 | 0) << 2) >> 2] = 0.;
			
		}
		for (i340 = 0; (((i340 | 0) < 2) | 0); i340 = (((i340 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949812 + ((i340 | 0) << 2) >> 2] = 0.;
			
		}
		for (i341 = 0; (((i341 | 0) < 8192) | 0); i341 = (((i341 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20403680 + ((i341 | 0) << 2) >> 2] = 0.;
			
		}
		for (i342 = 0; (((i342 | 0) < 2) | 0); i342 = (((i342 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949820 + ((i342 | 0) << 2) >> 2] = 0.;
			
		}
		for (i343 = 0; (((i343 | 0) < 2) | 0); i343 = (((i343 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949828 + ((i343 | 0) << 2) >> 2] = 0.;
			
		}
		for (i344 = 0; (((i344 | 0) < 8192) | 0); i344 = (((i344 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20436448 + ((i344 | 0) << 2) >> 2] = 0.;
			
		}
		for (i345 = 0; (((i345 | 0) < 2) | 0); i345 = (((i345 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949836 + ((i345 | 0) << 2) >> 2] = 0.;
			
		}
		for (i346 = 0; (((i346 | 0) < 2) | 0); i346 = (((i346 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949844 + ((i346 | 0) << 2) >> 2] = 0.;
			
		}
		for (i347 = 0; (((i347 | 0) < 8192) | 0); i347 = (((i347 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20469216 + ((i347 | 0) << 2) >> 2] = 0.;
			
		}
		for (i348 = 0; (((i348 | 0) < 2) | 0); i348 = (((i348 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949852 + ((i348 | 0) << 2) >> 2] = 0.;
			
		}
		for (i349 = 0; (((i349 | 0) < 2) | 0); i349 = (((i349 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949860 + ((i349 | 0) << 2) >> 2] = 0.;
			
		}
		for (i350 = 0; (((i350 | 0) < 8192) | 0); i350 = (((i350 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20501984 + ((i350 | 0) << 2) >> 2] = 0.;
			
		}
		for (i351 = 0; (((i351 | 0) < 2) | 0); i351 = (((i351 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949868 + ((i351 | 0) << 2) >> 2] = 0.;
			
		}
		for (i352 = 0; (((i352 | 0) < 2) | 0); i352 = (((i352 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949876 + ((i352 | 0) << 2) >> 2] = 0.;
			
		}
		for (i353 = 0; (((i353 | 0) < 8192) | 0); i353 = (((i353 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20534752 + ((i353 | 0) << 2) >> 2] = 0.;
			
		}
		for (i354 = 0; (((i354 | 0) < 2) | 0); i354 = (((i354 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949884 + ((i354 | 0) << 2) >> 2] = 0.;
			
		}
		for (i355 = 0; (((i355 | 0) < 1024) | 0); i355 = (((i355 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20903392 + ((i355 | 0) << 2) >> 2] = 0.;
			
		}
		for (i356 = 0; (((i356 | 0) < 2) | 0); i356 = (((i356 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949892 + ((i356 | 0) << 2) >> 2] = 0.;
			
		}
		for (i357 = 0; (((i357 | 0) < 1024) | 0); i357 = (((i357 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20907488 + ((i357 | 0) << 2) >> 2] = 0.;
			
		}
		for (i358 = 0; (((i358 | 0) < 2) | 0); i358 = (((i358 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949900 + ((i358 | 0) << 2) >> 2] = 0.;
			
		}
		for (i359 = 0; (((i359 | 0) < 1024) | 0); i359 = (((i359 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20911584 + ((i359 | 0) << 2) >> 2] = 0.;
			
		}
		for (i360 = 0; (((i360 | 0) < 2) | 0); i360 = (((i360 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949908 + ((i360 | 0) << 2) >> 2] = 0.;
			
		}
		for (i361 = 0; (((i361 | 0) < 1024) | 0); i361 = (((i361 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20915680 + ((i361 | 0) << 2) >> 2] = 0.;
			
		}
		for (i362 = 0; (((i362 | 0) < 2) | 0); i362 = (((i362 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949916 + ((i362 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950928 >> 2] = +(0.);
		for (i363 = 0; (((i363 | 0) < 2) | 0); i363 = (((i363 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949924 + ((i363 | 0) << 2) >> 2] = 0.;
			
		}
		for (i364 = 0; (((i364 | 0) < 2) | 0); i364 = (((i364 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949932 + ((i364 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950936 >> 2] = +(5.);
		for (i365 = 0; (((i365 | 0) < 2) | 0); i365 = (((i365 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949940 + ((i365 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950940 >> 2] = +(0.);
		for (i366 = 0; (((i366 | 0) < 2) | 0); i366 = (((i366 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949948 + ((i366 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950944 >> 2] = +(0.);
		for (i367 = 0; (((i367 | 0) < 2) | 0); i367 = (((i367 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949956 + ((i367 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 9082144 | 0));
		HEAPF32[dsp + 20950948 >> 2] = +(0.);
		for (i368 = 0; (((i368 | 0) < 2) | 0); i368 = (((i368 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20949964 + ((i368 | 0) << 2) >> 2] = 0.;
			
		}
		for (i369 = 0; (((i369 | 0) < 2) | 0); i369 = (((i369 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949972 + ((i369 | 0) << 2) >> 2] = 0;
			
		}
		for (i370 = 0; (((i370 | 0) < 2) | 0); i370 = (((i370 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949980 + ((i370 | 0) << 2) >> 2] = 0;
			
		}
		for (i371 = 0; (((i371 | 0) < 2) | 0); i371 = (((i371 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949988 + ((i371 | 0) << 2) >> 2] = 0;
			
		}
		for (i372 = 0; (((i372 | 0) < 2) | 0); i372 = (((i372 | 0) + 1) | 0)) {
			HEAP32[dsp + 20949996 + ((i372 | 0) << 2) >> 2] = 0;
			
		}
		for (i373 = 0; (((i373 | 0) < 2) | 0); i373 = (((i373 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950004 + ((i373 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950952 >> 2] = +(0.);
		for (i374 = 0; (((i374 | 0) < 2) | 0); i374 = (((i374 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950012 + ((i374 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950956 >> 2] = +(0.);
		HEAPF32[dsp + 20950960 >> 2] = +(0.);
		for (i375 = 0; (((i375 | 0) < 2) | 0); i375 = (((i375 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950020 + ((i375 | 0) << 2) >> 2] = 0.;
			
		}
		for (i376 = 0; (((i376 | 0) < 5) | 0); i376 = (((i376 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947560 + ((i376 | 0) << 2) >> 2] = 0.;
			
		}
		for (i377 = 0; (((i377 | 0) < 3) | 0); i377 = (((i377 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947736 + ((i377 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950964 >> 2] = +(0.);
		for (i378 = 0; (((i378 | 0) < 2) | 0); i378 = (((i378 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950028 + ((i378 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18903600 | 0));
		HEAPF32[dsp + 20950968 >> 2] = +(0.);
		HEAPF32[dsp + 20950972 >> 2] = +(0.);
		for (i379 = 0; (((i379 | 0) < 2) | 0); i379 = (((i379 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950036 + ((i379 | 0) << 2) >> 2] = 0.;
			
		}
		for (i380 = 0; (((i380 | 0) < 2) | 0); i380 = (((i380 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950044 + ((i380 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950976 >> 2] = +(0.);
		for (i381 = 0; (((i381 | 0) < 2) | 0); i381 = (((i381 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950052 + ((i381 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950980 >> 2] = +(0.);
		for (i382 = 0; (((i382 | 0) < 2) | 0); i382 = (((i382 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950060 + ((i382 | 0) << 2) >> 2] = 0.;
			
		}
		for (i383 = 0; (((i383 | 0) < 2) | 0); i383 = (((i383 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950068 + ((i383 | 0) << 2) >> 2] = 0.;
			
		}
		for (i384 = 0; (((i384 | 0) < 2) | 0); i384 = (((i384 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950076 + ((i384 | 0) << 2) >> 2] = 0.;
			
		}
		for (i385 = 0; (((i385 | 0) < 2) | 0); i385 = (((i385 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950084 + ((i385 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950984 >> 2] = +(0.);
		for (i386 = 0; (((i386 | 0) < 2) | 0); i386 = (((i386 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950092 + ((i386 | 0) << 2) >> 2] = 0.;
			
		}
		for (i387 = 0; (((i387 | 0) < 262144) | 0); i387 = (((i387 | 0) + 1) | 0)) {
			HEAPF32[dsp + 16089024 + ((i387 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950988 >> 2] = +(0.);
		for (i388 = 0; (((i388 | 0) < 2) | 0); i388 = (((i388 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950100 + ((i388 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950992 >> 2] = +(0.);
		for (i389 = 0; (((i389 | 0) < 2) | 0); i389 = (((i389 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950108 + ((i389 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20950996 >> 2] = +(0.);
		for (i390 = 0; (((i390 | 0) < 2) | 0); i390 = (((i390 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950116 + ((i390 | 0) << 2) >> 2] = 0.;
			
		}
		for (i391 = 0; (((i391 | 0) < 2) | 0); i391 = (((i391 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950124 + ((i391 | 0) << 2) >> 2] = 0.;
			
		}
		for (i392 = 0; (((i392 | 0) < 2) | 0); i392 = (((i392 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950132 + ((i392 | 0) << 2) >> 2] = 0.;
			
		}
		for (i393 = 0; (((i393 | 0) < 2) | 0); i393 = (((i393 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950140 + ((i393 | 0) << 2) >> 2] = 0.;
			
		}
		for (i394 = 0; (((i394 | 0) < 2) | 0); i394 = (((i394 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950148 + ((i394 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20951000 >> 2] = +(0.);
		for (i395 = 0; (((i395 | 0) < 2) | 0); i395 = (((i395 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950156 + ((i395 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20951004 >> 2] = +(0.);
		for (i396 = 0; (((i396 | 0) < 2) | 0); i396 = (((i396 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950164 + ((i396 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20951008 >> 2] = +(0.);
		for (i397 = 0; (((i397 | 0) < 2) | 0); i397 = (((i397 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950172 + ((i397 | 0) << 2) >> 2] = 0.;
			
		}
		for (i398 = 0; (((i398 | 0) < 8192) | 0); i398 = (((i398 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20567520 + ((i398 | 0) << 2) >> 2] = 0.;
			
		}
		for (i399 = 0; (((i399 | 0) < 2) | 0); i399 = (((i399 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950180 + ((i399 | 0) << 2) >> 2] = 0.;
			
		}
		for (i400 = 0; (((i400 | 0) < 2) | 0); i400 = (((i400 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950188 + ((i400 | 0) << 2) >> 2] = 0.;
			
		}
		for (i401 = 0; (((i401 | 0) < 8192) | 0); i401 = (((i401 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20600288 + ((i401 | 0) << 2) >> 2] = 0.;
			
		}
		for (i402 = 0; (((i402 | 0) < 2) | 0); i402 = (((i402 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950196 + ((i402 | 0) << 2) >> 2] = 0.;
			
		}
		for (i403 = 0; (((i403 | 0) < 2) | 0); i403 = (((i403 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950204 + ((i403 | 0) << 2) >> 2] = 0.;
			
		}
		for (i404 = 0; (((i404 | 0) < 8192) | 0); i404 = (((i404 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20633056 + ((i404 | 0) << 2) >> 2] = 0.;
			
		}
		for (i405 = 0; (((i405 | 0) < 2) | 0); i405 = (((i405 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950212 + ((i405 | 0) << 2) >> 2] = 0.;
			
		}
		for (i406 = 0; (((i406 | 0) < 2) | 0); i406 = (((i406 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950220 + ((i406 | 0) << 2) >> 2] = 0.;
			
		}
		for (i407 = 0; (((i407 | 0) < 8192) | 0); i407 = (((i407 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20665824 + ((i407 | 0) << 2) >> 2] = 0.;
			
		}
		for (i408 = 0; (((i408 | 0) < 2) | 0); i408 = (((i408 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950228 + ((i408 | 0) << 2) >> 2] = 0.;
			
		}
		for (i409 = 0; (((i409 | 0) < 2) | 0); i409 = (((i409 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950236 + ((i409 | 0) << 2) >> 2] = 0.;
			
		}
		for (i410 = 0; (((i410 | 0) < 8192) | 0); i410 = (((i410 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20698592 + ((i410 | 0) << 2) >> 2] = 0.;
			
		}
		for (i411 = 0; (((i411 | 0) < 2) | 0); i411 = (((i411 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950244 + ((i411 | 0) << 2) >> 2] = 0.;
			
		}
		for (i412 = 0; (((i412 | 0) < 2) | 0); i412 = (((i412 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950252 + ((i412 | 0) << 2) >> 2] = 0.;
			
		}
		for (i413 = 0; (((i413 | 0) < 8192) | 0); i413 = (((i413 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20731360 + ((i413 | 0) << 2) >> 2] = 0.;
			
		}
		for (i414 = 0; (((i414 | 0) < 2) | 0); i414 = (((i414 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950260 + ((i414 | 0) << 2) >> 2] = 0.;
			
		}
		for (i415 = 0; (((i415 | 0) < 2) | 0); i415 = (((i415 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950268 + ((i415 | 0) << 2) >> 2] = 0.;
			
		}
		for (i416 = 0; (((i416 | 0) < 8192) | 0); i416 = (((i416 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20764128 + ((i416 | 0) << 2) >> 2] = 0.;
			
		}
		for (i417 = 0; (((i417 | 0) < 2) | 0); i417 = (((i417 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950276 + ((i417 | 0) << 2) >> 2] = 0.;
			
		}
		for (i418 = 0; (((i418 | 0) < 2) | 0); i418 = (((i418 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950284 + ((i418 | 0) << 2) >> 2] = 0.;
			
		}
		for (i419 = 0; (((i419 | 0) < 8192) | 0); i419 = (((i419 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20796896 + ((i419 | 0) << 2) >> 2] = 0.;
			
		}
		for (i420 = 0; (((i420 | 0) < 2) | 0); i420 = (((i420 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950292 + ((i420 | 0) << 2) >> 2] = 0.;
			
		}
		for (i421 = 0; (((i421 | 0) < 1024) | 0); i421 = (((i421 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20919776 + ((i421 | 0) << 2) >> 2] = 0.;
			
		}
		for (i422 = 0; (((i422 | 0) < 2) | 0); i422 = (((i422 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950300 + ((i422 | 0) << 2) >> 2] = 0.;
			
		}
		for (i423 = 0; (((i423 | 0) < 1024) | 0); i423 = (((i423 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20923872 + ((i423 | 0) << 2) >> 2] = 0.;
			
		}
		for (i424 = 0; (((i424 | 0) < 2) | 0); i424 = (((i424 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950308 + ((i424 | 0) << 2) >> 2] = 0.;
			
		}
		for (i425 = 0; (((i425 | 0) < 1024) | 0); i425 = (((i425 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20927968 + ((i425 | 0) << 2) >> 2] = 0.;
			
		}
		for (i426 = 0; (((i426 | 0) < 2) | 0); i426 = (((i426 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950316 + ((i426 | 0) << 2) >> 2] = 0.;
			
		}
		for (i427 = 0; (((i427 | 0) < 1024) | 0); i427 = (((i427 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20932064 + ((i427 | 0) << 2) >> 2] = 0.;
			
		}
		for (i428 = 0; (((i428 | 0) < 2) | 0); i428 = (((i428 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950324 + ((i428 | 0) << 2) >> 2] = 0.;
			
		}
		for (i429 = 0; (((i429 | 0) < 2) | 0); i429 = (((i429 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950332 + ((i429 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20951016 >> 2] = +(440. / +(HEAPF32[dsp + 20950408 >> 2]));
		for (i431 = 0; (((i431 | 0) < 2) | 0); i431 = (((i431 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950340 + ((i431 | 0) << 2) >> 2] = 0.;
			
		}
		for (i432 = 0; (((i432 | 0) < 2) | 0); i432 = (((i432 | 0) + 1) | 0)) {
			HEAP32[dsp + 20950348 + ((i432 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20951020 >> 2] = +(9. / +((HEAP32[dsp + 20950404 >> 2] | 0)));
		HEAPF32[dsp + 20951024 >> 2] = +(1. - +(1. / +(powf(90000., +(1.11111 / +((HEAP32[dsp + 20950404 >> 2] | 0)))))));
		for (i433 = 0; (((i433 | 0) < 2) | 0); i433 = (((i433 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950356 + ((i433 | 0) << 2) >> 2] = 0.;
			
		}
		for (i434 = 0; (((i434 | 0) < 2) | 0); i434 = (((i434 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950364 + ((i434 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20951032 >> 2] = +(0.);
		for (i435 = 0; (((i435 | 0) < 2) | 0); i435 = (((i435 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20950372 + ((i435 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function setValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF32[dsp + offset >> 2] = value;
	}
	
	function getValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +HEAPF32[dsp + offset >> 2];
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var iSlow25 = 0;
		var iSlow26 = 0;
		var iSlow27 = 0;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var fSlow32 = 0.;
		var fSlow33 = 0.;
		var fSlow34 = 0.;
		var fSlow35 = 0.;
		var fSlow36 = 0.;
		var fSlow37 = 0.;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var fSlow64 = 0.;
		var fSlow65 = 0.;
		var fSlow66 = 0.;
		var fSlow67 = 0.;
		var fSlow68 = 0.;
		var fSlow69 = 0.;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var fSlow85 = 0.;
		var fSlow86 = 0.;
		var fSlow87 = 0.;
		var fSlow88 = 0.;
		var fSlow89 = 0.;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var fSlow92 = 0.;
		var fSlow93 = 0.;
		var fSlow94 = 0.;
		var fSlow95 = 0.;
		var fSlow96 = 0.;
		var fSlow97 = 0.;
		var fSlow98 = 0.;
		var fSlow99 = 0.;
		var fSlow100 = 0.;
		var fSlow101 = 0.;
		var fSlow102 = 0.;
		var fSlow103 = 0.;
		var fSlow104 = 0.;
		var fSlow105 = 0.;
		var fSlow106 = 0.;
		var fSlow107 = 0.;
		var fSlow108 = 0.;
		var fSlow109 = 0.;
		var fSlow110 = 0.;
		var fSlow111 = 0.;
		var fSlow112 = 0.;
		var fSlow113 = 0.;
		var fSlow114 = 0.;
		var fSlow115 = 0.;
		var fSlow116 = 0.;
		var fSlow117 = 0.;
		var fSlow118 = 0.;
		var fSlow119 = 0.;
		var fSlow120 = 0.;
		var fSlow121 = 0.;
		var fSlow122 = 0.;
		var fSlow123 = 0.;
		var fSlow124 = 0.;
		var fSlow125 = 0.;
		var fSlow126 = 0.;
		var fSlow127 = 0.;
		var fSlow128 = 0.;
		var fSlow129 = 0.;
		var fSlow130 = 0.;
		var fSlow131 = 0.;
		var fSlow132 = 0.;
		var fSlow133 = 0.;
		var fSlow134 = 0.;
		var fSlow135 = 0.;
		var fSlow136 = 0.;
		var fSlow137 = 0.;
		var fSlow138 = 0.;
		var fSlow139 = 0.;
		var fSlow140 = 0.;
		var fSlow141 = 0.;
		var fSlow142 = 0.;
		var fSlow143 = 0.;
		var fSlow144 = 0.;
		var fSlow145 = 0.;
		var fSlow146 = 0.;
		var fSlow147 = 0.;
		var fSlow148 = 0.;
		var fSlow149 = 0.;
		var fSlow150 = 0.;
		var fSlow151 = 0.;
		var fSlow152 = 0.;
		var fSlow153 = 0.;
		var fSlow154 = 0.;
		var fSlow155 = 0.;
		var fSlow156 = 0.;
		var fSlow157 = 0.;
		var fSlow158 = 0.;
		var fSlow159 = 0.;
		var fSlow160 = 0.;
		var fSlow161 = 0.;
		var fSlow162 = 0.;
		var fSlow163 = 0.;
		var fSlow164 = 0.;
		var fSlow165 = 0.;
		var fSlow166 = 0.;
		var fSlow167 = 0.;
		var fSlow168 = 0.;
		var fSlow169 = 0.;
		var fSlow170 = 0.;
		var fSlow171 = 0.;
		var fSlow172 = 0.;
		var fSlow173 = 0.;
		var fSlow174 = 0.;
		var fSlow175 = 0.;
		var fSlow176 = 0.;
		var fSlow177 = 0.;
		var fSlow178 = 0.;
		var fSlow179 = 0.;
		var fSlow180 = 0.;
		var fSlow181 = 0.;
		var fSlow182 = 0.;
		var fSlow183 = 0.;
		var fSlow184 = 0.;
		var fSlow185 = 0.;
		var fSlow186 = 0.;
		var fSlow187 = 0.;
		var fSlow188 = 0.;
		var fSlow189 = 0.;
		var fSlow190 = 0.;
		var fSlow191 = 0.;
		var fSlow192 = 0.;
		var fSlow193 = 0.;
		var fSlow194 = 0.;
		var fSlow195 = 0.;
		var fSlow196 = 0.;
		var fSlow197 = 0.;
		var fSlow198 = 0.;
		var fSlow199 = 0.;
		var fSlow200 = 0.;
		var fSlow201 = 0.;
		var fSlow202 = 0.;
		var fSlow203 = 0.;
		var fSlow204 = 0.;
		var fSlow205 = 0.;
		var fSlow206 = 0.;
		var fSlow207 = 0.;
		var fSlow208 = 0.;
		var fSlow209 = 0.;
		var fSlow210 = 0.;
		var fSlow211 = 0.;
		var fSlow212 = 0.;
		var fSlow213 = 0.;
		var fSlow214 = 0.;
		var fSlow215 = 0.;
		var fSlow216 = 0.;
		var fSlow217 = 0.;
		var fSlow218 = 0.;
		var fSlow219 = 0.;
		var fSlow220 = 0.;
		var fSlow221 = 0.;
		var fSlow222 = 0.;
		var fSlow223 = 0.;
		var fSlow224 = 0.;
		var fSlow225 = 0.;
		var fSlow226 = 0.;
		var fSlow227 = 0.;
		var fSlow228 = 0.;
		var fSlow229 = 0.;
		var fSlow230 = 0.;
		var fSlow231 = 0.;
		var fSlow232 = 0.;
		var fSlow233 = 0.;
		var fSlow234 = 0.;
		var fSlow235 = 0.;
		var fSlow236 = 0.;
		var fSlow237 = 0.;
		var fSlow238 = 0.;
		var fSlow239 = 0.;
		var fSlow240 = 0.;
		var fSlow241 = 0.;
		var fSlow242 = 0.;
		var fSlow243 = 0.;
		var fSlow244 = 0.;
		var fSlow245 = 0.;
		var fSlow246 = 0.;
		var fSlow247 = 0.;
		var fSlow248 = 0.;
		var fSlow249 = 0.;
		var fSlow250 = 0.;
		var fSlow251 = 0.;
		var fSlow252 = 0.;
		var fSlow253 = 0.;
		var fSlow254 = 0.;
		var fSlow255 = 0.;
		var fSlow256 = 0.;
		var fSlow257 = 0.;
		var fSlow258 = 0.;
		var fSlow259 = 0.;
		var fSlow260 = 0.;
		var fSlow261 = 0.;
		var fSlow262 = 0.;
		var fSlow263 = 0.;
		var fSlow264 = 0.;
		var fSlow265 = 0.;
		var fSlow266 = 0.;
		var fSlow267 = 0.;
		var fSlow268 = 0.;
		var fSlow269 = 0.;
		var fSlow270 = 0.;
		var fSlow271 = 0.;
		var fSlow272 = 0.;
		var fSlow273 = 0.;
		var fSlow274 = 0.;
		var fSlow275 = 0.;
		var fSlow276 = 0.;
		var fSlow277 = 0.;
		var fSlow278 = 0.;
		var fSlow279 = 0.;
		var fSlow280 = 0.;
		var fSlow281 = 0.;
		var fSlow282 = 0.;
		var fSlow283 = 0.;
		var fSlow284 = 0.;
		var fSlow285 = 0.;
		var fSlow286 = 0.;
		var fSlow287 = 0.;
		var fSlow288 = 0.;
		var fSlow289 = 0.;
		var fSlow290 = 0.;
		var fSlow291 = 0.;
		var fSlow292 = 0.;
		var fSlow293 = 0.;
		var fSlow294 = 0.;
		var fSlow295 = 0.;
		var fSlow296 = 0.;
		var fSlow297 = 0.;
		var fSlow298 = 0.;
		var fSlow299 = 0.;
		var fSlow300 = 0.;
		var fSlow301 = 0.;
		var fSlow302 = 0.;
		var fSlow303 = 0.;
		var fSlow304 = 0.;
		var fSlow305 = 0.;
		var fSlow306 = 0.;
		var fSlow307 = 0.;
		var fSlow308 = 0.;
		var fSlow309 = 0.;
		var fSlow310 = 0.;
		var fSlow311 = 0.;
		var fSlow312 = 0.;
		var fSlow313 = 0.;
		var fSlow314 = 0.;
		var fSlow315 = 0.;
		var fSlow316 = 0.;
		var fSlow317 = 0.;
		var fSlow318 = 0.;
		var fSlow319 = 0.;
		var fSlow320 = 0.;
		var fSlow321 = 0.;
		var fSlow322 = 0.;
		var fSlow323 = 0.;
		var fSlow324 = 0.;
		var fSlow325 = 0.;
		var fSlow326 = 0.;
		var fSlow327 = 0.;
		var fSlow328 = 0.;
		var fSlow329 = 0.;
		var fSlow330 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var iTemp2 = 0;
		var iTemp3 = 0;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var iTemp11 = 0;
		var iTemp12 = 0;
		var iTemp13 = 0;
		var iSel0 = 0;
		var iTemp14 = 0;
		var iTemp15 = 0;
		var iTemp16 = 0;
		var iTemp17 = 0;
		var iTemp18 = 0;
		var iTemp19 = 0;
		var iTemp20 = 0;
		var iTemp21 = 0;
		var fTemp22 = 0.;
		var iTemp23 = 0;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fSel0 = 0.;
		var fSel1 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fRec61 = 0.;
		var fTemp34 = 0.;
		var fRec59 = 0.;
		var fTemp35 = 0.;
		var fRec57 = 0.;
		var fTemp36 = 0.;
		var fRec55 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var iTemp44 = 0;
		var iTemp45 = 0;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var iTemp51 = 0;
		var fTemp52 = 0.;
		var iTemp53 = 0;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var fSel2 = 0.;
		var fSel3 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fRec117 = 0.;
		var fTemp62 = 0.;
		var fRec115 = 0.;
		var fTemp63 = 0.;
		var fRec113 = 0.;
		var fTemp64 = 0.;
		var fRec111 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var fTemp69 = 0.;
		var fTemp70 = 0.;
		var fTemp71 = 0.;
		var iTemp72 = 0;
		var iTemp73 = 0;
		var fTemp74 = 0.;
		var fTemp75 = 0.;
		var fTemp76 = 0.;
		var fTemp77 = 0.;
		var fTemp78 = 0.;
		var iTemp79 = 0;
		var iTemp80 = 0;
		var fTemp81 = 0.;
		var fTemp82 = 0.;
		var fTemp83 = 0.;
		var fSel4 = 0.;
		var fSel5 = 0.;
		var fTemp84 = 0.;
		var fTemp85 = 0.;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fRec173 = 0.;
		var fTemp89 = 0.;
		var fRec171 = 0.;
		var fTemp90 = 0.;
		var fRec169 = 0.;
		var fTemp91 = 0.;
		var fRec167 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fTemp94 = 0.;
		var fTemp95 = 0.;
		var fTemp96 = 0.;
		var fTemp97 = 0.;
		var fTemp98 = 0.;
		var iTemp99 = 0;
		var iTemp100 = 0;
		var fTemp101 = 0.;
		var fTemp102 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var fTemp105 = 0.;
		var iTemp106 = 0;
		var iTemp107 = 0;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var fSel6 = 0.;
		var fSel7 = 0.;
		var fTemp111 = 0.;
		var fTemp112 = 0.;
		var fTemp113 = 0.;
		var fTemp114 = 0.;
		var fTemp115 = 0.;
		var fRec229 = 0.;
		var fTemp116 = 0.;
		var fRec227 = 0.;
		var fTemp117 = 0.;
		var fRec225 = 0.;
		var fTemp118 = 0.;
		var fRec223 = 0.;
		var fTemp119 = 0.;
		var fTemp120 = 0.;
		var fTemp121 = 0.;
		var fTemp122 = 0.;
		var fTemp123 = 0.;
		var fTemp124 = 0.;
		var iTemp125 = 0;
		var iTemp126 = 0;
		var fTemp127 = 0.;
		var fTemp128 = 0.;
		var fTemp129 = 0.;
		var fSel8 = 0.;
		var fSel9 = 0.;
		var fTemp130 = 0.;
		var fTemp131 = 0.;
		var fTemp132 = 0.;
		var fTemp133 = 0.;
		var fTemp134 = 0.;
		var fRec284 = 0.;
		var fTemp135 = 0.;
		var fRec282 = 0.;
		var fTemp136 = 0.;
		var fRec280 = 0.;
		var fTemp137 = 0.;
		var fRec278 = 0.;
		var fTemp138 = 0.;
		var fTemp139 = 0.;
		var iTemp140 = 0;
		var iTemp141 = 0;
		var fTemp142 = 0.;
		var fTemp143 = 0.;
		var fTemp144 = 0.;
		var fTemp145 = 0.;
		var fTemp146 = 0.;
		var fTemp147 = 0.;
		var fTemp148 = 0.;
		var fTemp149 = 0.;
		var fTemp150 = 0.;
		var iTemp151 = 0;
		var iTemp152 = 0;
		var fTemp153 = 0.;
		var fTemp154 = 0.;
		var fTemp155 = 0.;
		var fTemp156 = 0.;
		var fTemp157 = 0.;
		var fTemp158 = 0.;
		var fTemp159 = 0.;
		var fTemp160 = 0.;
		var iTemp161 = 0;
		var iTemp162 = 0;
		var fTemp163 = 0.;
		var fTemp164 = 0.;
		var fTemp165 = 0.;
		var fSel10 = 0.;
		var fSel11 = 0.;
		var fTemp166 = 0.;
		var fTemp167 = 0.;
		var fTemp168 = 0.;
		var fTemp169 = 0.;
		var fTemp170 = 0.;
		var fTemp171 = 0.;
		var fTemp172 = 0.;
		var fRec341 = 0.;
		var fTemp173 = 0.;
		var fRec339 = 0.;
		var fTemp174 = 0.;
		var fRec337 = 0.;
		var fTemp175 = 0.;
		var fRec335 = 0.;
		var fTemp176 = 0.;
		var fTemp177 = 0.;
		var fTemp178 = 0.;
		var fTemp179 = 0.;
		var fTemp180 = 0.;
		var fTemp181 = 0.;
		var fTemp182 = 0.;
		var fTemp183 = 0.;
		var fTemp184 = 0.;
		var fTemp185 = 0.;
		var fTemp186 = 0.;
		var fTemp187 = 0.;
		var fTemp188 = 0.;
		var fTemp189 = 0.;
		var fTemp190 = 0.;
		var fTemp191 = 0.;
		var fTemp192 = 0.;
		var fTemp193 = 0.;
		var fTemp194 = 0.;
		var fTemp195 = 0.;
		var fTemp196 = 0.;
		var fTemp197 = 0.;
		var fTemp198 = 0.;
		var fTemp199 = 0.;
		var fTemp200 = 0.;
		var fTemp201 = 0.;
		var fTemp202 = 0.;
		var fTemp203 = 0.;
		var fTemp204 = 0.;
		var fTemp205 = 0.;
		var fTemp206 = 0.;
		var fTemp207 = 0.;
		var fTemp208 = 0.;
		var fTemp209 = 0.;
		var fTemp210 = 0.;
		var fTemp211 = 0.;
		var fTemp212 = 0.;
		var fTemp213 = 0.;
		var fTemp214 = 0.;
		var fTemp215 = 0.;
		var fTemp216 = 0.;
		var fTemp217 = 0.;
		var fTemp218 = 0.;
		var fTemp219 = 0.;
		var fTemp220 = 0.;
		var fTemp221 = 0.;
		var fTemp222 = 0.;
		var fTemp223 = 0.;
		var fTemp224 = 0.;
		var fTemp225 = 0.;
		var fTemp226 = 0.;
		var fTemp227 = 0.;
		var iTemp228 = 0;
		var iTemp229 = 0;
		var iTemp230 = 0;
		var fTemp231 = 0.;
		var fTemp232 = 0.;
		var j0 = 4;
		var j1 = 4;
		var j2 = 4;
		var j3 = 4;
		var j4 = 4;
		var j5 = 4;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.001 * +(+(HEAPF32[dsp + 20950388 >> 2])));
		fSlow1 = +(0.001 * +(+(HEAPF32[dsp + 20950392 >> 2])));
		fSlow2 = +(1.e-05 * +(+(HEAPF32[dsp + 20950396 >> 2])));
		fSlow3 = +(10.582 * +(+(HEAPF32[dsp + 20950428 >> 2])));
		fSlow4 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow3)), 50.)))));
		fSlow5 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow4) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow3), 50.)))))))));
		fSlow6 = +(faustpower2_f(+(fSlow5)));
		fSlow7 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow6));
		fSlow8 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow4)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow6) / +(fSlow4))));
		fSlow9 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow8));
		fSlow10 = +(1. / +(4. + +(+(fSlow7) + +(fSlow9))));
		fSlow11 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow8));
		fSlow12 = +(0. - +(fSlow11));
		fSlow13 = +(faustpower2_f(+(fSlow8)));
		fSlow14 = +(+(5.64908 * +(fSlow13)) + +(8. * +(fSlow6)));
		fSlow15 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow6));
		fSlow16 = +(1.60527 * +(fSlow8));
		fSlow17 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow8));
		fSlow18 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow14) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(+(fSlow15) + +(fSlow16)) * +(fSlow6))))) + +(fSlow17))));
		fSlow19 = +(+(4.64607 * +(fSlow13)) + +(0.158473 * +(fSlow6)));
		fSlow20 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow19)));
		fSlow21 = +(0.01 * +(+(HEAPF32[dsp + 20950452 >> 2])));
		fSlow22 = +(30. + +(1.5 * +(+(HEAPF32[dsp + 20950456 >> 2]))));
		fSlow23 = +(2.646e+06 / +(fSlow22));
		fSlow24 = +(+(HEAPF32[dsp + 20950460 >> 2]));
		iSlow25 = ~~(+(+((HEAP32[dsp + 20950464 >> 2] | 0)) / +(fSlow22)));
		iSlow26 = ~~(+(0.1 * +(+(HEAPF32[dsp + 20950468 >> 2]))));
		iSlow27 = ((+((iSlow26 | 0)) <= 0.) | 0);
		fSlow28 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow6));
		fSlow29 = +(3.21055 * +(fSlow8));
		fSlow30 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow8));
		fSlow31 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(+(fSlow28) + +(fSlow29)) * +(fSlow6))) - +(64. + +(fSlow30)));
		fSlow32 = +(faustpower4_f(+(fSlow5)));
		fSlow33 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(16. * +(fSlow6)) + +(11.2982 * +(fSlow13)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow32)))));
		fSlow34 = +(+(+(fSlow30) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow6) * +(+(fSlow28) - +(fSlow29))))) - 64.);
		fSlow35 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow14) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow6) * +(+(fSlow15) - +(fSlow16))))))) - +(fSlow17));
		fSlow36 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow32)) - 1.26779);
		fSlow37 = +(1.90168 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow13)) + +(0.316946 * +(fSlow6)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow32)))));
		fSlow38 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow32));
		fSlow39 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow38) + +(+(fSlow19) + +(fSlow38)))));
		fSlow40 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow6)) - 8.);
		fSlow41 = +(+(4. + +(fSlow7)) - +(fSlow9));
		fSlow42 = +(0.001 * +(+(HEAPF32[dsp + 20950508 >> 2])));
		fSlow43 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950512 >> 2]))));
		fSlow44 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950516 >> 2]))));
		fSlow45 = +(3.14 / +(fSlow44));
		fSlow46 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950520 >> 2])) > 0.) | 0)));
		fSlow47 = +(0.001 * +(+(HEAPF32[dsp + 20950524 >> 2])));
		fSlow48 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950528 >> 2]))));
		fSlow49 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950532 >> 2]))))))));
		fSlow50 = +(0.001 * +(+(HEAPF32[dsp + 20950536 >> 2])));
		fSlow51 = +(0.01 * +(+(HEAPF32[dsp + 20950544 >> 2])));
		fSlow52 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950548 >> 2]))))), 0.999999))))));
		fSlow53 = +(0.001 * +(+(HEAPF32[dsp + 20950552 >> 2])));
		fSlow54 = +(+(HEAPF32[dsp + 20950556 >> 2]));
		fSlow55 = +(5.e-06 * +(fSlow54));
		fSlow56 = +(0.005 * +(+(HEAPF32[dsp + 20950560 >> 2])));
		fSlow57 = +(0.005 * +(fSlow54));
		fSlow58 = +(1. - +(fSlow57));
		fSlow59 = +(0.001 * +(+(HEAPF32[dsp + 20950616 >> 2])));
		fSlow60 = +(0.001 * +(+(HEAPF32[dsp + 20950620 >> 2])));
		fSlow61 = +(1.e-05 * +(+(HEAPF32[dsp + 20950624 >> 2])));
		fSlow62 = +(0.001 * +(+(HEAPF32[dsp + 20950628 >> 2])));
		fSlow63 = +(0.001 * +(+(HEAPF32[dsp + 20950632 >> 2])));
		fSlow64 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950636 >> 2])) > 0.) | 0)));
		fSlow65 = +(+(HEAPF32[dsp + 20950640 >> 2]));
		fSlow66 = +(0.001 * +(+(HEAPF32[dsp + 20950644 >> 2])));
		fSlow67 = +(10.582 * +(+(HEAPF32[dsp + 20950648 >> 2])));
		fSlow68 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow67)), 50.)))));
		fSlow69 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow68) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow67), 50.)))))))));
		fSlow70 = +(faustpower2_f(+(fSlow69)));
		fSlow71 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow70));
		fSlow72 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow68)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow70) / +(fSlow68))));
		fSlow73 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow72));
		fSlow74 = +(1. / +(4. + +(+(fSlow71) + +(fSlow73))));
		fSlow75 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow72));
		fSlow76 = +(0. - +(fSlow75));
		fSlow77 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow72));
		fSlow78 = +(faustpower2_f(+(fSlow72)));
		fSlow79 = +(+(5.64908 * +(fSlow78)) + +(8. * +(fSlow70)));
		fSlow80 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow70));
		fSlow81 = +(1.60527 * +(fSlow72));
		fSlow82 = +(1. / +(16. + +(+(fSlow77) + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow79) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow70) * +(+(fSlow80) + +(fSlow81)))))))));
		fSlow83 = +(+(4.64607 * +(fSlow78)) + +(0.158473 * +(fSlow70)));
		fSlow84 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow83)));
		fSlow85 = +(0.01 * +(+(HEAPF32[dsp + 20950652 >> 2])));
		fSlow86 = +(3.21055 * +(fSlow72));
		fSlow87 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow70));
		fSlow88 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow72));
		fSlow89 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow70) * +(+(fSlow86) + +(fSlow87)))) - +(64. + +(fSlow88)));
		fSlow90 = +(faustpower4_f(+(fSlow69)));
		fSlow91 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(16. * +(fSlow70)) + +(11.2982 * +(fSlow78)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow90)))));
		fSlow92 = +(+(+(fSlow88) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow70) * +(+(fSlow87) - +(fSlow86))))) - 64.);
		fSlow93 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow79) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow70) * +(+(fSlow80) - +(fSlow81))))))) - +(fSlow77));
		fSlow94 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow90)) - 1.26779);
		fSlow95 = +(1.90168 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow78)) + +(0.316946 * +(fSlow70)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow90)))));
		fSlow96 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow90));
		fSlow97 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow96) + +(+(fSlow83) + +(fSlow96)))));
		fSlow98 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow70)) - 8.);
		fSlow99 = +(+(4. + +(fSlow71)) - +(fSlow73));
		fSlow100 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950656 >> 2]))));
		fSlow101 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950660 >> 2]))));
		fSlow102 = +(3.14 / +(fSlow100));
		fSlow103 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950664 >> 2]))))))));
		fSlow104 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950668 >> 2]))));
		fSlow105 = +(0.001 * +(+(HEAPF32[dsp + 20950672 >> 2])));
		fSlow106 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950676 >> 2]))))), 0.999999))))));
		fSlow107 = +(0.01 * +(+(HEAPF32[dsp + 20950680 >> 2])));
		fSlow108 = +(+(HEAPF32[dsp + 20950684 >> 2]));
		fSlow109 = +(5.e-06 * +(fSlow108));
		fSlow110 = +(0.005 * +(+(HEAPF32[dsp + 20950688 >> 2])));
		fSlow111 = +(0.005 * +(fSlow108));
		fSlow112 = +(1. - +(fSlow111));
		fSlow113 = +(0.001 * +(+(HEAPF32[dsp + 20950696 >> 2])));
		fSlow114 = +(0.001 * +(+(HEAPF32[dsp + 20950700 >> 2])));
		fSlow115 = +(1.e-05 * +(+(HEAPF32[dsp + 20950704 >> 2])));
		fSlow116 = +(0.001 * +(+(HEAPF32[dsp + 20950708 >> 2])));
		fSlow117 = +(0.001 * +(+(HEAPF32[dsp + 20950712 >> 2])));
		fSlow118 = +(0.001 * +(+(HEAPF32[dsp + 20950716 >> 2])));
		fSlow119 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950720 >> 2])) > 0.) | 0)));
		fSlow120 = +(+(HEAPF32[dsp + 20950724 >> 2]));
		fSlow121 = +(0.001 * +(+(HEAPF32[dsp + 20950728 >> 2])));
		fSlow122 = +(10.582 * +(+(HEAPF32[dsp + 20950732 >> 2])));
		fSlow123 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow122)), 50.)))));
		fSlow124 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow123) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow122), 50.)))))))));
		fSlow125 = +(faustpower2_f(+(fSlow124)));
		fSlow126 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow125));
		fSlow127 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow123)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow125) / +(fSlow123))));
		fSlow128 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow127));
		fSlow129 = +(1. / +(4. + +(+(fSlow126) + +(fSlow128))));
		fSlow130 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow127));
		fSlow131 = +(0. - +(fSlow130));
		fSlow132 = +(faustpower2_f(+(fSlow127)));
		fSlow133 = +(+(5.64908 * +(fSlow132)) + +(8. * +(fSlow125)));
		fSlow134 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow125));
		fSlow135 = +(1.60527 * +(fSlow127));
		fSlow136 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow127));
		fSlow137 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow133) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow125) * +(+(fSlow134) + +(fSlow135)))))) + +(fSlow136))));
		fSlow138 = +(+(4.64607 * +(fSlow132)) + +(0.158473 * +(fSlow125)));
		fSlow139 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow138)));
		fSlow140 = +(0.01 * +(+(HEAPF32[dsp + 20950736 >> 2])));
		fSlow141 = +(3.21055 * +(fSlow127));
		fSlow142 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow125));
		fSlow143 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow127));
		fSlow144 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow125) * +(+(fSlow141) + +(fSlow142)))) - +(64. + +(fSlow143)));
		fSlow145 = +(faustpower4_f(+(fSlow124)));
		fSlow146 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(16. * +(fSlow125)) + +(11.2982 * +(fSlow132)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow145)))));
		fSlow147 = +(+(+(fSlow143) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow125) * +(+(fSlow142) - +(fSlow141))))) - 64.);
		fSlow148 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow133) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow125) * +(+(fSlow134) - +(fSlow135))))))) - +(fSlow136));
		fSlow149 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow145)) - 1.26779);
		fSlow150 = +(1.90168 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow132)) + +(0.316946 * +(fSlow125)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow145)))));
		fSlow151 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow145));
		fSlow152 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow151) + +(+(fSlow138) + +(fSlow151)))));
		fSlow153 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow125)) - 8.);
		fSlow154 = +(+(4. + +(fSlow126)) - +(fSlow128));
		fSlow155 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950740 >> 2]))));
		fSlow156 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950744 >> 2]))));
		fSlow157 = +(3.14 / +(fSlow155));
		fSlow158 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950748 >> 2]))))))));
		fSlow159 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950752 >> 2]))));
		fSlow160 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950756 >> 2]))))), 0.999999))))));
		fSlow161 = +(0.01 * +(+(HEAPF32[dsp + 20950760 >> 2])));
		fSlow162 = +(+(HEAPF32[dsp + 20950764 >> 2]));
		fSlow163 = +(5.e-06 * +(fSlow162));
		fSlow164 = +(0.005 * +(+(HEAPF32[dsp + 20950768 >> 2])));
		fSlow165 = +(0.005 * +(fSlow162));
		fSlow166 = +(1. - +(fSlow165));
		fSlow167 = +(0.001 * +(+(HEAPF32[dsp + 20950776 >> 2])));
		fSlow168 = +(0.001 * +(+(HEAPF32[dsp + 20950780 >> 2])));
		fSlow169 = +(1.e-05 * +(+(HEAPF32[dsp + 20950784 >> 2])));
		fSlow170 = +(0.001 * +(+(HEAPF32[dsp + 20950788 >> 2])));
		fSlow171 = +(0.001 * +(+(HEAPF32[dsp + 20950792 >> 2])));
		fSlow172 = +(0.001 * +(+(HEAPF32[dsp + 20950796 >> 2])));
		fSlow173 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950800 >> 2])) > 0.) | 0)));
		fSlow174 = +(+(HEAPF32[dsp + 20950804 >> 2]));
		fSlow175 = +(0.001 * +(+(HEAPF32[dsp + 20950808 >> 2])));
		fSlow176 = +(10.582 * +(+(HEAPF32[dsp + 20950812 >> 2])));
		fSlow177 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow176)), 50.)))));
		fSlow178 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow177) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow176), 50.)))))))));
		fSlow179 = +(faustpower2_f(+(fSlow178)));
		fSlow180 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow179));
		fSlow181 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow177)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow179) / +(fSlow177))));
		fSlow182 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow181));
		fSlow183 = +(1. / +(4. + +(+(fSlow180) + +(fSlow182))));
		fSlow184 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow181));
		fSlow185 = +(0. - +(fSlow184));
		fSlow186 = +(faustpower2_f(+(fSlow181)));
		fSlow187 = +(+(8. * +(fSlow179)) + +(5.64908 * +(fSlow186)));
		fSlow188 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow179));
		fSlow189 = +(1.60527 * +(fSlow181));
		fSlow190 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow181));
		fSlow191 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow187) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow179) * +(+(fSlow188) + +(fSlow189)))))) + +(fSlow190))));
		fSlow192 = +(+(4.64607 * +(fSlow186)) + +(0.158473 * +(fSlow179)));
		fSlow193 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow192)));
		fSlow194 = +(0.01 * +(+(HEAPF32[dsp + 20950816 >> 2])));
		fSlow195 = +(3.21055 * +(fSlow181));
		fSlow196 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow179));
		fSlow197 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow181));
		fSlow198 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow179) * +(+(fSlow195) + +(fSlow196)))) - +(64. + +(fSlow197)));
		fSlow199 = +(faustpower4_f(+(fSlow178)));
		fSlow200 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(16. * +(fSlow179)) + +(11.2982 * +(fSlow186)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow199)))));
		fSlow201 = +(+(+(fSlow197) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow179) * +(+(fSlow196) - +(fSlow195))))) - 64.);
		fSlow202 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow187) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow179) * +(+(fSlow188) - +(fSlow189))))))) - +(fSlow190));
		fSlow203 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow199)) - 1.26779);
		fSlow204 = +(1.90168 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow186)) + +(0.316946 * +(fSlow179)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow199)))));
		fSlow205 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow199));
		fSlow206 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow205) + +(+(fSlow192) + +(fSlow205)))));
		fSlow207 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow179)) - 8.);
		fSlow208 = +(+(4. + +(fSlow180)) - +(fSlow182));
		fSlow209 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950820 >> 2]))));
		fSlow210 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950824 >> 2]))));
		fSlow211 = +(3.14 / +(fSlow209));
		fSlow212 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950828 >> 2]))))))));
		fSlow213 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950832 >> 2]))));
		fSlow214 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950836 >> 2]))))), 0.999999))))));
		fSlow215 = +(0.01 * +(+(HEAPF32[dsp + 20950840 >> 2])));
		fSlow216 = +(+(HEAPF32[dsp + 20950844 >> 2]));
		fSlow217 = +(5.e-06 * +(fSlow216));
		fSlow218 = +(0.005 * +(+(HEAPF32[dsp + 20950848 >> 2])));
		fSlow219 = +(0.005 * +(fSlow216));
		fSlow220 = +(1. - +(fSlow219));
		fSlow221 = +(0.001 * +(+(HEAPF32[dsp + 20950856 >> 2])));
		fSlow222 = +(0.001 * +(+(HEAPF32[dsp + 20950860 >> 2])));
		fSlow223 = +(10.582 * +(+(HEAPF32[dsp + 20950864 >> 2])));
		fSlow224 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow223)), 50.)))));
		fSlow225 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow224) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow223), 50.)))))))));
		fSlow226 = +(faustpower2_f(+(fSlow225)));
		fSlow227 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow226));
		fSlow228 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow224)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow226) / +(fSlow224))));
		fSlow229 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow228));
		fSlow230 = +(1. / +(4. + +(+(fSlow227) + +(fSlow229))));
		fSlow231 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow228));
		fSlow232 = +(0. - +(fSlow231));
		fSlow233 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow228));
		fSlow234 = +(faustpower2_f(+(fSlow228)));
		fSlow235 = +(+(5.64908 * +(fSlow234)) + +(8. * +(fSlow226)));
		fSlow236 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow226));
		fSlow237 = +(1.60527 * +(fSlow228));
		fSlow238 = +(1. / +(16. + +(+(fSlow233) + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow235) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow226) * +(+(fSlow236) + +(fSlow237)))))))));
		fSlow239 = +(+(0.158473 * +(fSlow226)) + +(4.64607 * +(fSlow234)));
		fSlow240 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow239)));
		fSlow241 = +(+(HEAPF32[dsp + 20950868 >> 2]));
		fSlow242 = +(0.01 * +(+(HEAPF32[dsp + 20950872 >> 2])));
		fSlow243 = +(3.21055 * +(fSlow228));
		fSlow244 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow226));
		fSlow245 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow228));
		fSlow246 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow226) * +(+(fSlow243) + +(fSlow244)))) - +(64. + +(fSlow245)));
		fSlow247 = +(faustpower4_f(+(fSlow225)));
		fSlow248 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(16. * +(fSlow226)) + +(11.2982 * +(fSlow234)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow247)))));
		fSlow249 = +(+(+(fSlow245) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow226) * +(+(fSlow244) - +(fSlow243))))) - 64.);
		fSlow250 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow235) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow226) * +(+(fSlow236) - +(fSlow237))))))) - +(fSlow233));
		fSlow251 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow247)) - 1.26779);
		fSlow252 = +(1.90168 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow234)) + +(0.316946 * +(fSlow226)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow247)))));
		fSlow253 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow247));
		fSlow254 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow253) + +(+(fSlow239) + +(fSlow253)))));
		fSlow255 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow226)) - 8.);
		fSlow256 = +(+(4. + +(fSlow227)) - +(fSlow229));
		fSlow257 = +(0.001 * +(+(HEAPF32[dsp + 20950876 >> 2])));
		fSlow258 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950880 >> 2])) > 0.) | 0)));
		fSlow259 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950884 >> 2]))));
		fSlow260 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950888 >> 2]))));
		fSlow261 = +(3.14 / +(fSlow259));
		fSlow262 = +(0.001 * +(+(HEAPF32[dsp + 20950892 >> 2])));
		fSlow263 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950896 >> 2]))));
		fSlow264 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950900 >> 2]))))))));
		fSlow265 = +(0.001 * +(+(HEAPF32[dsp + 20950904 >> 2])));
		fSlow266 = +(0.01 * +(+(HEAPF32[dsp + 20950908 >> 2])));
		fSlow267 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950912 >> 2]))))), 0.999999))))));
		fSlow268 = +(0.001 * +(+(HEAPF32[dsp + 20950916 >> 2])));
		fSlow269 = +(+(HEAPF32[dsp + 20950920 >> 2]));
		fSlow270 = +(5.e-06 * +(fSlow269));
		fSlow271 = +(0.005 * +(+(HEAPF32[dsp + 20950924 >> 2])));
		fSlow272 = +(0.005 * +(fSlow269));
		fSlow273 = +(1. - +(fSlow272));
		fSlow274 = +(1.e-05 * +(+(HEAPF32[dsp + 20950928 >> 2])));
		fSlow275 = +(0.001 * +(+(HEAPF32[dsp + 20950936 >> 2])));
		fSlow276 = +(0.001 * +(+(HEAPF32[dsp + 20950940 >> 2])));
		fSlow277 = +(1.e-05 * +(+(HEAPF32[dsp + 20950944 >> 2])));
		fSlow278 = +(+(HEAPF32[dsp + 20950948 >> 2]));
		fSlow279 = +(0.001 * +(+(HEAPF32[dsp + 20950952 >> 2])));
		fSlow280 = +(10.582 * +(+(HEAPF32[dsp + 20950956 >> 2])));
		fSlow281 = +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(300. + +(fSlow280)), 50.)))));
		fSlow282 = +(sqrtf(+(+(HEAPF32[dsp + 20950420 >> 2]) * +(+(fSlow281) * +(tanf(+(+(HEAPF32[dsp + 20950424 >> 2]) * +(max(+(fSlow280), 50.)))))))));
		fSlow283 = +(faustpower2_f(+(fSlow282)));
		fSlow284 = +(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow283));
		fSlow285 = +(+(+(HEAPF32[dsp + 20950436 >> 2]) * +(fSlow281)) - +(+(HEAPF32[dsp + 20950440 >> 2]) * +(+(fSlow283) / +(fSlow281))));
		fSlow286 = +(+(HEAPF32[dsp + 20950432 >> 2]) * +(fSlow285));
		fSlow287 = +(1. / +(4. + +(+(fSlow284) + +(fSlow286))));
		fSlow288 = +(+(HEAPF32[dsp + 20950444 >> 2]) * +(fSlow285));
		fSlow289 = +(0. - +(fSlow288));
		fSlow290 = +(faustpower2_f(+(fSlow285)));
		fSlow291 = +(+(8. * +(fSlow283)) + +(5.64908 * +(fSlow290)));
		fSlow292 = +(+(HEAPF32[dsp + 20950412 >> 2]) * +(fSlow283));
		fSlow293 = +(1.60527 * +(fSlow285));
		fSlow294 = +(+(HEAPF32[dsp + 20950448 >> 2]) * +(fSlow285));
		fSlow295 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow291) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow283) * +(+(fSlow292) + +(fSlow293)))))) + +(fSlow294))));
		fSlow296 = +(+(4.64607 * +(fSlow290)) + +(0.158473 * +(fSlow283)));
		fSlow297 = +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(fSlow296)) + 0.316946);
		fSlow298 = +(0.01 * +(+(HEAPF32[dsp + 20950960 >> 2])));
		fSlow299 = +(3.21055 * +(fSlow285));
		fSlow300 = +(+(HEAPF32[dsp + 20950480 >> 2]) * +(fSlow283));
		fSlow301 = +(+(HEAPF32[dsp + 20950484 >> 2]) * +(fSlow285));
		fSlow302 = +(+(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow283) * +(+(fSlow299) + +(fSlow300)))) - +(64. + +(fSlow301)));
		fSlow303 = +(faustpower4_f(+(fSlow282)));
		fSlow304 = +(96. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(11.2982 * +(fSlow290)) + +(16. * +(fSlow283)))) + +(+(HEAPF32[dsp + 20950488 >> 2]) * +(fSlow303)))));
		fSlow305 = +(+(+(fSlow301) + +(+(HEAPF32[dsp + 20950476 >> 2]) * +(+(fSlow283) * +(+(fSlow300) - +(fSlow299))))) - 64.);
		fSlow306 = +(+(16. + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow291) + +(+(HEAPF32[dsp + 20950412 >> 2]) * +(+(fSlow283) * +(+(fSlow292) - +(fSlow293))))))) - +(fSlow294));
		fSlow307 = +(+(+(HEAPF32[dsp + 20950492 >> 2]) * +(fSlow303)) - 1.26779);
		fSlow308 = +(+(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow290)) + +(0.316946 * +(fSlow283)))) + +(+(HEAPF32[dsp + 20950496 >> 2]) * +(fSlow303)))) + 1.90168);
		fSlow309 = +(+(HEAPF32[dsp + 20950500 >> 2]) * +(fSlow303));
		fSlow310 = +(0.316946 + +(+(HEAPF32[dsp + 20950416 >> 2]) * +(+(fSlow309) + +(+(fSlow296) + +(fSlow309)))));
		fSlow311 = +(+(+(HEAPF32[dsp + 20950504 >> 2]) * +(fSlow283)) - 8.);
		fSlow312 = +(+(4. + +(fSlow284)) - +(fSlow286));
		fSlow313 = +(0.001 * +(((+(+(HEAPF32[dsp + 20950964 >> 2])) > 0.) | 0)));
		fSlow314 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20950968 >> 2]))));
		fSlow315 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20950972 >> 2]))));
		fSlow316 = +(3.14 / +(fSlow314));
		fSlow317 = +(0.001 * +(+(HEAPF32[dsp + 20950976 >> 2])));
		fSlow318 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20950980 >> 2]))));
		fSlow319 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950984 >> 2]))))))));
		fSlow320 = +(0.001 * +(+(HEAPF32[dsp + 20950988 >> 2])));
		fSlow321 = +(0.01 * +(+(HEAPF32[dsp + 20950992 >> 2])));
		fSlow322 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20950996 >> 2]))))), 0.999999))))));
		fSlow323 = +(0.001 * +(+(HEAPF32[dsp + 20951000 >> 2])));
		fSlow324 = +(+(HEAPF32[dsp + 20951004 >> 2]));
		fSlow325 = +(5.e-06 * +(fSlow324));
		fSlow326 = +(0.005 * +(+(HEAPF32[dsp + 20951008 >> 2])));
		fSlow327 = +(0.005 * +(fSlow324));
		fSlow328 = +(1. - +(fSlow327));
		fSlow329 = +(1.323e+06 / +(fSlow22));
		fSlow330 = +(0.001 * +(powf(10., +(0.05 * +(+(+(HEAPF32[dsp + 20951032 >> 2])) - 100.)))));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[dsp + 20947748 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20947748 + (1 << 2) >> 2])) + +(fSlow0));
			HEAPF32[dsp + 20947756 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20947756 + (1 << 2) >> 2])) + +(fSlow1));
			fTemp0 = +(0. - +(HEAPF32[dsp + 20947756 + (0 << 2) >> 2]));
			fTemp1 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20947748 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp0)))), 0.5));
			iTemp2 = ((+(fTemp1) > 1.) | 0);
			iTemp3 = ((+(fTemp1) < 1.) | 0);
			fTemp4 = +(+((iTemp2 | 0)) + +(+(fTemp1) * +((iTemp3 | 0))));
			fTemp5 = +(1.38629 * +(fTemp4));
			fTemp6 = +(+(fTemp5) - 1.09861);
			fTemp7 = +(3.47606 * +(fTemp6));
			fTemp8 = +(+(3.47606 * +(+(+(fTemp6) * +(((+(fTemp7) > 0.) | 0))) * +(((+(fTemp7) <= 1.) | 0)))) + +(((+(fTemp7) > 1.) | 0)));
			fTemp9 = +(atan2f(+(fTemp0), +(HEAPF32[dsp + 20947748 + (0 << 2) >> 2])));
			fTemp10 = +(3. * +(fTemp9));
			HEAPF32[dsp + 20947764 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20947764 + (1 << 2) >> 2])) + +(fSlow2));
			HEAP32[dsp + 20947772 + (0 << 2) >> 2] = ((1 + (((HEAP32[dsp + 20947772 + (1 << 2) >> 2] | 0) % 88200) | 0)) | 0);
			HEAPF32[dsp + 20947780 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20947780 + (1 << 2) >> 2])) + +(fSlow21));
			HEAPF32[dsp + 20947788 + (0 << 2) >> 2] = +(+(1. + +(HEAPF32[dsp + 20947788 + (1 << 2) >> 2])) % +(fSlow23));
			iTemp11 = ((+(HEAPF32[dsp + 20947788 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20947788 + (1 << 2) >> 2])) | 0);
			HEAPF32[dsp + 20947796 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow24):+(HEAPF32[dsp + 20947796 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20947804 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20947804 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20947796 + (0 << 2) >> 2])))));
			iTemp12 = ((+(HEAPF32[dsp + 20947796 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20947812 + (0 << 2) >> 2] = (iTemp12 | 0);
			HEAP32[dsp + 20947820 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20947820 + (1 << 2) >> 2] | 0) + (iTemp12 | 0)) | 0), (iTemp12 | 0)) | 0) % 441000) | 0);
			HEAP32[dsp + 20947828 + (0 << 2) >> 2] = ((12345 + (imul(1103515245, (HEAP32[dsp + 20947828 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 20947836 + (0 << 2) >> 2] = ((((1 + (HEAP32[dsp + 20947836 + (1 << 2) >> 2] | 0)) | 0) % (iSlow25 | 0)) | 0);
			iTemp13 = (((HEAP32[dsp + 20947836 + (0 << 2) >> 2] | 0) == 0) | 0);
			HEAP32[dsp + 20947844 + (0 << 2) >> 2] = (iTemp13 | 0);
			HEAP32[dsp + 20947852 + (0 << 2) >> 2] = (iSlow26 | 0);
			iSel0 = 0;
			if (((HEAP32[dsp + 20947844 + (1 << 2) >> 2] | 0) != 0) | 0) {
				iSel0 = 0;
				
			} else {
				iSel0 = (((HEAP32[dsp + 20947860 + (1 << 2) >> 2] | 0) + ((abs((((iSlow26 | 0) - (HEAP32[dsp + 20947852 + (1 << 2) >> 2] | 0)) | 0))) | 0)) | 0);
				
			}
			HEAP32[dsp + 20947860 + (0 << 2) >> 2] = (iSel0 | 0);
			HEAP32[dsp + 20947868 + (0 << 2) >> 2] = (((((iTemp13 | 0) + (HEAP32[dsp + 20947868 + (1 << 2) >> 2] | 0)) | 0) % 8) | 0);
			HEAPF32[dsp + 20947424 + ((((((iTemp13 | 0) & (((((HEAP32[dsp + 20947860 + (0 << 2) >> 2] | 0) > 0) | 0) | (iSlow27 | 0)) | 0)) | 0)?(HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0):8) | 0) << 2) >> 2] = +((iSlow26 | 0));
			iTemp14 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 1.))) < 0.5) | 0);
			HEAP32[dsp + 20947876 + (0 << 2) >> 2] = (iTemp14 | 0);
			HEAPF32[dsp + 20947884 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947884 + (1 << 2) >> 2]) + +(((+((((iTemp14 | 0) - (HEAP32[dsp + 20947876 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00166477 * +(((+(HEAPF32[dsp + 20947884 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20829664 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(0.488376 * +(+(1.5 * +(HEAPF32[dsp + 20947580 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947580 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947884 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947580 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20829664 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 599) | 0) & 1023) | 0) << 2) >> 2]);
			iTemp15 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 2.))) < 0.5) | 0);
			HEAP32[dsp + 20947892 + (0 << 2) >> 2] = (iTemp15 | 0);
			HEAPF32[dsp + 20947900 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947900 + (1 << 2) >> 2]) + +(((+((((iTemp15 | 0) - (HEAP32[dsp + 20947892 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00186864 * +(((+(HEAPF32[dsp + 20947900 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20833760 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(0.489631 * +(+(1.5 * +(HEAPF32[dsp + 20947592 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947592 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947900 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947592 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20833760 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 534) | 0) & 1023) | 0) << 2) >> 2]);
			iTemp16 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 3.))) < 0.5) | 0);
			HEAP32[dsp + 20947908 + (0 << 2) >> 2] = (iTemp16 | 0);
			HEAPF32[dsp + 20947916 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947916 + (1 << 2) >> 2]) + +(((+((((iTemp16 | 0) - (HEAP32[dsp + 20947908 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00209747 * +(((+(HEAPF32[dsp + 20947916 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20936160 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.490752 * +(+(1.5 * +(HEAPF32[dsp + 20947604 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947604 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947916 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947604 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20936160 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 475) | 0) & 511) | 0) << 2) >> 2]);
			iTemp17 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 4.))) < 0.5) | 0);
			HEAP32[dsp + 20947924 + (0 << 2) >> 2] = (iTemp17 | 0);
			HEAPF32[dsp + 20947932 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947932 + (1 << 2) >> 2]) + +(((+((((iTemp17 | 0) - (HEAP32[dsp + 20947924 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00249433 * +(((+(HEAPF32[dsp + 20947932 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20938208 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.492212 * +(+(1.5 * +(HEAPF32[dsp + 20947616 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947616 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947932 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947616 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20938208 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 399) | 0) & 511) | 0) << 2) >> 2]);
			iTemp18 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 5.))) < 0.5) | 0);
			HEAP32[dsp + 20947940 + (0 << 2) >> 2] = (iTemp18 | 0);
			HEAPF32[dsp + 20947948 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947948 + (1 << 2) >> 2]) + +(((+((((iTemp18 | 0) - (HEAP32[dsp + 20947940 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00279979 * +(((+(HEAPF32[dsp + 20947948 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20940256 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.493055 * +(+(1.5 * +(HEAPF32[dsp + 20947628 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947628 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947948 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947628 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20940256 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 356) | 0) & 511) | 0) << 2) >> 2]);
			iTemp19 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 6.))) < 0.5) | 0);
			HEAP32[dsp + 20947956 + (0 << 2) >> 2] = (iTemp19 | 0);
			HEAPF32[dsp + 20947964 + (0 << 2) >> 2] = +(+(+(((+((((iTemp19 | 0) - (HEAP32[dsp + 20947956 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0)) + +(HEAPF32[dsp + 20947964 + (1 << 2) >> 2])) - +(0.00332953 * +(((+(HEAPF32[dsp + 20947964 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20942304 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947964 + (0 << 2) >> 2]) > 0.) | 0)) | 0))) + +(0.494154 * +(+(1.5 * +(HEAPF32[dsp + 20947640 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947640 + (2 << 2) >> 2])))));
			HEAPF32[dsp + 20947640 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20942304 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 299) | 0) & 511) | 0) << 2) >> 2]);
			iTemp20 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 7.))) < 0.5) | 0);
			HEAP32[dsp + 20947972 + (0 << 2) >> 2] = (iTemp20 | 0);
			HEAPF32[dsp + 20947980 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947980 + (1 << 2) >> 2]) + +(((+((((iTemp20 | 0) - (HEAP32[dsp + 20947972 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00373727 * +(((+(HEAPF32[dsp + 20947980 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20944352 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.494788 * +(+(1.5 * +(HEAPF32[dsp + 20947652 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947652 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947980 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947652 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20944352 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 266) | 0) & 511) | 0) << 2) >> 2]);
			iTemp21 = ((+(fabsf(+(+(HEAPF32[dsp + 20947424 + ((HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0) << 2) >> 2]) - 8.))) < 0.5) | 0);
			HEAP32[dsp + 20947988 + (0 << 2) >> 2] = (iTemp21 | 0);
			HEAPF32[dsp + 20947996 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20947996 + (1 << 2) >> 2]) + +(((+((((iTemp21 | 0) - (HEAP32[dsp + 20947988 + (1 << 2) >> 2] | 0)) | 0)) > 0.) | 0))) - +(0.00419495 * +(((+(HEAPF32[dsp + 20947996 + (1 << 2) >> 2]) > 0.) | 0))));
			HEAPF32[dsp + 20946400 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(0.495354 * +(+(1.5 * +(HEAPF32[dsp + 20947664 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20947664 + (2 << 2) >> 2])))) + +(4.65661e-10 * +((imul((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0), ((+(HEAPF32[dsp + 20947996 + (0 << 2) >> 2]) > 0.) | 0)) | 0))));
			HEAPF32[dsp + 20947664 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20946400 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 237) | 0) & 255) | 0) << 2) >> 2]);
			fTemp22 = +(+(+(+(+(+(+(+(0.25 * +(HEAPF32[dsp + 20947580 + (0 << 2) >> 2])) + +(0.433013 * +(HEAPF32[dsp + 20947592 + (0 << 2) >> 2]))) + +(0.559017 * +(HEAPF32[dsp + 20947604 + (0 << 2) >> 2]))) + +(0.661438 * +(HEAPF32[dsp + 20947616 + (0 << 2) >> 2]))) + +(0.75 * +(HEAPF32[dsp + 20947628 + (0 << 2) >> 2]))) + +(0.829156 * +(HEAPF32[dsp + 20947640 + (0 << 2) >> 2]))) + +(0.901388 * +(HEAPF32[dsp + 20947652 + (0 << 2) >> 2]))) + +(0.968246 * +(HEAPF32[dsp + 20947664 + (0 << 2) >> 2])));
			HEAPF32[dsp + 262144 + ((HEAP32[dsp + 20947820 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp22);
			iTemp23 = ((+(HEAPF32[dsp + 20947796 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20948004 + (0 << 2) >> 2] = (imul((((iTemp12 | 0) + (HEAP32[dsp + 20948004 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp12 | 0) > (HEAP32[dsp + 20947812 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20948012 + (0 << 2) >> 2] = (((imul((iTemp23 | 0), (((iTemp23 | 0) + (HEAP32[dsp + 20948012 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20948004 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			fTemp24 = +(max(-1., +(min(1., +(+(+(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20947780 + (0 << 2) >> 2])))))) * +(HEAPF32[dsp + 20947804 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 262144 + (((max(~~((HEAP32[dsp + 20947820 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948012 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]))))));
			HEAPF32[dsp + 20947460 + (0 << 2) >> 2] = +(+(+(fTemp24) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp24)))))) - +(+(fSlow18) * +(+(+(+(+(fSlow31) * +(HEAPF32[dsp + 20947460 + (1 << 2) >> 2])) + +(+(fSlow33) * +(HEAPF32[dsp + 20947460 + (2 << 2) >> 2]))) + +(+(fSlow34) * +(HEAPF32[dsp + 20947460 + (3 << 2) >> 2]))) + +(+(fSlow35) * +(HEAPF32[dsp + 20947460 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947676 + (0 << 2) >> 2] = +(+(+(fSlow18) * +(+(+(+(+(+(fSlow20) * +(HEAPF32[dsp + 20947460 + (0 << 2) >> 2])) + +(+(fSlow36) * +(HEAPF32[dsp + 20947460 + (1 << 2) >> 2]))) + +(+(fSlow37) * +(HEAPF32[dsp + 20947460 + (2 << 2) >> 2]))) + +(+(fSlow36) * +(HEAPF32[dsp + 20947460 + (3 << 2) >> 2]))) + +(+(fSlow39) * +(HEAPF32[dsp + 20947460 + (4 << 2) >> 2])))) - +(+(fSlow10) * +(+(+(fSlow40) * +(HEAPF32[dsp + 20947676 + (1 << 2) >> 2])) + +(+(fSlow41) * +(HEAPF32[dsp + 20947676 + (2 << 2) >> 2])))));
			HEAPF32[dsp + 20948020 + (0 << 2) >> 2] = +(+(fSlow42) + +(0.999 * +(HEAPF32[dsp + 20948020 + (1 << 2) >> 2])));
			fTemp25 = +(+(+(fSlow10) * +(+(+(+(fSlow12) * +(HEAPF32[dsp + 20947676 + (2 << 2) >> 2])) + +(+(fSlow11) * +(HEAPF32[dsp + 20947676 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20948020 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20947804 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20948020 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 262144 + (((max(~~((HEAP32[dsp + 20947820 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948012 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])));
			HEAPF32[dsp + 17137600 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp25);
			HEAPF32[dsp + 20948028 + (0 << 2) >> 2] = +(+(fSlow43) + +(+(HEAPF32[dsp + 20948028 + (1 << 2) >> 2]) % +(fSlow44)));
			fTemp26 = +(+(30000. * +(1. + +(4.65661e-10 * +((HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0))))) + +((imul(44100, (((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) < 44100) | 0)) | 0)));
			HEAPF32[dsp + 20948036 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20948028 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20948028 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20948036 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948044 + (0 << 2) >> 2] = +(+(fSlow46) + +(0.999 * +(HEAPF32[dsp + 20948044 + (1 << 2) >> 2])));
			fTemp27 = +(+(+(HEAPF32[dsp + 17137600 + (~~(+(+(HEAPF32[dsp + 20948028 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20948036 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow45) * +(HEAPF32[dsp + 20948028 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20948044 + (0 << 2) >> 2]));
			fTemp28 = +(+(fTemp25) * +(1. - +(HEAPF32[dsp + 20948044 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948052 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948052 + (1 << 2) >> 2])) + +(fSlow47));
			fSel0 = 0.;
			if ((((((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow48) != +(HEAPF32[dsp + 20948076 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel0 = 0.00390625;
				
			} else {
				fSel0 = +(((((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow48) != +(HEAPF32[dsp + 20948084 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel1 = 0.;
			if ((((+(HEAPF32[dsp + 20948060 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel1 = +(((((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20948060 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel1 = +(fSel0);
				
			}
			HEAPF32[dsp + 20948060 + (0 << 2) >> 2] = +(fSel1);
			HEAPF32[dsp + 20948068 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) + +(fSel1))))));
			HEAPF32[dsp + 20948076 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20948084 + (1 << 2) >> 2]) != +(fSlow48)) | 0)) | 0)?+(fSlow48):+(HEAPF32[dsp + 20948076 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948084 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948068 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20948076 + (1 << 2) >> 2]) != +(fSlow48)) | 0)) | 0)?+(fSlow48):+(HEAPF32[dsp + 20948084 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948092 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948092 + (1 << 2) >> 2])) + +(fSlow49));
			HEAPF32[dsp + 10846144 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(+(fTemp27) + +(+(+(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948076 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20948068 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948084 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20948068 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20948092 + (0 << 2) >> 2]))) + +(fTemp28));
			fTemp29 = +(+(+(+(fTemp27) + +(fTemp28)) * +(1. - +(HEAPF32[dsp + 20948052 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20948052 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20948100 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948100 + (1 << 2) >> 2])) + +(fSlow50));
			HEAPF32[dsp + 20948108 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948108 + (1 << 2) >> 2])) + +(fSlow51));
			fTemp30 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20948108 + (0 << 2) >> 2]))));
			fTemp31 = +(1. - +(fTemp30));
			HEAPF32[dsp + 20948116 + (0 << 2) >> 2] = +(+(+(fSlow52) * +(HEAPF32[dsp + 20948148 + (1 << 2) >> 2])) + +(+(fTemp29) + +(+(fTemp31) * +(HEAPF32[dsp + 20948116 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20948124 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948116 + (0 << 2) >> 2]) + +(+(fTemp31) * +(HEAPF32[dsp + 20948124 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948132 + (0 << 2) >> 2] = +(+(+(fTemp31) * +(HEAPF32[dsp + 20948132 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20948124 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20948140 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20948140 + (1 << 2) >> 2]) * +(fTemp31)) + +(HEAPF32[dsp + 20948132 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20948148 + (0 << 2) >> 2] = +(+(powf(+(fTemp30), 4.)) * +(HEAPF32[dsp + 20948140 + (0 << 2) >> 2]));
			fTemp32 = +(+(+(fTemp29) * +(1. - +(HEAPF32[dsp + 20948100 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20948100 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20948148 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948156 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948156 + (1 << 2) >> 2])) + +(fSlow53));
			HEAPF32[dsp + 20948164 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948164 + (1 << 2) >> 2])) + +(fSlow55));
			HEAPF32[dsp + 20948172 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948172 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948180 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19256800 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948172 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948180 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19256800 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948188 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948188 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948196 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19289568 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948188 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948196 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19289568 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948204 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948204 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948212 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19322336 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948204 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948212 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19322336 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948220 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948220 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948228 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19355104 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948220 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948228 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19355104 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948236 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948236 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948244 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19387872 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948236 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948244 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19387872 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948252 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948252 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948260 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19420640 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948252 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948260 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19420640 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948268 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948268 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948276 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19453408 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948268 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948276 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19453408 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948284 + (0 << 2) >> 2] = +(+(+(fSlow58) * +(HEAPF32[dsp + 20948284 + (1 << 2) >> 2])) + +(+(fSlow57) * +(HEAPF32[dsp + 20948292 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19486176 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp32) + +(+(fSlow56) * +(HEAPF32[dsp + 20948284 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948292 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19486176 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp33 = +(+(HEAPF32[dsp + 20948180 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948196 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948212 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948228 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948244 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948260 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948276 + (0 << 2) >> 2]) + +(+(0.5 * +(HEAPF32[dsp + 20948300 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20948292 + (0 << 2) >> 2])))))))));
			HEAPF32[dsp + 20837856 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp33);
			HEAPF32[dsp + 20948300 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20837856 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec61 = +(0. - +(0.5 * +(fTemp33)));
			fTemp34 = +(+(fRec61) + +(+(0.5 * +(HEAPF32[dsp + 20948308 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20948300 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20841952 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp34);
			HEAPF32[dsp + 20948308 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20841952 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec59 = +(0. - +(0.5 * +(fTemp34)));
			fTemp35 = +(+(fRec59) + +(+(0.5 * +(HEAPF32[dsp + 20948316 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20948308 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20846048 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp35);
			HEAPF32[dsp + 20948316 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20846048 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec57 = +(0. - +(0.5 * +(fTemp35)));
			fTemp36 = +(+(fRec57) + +(+(0.5 * +(HEAPF32[dsp + 20948324 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20948316 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20850144 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp36);
			HEAPF32[dsp + 20948324 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20850144 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec55 = +(0. - +(0.5 * +(fTemp36)));
			fTemp37 = +(+(HEAPF32[dsp + 20947764 + (0 << 2) >> 2]) * +(+(+(fTemp32) * +(1. - +(HEAPF32[dsp + 20948156 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20948156 + (0 << 2) >> 2]) * +(+(+(fTemp32) * +(1. - +(HEAPF32[dsp + 20948164 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20948164 + (0 << 2) >> 2]) * +(+(HEAPF32[dsp + 20948324 + (1 << 2) >> 2]) + +(fRec55)))))));
			HEAPF32[dsp + 20948332 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20948332 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp37)))));
			HEAPF32[dsp + 20950612 >> 2] = +(+(HEAPF32[dsp + 20948332 + (0 << 2) >> 2]));
			fTemp38 = +(1. + +(1.38629 * +(0. - +(+(fTemp4) - 1.))));
			fTemp39 = +(+(+(faustpower2_f(+(fTemp1))) * +((iTemp2 | 0))) + +((iTemp3 | 0)));
			HEAPF32[dsp + 20948340 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948340 + (1 << 2) >> 2])) + +(fSlow59));
			fTemp40 = +(0. - +(HEAPF32[dsp + 20948340 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20948348 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948348 + (1 << 2) >> 2])) + +(fSlow60));
			fTemp41 = +(atan2f(+(fTemp40), +(HEAPF32[dsp + 20948348 + (0 << 2) >> 2])));
			fTemp42 = +(3. * +(fTemp41));
			fTemp43 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20948348 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp40)))), 0.5));
			iTemp44 = ((+(fTemp43) > 1.) | 0);
			iTemp45 = ((+(fTemp43) < 1.) | 0);
			fTemp46 = +(+((iTemp44 | 0)) + +(+(fTemp43) * +((iTemp45 | 0))));
			fTemp47 = +(1.38629 * +(fTemp46));
			fTemp48 = +(+(fTemp47) - 1.09861);
			fTemp49 = +(3.47606 * +(fTemp48));
			fTemp50 = +(+(3.47606 * +(+(+(fTemp48) * +(((+(fTemp49) > 0.) | 0))) * +(((+(fTemp49) <= 1.) | 0)))) + +(((+(fTemp49) > 1.) | 0)));
			HEAPF32[dsp + 20948356 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948356 + (1 << 2) >> 2])) + +(fSlow61));
			HEAPF32[dsp + 20948364 + (0 << 2) >> 2] = +(+(fSlow62) + +(0.999 * +(HEAPF32[dsp + 20948364 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948372 + (0 << 2) >> 2] = +(+(fSlow63) + +(0.999 * +(HEAPF32[dsp + 20948372 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948380 + (0 << 2) >> 2] = +(+(fSlow64) + +(0.999 * +(HEAPF32[dsp + 20948380 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948388 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow65):+(HEAPF32[dsp + 20948388 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948396 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948396 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20948388 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20948404 + (0 << 2) >> 2] = +(+(fSlow66) + +(0.999 * +(HEAPF32[dsp + 20948404 + (1 << 2) >> 2])));
			iTemp51 = ((+(HEAPF32[dsp + 20948388 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20948412 + (0 << 2) >> 2] = (iTemp51 | 0);
			HEAP32[dsp + 20948420 + (0 << 2) >> 2] = (((imul((iTemp51 | 0), (((iTemp51 | 0) + (HEAP32[dsp + 20948420 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			fTemp52 = +(+(0.25 * +(HEAPF32[dsp + 20947664 + (0 << 2) >> 2])) + +(+(+(0.559017 * +(HEAPF32[dsp + 20947640 + (0 << 2) >> 2])) + +(+(+(+(+(0.968246 * +(HEAPF32[dsp + 20947580 + (0 << 2) >> 2])) + +(0.901388 * +(HEAPF32[dsp + 20947592 + (0 << 2) >> 2]))) + +(0.829156 * +(HEAPF32[dsp + 20947604 + (0 << 2) >> 2]))) + +(0.75 * +(HEAPF32[dsp + 20947616 + (0 << 2) >> 2]))) + +(0.661438 * +(HEAPF32[dsp + 20947628 + (0 << 2) >> 2])))) + +(0.433013 * +(HEAPF32[dsp + 20947652 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 2026144 + ((HEAP32[dsp + 20948420 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp52);
			iTemp53 = ((+(HEAPF32[dsp + 20948388 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20948428 + (0 << 2) >> 2] = (imul((((iTemp51 | 0) + (HEAP32[dsp + 20948428 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp51 | 0) > (HEAP32[dsp + 20948412 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20948436 + (0 << 2) >> 2] = (((imul((iTemp53 | 0), (((iTemp53 | 0) + (HEAP32[dsp + 20948436 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20948428 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20948444 + (0 << 2) >> 2] = +(+(fSlow85) + +(0.99 * +(HEAPF32[dsp + 20948444 + (1 << 2) >> 2])));
			fTemp54 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20948396 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 2026144 + (((max(~~((HEAP32[dsp + 20948420 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948436 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20948444 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20947480 + (0 << 2) >> 2] = +(+(+(fTemp54) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp54)))))) - +(+(fSlow82) * +(+(+(+(+(fSlow89) * +(HEAPF32[dsp + 20947480 + (1 << 2) >> 2])) + +(+(fSlow91) * +(HEAPF32[dsp + 20947480 + (2 << 2) >> 2]))) + +(+(fSlow92) * +(HEAPF32[dsp + 20947480 + (3 << 2) >> 2]))) + +(+(fSlow93) * +(HEAPF32[dsp + 20947480 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947688 + (0 << 2) >> 2] = +(+(+(fSlow82) * +(+(+(+(+(+(fSlow84) * +(HEAPF32[dsp + 20947480 + (0 << 2) >> 2])) + +(+(fSlow94) * +(HEAPF32[dsp + 20947480 + (1 << 2) >> 2]))) + +(+(fSlow95) * +(HEAPF32[dsp + 20947480 + (2 << 2) >> 2]))) + +(+(fSlow94) * +(HEAPF32[dsp + 20947480 + (3 << 2) >> 2]))) + +(+(fSlow97) * +(HEAPF32[dsp + 20947480 + (4 << 2) >> 2])))) - +(+(fSlow74) * +(+(+(fSlow98) * +(HEAPF32[dsp + 20947688 + (1 << 2) >> 2])) + +(+(fSlow99) * +(HEAPF32[dsp + 20947688 + (2 << 2) >> 2])))));
			fTemp55 = +(+(+(+(HEAPF32[dsp + 20948396 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20948404 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 2026144 + (((max(~~((HEAP32[dsp + 20948420 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948436 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) + +(+(fSlow74) * +(+(HEAPF32[dsp + 20948404 + (0 << 2) >> 2]) * +(+(+(fSlow76) * +(HEAPF32[dsp + 20947688 + (2 << 2) >> 2])) + +(+(fSlow75) * +(HEAPF32[dsp + 20947688 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 17490800 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp55);
			HEAPF32[dsp + 20948452 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20948452 + (1 << 2) >> 2]) % +(fSlow100)) + +(fSlow101));
			HEAPF32[dsp + 20948460 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20948452 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20948452 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20948460 + (1 << 2) >> 2]));
			fTemp56 = +(+(+(1. - +(HEAPF32[dsp + 20948380 + (0 << 2) >> 2])) * +(fTemp55)) + +(+(+(HEAPF32[dsp + 20948380 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 17490800 + (~~(+(+(HEAPF32[dsp + 20948452 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20948460 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow102) * +(HEAPF32[dsp + 20948452 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20948468 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948468 + (1 << 2) >> 2])) + +(fSlow103));
			fSel2 = 0.;
			if ((((((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow104) != +(HEAPF32[dsp + 20948492 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel2 = 0.00390625;
				
			} else {
				fSel2 = +(((((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow104) != +(HEAPF32[dsp + 20948500 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel3 = 0.;
			if ((((+(HEAPF32[dsp + 20948476 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel3 = +(((((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20948476 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel3 = +(fSel2);
				
			}
			HEAPF32[dsp + 20948476 + (0 << 2) >> 2] = +(fSel3);
			HEAPF32[dsp + 20948484 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) + +(fSel3))))));
			HEAPF32[dsp + 20948492 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20948500 + (1 << 2) >> 2]) != +(fSlow104)) | 0)) | 0)?+(fSlow104):+(HEAPF32[dsp + 20948492 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948500 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948484 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20948492 + (1 << 2) >> 2]) != +(fSlow104)) | 0)) | 0)?+(fSlow104):+(HEAPF32[dsp + 20948500 + (1 << 2) >> 2]));
			HEAPF32[dsp + 11894720 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp56) + +(+(HEAPF32[dsp + 20948468 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948484 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948492 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 20948484 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948500 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp57 = +(+(+(HEAPF32[dsp + 20948372 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 20948372 + (0 << 2) >> 2])) * +(fTemp56)));
			HEAPF32[dsp + 20948508 + (0 << 2) >> 2] = +(+(fSlow105) + +(0.999 * +(HEAPF32[dsp + 20948508 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948516 + (0 << 2) >> 2] = +(+(fSlow107) + +(0.99 * +(HEAPF32[dsp + 20948516 + (1 << 2) >> 2])));
			fTemp58 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20948516 + (0 << 2) >> 2]))));
			fTemp59 = +(1. - +(fTemp58));
			HEAPF32[dsp + 20948524 + (0 << 2) >> 2] = +(+(+(fSlow106) * +(HEAPF32[dsp + 20948556 + (1 << 2) >> 2])) + +(+(fTemp57) + +(+(fTemp59) * +(HEAPF32[dsp + 20948524 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20948532 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948524 + (0 << 2) >> 2]) + +(+(fTemp59) * +(HEAPF32[dsp + 20948532 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948540 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948532 + (0 << 2) >> 2]) + +(+(fTemp59) * +(HEAPF32[dsp + 20948540 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948548 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948540 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948548 + (1 << 2) >> 2]) * +(fTemp59)));
			HEAPF32[dsp + 20948556 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948548 + (0 << 2) >> 2]) * +(powf(+(fTemp58), 4.)));
			fTemp60 = +(+(+(fTemp57) * +(1. - +(HEAPF32[dsp + 20948508 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20948508 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20948556 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948564 + (0 << 2) >> 2] = +(+(fSlow109) + +(0.999 * +(HEAPF32[dsp + 20948564 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948572 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948572 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948580 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19518944 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948572 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948580 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19518944 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948588 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948588 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948596 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19551712 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948588 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948596 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19551712 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948604 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948604 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948612 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19584480 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948604 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948612 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19584480 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948620 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948620 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948628 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19617248 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948620 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948628 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19617248 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948636 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948636 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948644 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19650016 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948636 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948644 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19650016 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948652 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948652 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948660 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19682784 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948652 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948660 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19682784 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948668 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948668 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948676 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19715552 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948668 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948676 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19715552 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948684 + (0 << 2) >> 2] = +(+(+(fSlow112) * +(HEAPF32[dsp + 20948684 + (1 << 2) >> 2])) + +(+(fSlow111) * +(HEAPF32[dsp + 20948692 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19748320 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp60) + +(+(fSlow110) * +(HEAPF32[dsp + 20948684 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948692 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19748320 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp61 = +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 20948580 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 20948596 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948612 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948628 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948644 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948660 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948676 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20948692 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20948700 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20854240 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp61);
			HEAPF32[dsp + 20948700 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20854240 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec117 = +(0. - +(0.5 * +(fTemp61)));
			fTemp62 = +(+(HEAPF32[dsp + 20948700 + (1 << 2) >> 2]) + +(+(fRec117) + +(0.5 * +(HEAPF32[dsp + 20948708 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20858336 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp62);
			HEAPF32[dsp + 20948708 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20858336 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec115 = +(0. - +(0.5 * +(fTemp62)));
			fTemp63 = +(+(HEAPF32[dsp + 20948708 + (1 << 2) >> 2]) + +(+(fRec115) + +(0.5 * +(HEAPF32[dsp + 20948716 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20862432 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp63);
			HEAPF32[dsp + 20948716 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20862432 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec113 = +(0. - +(0.5 * +(fTemp63)));
			fTemp64 = +(+(HEAPF32[dsp + 20948716 + (1 << 2) >> 2]) + +(+(fRec113) + +(0.5 * +(HEAPF32[dsp + 20948724 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20866528 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp64);
			HEAPF32[dsp + 20948724 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20866528 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec111 = +(0. - +(0.5 * +(fTemp64)));
			fTemp65 = +(+(HEAPF32[dsp + 20948356 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948364 + (0 << 2) >> 2])) * +(fTemp60)) + +(+(HEAPF32[dsp + 20948364 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948564 + (0 << 2) >> 2])) * +(fTemp60)) + +(+(HEAPF32[dsp + 20948564 + (0 << 2) >> 2]) * +(+(fRec111) + +(HEAPF32[dsp + 20948724 + (1 << 2) >> 2])))))));
			HEAPF32[dsp + 20948732 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20948732 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp65)))));
			HEAPF32[dsp + 20950692 >> 2] = +(+(HEAPF32[dsp + 20948732 + (0 << 2) >> 2]));
			fTemp66 = +(1. + +(1.38629 * +(0. - +(+(fTemp46) - 1.))));
			fTemp67 = +(+(+(faustpower2_f(+(fTemp43))) * +((iTemp44 | 0))) + +((iTemp45 | 0)));
			HEAPF32[dsp + 20948740 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948740 + (1 << 2) >> 2])) + +(fSlow113));
			fTemp68 = +(0. - +(HEAPF32[dsp + 20948740 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20948748 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948748 + (1 << 2) >> 2])) + +(fSlow114));
			fTemp69 = +(atan2f(+(fTemp68), +(HEAPF32[dsp + 20948748 + (0 << 2) >> 2])));
			fTemp70 = +(3. * +(fTemp69));
			fTemp71 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20948748 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp68)))), 0.5));
			iTemp72 = ((+(fTemp71) > 1.) | 0);
			iTemp73 = ((+(fTemp71) < 1.) | 0);
			fTemp74 = +(+((iTemp72 | 0)) + +(+(fTemp71) * +((iTemp73 | 0))));
			fTemp75 = +(1.38629 * +(fTemp74));
			fTemp76 = +(+(fTemp75) - 1.09861);
			fTemp77 = +(3.47606 * +(fTemp76));
			fTemp78 = +(+(3.47606 * +(+(+(fTemp76) * +(((+(fTemp77) > 0.) | 0))) * +(((+(fTemp77) <= 1.) | 0)))) + +(((+(fTemp77) > 1.) | 0)));
			HEAPF32[dsp + 20948756 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20948756 + (1 << 2) >> 2])) + +(fSlow115));
			HEAPF32[dsp + 20948764 + (0 << 2) >> 2] = +(+(fSlow116) + +(0.999 * +(HEAPF32[dsp + 20948764 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948772 + (0 << 2) >> 2] = +(+(fSlow117) + +(0.999 * +(HEAPF32[dsp + 20948772 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948780 + (0 << 2) >> 2] = +(+(fSlow118) + +(0.999 * +(HEAPF32[dsp + 20948780 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948788 + (0 << 2) >> 2] = +(+(fSlow119) + +(0.999 * +(HEAPF32[dsp + 20948788 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948796 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow120):+(HEAPF32[dsp + 20948796 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948804 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948804 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20948796 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20948812 + (0 << 2) >> 2] = +(+(fSlow121) + +(0.999 * +(HEAPF32[dsp + 20948812 + (1 << 2) >> 2])));
			iTemp79 = ((+(HEAPF32[dsp + 20948796 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20948820 + (0 << 2) >> 2] = (iTemp79 | 0);
			HEAP32[dsp + 20948828 + (0 << 2) >> 2] = (((imul((iTemp79 | 0), (((iTemp79 | 0) + (HEAP32[dsp + 20948828 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 3790144 + ((HEAP32[dsp + 20948828 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp22);
			iTemp80 = ((+(HEAPF32[dsp + 20948796 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20948836 + (0 << 2) >> 2] = (imul((((iTemp79 | 0) + (HEAP32[dsp + 20948836 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp79 | 0) > (HEAP32[dsp + 20948820 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20948844 + (0 << 2) >> 2] = (((imul((iTemp80 | 0), (((iTemp80 | 0) + (HEAP32[dsp + 20948844 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20948836 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20948852 + (0 << 2) >> 2] = +(+(fSlow140) + +(0.99 * +(HEAPF32[dsp + 20948852 + (1 << 2) >> 2])));
			fTemp81 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20948804 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 3790144 + (((max(~~((HEAP32[dsp + 20948828 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948844 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20948852 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20947500 + (0 << 2) >> 2] = +(+(+(fTemp81) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp81)))))) - +(+(fSlow137) * +(+(+(+(+(fSlow144) * +(HEAPF32[dsp + 20947500 + (1 << 2) >> 2])) + +(+(fSlow146) * +(HEAPF32[dsp + 20947500 + (2 << 2) >> 2]))) + +(+(fSlow147) * +(HEAPF32[dsp + 20947500 + (3 << 2) >> 2]))) + +(+(fSlow148) * +(HEAPF32[dsp + 20947500 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947700 + (0 << 2) >> 2] = +(+(+(fSlow137) * +(+(+(+(+(+(fSlow139) * +(HEAPF32[dsp + 20947500 + (0 << 2) >> 2])) + +(+(fSlow149) * +(HEAPF32[dsp + 20947500 + (1 << 2) >> 2]))) + +(+(fSlow150) * +(HEAPF32[dsp + 20947500 + (2 << 2) >> 2]))) + +(+(fSlow149) * +(HEAPF32[dsp + 20947500 + (3 << 2) >> 2]))) + +(+(fSlow152) * +(HEAPF32[dsp + 20947500 + (4 << 2) >> 2])))) - +(+(fSlow129) * +(+(+(fSlow153) * +(HEAPF32[dsp + 20947700 + (1 << 2) >> 2])) + +(+(fSlow154) * +(HEAPF32[dsp + 20947700 + (2 << 2) >> 2])))));
			fTemp82 = +(+(+(+(HEAPF32[dsp + 20948804 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20948812 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 3790144 + (((max(~~((HEAP32[dsp + 20948828 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20948844 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) + +(+(fSlow129) * +(+(HEAPF32[dsp + 20948812 + (0 << 2) >> 2]) * +(+(+(fSlow131) * +(HEAPF32[dsp + 20947700 + (2 << 2) >> 2])) + +(+(fSlow130) * +(HEAPF32[dsp + 20947700 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 17844000 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp82);
			HEAPF32[dsp + 20948860 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20948860 + (1 << 2) >> 2]) % +(fSlow155)) + +(fSlow156));
			HEAPF32[dsp + 20948868 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20948860 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20948860 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20948868 + (1 << 2) >> 2]));
			fTemp83 = +(+(+(1. - +(HEAPF32[dsp + 20948788 + (0 << 2) >> 2])) * +(fTemp82)) + +(+(+(HEAPF32[dsp + 20948788 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 17844000 + (~~(+(+(HEAPF32[dsp + 20948860 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20948868 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow157) * +(HEAPF32[dsp + 20948860 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20948876 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20948876 + (1 << 2) >> 2])) + +(fSlow158));
			fSel4 = 0.;
			if ((((((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow159) != +(HEAPF32[dsp + 20948900 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel4 = 0.00390625;
				
			} else {
				fSel4 = +(((((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow159) != +(HEAPF32[dsp + 20948908 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel5 = 0.;
			if ((((+(HEAPF32[dsp + 20948884 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel5 = +(((((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20948884 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel5 = +(fSel4);
				
			}
			HEAPF32[dsp + 20948884 + (0 << 2) >> 2] = +(fSel5);
			HEAPF32[dsp + 20948892 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) + +(fSel5))))));
			HEAPF32[dsp + 20948900 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20948908 + (1 << 2) >> 2]) != +(fSlow159)) | 0)) | 0)?+(fSlow159):+(HEAPF32[dsp + 20948900 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20948908 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20948892 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20948900 + (1 << 2) >> 2]) != +(fSlow159)) | 0)) | 0)?+(fSlow159):+(HEAPF32[dsp + 20948908 + (1 << 2) >> 2]));
			HEAPF32[dsp + 12943296 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp83) + +(+(HEAPF32[dsp + 20948876 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948892 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948900 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 20948892 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20948908 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp84 = +(+(+(1. - +(HEAPF32[dsp + 20948780 + (0 << 2) >> 2])) * +(fTemp83)) + +(+(HEAPF32[dsp + 20948780 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20948916 + (0 << 2) >> 2] = +(+(fSlow161) + +(0.99 * +(HEAPF32[dsp + 20948916 + (1 << 2) >> 2])));
			fTemp85 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20948916 + (0 << 2) >> 2]))));
			fTemp86 = +(1. - +(fTemp85));
			HEAPF32[dsp + 20948924 + (0 << 2) >> 2] = +(+(+(fSlow160) * +(HEAPF32[dsp + 20948956 + (1 << 2) >> 2])) + +(+(fTemp84) + +(+(fTemp86) * +(HEAPF32[dsp + 20948924 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20948932 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948924 + (0 << 2) >> 2]) + +(+(fTemp86) * +(HEAPF32[dsp + 20948932 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948940 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948932 + (0 << 2) >> 2]) + +(+(fTemp86) * +(HEAPF32[dsp + 20948940 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948948 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948940 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20948948 + (1 << 2) >> 2]) * +(fTemp86)));
			HEAPF32[dsp + 20948956 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20948948 + (0 << 2) >> 2]) * +(powf(+(fTemp85), 4.)));
			fTemp87 = +(+(+(1. - +(HEAPF32[dsp + 20948772 + (0 << 2) >> 2])) * +(fTemp84)) + +(+(HEAPF32[dsp + 20948772 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20948956 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948964 + (0 << 2) >> 2] = +(+(fSlow163) + +(0.999 * +(HEAPF32[dsp + 20948964 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20948972 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20948972 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20948980 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19781088 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20948972 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948980 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19781088 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20948988 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20948988 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20948996 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19813856 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20948988 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20948996 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19813856 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949004 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949004 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949012 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19846624 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949004 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949012 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19846624 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949020 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949020 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949028 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19879392 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949020 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949028 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19879392 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949036 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949036 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949044 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19912160 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949036 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949044 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19912160 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949052 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949052 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949060 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19944928 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949052 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949060 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19944928 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949068 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949068 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949076 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19977696 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949068 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949076 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19977696 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949084 + (0 << 2) >> 2] = +(+(+(fSlow166) * +(HEAPF32[dsp + 20949084 + (1 << 2) >> 2])) + +(+(fSlow165) * +(HEAPF32[dsp + 20949092 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20010464 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp87) + +(+(fSlow164) * +(HEAPF32[dsp + 20949084 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949092 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20010464 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp88 = +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 20948980 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 20948996 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949012 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949028 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949044 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949060 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949076 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949092 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20949100 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20870624 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp88);
			HEAPF32[dsp + 20949100 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20870624 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec173 = +(0. - +(0.5 * +(fTemp88)));
			fTemp89 = +(+(HEAPF32[dsp + 20949100 + (1 << 2) >> 2]) + +(+(fRec173) + +(0.5 * +(HEAPF32[dsp + 20949108 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20874720 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp89);
			HEAPF32[dsp + 20949108 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20874720 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec171 = +(0. - +(0.5 * +(fTemp89)));
			fTemp90 = +(+(HEAPF32[dsp + 20949108 + (1 << 2) >> 2]) + +(+(fRec171) + +(0.5 * +(HEAPF32[dsp + 20949116 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20878816 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp90);
			HEAPF32[dsp + 20949116 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20878816 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec169 = +(0. - +(0.5 * +(fTemp90)));
			fTemp91 = +(+(HEAPF32[dsp + 20949116 + (1 << 2) >> 2]) + +(+(fRec169) + +(0.5 * +(HEAPF32[dsp + 20949124 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20882912 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp91);
			HEAPF32[dsp + 20949124 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20882912 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec167 = +(0. - +(0.5 * +(fTemp91)));
			fTemp92 = +(+(HEAPF32[dsp + 20948756 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948764 + (0 << 2) >> 2])) * +(fTemp87)) + +(+(HEAPF32[dsp + 20948764 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20948964 + (0 << 2) >> 2])) * +(fTemp87)) + +(+(HEAPF32[dsp + 20948964 + (0 << 2) >> 2]) * +(+(fRec167) + +(HEAPF32[dsp + 20949124 + (1 << 2) >> 2])))))));
			HEAPF32[dsp + 20949132 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20949132 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp92)))));
			HEAPF32[dsp + 20950772 >> 2] = +(+(HEAPF32[dsp + 20949132 + (0 << 2) >> 2]));
			fTemp93 = +(1. + +(1.38629 * +(0. - +(+(fTemp74) - 1.))));
			fTemp94 = +(+(+(faustpower2_f(+(fTemp71))) * +((iTemp72 | 0))) + +((iTemp73 | 0)));
			HEAPF32[dsp + 20949140 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949140 + (1 << 2) >> 2])) + +(fSlow167));
			fTemp95 = +(0. - +(HEAPF32[dsp + 20949140 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949148 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949148 + (1 << 2) >> 2])) + +(fSlow168));
			fTemp96 = +(atan2f(+(fTemp95), +(HEAPF32[dsp + 20949148 + (0 << 2) >> 2])));
			fTemp97 = +(3. * +(fTemp96));
			fTemp98 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20949148 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp95)))), 0.5));
			iTemp99 = ((+(fTemp98) > 1.) | 0);
			iTemp100 = ((+(fTemp98) < 1.) | 0);
			fTemp101 = +(+((iTemp99 | 0)) + +(+(fTemp98) * +((iTemp100 | 0))));
			fTemp102 = +(1.38629 * +(fTemp101));
			fTemp103 = +(+(fTemp102) - 1.09861);
			fTemp104 = +(3.47606 * +(fTemp103));
			fTemp105 = +(+(3.47606 * +(+(+(fTemp103) * +(((+(fTemp104) > 0.) | 0))) * +(((+(fTemp104) <= 1.) | 0)))) + +(((+(fTemp104) > 1.) | 0)));
			HEAPF32[dsp + 20949156 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949156 + (1 << 2) >> 2])) + +(fSlow169));
			HEAPF32[dsp + 20949164 + (0 << 2) >> 2] = +(+(fSlow170) + +(0.999 * +(HEAPF32[dsp + 20949164 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949172 + (0 << 2) >> 2] = +(+(fSlow171) + +(0.999 * +(HEAPF32[dsp + 20949172 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949180 + (0 << 2) >> 2] = +(+(fSlow172) + +(0.999 * +(HEAPF32[dsp + 20949180 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949188 + (0 << 2) >> 2] = +(+(fSlow173) + +(0.999 * +(HEAPF32[dsp + 20949188 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949196 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow174):+(HEAPF32[dsp + 20949196 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20949204 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20949204 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20949196 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20949212 + (0 << 2) >> 2] = +(+(fSlow175) + +(0.999 * +(HEAPF32[dsp + 20949212 + (1 << 2) >> 2])));
			iTemp106 = ((+(HEAPF32[dsp + 20949196 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20949220 + (0 << 2) >> 2] = (iTemp106 | 0);
			HEAP32[dsp + 20949228 + (0 << 2) >> 2] = (((imul((iTemp106 | 0), (((iTemp106 | 0) + (HEAP32[dsp + 20949228 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 5554144 + ((HEAP32[dsp + 20949228 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp52);
			iTemp107 = ((+(HEAPF32[dsp + 20949196 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20949236 + (0 << 2) >> 2] = (imul((((iTemp106 | 0) + (HEAP32[dsp + 20949236 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp106 | 0) > (HEAP32[dsp + 20949220 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20949244 + (0 << 2) >> 2] = (((imul((iTemp107 | 0), (((iTemp107 | 0) + (HEAP32[dsp + 20949244 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20949236 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20949252 + (0 << 2) >> 2] = +(+(fSlow194) + +(0.99 * +(HEAPF32[dsp + 20949252 + (1 << 2) >> 2])));
			fTemp108 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20949204 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 5554144 + (((max(~~((HEAP32[dsp + 20949228 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949244 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20949252 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20947520 + (0 << 2) >> 2] = +(+(+(fTemp108) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp108)))))) - +(+(fSlow191) * +(+(+(+(+(fSlow198) * +(HEAPF32[dsp + 20947520 + (1 << 2) >> 2])) + +(+(fSlow200) * +(HEAPF32[dsp + 20947520 + (2 << 2) >> 2]))) + +(+(fSlow201) * +(HEAPF32[dsp + 20947520 + (3 << 2) >> 2]))) + +(+(fSlow202) * +(HEAPF32[dsp + 20947520 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947712 + (0 << 2) >> 2] = +(+(+(fSlow191) * +(+(+(+(+(+(fSlow193) * +(HEAPF32[dsp + 20947520 + (0 << 2) >> 2])) + +(+(fSlow203) * +(HEAPF32[dsp + 20947520 + (1 << 2) >> 2]))) + +(+(fSlow204) * +(HEAPF32[dsp + 20947520 + (2 << 2) >> 2]))) + +(+(fSlow203) * +(HEAPF32[dsp + 20947520 + (3 << 2) >> 2]))) + +(+(fSlow206) * +(HEAPF32[dsp + 20947520 + (4 << 2) >> 2])))) - +(+(fSlow183) * +(+(+(fSlow207) * +(HEAPF32[dsp + 20947712 + (1 << 2) >> 2])) + +(+(fSlow208) * +(HEAPF32[dsp + 20947712 + (2 << 2) >> 2])))));
			fTemp109 = +(+(+(+(HEAPF32[dsp + 20949204 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20949212 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 5554144 + (((max(~~((HEAP32[dsp + 20949228 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949244 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) + +(+(fSlow183) * +(+(HEAPF32[dsp + 20949212 + (0 << 2) >> 2]) * +(+(+(fSlow185) * +(HEAPF32[dsp + 20947712 + (2 << 2) >> 2])) + +(+(fSlow184) * +(HEAPF32[dsp + 20947712 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18197200 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp109);
			HEAPF32[dsp + 20949260 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20949260 + (1 << 2) >> 2]) % +(fSlow209)) + +(fSlow210));
			HEAPF32[dsp + 20949268 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20949260 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20949260 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20949268 + (1 << 2) >> 2]));
			fTemp110 = +(+(+(1. - +(HEAPF32[dsp + 20949188 + (0 << 2) >> 2])) * +(fTemp109)) + +(+(+(HEAPF32[dsp + 20949188 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18197200 + (~~(+(+(HEAPF32[dsp + 20949260 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20949268 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow211) * +(HEAPF32[dsp + 20949260 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20949276 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20949276 + (1 << 2) >> 2])) + +(fSlow212));
			fSel6 = 0.;
			if ((((((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow213) != +(HEAPF32[dsp + 20949300 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel6 = 0.00390625;
				
			} else {
				fSel6 = +(((((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow213) != +(HEAPF32[dsp + 20949308 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel7 = 0.;
			if ((((+(HEAPF32[dsp + 20949284 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel7 = +(((((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20949284 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel7 = +(fSel6);
				
			}
			HEAPF32[dsp + 20949284 + (0 << 2) >> 2] = +(fSel7);
			HEAPF32[dsp + 20949292 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) + +(fSel7))))));
			HEAPF32[dsp + 20949300 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20949308 + (1 << 2) >> 2]) != +(fSlow213)) | 0)) | 0)?+(fSlow213):+(HEAPF32[dsp + 20949300 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20949308 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20949292 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20949300 + (1 << 2) >> 2]) != +(fSlow213)) | 0)) | 0)?+(fSlow213):+(HEAPF32[dsp + 20949308 + (1 << 2) >> 2]));
			HEAPF32[dsp + 13991872 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp110) + +(+(HEAPF32[dsp + 20949276 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20949292 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20949300 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 20949292 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20949308 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp111 = +(+(+(1. - +(HEAPF32[dsp + 20949180 + (0 << 2) >> 2])) * +(fTemp110)) + +(+(HEAPF32[dsp + 20949180 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20949316 + (0 << 2) >> 2] = +(+(fSlow215) + +(0.99 * +(HEAPF32[dsp + 20949316 + (1 << 2) >> 2])));
			fTemp112 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20949316 + (0 << 2) >> 2]))));
			fTemp113 = +(1. - +(fTemp112));
			HEAPF32[dsp + 20949324 + (0 << 2) >> 2] = +(+(+(fSlow214) * +(HEAPF32[dsp + 20949356 + (1 << 2) >> 2])) + +(+(fTemp111) + +(+(fTemp113) * +(HEAPF32[dsp + 20949324 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20949332 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20949324 + (0 << 2) >> 2]) + +(+(fTemp113) * +(HEAPF32[dsp + 20949332 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949340 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20949332 + (0 << 2) >> 2]) + +(+(fTemp113) * +(HEAPF32[dsp + 20949340 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949348 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20949340 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20949348 + (1 << 2) >> 2]) * +(fTemp113)));
			HEAPF32[dsp + 20949356 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20949348 + (0 << 2) >> 2]) * +(powf(+(fTemp112), 4.)));
			fTemp114 = +(+(+(1. - +(HEAPF32[dsp + 20949172 + (0 << 2) >> 2])) * +(fTemp111)) + +(+(HEAPF32[dsp + 20949172 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20949356 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949364 + (0 << 2) >> 2] = +(+(fSlow217) + +(0.999 * +(HEAPF32[dsp + 20949364 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949372 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949372 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949380 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20043232 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949372 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949380 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20043232 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949388 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949388 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949396 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20076000 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949388 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949396 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20076000 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949404 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949404 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949412 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20108768 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949404 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949412 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20108768 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949420 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949420 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949428 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20141536 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949420 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949428 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20141536 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949436 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949436 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949444 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20174304 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949436 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949444 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20174304 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949452 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949452 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949460 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20207072 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949452 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949460 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20207072 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949468 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949468 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949476 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20239840 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949468 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949476 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20239840 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949484 + (0 << 2) >> 2] = +(+(+(fSlow220) * +(HEAPF32[dsp + 20949484 + (1 << 2) >> 2])) + +(+(fSlow219) * +(HEAPF32[dsp + 20949492 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20272608 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp114) + +(+(fSlow218) * +(HEAPF32[dsp + 20949484 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949492 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20272608 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp115 = +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 20949380 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 20949396 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949412 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949428 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949444 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949460 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949476 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949492 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20949500 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20887008 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp115);
			HEAPF32[dsp + 20949500 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20887008 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec229 = +(0. - +(0.5 * +(fTemp115)));
			fTemp116 = +(+(HEAPF32[dsp + 20949500 + (1 << 2) >> 2]) + +(+(fRec229) + +(0.5 * +(HEAPF32[dsp + 20949508 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20891104 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp116);
			HEAPF32[dsp + 20949508 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20891104 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec227 = +(0. - +(0.5 * +(fTemp116)));
			fTemp117 = +(+(HEAPF32[dsp + 20949508 + (1 << 2) >> 2]) + +(+(fRec227) + +(0.5 * +(HEAPF32[dsp + 20949516 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20895200 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp117);
			HEAPF32[dsp + 20949516 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20895200 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec225 = +(0. - +(0.5 * +(fTemp117)));
			fTemp118 = +(+(HEAPF32[dsp + 20949516 + (1 << 2) >> 2]) + +(+(fRec225) + +(0.5 * +(HEAPF32[dsp + 20949524 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20899296 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp118);
			HEAPF32[dsp + 20949524 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20899296 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec223 = +(0. - +(0.5 * +(fTemp118)));
			fTemp119 = +(+(HEAPF32[dsp + 20949156 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20949164 + (0 << 2) >> 2])) * +(fTemp114)) + +(+(HEAPF32[dsp + 20949164 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20949364 + (0 << 2) >> 2])) * +(fTemp114)) + +(+(HEAPF32[dsp + 20949364 + (0 << 2) >> 2]) * +(+(fRec223) + +(HEAPF32[dsp + 20949524 + (1 << 2) >> 2])))))));
			HEAPF32[dsp + 20949532 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20949532 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp119)))));
			HEAPF32[dsp + 20950852 >> 2] = +(+(HEAPF32[dsp + 20949532 + (0 << 2) >> 2]));
			fTemp120 = +(1. + +(1.38629 * +(0. - +(+(fTemp101) - 1.))));
			fTemp121 = +(+(+(faustpower2_f(+(fTemp98))) * +((iTemp99 | 0))) + +((iTemp100 | 0)));
			HEAPF32[dsp + 20949540 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949540 + (1 << 2) >> 2])) + +(fSlow221));
			fTemp122 = +(0. - +(HEAPF32[dsp + 20949540 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949548 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949548 + (1 << 2) >> 2])) + +(fSlow222));
			fTemp123 = +(atan2f(+(fTemp122), +(HEAPF32[dsp + 20949548 + (0 << 2) >> 2])));
			fTemp124 = +(3. * +(fTemp123));
			HEAPF32[dsp + 20949556 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow241):+(HEAPF32[dsp + 20949556 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20949564 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20949564 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20949556 + (0 << 2) >> 2])))));
			iTemp125 = ((+(HEAPF32[dsp + 20949556 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20949572 + (0 << 2) >> 2] = (iTemp125 | 0);
			HEAP32[dsp + 20949580 + (0 << 2) >> 2] = (((imul((iTemp125 | 0), (((iTemp125 | 0) + (HEAP32[dsp + 20949580 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 7318144 + ((HEAP32[dsp + 20949580 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp22);
			iTemp126 = ((+(HEAPF32[dsp + 20949556 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20949588 + (0 << 2) >> 2] = (imul((((iTemp125 | 0) + (HEAP32[dsp + 20949588 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp125 | 0) > (HEAP32[dsp + 20949572 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20949596 + (0 << 2) >> 2] = (((imul((iTemp126 | 0), (((iTemp126 | 0) + (HEAP32[dsp + 20949596 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20949588 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20949604 + (0 << 2) >> 2] = +(+(fSlow242) + +(0.99 * +(HEAPF32[dsp + 20949604 + (1 << 2) >> 2])));
			fTemp127 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20949564 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 7318144 + (((max(~~((HEAP32[dsp + 20949580 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949596 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20949604 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20947540 + (0 << 2) >> 2] = +(+(+(fTemp127) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp127)))))) - +(+(fSlow238) * +(+(+(+(+(fSlow246) * +(HEAPF32[dsp + 20947540 + (1 << 2) >> 2])) + +(+(fSlow248) * +(HEAPF32[dsp + 20947540 + (2 << 2) >> 2]))) + +(+(fSlow249) * +(HEAPF32[dsp + 20947540 + (3 << 2) >> 2]))) + +(+(fSlow250) * +(HEAPF32[dsp + 20947540 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947724 + (0 << 2) >> 2] = +(+(+(fSlow238) * +(+(+(+(+(+(fSlow240) * +(HEAPF32[dsp + 20947540 + (0 << 2) >> 2])) + +(+(fSlow251) * +(HEAPF32[dsp + 20947540 + (1 << 2) >> 2]))) + +(+(fSlow252) * +(HEAPF32[dsp + 20947540 + (2 << 2) >> 2]))) + +(+(fSlow251) * +(HEAPF32[dsp + 20947540 + (3 << 2) >> 2]))) + +(+(fSlow254) * +(HEAPF32[dsp + 20947540 + (4 << 2) >> 2])))) - +(+(fSlow230) * +(+(+(fSlow255) * +(HEAPF32[dsp + 20947724 + (1 << 2) >> 2])) + +(+(fSlow256) * +(HEAPF32[dsp + 20947724 + (2 << 2) >> 2])))));
			HEAPF32[dsp + 20949612 + (0 << 2) >> 2] = +(+(fSlow257) + +(0.999 * +(HEAPF32[dsp + 20949612 + (1 << 2) >> 2])));
			fTemp128 = +(+(+(fSlow230) * +(+(+(+(fSlow232) * +(HEAPF32[dsp + 20947724 + (2 << 2) >> 2])) + +(+(fSlow231) * +(HEAPF32[dsp + 20947724 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20949612 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20949564 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20949612 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 7318144 + (((max(~~((HEAP32[dsp + 20949580 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949596 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20949620 + (0 << 2) >> 2] = +(+(fSlow258) + +(0.999 * +(HEAPF32[dsp + 20949620 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18550400 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp128);
			HEAPF32[dsp + 20949628 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20949628 + (1 << 2) >> 2]) % +(fSlow259)) + +(fSlow260));
			HEAPF32[dsp + 20949636 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20949628 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20949628 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20949636 + (1 << 2) >> 2]));
			fTemp129 = +(+(+(fTemp128) * +(1. - +(HEAPF32[dsp + 20949620 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18550400 + (~~(+(+(HEAPF32[dsp + 20949628 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20949636 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow261) * +(HEAPF32[dsp + 20949628 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20949620 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949644 + (0 << 2) >> 2] = +(+(fSlow262) + +(0.999 * +(HEAPF32[dsp + 20949644 + (1 << 2) >> 2])));
			fSel8 = 0.;
			if ((((((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow263) != +(HEAPF32[dsp + 20949668 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel8 = 0.00390625;
				
			} else {
				fSel8 = +(((((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow263) != +(HEAPF32[dsp + 20949676 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel9 = 0.;
			if ((((+(HEAPF32[dsp + 20949652 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel9 = +(((((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20949652 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel9 = +(fSel8);
				
			}
			HEAPF32[dsp + 20949652 + (0 << 2) >> 2] = +(fSel9);
			HEAPF32[dsp + 20949660 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) + +(fSel9))))));
			HEAPF32[dsp + 20949668 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20949676 + (1 << 2) >> 2]) != +(fSlow263)) | 0)) | 0)?+(fSlow263):+(HEAPF32[dsp + 20949668 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20949676 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20949660 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20949668 + (1 << 2) >> 2]) != +(fSlow263)) | 0)) | 0)?+(fSlow263):+(HEAPF32[dsp + 20949676 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20949684 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20949684 + (1 << 2) >> 2])) + +(fSlow264));
			HEAPF32[dsp + 15040448 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp129) + +(+(+(+(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20949668 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20949660 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20949676 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20949660 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20949684 + (0 << 2) >> 2])));
			fTemp130 = +(+(+(fTemp129) * +(1. - +(HEAPF32[dsp + 20949644 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20949644 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20949692 + (0 << 2) >> 2] = +(+(fSlow265) + +(0.999 * +(HEAPF32[dsp + 20949692 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949700 + (0 << 2) >> 2] = +(+(fSlow266) + +(0.99 * +(HEAPF32[dsp + 20949700 + (1 << 2) >> 2])));
			fTemp131 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20949700 + (0 << 2) >> 2]))));
			fTemp132 = +(1. - +(fTemp131));
			HEAPF32[dsp + 20949708 + (0 << 2) >> 2] = +(+(+(fSlow267) * +(HEAPF32[dsp + 20949740 + (1 << 2) >> 2])) + +(+(fTemp130) + +(+(fTemp132) * +(HEAPF32[dsp + 20949708 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20949716 + (0 << 2) >> 2] = +(+(+(fTemp132) * +(HEAPF32[dsp + 20949716 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949708 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949724 + (0 << 2) >> 2] = +(+(+(fTemp132) * +(HEAPF32[dsp + 20949724 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949716 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949732 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20949732 + (1 << 2) >> 2]) * +(fTemp132)) + +(HEAPF32[dsp + 20949724 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949740 + (0 << 2) >> 2] = +(+(powf(+(fTemp131), 4.)) * +(HEAPF32[dsp + 20949732 + (0 << 2) >> 2]));
			fTemp133 = +(+(+(fTemp130) * +(1. - +(HEAPF32[dsp + 20949692 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20949692 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20949740 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949748 + (0 << 2) >> 2] = +(+(fSlow268) + +(0.999 * +(HEAPF32[dsp + 20949748 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949756 + (0 << 2) >> 2] = +(+(fSlow270) + +(0.999 * +(HEAPF32[dsp + 20949756 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20949764 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949764 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949772 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20305376 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949764 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949772 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20305376 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949780 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949780 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949788 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20338144 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949780 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949788 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20338144 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949796 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949796 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949804 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20370912 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949796 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949804 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20370912 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949812 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949812 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949820 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20403680 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949812 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949820 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20403680 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949828 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949828 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949836 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20436448 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949828 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949836 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20436448 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949844 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949844 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949852 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20469216 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949844 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949852 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20469216 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949860 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949860 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949868 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20501984 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949860 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949868 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20501984 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20949876 + (0 << 2) >> 2] = +(+(+(fSlow273) * +(HEAPF32[dsp + 20949876 + (1 << 2) >> 2])) + +(+(fSlow272) * +(HEAPF32[dsp + 20949884 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20534752 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(fSlow271) * +(HEAPF32[dsp + 20949876 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20949884 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20534752 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp134 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 20949892 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949772 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949788 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949804 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949820 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949836 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949852 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949868 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20949884 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20903392 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp134);
			HEAPF32[dsp + 20949892 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20903392 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec284 = +(0. - +(0.5 * +(fTemp134)));
			fTemp135 = +(+(+(0.5 * +(HEAPF32[dsp + 20949900 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949892 + (1 << 2) >> 2])) + +(fRec284));
			HEAPF32[dsp + 20907488 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp135);
			HEAPF32[dsp + 20949900 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20907488 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec282 = +(0. - +(0.5 * +(fTemp135)));
			fTemp136 = +(+(+(0.5 * +(HEAPF32[dsp + 20949908 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949900 + (1 << 2) >> 2])) + +(fRec282));
			HEAPF32[dsp + 20911584 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp136);
			HEAPF32[dsp + 20949908 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20911584 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec280 = +(0. - +(0.5 * +(fTemp136)));
			fTemp137 = +(+(+(0.5 * +(HEAPF32[dsp + 20949916 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20949908 + (1 << 2) >> 2])) + +(fRec280));
			HEAPF32[dsp + 20915680 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp137);
			HEAPF32[dsp + 20949916 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20915680 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec278 = +(0. - +(0.5 * +(fTemp137)));
			HEAPF32[dsp + 20949924 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949924 + (1 << 2) >> 2])) + +(fSlow274));
			fTemp138 = +(+(+(+(fTemp133) * +(1. - +(HEAPF32[dsp + 20949748 + (0 << 2) >> 2]))) + +(+(+(+(fTemp133) * +(1. - +(HEAPF32[dsp + 20949756 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20949916 + (1 << 2) >> 2]) + +(fRec278)) * +(HEAPF32[dsp + 20949756 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20949748 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20949924 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20949932 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20949932 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp138)))));
			HEAPF32[dsp + 20950932 >> 2] = +(+(HEAPF32[dsp + 20949932 + (0 << 2) >> 2]));
			fTemp139 = +(powf(+(+(faustpower2_f(+(fTemp122))) + +(faustpower2_f(+(HEAPF32[dsp + 20949548 + (0 << 2) >> 2])))), 0.5));
			iTemp140 = ((+(fTemp139) > 1.) | 0);
			iTemp141 = ((+(fTemp139) < 1.) | 0);
			fTemp142 = +(+((iTemp140 | 0)) + +(+(fTemp139) * +((iTemp141 | 0))));
			fTemp143 = +(1. + +(1.38629 * +(0. - +(+(fTemp142) - 1.))));
			fTemp144 = +(1.38629 * +(fTemp142));
			fTemp145 = +(+(fTemp144) - 1.09861);
			fTemp146 = +(3.47606 * +(fTemp145));
			fTemp147 = +(+(3.47606 * +(+(+(fTemp145) * +(((+(fTemp146) > 0.) | 0))) * +(((+(fTemp146) <= 1.) | 0)))) + +(((+(fTemp146) > 1.) | 0)));
			fTemp148 = +(+(+(faustpower2_f(+(fTemp139))) * +((iTemp140 | 0))) + +((iTemp141 | 0)));
			HEAPF32[dsp + 20949940 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949940 + (1 << 2) >> 2])) + +(fSlow275));
			HEAPF32[dsp + 20949948 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949948 + (1 << 2) >> 2])) + +(fSlow276));
			fTemp149 = +(0. - +(HEAPF32[dsp + 20949948 + (0 << 2) >> 2]));
			fTemp150 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20949940 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp149)))), 0.5));
			iTemp151 = ((+(fTemp150) > 1.) | 0);
			iTemp152 = ((+(fTemp150) < 1.) | 0);
			fTemp153 = +(+((iTemp151 | 0)) + +(+(fTemp150) * +((iTemp152 | 0))));
			fTemp154 = +(1. + +(1.38629 * +(0. - +(+(fTemp153) - 1.))));
			fTemp155 = +(1.38629 * +(fTemp153));
			fTemp156 = +(+(fTemp155) - 1.09861);
			fTemp157 = +(3.47606 * +(fTemp156));
			fTemp158 = +(+(3.47606 * +(+(+(fTemp156) * +(((+(fTemp157) > 0.) | 0))) * +(((+(fTemp157) <= 1.) | 0)))) + +(((+(fTemp157) > 1.) | 0)));
			fTemp159 = +(atan2f(+(fTemp149), +(HEAPF32[dsp + 20949940 + (0 << 2) >> 2])));
			fTemp160 = +(3. * +(fTemp159));
			HEAPF32[dsp + 20949956 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20949956 + (1 << 2) >> 2])) + +(fSlow277));
			HEAPF32[dsp + 20949964 + (0 << 2) >> 2] = +((iTemp11 | 0)?+(fSlow278):+(HEAPF32[dsp + 20949964 + (1 << 2) >> 2]));
			iTemp161 = ((+(HEAPF32[dsp + 20949964 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20949972 + (0 << 2) >> 2] = (iTemp161 | 0);
			HEAP32[dsp + 20949980 + (0 << 2) >> 2] = (((imul((iTemp161 | 0), (((iTemp161 | 0) + (HEAP32[dsp + 20949980 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 9082144 + ((HEAP32[dsp + 20949980 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp52);
			iTemp162 = ((+(HEAPF32[dsp + 20949964 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20949988 + (0 << 2) >> 2] = (imul((((HEAP32[dsp + 20949988 + (1 << 2) >> 2] | 0) + (iTemp161 | 0)) | 0), ((1 - (((iTemp161 | 0) > (HEAP32[dsp + 20949972 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20949996 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20949996 + (1 << 2) >> 2] | 0) + (iTemp162 | 0)) | 0), (iTemp162 | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20949988 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20950004 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20950004 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20949964 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20950012 + (0 << 2) >> 2] = +(+(fSlow279) + +(0.999 * +(HEAPF32[dsp + 20950012 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20950020 + (0 << 2) >> 2] = +(+(fSlow298) + +(0.99 * +(HEAPF32[dsp + 20950020 + (1 << 2) >> 2])));
			fTemp163 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 9082144 + (((max(~~((HEAP32[dsp + 20949980 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949996 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20950020 + (0 << 2) >> 2]))))))) * +(HEAPF32[dsp + 20950004 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20947560 + (0 << 2) >> 2] = +(+(+(fTemp163) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp163)))))) - +(+(fSlow295) * +(+(+(+(+(fSlow302) * +(HEAPF32[dsp + 20947560 + (1 << 2) >> 2])) + +(+(fSlow304) * +(HEAPF32[dsp + 20947560 + (2 << 2) >> 2]))) + +(+(fSlow305) * +(HEAPF32[dsp + 20947560 + (3 << 2) >> 2]))) + +(+(fSlow306) * +(HEAPF32[dsp + 20947560 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20947736 + (0 << 2) >> 2] = +(+(+(fSlow295) * +(+(+(+(+(+(fSlow297) * +(HEAPF32[dsp + 20947560 + (0 << 2) >> 2])) + +(+(fSlow307) * +(HEAPF32[dsp + 20947560 + (1 << 2) >> 2]))) + +(+(fSlow308) * +(HEAPF32[dsp + 20947560 + (2 << 2) >> 2]))) + +(+(fSlow307) * +(HEAPF32[dsp + 20947560 + (3 << 2) >> 2]))) + +(+(fSlow310) * +(HEAPF32[dsp + 20947560 + (4 << 2) >> 2])))) - +(+(fSlow287) * +(+(+(fSlow311) * +(HEAPF32[dsp + 20947736 + (1 << 2) >> 2])) + +(+(fSlow312) * +(HEAPF32[dsp + 20947736 + (2 << 2) >> 2])))));
			fTemp164 = +(+(+(+(HEAPF32[dsp + 9082144 + (((max(~~((HEAP32[dsp + 20949980 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20949996 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20950004 + (0 << 2) >> 2])) * +(1. - +(HEAPF32[dsp + 20950012 + (0 << 2) >> 2]))) + +(+(fSlow287) * +(+(+(+(fSlow289) * +(HEAPF32[dsp + 20947736 + (2 << 2) >> 2])) + +(+(fSlow288) * +(HEAPF32[dsp + 20947736 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20950012 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 20950028 + (0 << 2) >> 2] = +(+(fSlow313) + +(0.999 * +(HEAPF32[dsp + 20950028 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18903600 + ((HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp164);
			HEAPF32[dsp + 20950036 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20950036 + (1 << 2) >> 2]) % +(fSlow314)) + +(fSlow315));
			HEAPF32[dsp + 20950044 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20950036 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20950036 + (1 << 2) >> 2])) | 0)?+(fTemp26):+(HEAPF32[dsp + 20950044 + (1 << 2) >> 2]));
			fTemp165 = +(+(+(fTemp164) * +(1. - +(HEAPF32[dsp + 20950028 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18903600 + (~~(+(+(HEAPF32[dsp + 20950036 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20950044 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow316) * +(HEAPF32[dsp + 20950036 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20950028 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950052 + (0 << 2) >> 2] = +(+(fSlow317) + +(0.999 * +(HEAPF32[dsp + 20950052 + (1 << 2) >> 2])));
			fSel10 = 0.;
			if ((((((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow318) != +(HEAPF32[dsp + 20950076 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel10 = 0.00390625;
				
			} else {
				fSel10 = +(((((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow318) != +(HEAPF32[dsp + 20950084 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel11 = 0.;
			if ((((+(HEAPF32[dsp + 20950060 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel11 = +(((((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20950060 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel11 = +(fSel10);
				
			}
			HEAPF32[dsp + 20950060 + (0 << 2) >> 2] = +(fSel11);
			HEAPF32[dsp + 20950068 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) + +(fSel11))))));
			HEAPF32[dsp + 20950076 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20950084 + (1 << 2) >> 2]) != +(fSlow318)) | 0)) | 0)?+(fSlow318):+(HEAPF32[dsp + 20950076 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20950084 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20950068 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20950076 + (1 << 2) >> 2]) != +(fSlow318)) | 0)) | 0)?+(fSlow318):+(HEAPF32[dsp + 20950084 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20950092 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20950092 + (1 << 2) >> 2])) + +(fSlow319));
			HEAPF32[dsp + 16089024 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp165) + +(+(+(+(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20950076 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20950068 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20950084 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20950068 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20950092 + (0 << 2) >> 2])));
			fTemp166 = +(+(+(fTemp165) * +(1. - +(HEAPF32[dsp + 20950052 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20950052 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20950100 + (0 << 2) >> 2] = +(+(fSlow320) + +(0.999 * +(HEAPF32[dsp + 20950100 + (1 << 2) >> 2])));
			fTemp167 = +(+(fTemp166) * +(1. - +(HEAPF32[dsp + 20950100 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950108 + (0 << 2) >> 2] = +(+(fSlow321) + +(0.99 * +(HEAPF32[dsp + 20950108 + (1 << 2) >> 2])));
			fTemp168 = +(+(HEAPF32[dsp + 20950540 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20950108 + (0 << 2) >> 2]))));
			fTemp169 = +(1. - +(fTemp168));
			HEAPF32[dsp + 20950116 + (0 << 2) >> 2] = +(+(+(fSlow322) * +(HEAPF32[dsp + 20950148 + (1 << 2) >> 2])) + +(+(fTemp166) + +(+(fTemp169) * +(HEAPF32[dsp + 20950116 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20950124 + (0 << 2) >> 2] = +(+(+(fTemp169) * +(HEAPF32[dsp + 20950124 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950116 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20950132 + (0 << 2) >> 2] = +(+(+(fTemp169) * +(HEAPF32[dsp + 20950132 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950124 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20950140 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20950140 + (1 << 2) >> 2]) * +(fTemp169)) + +(HEAPF32[dsp + 20950132 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20950148 + (0 << 2) >> 2] = +(+(powf(+(fTemp168), 4.)) * +(HEAPF32[dsp + 20950140 + (0 << 2) >> 2]));
			fTemp170 = +(+(HEAPF32[dsp + 20950100 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20950148 + (0 << 2) >> 2]));
			fTemp171 = +(+(fTemp167) + +(fTemp170));
			HEAPF32[dsp + 20950156 + (0 << 2) >> 2] = +(+(fSlow323) + +(0.999 * +(HEAPF32[dsp + 20950156 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20950164 + (0 << 2) >> 2] = +(+(fSlow325) + +(0.999 * +(HEAPF32[dsp + 20950164 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20950172 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950172 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950180 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20567520 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp171) + +(+(fSlow326) * +(HEAPF32[dsp + 20950172 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950180 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20567520 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950592 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950188 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950188 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950196 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20600288 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp171) + +(+(fSlow326) * +(HEAPF32[dsp + 20950188 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950196 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20600288 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950588 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950204 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950204 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950212 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20633056 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp171) + +(+(fSlow326) * +(HEAPF32[dsp + 20950204 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950212 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20633056 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950584 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950220 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950220 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950228 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20665824 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp171) + +(+(fSlow326) * +(HEAPF32[dsp + 20950220 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20950228 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20665824 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950580 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950236 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950236 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950244 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20698592 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(+(fSlow326) * +(HEAPF32[dsp + 20950236 + (0 << 2) >> 2])) + +(fTemp167)) + +(fTemp170));
			HEAPF32[dsp + 20950244 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20698592 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950576 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950252 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950252 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950260 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20731360 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(+(fSlow326) * +(HEAPF32[dsp + 20950252 + (0 << 2) >> 2])) + +(fTemp167)) + +(fTemp170));
			HEAPF32[dsp + 20950260 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20731360 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950572 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950268 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950268 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950276 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20764128 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(+(fSlow326) * +(HEAPF32[dsp + 20950268 + (0 << 2) >> 2])) + +(fTemp167)) + +(fTemp170));
			HEAPF32[dsp + 20950276 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20764128 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950568 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20950284 + (0 << 2) >> 2] = +(+(+(fSlow328) * +(HEAPF32[dsp + 20950284 + (1 << 2) >> 2])) + +(+(fSlow327) * +(HEAPF32[dsp + 20950292 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20796896 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(+(fSlow326) * +(HEAPF32[dsp + 20950284 + (0 << 2) >> 2])) + +(fTemp167)) + +(fTemp170));
			HEAPF32[dsp + 20950292 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20796896 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950564 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp172 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 20950300 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950180 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950196 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950212 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950228 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950244 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950260 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950276 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20950292 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20919776 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp172);
			HEAPF32[dsp + 20950300 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20919776 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950596 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec341 = +(0. - +(0.5 * +(fTemp172)));
			fTemp173 = +(+(+(0.5 * +(HEAPF32[dsp + 20950308 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950300 + (1 << 2) >> 2])) + +(fRec341));
			HEAPF32[dsp + 20923872 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp173);
			HEAPF32[dsp + 20950308 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20923872 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950600 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec339 = +(0. - +(0.5 * +(fTemp173)));
			fTemp174 = +(+(+(0.5 * +(HEAPF32[dsp + 20950316 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950308 + (1 << 2) >> 2])) + +(fRec339));
			HEAPF32[dsp + 20927968 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp174);
			HEAPF32[dsp + 20950316 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20927968 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950604 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec337 = +(0. - +(0.5 * +(fTemp174)));
			fTemp175 = +(+(fRec337) + +(+(0.5 * +(HEAPF32[dsp + 20950324 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20950316 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20932064 + ((((HEAP32[dsp + 20950472 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp175);
			HEAPF32[dsp + 20950324 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20932064 + ((((((HEAP32[dsp + 20950472 >> 2] | 0) - (HEAP32[dsp + 20950608 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec335 = +(0. - +(0.5 * +(fTemp175)));
			fTemp176 = +(+(HEAPF32[dsp + 20949956 + (0 << 2) >> 2]) * +(+(+(fTemp171) * +(1. - +(HEAPF32[dsp + 20950156 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20950156 + (0 << 2) >> 2]) * +(+(+(fTemp171) * +(1. - +(HEAPF32[dsp + 20950164 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20950164 + (0 << 2) >> 2]) * +(+(HEAPF32[dsp + 20950324 + (1 << 2) >> 2]) + +(fRec335)))))));
			HEAPF32[dsp + 20950332 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20950332 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp176)))));
			HEAPF32[dsp + 20951012 >> 2] = +(+(HEAPF32[dsp + 20950332 + (0 << 2) >> 2]));
			fTemp177 = +(+(+(faustpower2_f(+(fTemp150))) * +((iTemp151 | 0))) + +((iTemp152 | 0)));
			fTemp178 = +(+(+(+(+(+(+(+(+(+(fTemp8) * +(cosf(+(fTemp10)))) * +(fTemp37)) * +(fTemp38)) / +(fTemp39)) + +(+(+(+(+(cosf(+(fTemp42))) * +(fTemp50)) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(cosf(+(fTemp70))) * +(fTemp78)) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(cosf(+(fTemp97))) * +(fTemp105)) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(+(cosf(+(fTemp124))) * +(fTemp138)) * +(fTemp143)) * +(fTemp147)) / +(fTemp148))) + +(+(+(+(+(fTemp154) * +(fTemp158)) * +(cosf(+(fTemp160)))) * +(fTemp176)) / +(fTemp177)));
			fTemp179 = +(+(fTemp155) - 0.693147);
			fTemp180 = +(2.4663 * +(fTemp179));
			fTemp181 = +(+(2.4663 * +(+(+(fTemp179) * +(((+(fTemp180) > 0.) | 0))) * +(((+(fTemp180) <= 1.) | 0)))) + +(((+(fTemp180) > 1.) | 0)));
			fTemp182 = +(2. * +(fTemp159));
			fTemp183 = +(+(fTemp5) - 0.693147);
			fTemp184 = +(2.4663 * +(fTemp183));
			fTemp185 = +(+(2.4663 * +(+(+(fTemp183) * +(((+(fTemp184) > 0.) | 0))) * +(((+(fTemp184) <= 1.) | 0)))) + +(((+(fTemp184) > 1.) | 0)));
			fTemp186 = +(2. * +(fTemp9));
			fTemp187 = +(+(fTemp47) - 0.693147);
			fTemp188 = +(2.4663 * +(fTemp187));
			fTemp189 = +(+(2.4663 * +(+(+(fTemp187) * +(((+(fTemp188) > 0.) | 0))) * +(((+(fTemp188) <= 1.) | 0)))) + +(((+(fTemp188) > 1.) | 0)));
			fTemp190 = +(2. * +(fTemp41));
			fTemp191 = +(+(fTemp75) - 0.693147);
			fTemp192 = +(2.4663 * +(fTemp191));
			fTemp193 = +(+(2.4663 * +(+(+(fTemp191) * +(((+(fTemp192) > 0.) | 0))) * +(((+(fTemp192) <= 1.) | 0)))) + +(((+(fTemp192) > 1.) | 0)));
			fTemp194 = +(2. * +(fTemp69));
			fTemp195 = +(+(fTemp102) - 0.693147);
			fTemp196 = +(2.4663 * +(fTemp195));
			fTemp197 = +(+(2.4663 * +(+(+(fTemp195) * +(((+(fTemp196) > 0.) | 0))) * +(((+(fTemp196) <= 1.) | 0)))) + +(((+(fTemp196) > 1.) | 0)));
			fTemp198 = +(2. * +(fTemp96));
			fTemp199 = +(+(fTemp138) * +(fTemp143));
			fTemp200 = +(+(fTemp144) - 0.693147);
			fTemp201 = +(2.4663 * +(fTemp200));
			fTemp202 = +(+(2.4663 * +(+(+(fTemp200) * +(((+(fTemp201) > 0.) | 0))) * +(((+(fTemp201) <= 1.) | 0)))) + +(((+(fTemp201) > 1.) | 0)));
			fTemp203 = +(2. * +(fTemp123));
			fTemp204 = +(+(+(+(+(+(+(+(+(+(fTemp154) * +(fTemp181)) * +(cosf(+(fTemp182)))) * +(fTemp176)) / +(fTemp177)) + +(+(+(+(+(fTemp185) * +(cosf(+(fTemp186)))) * +(fTemp37)) * +(fTemp38)) / +(fTemp39))) + +(+(+(+(+(fTemp189) * +(cosf(+(fTemp190)))) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(fTemp193) * +(cosf(+(fTemp194)))) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(fTemp197) * +(cosf(+(fTemp198)))) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(fTemp199) * +(fTemp202)) * +(cosf(+(fTemp203)))) / +(fTemp148)));
			fTemp205 = +(+(+(+(+(+(+(+(fTemp154) * +(fTemp176)) / +(fTemp177)) + +(+(fTemp199) / +(fTemp148))) + +(+(+(fTemp37) * +(fTemp38)) / +(fTemp39))) + +(+(+(fTemp65) * +(fTemp66)) / +(fTemp67))) + +(+(+(fTemp92) * +(fTemp93)) / +(fTemp94))) + +(+(+(fTemp119) * +(fTemp120)) / +(fTemp121)));
			fTemp206 = +(0.5 * +(fTemp205));
			fTemp207 = +(2. * +(fTemp153));
			fTemp208 = +(+(2. * +(+(+(fTemp153) * +(((+(fTemp207) > 0.) | 0))) * +(((+(fTemp207) <= 1.) | 0)))) + +(((+(fTemp207) > 1.) | 0)));
			fTemp209 = +(2. * +(fTemp4));
			fTemp210 = +(+(2. * +(+((imul(((+(fTemp209) > 0.) | 0), ((+(fTemp209) <= 1.) | 0)) | 0)) * +(fTemp4))) + +(((+(fTemp209) > 1.) | 0)));
			fTemp211 = +(2. * +(fTemp46));
			fTemp212 = +(+(2. * +(+((imul(((+(fTemp211) > 0.) | 0), ((+(fTemp211) <= 1.) | 0)) | 0)) * +(fTemp46))) + +(((+(fTemp211) > 1.) | 0)));
			fTemp213 = +(2. * +(fTemp74));
			fTemp214 = +(+(2. * +(+((imul(((+(fTemp213) > 0.) | 0), ((+(fTemp213) <= 1.) | 0)) | 0)) * +(fTemp74))) + +(((+(fTemp213) > 1.) | 0)));
			fTemp215 = +(2. * +(fTemp101));
			fTemp216 = +(+(2. * +(+((imul(((+(fTemp215) > 0.) | 0), ((+(fTemp215) <= 1.) | 0)) | 0)) * +(fTemp101))) + +(((+(fTemp215) > 1.) | 0)));
			fTemp217 = +(2. * +(fTemp142));
			fTemp218 = +(+(2. * +(+(+(fTemp142) * +(((+(fTemp217) > 0.) | 0))) * +(((+(fTemp217) <= 1.) | 0)))) + +(((+(fTemp217) > 1.) | 0)));
			fTemp219 = +(+(+(+(+(+(+(+(+(+(fTemp154) * +(fTemp208)) * +(cosf(+(fTemp159)))) * +(fTemp176)) / +(fTemp177)) + +(+(+(+(+(fTemp210) * +(cosf(+(fTemp9)))) * +(fTemp37)) * +(fTemp38)) / +(fTemp39))) + +(+(+(+(+(fTemp212) * +(cosf(+(fTemp41)))) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(fTemp214) * +(cosf(+(fTemp69)))) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(fTemp216) * +(cosf(+(fTemp96)))) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(fTemp199) * +(fTemp218)) * +(cosf(+(fTemp123)))) / +(fTemp148)));
			fTemp220 = +(0.202031 * +(+(fTemp178) + +(+(fTemp204) + +(+(fTemp206) + +(fTemp219)))));
			fTemp221 = +(+(+(+(+(+(+(+(+(+(fTemp154) * +(sinf(+(fTemp159)))) * +(fTemp208)) * +(fTemp176)) / +(fTemp177)) + +(+(+(+(+(sinf(+(fTemp9))) * +(fTemp210)) * +(fTemp37)) * +(fTemp38)) / +(fTemp39))) + +(+(+(+(+(sinf(+(fTemp41))) * +(fTemp212)) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(sinf(+(fTemp69))) * +(fTemp214)) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(sinf(+(fTemp96))) * +(fTemp216)) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(fTemp199) * +(sinf(+(fTemp123)))) * +(fTemp218)) / +(fTemp148)));
			fTemp222 = +(+(+(+(+(+(+(+(+(+(fTemp154) * +(sinf(+(fTemp182)))) * +(fTemp181)) * +(fTemp176)) / +(fTemp177)) + +(+(+(+(+(sinf(+(fTemp186))) * +(fTemp185)) * +(fTemp37)) * +(fTemp38)) / +(fTemp39))) + +(+(+(+(+(sinf(+(fTemp190))) * +(fTemp189)) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(sinf(+(fTemp194))) * +(fTemp193)) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(sinf(+(fTemp198))) * +(fTemp197)) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(fTemp199) * +(sinf(+(fTemp203)))) * +(fTemp202)) / +(fTemp148)));
			fTemp223 = +(+(+(+(+(+(+(+(+(+(fTemp154) * +(sinf(+(fTemp160)))) * +(fTemp158)) * +(fTemp176)) / +(fTemp177)) + +(+(+(+(+(sinf(+(fTemp10))) * +(fTemp8)) * +(fTemp37)) * +(fTemp38)) / +(fTemp39))) + +(+(+(+(+(sinf(+(fTemp42))) * +(fTemp50)) * +(fTemp65)) * +(fTemp66)) / +(fTemp67))) + +(+(+(+(+(sinf(+(fTemp70))) * +(fTemp78)) * +(fTemp92)) * +(fTemp93)) / +(fTemp94))) + +(+(+(+(+(sinf(+(fTemp97))) * +(fTemp105)) * +(fTemp119)) * +(fTemp120)) / +(fTemp121))) + +(+(+(+(fTemp199) * +(sinf(+(fTemp124)))) * +(fTemp147)) / +(fTemp148)));
			fTemp224 = +(0.202031 * +(fTemp178));
			fTemp225 = +(0.142857 * +(fTemp205));
			fTemp226 = +(0.285714 * +(fTemp222));
			fTemp227 = +(+(HEAPF32[dsp + 20950340 + (1 << 2) >> 2]) + +(HEAPF32[dsp + 20951016 >> 2]));
			HEAPF32[dsp + 20950340 + (0 << 2) >> 2] = +(+(fTemp227) - +(floorf(+(fTemp227))));
			iTemp228 = ((+(HEAPF32[dsp + 20947788 + (0 << 2) >> 2]) < +(fSlow329)) | 0);
			iTemp229 = (((iTemp228 | 0) > 0) | 0);
			HEAP32[dsp + 20950348 + (0 << 2) >> 2] = (((iTemp229 | 0) & (((HEAP32[dsp + 20950348 + (1 << 2) >> 2] | 0) | ((+(HEAPF32[dsp + 20950356 + (1 << 2) >> 2]) >= 1.) | 0)) | 0)) | 0);
			iTemp230 = (((((iTemp228 | 0) <= 0) | 0) & ((+(HEAPF32[dsp + 20950356 + (1 << 2) >> 2]) > 0.) | 0)) | 0);
			HEAPF32[dsp + 20950356 + (0 << 2) >> 2] = +(+(+(+(HEAPF32[dsp + 20951020 >> 2]) * +((((((((HEAP32[dsp + 20950348 + (1 << 2) >> 2] | 0) == 0) | 0) & (iTemp229 | 0)) | 0) & ((+(HEAPF32[dsp + 20950356 + (1 << 2) >> 2]) < 1.) | 0)) | 0))) + +(+(HEAPF32[dsp + 20950356 + (1 << 2) >> 2]) * +(1. - +(+(HEAPF32[dsp + 20951024 >> 2]) * +((iTemp230 | 0)))))) * +((((((iTemp230 | 0) == 0) | 0) | ((+(HEAPF32[dsp + 20950356 + (1 << 2) >> 2]) >= 1.e-06) | 0)) | 0)));
			fTemp231 = +(+(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 20950340 + (0 << 2) >> 2]))) << 2) >> 2]) * +(HEAPF32[dsp + 20950356 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20950364 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20950364 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp231)))));
			HEAPF32[dsp + 20951028 >> 2] = +(+(HEAPF32[dsp + 20950364 + (0 << 2) >> 2]));
			fTemp232 = +(0.0001 * +(fTemp231));
			HEAPF32[dsp + 20950372 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20950372 + (1 << 2) >> 2])) + +(fSlow330));
			HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(fTemp220) + +(0.987688 * +(+(0.202031 * +(+(+(+(+(+(0.707107 * +(fTemp205)) + +(1. * +(fTemp221))) + +(fTemp219)) + +(1.41421 * +(fTemp222))) + +(8.65956e-17 * +(fTemp204))) + +(fTemp223))) - +(fTemp224)))) + +(0.809017 * +(0. - +(+(5.24849e-17 * +(fTemp178)) + +(0.285714 * +(+(+(fTemp204) + +(fTemp223)) - +(+(+(+(fTemp206) + +(fTemp221)) + +(6.12323e-17 * +(fTemp219))) + +(1.22465e-16 * +(fTemp222))))))))) + +(0.45399 * +(+(+(0.202031 * +(fTemp223)) + +(+(0.202031 * +(fTemp221)) + +(+(fTemp225) + +(0.202031 * +(fTemp178))))) - +(+(+(fTemp226) + +(0.202031 * +(fTemp219))) + +(5.24849e-17 * +(fTemp204)))))) + +(1.22465e-16 * +(0. - +(0.285714 * +(+(+(+(fTemp178) + +(fTemp219)) + +(2.44929e-16 * +(fTemp222))) - +(+(+(fTemp204) + +(+(fTemp206) + +(1.22465e-16 * +(fTemp221)))) + +(3.67394e-16 * +(fTemp223)))))))) + +(fTemp232)) * +(HEAPF32[dsp + 20950372 + (0 << 2) >> 2])));
			HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp232) + +(+(+(+(fTemp220) + +(0.45399 * +(+(+(8.74748e-17 * +(fTemp204)) + +(+(fTemp226) + +(+(fTemp225) + +(0.202031 * +(fTemp178))))) - +(+(+(0.202031 * +(fTemp221)) + +(0.202031 * +(fTemp219))) + +(0.202031 * +(fTemp223)))))) + +(0.809017 * +(+(+(0.285714 * +(fTemp223)) + +(1.57455e-16 * +(fTemp178))) - +(0.285714 * +(+(+(fTemp204) + +(+(fTemp221) + +(1.83697e-16 * +(fTemp219)))) - +(+(fTemp206) + +(3.67394e-16 * +(fTemp222)))))))) + +(0.987688 * +(0. - +(+(fTemp224) + +(0.202031 * +(+(+(fTemp223) + +(+(+(fTemp221) + +(1.41421 * +(fTemp222))) + +(6.06169e-16 * +(fTemp204)))) - +(+(0.707107 * +(fTemp205)) + +(1. * +(fTemp219)))))))))) * +(HEAPF32[dsp + 20950372 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20947748 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947748 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947756 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947756 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947764 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947764 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947772 + (1 << 2) >> 2] = (HEAP32[dsp + 20947772 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947780 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947780 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947788 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947788 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947796 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947796 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947804 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947804 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947812 + (1 << 2) >> 2] = (HEAP32[dsp + 20947812 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947820 + (1 << 2) >> 2] = (HEAP32[dsp + 20947820 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947828 + (1 << 2) >> 2] = (HEAP32[dsp + 20947828 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947836 + (1 << 2) >> 2] = (HEAP32[dsp + 20947836 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947844 + (1 << 2) >> 2] = (HEAP32[dsp + 20947844 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947852 + (1 << 2) >> 2] = (HEAP32[dsp + 20947852 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947860 + (1 << 2) >> 2] = (HEAP32[dsp + 20947860 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947868 + (1 << 2) >> 2] = (HEAP32[dsp + 20947868 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20947876 + (1 << 2) >> 2] = (HEAP32[dsp + 20947876 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947884 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947884 + (0 << 2) >> 2]);
			HEAP32[dsp + 20950472 >> 2] = (((HEAP32[dsp + 20950472 >> 2] | 0) + 1) | 0);
			HEAPF32[dsp + 20947580 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947580 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947580 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947580 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947892 + (1 << 2) >> 2] = (HEAP32[dsp + 20947892 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947900 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947900 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947592 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947592 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947592 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947908 + (1 << 2) >> 2] = (HEAP32[dsp + 20947908 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947916 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947916 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947604 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947604 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947604 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947604 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947924 + (1 << 2) >> 2] = (HEAP32[dsp + 20947924 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947932 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947932 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947616 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947616 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947616 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947940 + (1 << 2) >> 2] = (HEAP32[dsp + 20947940 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947948 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947948 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947628 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947628 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947628 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947628 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947956 + (1 << 2) >> 2] = (HEAP32[dsp + 20947956 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947964 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947964 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947640 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947640 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947640 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947972 + (1 << 2) >> 2] = (HEAP32[dsp + 20947972 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947980 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947980 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947652 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947652 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947652 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947652 + (0 << 2) >> 2]);
			HEAP32[dsp + 20947988 + (1 << 2) >> 2] = (HEAP32[dsp + 20947988 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20947996 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947996 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20947664 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947664 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947664 + (0 << 2) >> 2]);
			HEAP32[dsp + 20948004 + (1 << 2) >> 2] = (HEAP32[dsp + 20948004 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948012 + (1 << 2) >> 2] = (HEAP32[dsp + 20948012 + (0 << 2) >> 2] | 0);
			for (j0 = 4; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947460 + ((j0 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947460 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947676 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947676 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947676 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947676 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948020 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948020 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948028 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948028 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948036 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948036 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948044 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948044 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948052 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948052 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948060 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948060 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948068 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948068 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948076 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948076 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948084 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948084 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948092 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948092 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948100 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948100 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948108 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948108 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948116 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948116 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948124 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948124 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948132 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948132 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948140 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948140 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948148 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948148 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948156 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948156 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948164 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948164 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948172 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948172 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948180 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948180 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948188 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948188 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948196 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948196 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948204 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948204 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948212 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948212 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948220 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948220 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948228 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948228 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948236 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948236 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948244 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948244 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948252 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948252 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948260 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948260 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948268 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948268 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948276 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948276 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948284 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948284 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948292 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948292 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948300 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948300 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948308 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948308 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948316 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948316 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948324 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948324 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948332 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948332 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948340 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948340 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948348 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948348 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948356 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948356 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948364 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948364 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948372 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948372 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948380 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948380 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948388 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948388 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948396 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948396 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948404 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948404 + (0 << 2) >> 2]);
			HEAP32[dsp + 20948412 + (1 << 2) >> 2] = (HEAP32[dsp + 20948412 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948420 + (1 << 2) >> 2] = (HEAP32[dsp + 20948420 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948428 + (1 << 2) >> 2] = (HEAP32[dsp + 20948428 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948436 + (1 << 2) >> 2] = (HEAP32[dsp + 20948436 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20948444 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948444 + (0 << 2) >> 2]);
			for (j1 = 4; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947480 + ((j1 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947480 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947688 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947688 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948452 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948452 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948460 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948460 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948468 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948468 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948476 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948476 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948484 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948484 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948492 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948492 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948500 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948500 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948508 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948508 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948516 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948516 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948524 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948524 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948532 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948532 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948540 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948540 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948548 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948548 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948556 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948556 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948564 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948564 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948572 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948572 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948580 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948580 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948588 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948588 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948596 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948596 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948604 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948604 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948612 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948612 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948620 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948620 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948628 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948628 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948636 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948636 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948644 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948644 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948652 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948652 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948660 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948660 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948668 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948668 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948676 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948676 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948684 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948684 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948692 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948692 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948700 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948700 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948708 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948708 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948716 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948716 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948724 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948724 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948732 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948732 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948740 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948740 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948748 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948748 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948756 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948756 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948764 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948764 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948772 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948772 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948780 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948780 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948788 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948788 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948796 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948796 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948804 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948804 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948812 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948812 + (0 << 2) >> 2]);
			HEAP32[dsp + 20948820 + (1 << 2) >> 2] = (HEAP32[dsp + 20948820 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948828 + (1 << 2) >> 2] = (HEAP32[dsp + 20948828 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948836 + (1 << 2) >> 2] = (HEAP32[dsp + 20948836 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20948844 + (1 << 2) >> 2] = (HEAP32[dsp + 20948844 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20948852 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948852 + (0 << 2) >> 2]);
			for (j2 = 4; (((j2 | 0) > 0) | 0); j2 = (((j2 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947500 + ((j2 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947500 + ((((j2 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947700 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947700 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947700 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947700 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948860 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948860 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948868 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948868 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948876 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948876 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948884 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948884 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948892 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948892 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948900 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948900 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948908 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948908 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948916 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948916 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948924 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948924 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948932 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948932 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948940 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948940 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948948 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948948 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948956 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948956 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948964 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948964 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948972 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948972 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948980 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948980 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948988 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948988 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20948996 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20948996 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949004 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949004 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949012 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949012 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949020 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949020 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949028 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949028 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949036 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949036 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949044 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949044 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949052 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949052 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949060 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949060 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949068 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949068 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949076 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949076 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949084 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949084 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949092 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949092 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949100 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949100 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949108 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949108 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949116 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949116 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949124 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949124 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949132 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949132 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949140 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949140 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949148 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949148 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949156 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949156 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949164 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949164 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949172 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949172 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949180 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949180 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949188 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949188 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949196 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949196 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949204 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949204 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949212 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949212 + (0 << 2) >> 2]);
			HEAP32[dsp + 20949220 + (1 << 2) >> 2] = (HEAP32[dsp + 20949220 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949228 + (1 << 2) >> 2] = (HEAP32[dsp + 20949228 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949236 + (1 << 2) >> 2] = (HEAP32[dsp + 20949236 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949244 + (1 << 2) >> 2] = (HEAP32[dsp + 20949244 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20949252 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949252 + (0 << 2) >> 2]);
			for (j3 = 4; (((j3 | 0) > 0) | 0); j3 = (((j3 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947520 + ((j3 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947520 + ((((j3 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947712 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947712 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949260 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949260 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949268 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949268 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949276 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949276 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949284 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949284 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949292 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949292 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949300 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949300 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949308 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949308 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949316 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949316 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949324 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949324 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949332 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949332 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949340 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949340 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949348 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949348 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949356 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949356 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949364 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949364 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949372 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949372 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949380 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949380 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949388 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949388 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949396 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949396 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949404 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949404 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949412 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949412 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949420 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949420 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949428 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949428 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949436 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949436 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949444 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949444 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949452 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949452 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949460 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949460 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949468 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949468 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949476 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949476 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949484 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949484 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949492 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949492 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949500 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949500 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949508 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949508 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949516 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949516 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949524 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949524 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949532 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949532 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949540 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949540 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949548 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949548 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949556 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949556 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949564 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949564 + (0 << 2) >> 2]);
			HEAP32[dsp + 20949572 + (1 << 2) >> 2] = (HEAP32[dsp + 20949572 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949580 + (1 << 2) >> 2] = (HEAP32[dsp + 20949580 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949588 + (1 << 2) >> 2] = (HEAP32[dsp + 20949588 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949596 + (1 << 2) >> 2] = (HEAP32[dsp + 20949596 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20949604 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949604 + (0 << 2) >> 2]);
			for (j4 = 4; (((j4 | 0) > 0) | 0); j4 = (((j4 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947540 + ((j4 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947540 + ((((j4 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947724 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947724 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947724 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947724 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949612 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949612 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949620 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949620 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949628 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949628 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949636 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949636 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949644 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949644 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949652 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949652 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949660 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949660 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949668 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949668 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949676 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949676 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949684 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949684 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949692 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949692 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949700 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949700 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949708 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949708 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949716 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949716 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949724 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949724 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949732 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949732 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949740 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949740 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949748 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949748 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949756 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949756 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949764 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949764 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949772 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949772 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949780 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949780 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949788 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949788 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949796 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949796 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949804 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949804 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949812 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949812 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949820 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949820 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949828 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949828 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949836 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949836 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949844 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949844 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949852 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949852 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949860 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949860 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949868 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949868 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949876 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949876 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949884 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949884 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949892 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949892 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949900 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949900 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949908 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949908 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949916 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949916 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949924 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949924 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949932 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949932 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949940 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949940 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949948 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949948 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949956 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949956 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20949964 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20949964 + (0 << 2) >> 2]);
			HEAP32[dsp + 20949972 + (1 << 2) >> 2] = (HEAP32[dsp + 20949972 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949980 + (1 << 2) >> 2] = (HEAP32[dsp + 20949980 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949988 + (1 << 2) >> 2] = (HEAP32[dsp + 20949988 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20949996 + (1 << 2) >> 2] = (HEAP32[dsp + 20949996 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20950004 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950004 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950012 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950012 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950020 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950020 + (0 << 2) >> 2]);
			for (j5 = 4; (((j5 | 0) > 0) | 0); j5 = (((j5 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20947560 + ((j5 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20947560 + ((((j5 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20947736 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20947736 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20947736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20947736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950028 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950028 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950036 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950036 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950044 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950044 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950052 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950052 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950060 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950060 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950068 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950068 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950076 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950076 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950084 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950084 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950092 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950092 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950100 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950100 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950108 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950108 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950116 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950116 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950124 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950124 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950132 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950132 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950140 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950140 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950148 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950148 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950156 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950156 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950164 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950164 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950172 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950172 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950180 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950180 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950188 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950188 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950196 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950196 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950204 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950204 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950212 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950212 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950220 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950220 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950228 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950228 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950236 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950236 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950244 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950244 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950252 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950252 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950260 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950260 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950268 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950268 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950276 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950276 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950284 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950284 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950292 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950292 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950300 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950300 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950308 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950308 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950316 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950316 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950324 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950324 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950332 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950332 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950340 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950340 + (0 << 2) >> 2]);
			HEAP32[dsp + 20950348 + (1 << 2) >> 2] = (HEAP32[dsp + 20950348 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20950356 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950356 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950364 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950364 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20950372 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20950372 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };
}

function getSizeeffetFaust() {
	return 20951036;
}

function getPathTableeffetFaust() {
	var pathTable = [];
	pathTable["/0x00/SatB1"] = 20950508;
	pathTable["/0x00/MunB1"] = 20950520;
	pathTable["/0x00/RevB3"] = 20950708;
	pathTable["/0x00/FilB3"] = 20950712;
	pathTable["/0x00/DelB3"] = 20950716;
	pathTable["/0x00/MunB3"] = 20950720;
	pathTable["/0x00/SatB3"] = 20950728;
	pathTable["/0x00/RevB4"] = 20950788;
	pathTable["/0x00/FilB4"] = 20950792;
	pathTable["/0x00/DelB4"] = 20950796;
	pathTable["/0x00/MunB4"] = 20950800;
	pathTable["/0x00/SatB4"] = 20950808;
	pathTable["/0x00/DelB1"] = 20950524;
	pathTable["/0x00/SatB5"] = 20950876;
	pathTable["/0x00/MunB5"] = 20950880;
	pathTable["/0x00/DelB5"] = 20950892;
	pathTable["/0x00/FilB5"] = 20950904;
	pathTable["/0x00/RevB5"] = 20950916;
	pathTable["/0x00/SatB0"] = 20950952;
	pathTable["/0x00/MunB0"] = 20950964;
	pathTable["/0x00/DelB0"] = 20950976;
	pathTable["/0x00/FilB0"] = 20950988;
	pathTable["/0x00/RevB0"] = 20951000;
	pathTable["/0x00/FilB1"] = 20950536;
	pathTable["/0x00/RevB1"] = 20950552;
	pathTable["/0x00/RevB2"] = 20950628;
	pathTable["/0x00/DelB2"] = 20950632;
	pathTable["/0x00/MunB2"] = 20950636;
	pathTable["/0x00/SatB2"] = 20950644;
	pathTable["/0x00/FilB2"] = 20950672;
	pathTable["/0x00/audioLevel1"] = 20950612;
	pathTable["/0x00/audioLevel2"] = 20950692;
	pathTable["/0x00/audioLevel3"] = 20950772;
	pathTable["/0x00/audioLevel4"] = 20950852;
	pathTable["/0x00/audioLevel5"] = 20950932;
	pathTable["/0x00/audioLevel0"] = 20951012;
	pathTable["/0x00/metLevel"] = 20951028;
	pathTable["/0x00/MovY1"] = 20950388;
	pathTable["/0x00/MovX1"] = 20950392;
	pathTable["/0x00/DelX1"] = 20950528;
	pathTable["/0x00/DelY1"] = 20950532;
	pathTable["/0x00/FilX1"] = 20950544;
	pathTable["/0x00/FilY1"] = 20950548;
	pathTable["/0x00/RevY1"] = 20950556;
	pathTable["/0x00/RevX1"] = 20950560;
	pathTable["/0x00/MovX2"] = 20950616;
	pathTable["/0x00/MovY2"] = 20950620;
	pathTable["/0x00/Vol2"] = 20950624;
	pathTable["/0x00/opt2"] = 20950640;
	pathTable["/0x00/Vol1"] = 20950396;
	pathTable["/0x00/SatX2"] = 20950648;
	pathTable["/0x00/SatY2"] = 20950652;
	pathTable["/0x00/MunX2"] = 20950656;
	pathTable["/0x00/MunY2"] = 20950660;
	pathTable["/0x00/DelY2"] = 20950664;
	pathTable["/0x00/DelX2"] = 20950668;
	pathTable["/0x00/FilY2"] = 20950676;
	pathTable["/0x00/FilX2"] = 20950680;
	pathTable["/0x00/RevY2"] = 20950684;
	pathTable["/0x00/RevX2"] = 20950688;
	pathTable["/0x00/SatX1"] = 20950428;
	pathTable["/0x00/MovX3"] = 20950696;
	pathTable["/0x00/MovY3"] = 20950700;
	pathTable["/0x00/Vol3"] = 20950704;
	pathTable["/0x00/opt3"] = 20950724;
	pathTable["/0x00/SatX3"] = 20950732;
	pathTable["/0x00/SatY3"] = 20950736;
	pathTable["/0x00/MunX3"] = 20950740;
	pathTable["/0x00/MunY3"] = 20950744;
	pathTable["/0x00/DelY3"] = 20950748;
	pathTable["/0x00/DelX3"] = 20950752;
	pathTable["/0x00/SatY1"] = 20950452;
	pathTable["/0x00/FilY3"] = 20950756;
	pathTable["/0x00/FilX3"] = 20950760;
	pathTable["/0x00/RevY3"] = 20950764;
	pathTable["/0x00/RevX3"] = 20950768;
	pathTable["/0x00/MovX4"] = 20950776;
	pathTable["/0x00/MovY4"] = 20950780;
	pathTable["/0x00/Vol4"] = 20950784;
	pathTable["/0x00/opt4"] = 20950804;
	pathTable["/0x00/SatX4"] = 20950812;
	pathTable["/0x00/SatY4"] = 20950816;
	pathTable["/0x00/VolS"] = 20950456;
	pathTable["/0x00/MunX4"] = 20950820;
	pathTable["/0x00/MunY4"] = 20950824;
	pathTable["/0x00/DelY4"] = 20950828;
	pathTable["/0x00/DelX4"] = 20950832;
	pathTable["/0x00/FilY4"] = 20950836;
	pathTable["/0x00/FilX4"] = 20950840;
	pathTable["/0x00/RevY4"] = 20950844;
	pathTable["/0x00/RevX4"] = 20950848;
	pathTable["/0x00/MovX5"] = 20950856;
	pathTable["/0x00/MovY5"] = 20950860;
	pathTable["/0x00/opt1"] = 20950460;
	pathTable["/0x00/SatX5"] = 20950864;
	pathTable["/0x00/opt5"] = 20950868;
	pathTable["/0x00/SatY5"] = 20950872;
	pathTable["/0x00/MunX5"] = 20950884;
	pathTable["/0x00/MunY5"] = 20950888;
	pathTable["/0x00/DelX5"] = 20950896;
	pathTable["/0x00/DelY5"] = 20950900;
	pathTable["/0x00/FilX5"] = 20950908;
	pathTable["/0x00/FilY5"] = 20950912;
	pathTable["/0x00/RevY5"] = 20950920;
	pathTable["/0x00/VolV"] = 20950468;
	pathTable["/0x00/RevX5"] = 20950924;
	pathTable["/0x00/Vol5"] = 20950928;
	pathTable["/0x00/MovY0"] = 20950936;
	pathTable["/0x00/MovX0"] = 20950940;
	pathTable["/0x00/Vol0"] = 20950944;
	pathTable["/0x00/opt0"] = 20950948;
	pathTable["/0x00/SatX0"] = 20950956;
	pathTable["/0x00/SatY0"] = 20950960;
	pathTable["/0x00/MunX0"] = 20950968;
	pathTable["/0x00/MunY0"] = 20950972;
	pathTable["/0x00/MunY1"] = 20950512;
	pathTable["/0x00/DelX0"] = 20950980;
	pathTable["/0x00/DelY0"] = 20950984;
	pathTable["/0x00/FilX0"] = 20950992;
	pathTable["/0x00/FilY0"] = 20950996;
	pathTable["/0x00/RevY0"] = 20951004;
	pathTable["/0x00/RevX0"] = 20951008;
	pathTable["/0x00/VolL"] = 20951032;
	pathTable["/0x00/MunX1"] = 20950516;
	return pathTable;
}

function getJSONeffetFaust() {
	return "{  \"name\": \"\",  \"outputs\": \"2\",  \"meta\": [    { \"effect.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"effect.lib/copyright\": \"Julius O. Smith III\" },   { \"effect.lib/exciter_author\": \"Priyanka Shekar (pshekar@ccrma.stanford.edu)\" },   { \"effect.lib/exciter_copyright\": \"Copyright (c) 2013 Priyanka Shekar\" },   { \"effect.lib/exciter_license\": \"MIT License (MIT)\" },   { \"effect.lib/exciter_name\": \"Harmonic Exciter\" },   { \"effect.lib/exciter_version\": \"1.0\" },   { \"effect.lib/license\": \"STK-4.3\" },   { \"effect.lib/name\": \"Faust Audio Effect Library\" },   { \"effect.lib/version\": \"1.33\" },   { \"filter.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"filter.lib/copyright\": \"Julius O. Smith III\" },   { \"filter.lib/license\": \"STK-4.3\" },   { \"filter.lib/name\": \"Faust Filter Library\" },   { \"filter.lib/reference\": \"https://ccrma.stanford.edu/~jos/filters/\" },   { \"filter.lib/version\": \"1.29\" },   { \"hoa.lib/author\": \"Pierre Guillot\" },   { \"hoa.lib/copyright\": \"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\" },   { \"hoa.lib/name\": \"HOA\" },   { \"hoa.lib/title\": \"High Order Ambisonics library\" },   { \"instrument.lib/author\": \"Romain Michon (rmichon@ccrma.stanford.edu)\" },   { \"instrument.lib/copyright\": \"Romain Michon\" },   { \"instrument.lib/licence\": \"STK-4.3\" },   { \"instrument.lib/name\": \"Faust-STK Tools Library\" },   { \"instrument.lib/version\": \"1.0\" },   { \"math.lib/author\": \"GRAME\" },   { \"math.lib/copyright\": \"GRAME\" },   { \"math.lib/license\": \"LGPL with exception\" },   { \"math.lib/name\": \"Math Library\" },   { \"math.lib/version\": \"1.0\" },   { \"music.lib/author\": \"GRAME\" },   { \"music.lib/copyright\": \"GRAME\" },   { \"music.lib/license\": \"LGPL with exception\" },   { \"music.lib/name\": \"Music Library\" },   { \"music.lib/version\": \"1.0\" }  ],  \"ui\": [    {    \"type\": \"vgroup\",    \"label\": \"0x00\",    \"items\": [      {      \"type\": \"button\",      \"label\": \"DelB0\",      \"address\": \"/0x00/DelB0\"     },     {      \"type\": \"button\",      \"label\": \"DelB1\",      \"address\": \"/0x00/DelB1\"     },     {      \"type\": \"button\",      \"label\": \"DelB2\",      \"address\": \"/0x00/DelB2\"     },     {      \"type\": \"button\",      \"label\": \"DelB3\",      \"address\": \"/0x00/DelB3\"     },     {      \"type\": \"button\",      \"label\": \"DelB4\",      \"address\": \"/0x00/DelB4\"     },     {      \"type\": \"button\",      \"label\": \"DelB5\",      \"address\": \"/0x00/DelB5\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX0\",      \"address\": \"/0x00/DelX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX1\",      \"address\": \"/0x00/DelX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX2\",      \"address\": \"/0x00/DelX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX3\",      \"address\": \"/0x00/DelX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX4\",      \"address\": \"/0x00/DelX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX5\",      \"address\": \"/0x00/DelX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY0\",      \"address\": \"/0x00/DelY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY1\",      \"address\": \"/0x00/DelY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY2\",      \"address\": \"/0x00/DelY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY3\",      \"address\": \"/0x00/DelY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY4\",      \"address\": \"/0x00/DelY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY5\",      \"address\": \"/0x00/DelY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"FilB0\",      \"address\": \"/0x00/FilB0\"     },     {      \"type\": \"button\",      \"label\": \"FilB1\",      \"address\": \"/0x00/FilB1\"     },     {      \"type\": \"button\",      \"label\": \"FilB2\",      \"address\": \"/0x00/FilB2\"     },     {      \"type\": \"button\",      \"label\": \"FilB3\",      \"address\": \"/0x00/FilB3\"     },     {      \"type\": \"button\",      \"label\": \"FilB4\",      \"address\": \"/0x00/FilB4\"     },     {      \"type\": \"button\",      \"label\": \"FilB5\",      \"address\": \"/0x00/FilB5\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX0\",      \"address\": \"/0x00/FilX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX1\",      \"address\": \"/0x00/FilX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX2\",      \"address\": \"/0x00/FilX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX3\",      \"address\": \"/0x00/FilX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX4\",      \"address\": \"/0x00/FilX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX5\",      \"address\": \"/0x00/FilX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY0\",      \"address\": \"/0x00/FilY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY1\",      \"address\": \"/0x00/FilY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY2\",      \"address\": \"/0x00/FilY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY3\",      \"address\": \"/0x00/FilY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY4\",      \"address\": \"/0x00/FilY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY5\",      \"address\": \"/0x00/FilY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX0\",      \"address\": \"/0x00/MovX0\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX1\",      \"address\": \"/0x00/MovX1\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX2\",      \"address\": \"/0x00/MovX2\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX3\",      \"address\": \"/0x00/MovX3\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX4\",      \"address\": \"/0x00/MovX4\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX5\",      \"address\": \"/0x00/MovX5\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY0\",      \"address\": \"/0x00/MovY0\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY1\",      \"address\": \"/0x00/MovY1\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY2\",      \"address\": \"/0x00/MovY2\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY3\",      \"address\": \"/0x00/MovY3\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY4\",      \"address\": \"/0x00/MovY4\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY5\",      \"address\": \"/0x00/MovY5\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"button\",      \"label\": \"MunB0\",      \"address\": \"/0x00/MunB0\"     },     {      \"type\": \"button\",      \"label\": \"MunB1\",      \"address\": \"/0x00/MunB1\"     },     {      \"type\": \"button\",      \"label\": \"MunB2\",      \"address\": \"/0x00/MunB2\"     },     {      \"type\": \"button\",      \"label\": \"MunB3\",      \"address\": \"/0x00/MunB3\"     },     {      \"type\": \"button\",      \"label\": \"MunB4\",      \"address\": \"/0x00/MunB4\"     },     {      \"type\": \"button\",      \"label\": \"MunB5\",      \"address\": \"/0x00/MunB5\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX0\",      \"address\": \"/0x00/MunX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX1\",      \"address\": \"/0x00/MunX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX2\",      \"address\": \"/0x00/MunX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX3\",      \"address\": \"/0x00/MunX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX4\",      \"address\": \"/0x00/MunX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX5\",      \"address\": \"/0x00/MunX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY0\",      \"address\": \"/0x00/MunY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY1\",      \"address\": \"/0x00/MunY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY2\",      \"address\": \"/0x00/MunY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY3\",      \"address\": \"/0x00/MunY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY4\",      \"address\": \"/0x00/MunY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY5\",      \"address\": \"/0x00/MunY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"RevB0\",      \"address\": \"/0x00/RevB0\"     },     {      \"type\": \"button\",      \"label\": \"RevB1\",      \"address\": \"/0x00/RevB1\"     },     {      \"type\": \"button\",      \"label\": \"RevB2\",      \"address\": \"/0x00/RevB2\"     },     {      \"type\": \"button\",      \"label\": \"RevB3\",      \"address\": \"/0x00/RevB3\"     },     {      \"type\": \"button\",      \"label\": \"RevB4\",      \"address\": \"/0x00/RevB4\"     },     {      \"type\": \"button\",      \"label\": \"RevB5\",      \"address\": \"/0x00/RevB5\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX0\",      \"address\": \"/0x00/RevX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX1\",      \"address\": \"/0x00/RevX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX2\",      \"address\": \"/0x00/RevX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX3\",      \"address\": \"/0x00/RevX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX4\",      \"address\": \"/0x00/RevX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX5\",      \"address\": \"/0x00/RevX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY0\",      \"address\": \"/0x00/RevY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY1\",      \"address\": \"/0x00/RevY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY2\",      \"address\": \"/0x00/RevY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY3\",      \"address\": \"/0x00/RevY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY4\",      \"address\": \"/0x00/RevY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY5\",      \"address\": \"/0x00/RevY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"SatB0\",      \"address\": \"/0x00/SatB0\"     },     {      \"type\": \"button\",      \"label\": \"SatB1\",      \"address\": \"/0x00/SatB1\"     },     {      \"type\": \"button\",      \"label\": \"SatB2\",      \"address\": \"/0x00/SatB2\"     },     {      \"type\": \"button\",      \"label\": \"SatB3\",      \"address\": \"/0x00/SatB3\"     },     {      \"type\": \"button\",      \"label\": \"SatB4\",      \"address\": \"/0x00/SatB4\"     },     {      \"type\": \"button\",      \"label\": \"SatB5\",      \"address\": \"/0x00/SatB5\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX0\",      \"address\": \"/0x00/SatX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX1\",      \"address\": \"/0x00/SatX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX2\",      \"address\": \"/0x00/SatX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX3\",      \"address\": \"/0x00/SatX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX4\",      \"address\": \"/0x00/SatX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX5\",      \"address\": \"/0x00/SatX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY0\",      \"address\": \"/0x00/SatY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY1\",      \"address\": \"/0x00/SatY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY2\",      \"address\": \"/0x00/SatY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY3\",      \"address\": \"/0x00/SatY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY4\",      \"address\": \"/0x00/SatY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY5\",      \"address\": \"/0x00/SatY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol0\",      \"address\": \"/0x00/Vol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol1\",      \"address\": \"/0x00/Vol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol2\",      \"address\": \"/0x00/Vol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol3\",      \"address\": \"/0x00/Vol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol4\",      \"address\": \"/0x00/Vol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol5\",      \"address\": \"/0x00/Vol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"VolL\",      \"address\": \"/0x00/VolL\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"VolS\",      \"address\": \"/0x00/VolS\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"VolV\",      \"address\": \"/0x00/VolV\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel0\",      \"address\": \"/0x00/audioLevel0\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel1\",      \"address\": \"/0x00/audioLevel1\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel2\",      \"address\": \"/0x00/audioLevel2\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel3\",      \"address\": \"/0x00/audioLevel3\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel4\",      \"address\": \"/0x00/audioLevel4\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel5\",      \"address\": \"/0x00/audioLevel5\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"metLevel\",      \"address\": \"/0x00/metLevel\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt0\",      \"address\": \"/0x00/opt0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt1\",      \"address\": \"/0x00/opt1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt2\",      \"address\": \"/0x00/opt2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt3\",      \"address\": \"/0x00/opt3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt4\",      \"address\": \"/0x00/opt4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt5\",      \"address\": \"/0x00/opt5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     }    ]   }  ] } ";
}

function metadataeffetFaust(m) {
	m.declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("effect.lib/copyright", "Julius O. Smith III");
	m.declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
	m.declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("effect.lib/exciter_license", "MIT License (MIT)");
	m.declare("effect.lib/exciter_name", "Harmonic Exciter");
	m.declare("effect.lib/exciter_version", "1.0");
	m.declare("effect.lib/license", "STK-4.3");
	m.declare("effect.lib/name", "Faust Audio Effect Library");
	m.declare("effect.lib/version", "1.33");
	m.declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("filter.lib/copyright", "Julius O. Smith III");
	m.declare("filter.lib/license", "STK-4.3");
	m.declare("filter.lib/name", "Faust Filter Library");
	m.declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
	m.declare("filter.lib/version", "1.29");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "HOA");
	m.declare("hoa.lib/title", "High Order Ambisonics library");
	m.declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
	m.declare("instrument.lib/copyright", "Romain Michon");
	m.declare("instrument.lib/licence", "STK-4.3");
	m.declare("instrument.lib/name", "Faust-STK Tools Library");
	m.declare("instrument.lib/version", "1.0");
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
}


// Standard Faust DSP

faust.effetFaust = function (context, buffer_size) {

    var handler = null;
    var ins, outs;
    var numIn, numOut;
    
    var scriptProcessor;
    
    var dspInChannnels = [];
    var dspOutChannnels = [];
   
    // Keep JSON parsed object
    var jon_object = JSON.parse(getJSONeffetFaust());
    
    function getNumInputsAux () 
    {
        return (jon_object.inputs !== undefined) ? parseInt(jon_object.inputs) : 0;
    }
    
    function getNumOutputsAux () 
    {
        return (jon_object.outputs !== undefined) ? parseInt(jon_object.outputs) : 0;
    }
     
    // Memory allocator
    var ptr_size = 4; 
    var sample_size = 4;
    
    function pow2limit (x)
    {
        var n = 2;
        while (n < x) { n = 2 * n; }
        return (n < 65536) ? 65536 : n; // Minimum = 64 kB
    }
     
    var memory_size = pow2limit(getSizeeffetFaust() + (getNumInputsAux() + getNumOutputsAux()) * (ptr_size + (buffer_size * sample_size)));
   
    var HEAP = new ArrayBuffer(memory_size);
    var HEAP32 = new Int32Array(HEAP);
    var HEAPF32 = new Float32Array(HEAP);
     
    console.log(HEAP);
    console.log(HEAP32);
    console.log(HEAPF32);
 
    // bargraph
    var ouputs_timer = 5;
    var ouputs_items = [];
     
    // input items
    var inputs_items = [];
     
    // Start of HEAP index
    var audio_heap_ptr = 0;
     
    // Setup pointers offset
    var audio_heap_ptr_inputs = audio_heap_ptr; 
    var audio_heap_ptr_outputs = audio_heap_ptr_inputs + (getNumInputsAux() * ptr_size);
     
    // Setup buffer offset
    var audio_heap_inputs = audio_heap_ptr_outputs + (getNumOutputsAux() * ptr_size);
    var audio_heap_outputs = audio_heap_inputs + (getNumInputsAux() * buffer_size * sample_size);
    
    // Setup DSP offset
    var dsp_start = audio_heap_outputs + (getNumOutputsAux() * buffer_size * sample_size);
     
    // Start of DSP memory
    var dsp = dsp_start;
 
    // ASM module
    var factory = effetFaustModule(window, null, HEAP);
    console.log(factory);
 
    var pathTable = getPathTableeffetFaust();
    
    // Allocate table for 'setValue'
    var value_table = [];
        
    function update_outputs () 
    {
        if (ouputs_items.length > 0 && handler && ouputs_timer-- === 0) {
            ouputs_timer = 5;
            for (var i = 0; i < ouputs_items.length; i++) {
                handler(ouputs_items[i], factory.getValue(dsp, pathTable[ouputs_items[i]]));
            }
        }
    }
    
    function compute (e) 
    {
        var i, j;
        
        // Read inputs
        for (i = 0; i < numIn; i++) {
            var input = e.inputBuffer.getChannelData(i);
            var dspInput = dspInChannnels[i];
            for (j = 0; j < input.length; j++) {
                dspInput[j] = input[j];
            }
        }
        
        // Update control state
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = value_table[path];
            factory.setValue(dsp, pathTable[path], values[0]);
            values[0] = values[1];
        }
        
        // Compute
        factory.compute(dsp, buffer_size, ins, outs);
       
        // Update bargraph
        update_outputs();
        
        // Write outputs
        for (i = 0; i < numOut; i++) {
            var output = e.outputBuffer.getChannelData(i);
            var dspOutput = dspOutChannnels[i];
            for (j = 0; j < output.length; j++) {
                output[j] = dspOutput[j];
            }
        }
    };
         
    // JSON parsing
    function parse_ui (ui) 
    {
        for (var i = 0; i < ui.length; i++) {
            console.log(ui[i]);
            parse_group(ui[i]);
        }
    }
    
    function parse_group (group) 
    {
        if (group.items) {
            parse_items(group.items);
        }
    }
    
    function parse_items (items) 
    {
        var i;
        for (i = 0; i < items.length; i++) {
            parse_item(items[i]);
        }
    }
    
    function parse_item (item) 
    {
        if (item.type === "vgroup" || item.type === "hgroup" || item.type === "tgroup") {
            parse_items(item.items);
        } else if (item.type === "hbargraph" || item.type === "vbargraph") {
            // Keep bargraph adresses
            ouputs_items.push(item.address);
        } else if (item.type === "vslider" || item.type === "hslider" || item.type === "button" || item.type === "checkbox" || item.type === "nentry") {
            // Keep inputs adresses
            inputs_items.push(item.address);
        }
    }
      
    function init ()
    {
        var i;
        
        // Get input / output counts
        numIn = getNumInputsAux();
        numOut = getNumOutputsAux();
         
        // Setup web audio context
        console.log("buffer_size %d", buffer_size);
        scriptProcessor = context.createScriptProcessor(buffer_size, numIn, numOut);
        scriptProcessor.onaudioprocess = compute;
        
        if (numIn > 0) {
            ins = audio_heap_ptr_inputs; 
            for (i = 0; i < numIn; i++) { 
                HEAP32[(ins >> 2) + i] = audio_heap_inputs + ((buffer_size * sample_size) * i);
            }
     
            var dspInChans = HEAP32.subarray(ins >> 2, (ins + numIn * ptr_size) >> 2);
            for (i = 0; i < numIn; i++) {
                dspInChannnels[i] = HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + buffer_size * sample_size) >> 2);
            }
        }
        
        if (numOut > 0) {
            outs = audio_heap_ptr_outputs; 
            for (i = 0; i < numOut; i++) { 
                HEAP32[(outs >> 2) + i] = audio_heap_outputs + ((buffer_size * sample_size) * i);
            }
          
            var dspOutChans = HEAP32.subarray(outs >> 2, (outs + numOut * ptr_size) >> 2);
            for (i = 0; i < numOut; i++) {
                dspOutChannnels[i] = HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + buffer_size * sample_size) >> 2);
            }
        }
                                
        // bargraph
        parse_ui(jon_object.ui);
        
        // Init DSP
        factory.init(dsp, context.sampleRate);
        
        // Init 'value' table
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = new Float32Array(2);
            values[0] = values[1] = factory.getValue(dsp, pathTable[path]);
            value_table[path] = values;
        }
    }
    
    init();
    
    // External API
    return {
    
        getNumInputs : function () 
        {
            return getNumInputsAux();
        },
        
        getNumOutputs : function() 
        {
            return getNumOutputsAux();
        },
    
        destroy : function  ()
        {
            // Nothing to do
        },
        
        // Connect/disconnect to another node
        connect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.connect(node.getProcessor());
            } else {
                scriptProcessor.connect(node);
            }
        },

        disconnect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.disconnect(node.getProcessor());
            } else {
                scriptProcessor.disconnect(node);
            }
        },
        
        setHandler : function (hd)
        {
            handler = hd;
        },
        
        start : function () 
        {
            scriptProcessor.connect(context.destination);
        },

        stop : function () 
        {
            scriptProcessor.disconnect(context.destination);
        },

        setValue : function (path, val) 
        {
            var values = value_table[path];
            if (values) {
                if (factory.getValue(dsp, pathTable[path]) == values[0]) {
                    values[0] = val;
                } 
                values[1] = val;
            }
        },

        getValue : function (path) 
        {
            return factory.getValue(dsp, pathTable[path]);
        },
        
        controls : function()
        {
            return inputs_items;
        },
        
        json : function ()
        {
            return getJSONeffetFaust();
        },
        
        getProcessor : function ()
        {
            return scriptProcessor;
        }
    };
};

