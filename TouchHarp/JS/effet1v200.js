/* ------------------------------------------------------------
Code generated with Faust 2.0.a41 (http://faust.grame.fr)
------------------------------------------------------------ */
/*
 faust2webaudio
 
 Primarily written by Myles Borins
 During the Spring 2013 offering of Music 420b with Julius Smith
 A bit during the Summer of 2013 with the help of Joshua Kit Clayton
 And finally a sprint during the late fall of 2013 to get everything working
 A Special thanks to Yann Orlarey and St√©phane Letz
 
 faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
 Choose the license that best suits your project. The text of the MIT and GPL
 licenses are at the root directory.
 
 Additional code : GRAME 2014
 
 */
 
'use strict';

var faust = faust || {};



function effet1v200Module(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF32 = new global.Float32Array(buffer);
	
	var imul = global.Math.imul;
	var log = global.Math.log;
	
	var abs = global.Math.abs;
	var atan2f = global.Math.atan2;
	var cosf = global.Math.cos;
	var max = global.Math.max;
	var min = global.Math.min;
	var powf = global.Math.pow;
	var sinf = global.Math.sin;
	var sqrtf = global.Math.sqrt;
	var tanf = global.Math.tan;
	function faustpower2_f(value) {
		value = +(value);
		return +((value * value));
		
	}
	
	function faustpower2_i(value) {
		value = (value | 0);
		return (((value * value)) | 0);
		
	}
	
	function faustpower3_f(value) {
		value = +(value);
		return +(((value * value) * value));
		
	}
	
	function faustpower4_f(value) {
		value = +(value);
		return +((((value * value) * value) * value));
		
	}
	
	var floorf = global.Math.floor;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }

	function getNumInputseffet1v200SIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffet1v200SIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffet1v200SIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function filleffet1v200SIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[output + ((i | 0) << 2) >> 2] = 0.;
			
		}
		
	}

	function getNumInputseffet1v200SIG1(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffet1v200SIG1(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffet1v200SIG1(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i319 = 0;
		for (i319 = 0; (((i319 | 0) < 2) | 0); i319 = (((i319 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846528 + ((i319 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function filleffet1v200SIG1(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 18846528 + (0 << 2) >> 2] = ((1 + (HEAP32[dsp + 18846528 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF32[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738e-05 * +((((HEAP32[dsp + 18846528 + (0 << 2) >> 2] | 0) - 1) | 0)))));
			HEAP32[dsp + 18846528 + (1 << 2) >> 2] = (HEAP32[dsp + 18846528 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceIniteffet1v200SIG1(dsp, (samplingFreq | 0));
		filleffet1v200SIG1(dsp, 65536, (dsp + 0 | 0));
		
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var i3 = 0;
		var i4 = 0;
		var i5 = 0;
		var i6 = 0;
		var i7 = 0;
		var i8 = 0;
		var i9 = 0;
		var i10 = 0;
		var i11 = 0;
		var i12 = 0;
		var i13 = 0;
		var i14 = 0;
		var i15 = 0;
		var i16 = 0;
		var i17 = 0;
		var i18 = 0;
		var i19 = 0;
		var i20 = 0;
		var i21 = 0;
		var i22 = 0;
		var i23 = 0;
		var i24 = 0;
		var i25 = 0;
		var i26 = 0;
		var i27 = 0;
		var i28 = 0;
		var i29 = 0;
		var i30 = 0;
		var i31 = 0;
		var i32 = 0;
		var i33 = 0;
		var i34 = 0;
		var i35 = 0;
		var i36 = 0;
		var i37 = 0;
		var i38 = 0;
		var i39 = 0;
		var i40 = 0;
		var i41 = 0;
		var i42 = 0;
		var i43 = 0;
		var i44 = 0;
		var i45 = 0;
		var i46 = 0;
		var i47 = 0;
		var i48 = 0;
		var i49 = 0;
		var i50 = 0;
		var i51 = 0;
		var i52 = 0;
		var i53 = 0;
		var i54 = 0;
		var i55 = 0;
		var i56 = 0;
		var i57 = 0;
		var i58 = 0;
		var i59 = 0;
		var i60 = 0;
		var i61 = 0;
		var i62 = 0;
		var i63 = 0;
		var i64 = 0;
		var i65 = 0;
		var i66 = 0;
		var i67 = 0;
		var i68 = 0;
		var i69 = 0;
		var i70 = 0;
		var i71 = 0;
		var i72 = 0;
		var i73 = 0;
		var i74 = 0;
		var i75 = 0;
		var i76 = 0;
		var i77 = 0;
		var i78 = 0;
		var i79 = 0;
		var i80 = 0;
		var i81 = 0;
		var i82 = 0;
		var i83 = 0;
		var i84 = 0;
		var i85 = 0;
		var i86 = 0;
		var i87 = 0;
		var i88 = 0;
		var i89 = 0;
		var i90 = 0;
		var i91 = 0;
		var i92 = 0;
		var i93 = 0;
		var i94 = 0;
		var i95 = 0;
		var i96 = 0;
		var i97 = 0;
		var i98 = 0;
		var i99 = 0;
		var i100 = 0;
		var i101 = 0;
		var i102 = 0;
		var i103 = 0;
		var i104 = 0;
		var i105 = 0;
		var i106 = 0;
		var i107 = 0;
		var i108 = 0;
		var i109 = 0;
		var i110 = 0;
		var i111 = 0;
		var i112 = 0;
		var i113 = 0;
		var i114 = 0;
		var i115 = 0;
		var i116 = 0;
		var i117 = 0;
		var i118 = 0;
		var i119 = 0;
		var i120 = 0;
		var i121 = 0;
		var i122 = 0;
		var i123 = 0;
		var i124 = 0;
		var i125 = 0;
		var i126 = 0;
		var i127 = 0;
		var i128 = 0;
		var i129 = 0;
		var i130 = 0;
		var i131 = 0;
		var i132 = 0;
		var i133 = 0;
		var i134 = 0;
		var i135 = 0;
		var i136 = 0;
		var i137 = 0;
		var i138 = 0;
		var i139 = 0;
		var i140 = 0;
		var i141 = 0;
		var i142 = 0;
		var i143 = 0;
		var i144 = 0;
		var i145 = 0;
		var i146 = 0;
		var i147 = 0;
		var i148 = 0;
		var i149 = 0;
		var i150 = 0;
		var i151 = 0;
		var i152 = 0;
		var i153 = 0;
		var i154 = 0;
		var i155 = 0;
		var i156 = 0;
		var i157 = 0;
		var i158 = 0;
		var i159 = 0;
		var i160 = 0;
		var i161 = 0;
		var i162 = 0;
		var i163 = 0;
		var i164 = 0;
		var i165 = 0;
		var i166 = 0;
		var i167 = 0;
		var i168 = 0;
		var i169 = 0;
		var i170 = 0;
		var i171 = 0;
		var i172 = 0;
		var i173 = 0;
		var i174 = 0;
		var i175 = 0;
		var i176 = 0;
		var i177 = 0;
		var i178 = 0;
		var i179 = 0;
		var i180 = 0;
		var i181 = 0;
		var i182 = 0;
		var i183 = 0;
		var i184 = 0;
		var i185 = 0;
		var i186 = 0;
		var i187 = 0;
		var i188 = 0;
		var i189 = 0;
		var i190 = 0;
		var i191 = 0;
		var i192 = 0;
		var i193 = 0;
		var i194 = 0;
		var i195 = 0;
		var i196 = 0;
		var i197 = 0;
		var i198 = 0;
		var i199 = 0;
		var i200 = 0;
		var i201 = 0;
		var i202 = 0;
		var i203 = 0;
		var i204 = 0;
		var i205 = 0;
		var i206 = 0;
		var i207 = 0;
		var i208 = 0;
		var i209 = 0;
		var i210 = 0;
		var i211 = 0;
		var i212 = 0;
		var i213 = 0;
		var i214 = 0;
		var i215 = 0;
		var i216 = 0;
		var i217 = 0;
		var i218 = 0;
		var i219 = 0;
		var i220 = 0;
		var i221 = 0;
		var i222 = 0;
		var i223 = 0;
		var i224 = 0;
		var i225 = 0;
		var i226 = 0;
		var i227 = 0;
		var i228 = 0;
		var i229 = 0;
		var i230 = 0;
		var i231 = 0;
		var i232 = 0;
		var i233 = 0;
		var i234 = 0;
		var i235 = 0;
		var i236 = 0;
		var i237 = 0;
		var i238 = 0;
		var i239 = 0;
		var i240 = 0;
		var i241 = 0;
		var i242 = 0;
		var i243 = 0;
		var i244 = 0;
		var i245 = 0;
		var i246 = 0;
		var i247 = 0;
		var i248 = 0;
		var i249 = 0;
		var i250 = 0;
		var i251 = 0;
		var i252 = 0;
		var i253 = 0;
		var i254 = 0;
		var i255 = 0;
		var i256 = 0;
		var i257 = 0;
		var i258 = 0;
		var i259 = 0;
		var i260 = 0;
		var i261 = 0;
		var i262 = 0;
		var i263 = 0;
		var i264 = 0;
		var i265 = 0;
		var i266 = 0;
		var i267 = 0;
		var i268 = 0;
		var i269 = 0;
		var i270 = 0;
		var i271 = 0;
		var i272 = 0;
		var i273 = 0;
		var i274 = 0;
		var i275 = 0;
		var i276 = 0;
		var i277 = 0;
		var i278 = 0;
		var i279 = 0;
		var i280 = 0;
		var i281 = 0;
		var i282 = 0;
		var i283 = 0;
		var i284 = 0;
		var i285 = 0;
		var i286 = 0;
		var i287 = 0;
		var i288 = 0;
		var i289 = 0;
		var i290 = 0;
		var i291 = 0;
		var i292 = 0;
		var i293 = 0;
		var i294 = 0;
		var i295 = 0;
		var i296 = 0;
		var i297 = 0;
		var i298 = 0;
		var i299 = 0;
		var i300 = 0;
		var i301 = 0;
		var i302 = 0;
		var i303 = 0;
		var i304 = 0;
		var i305 = 0;
		var i306 = 0;
		var i307 = 0;
		var i308 = 0;
		var i309 = 0;
		var i310 = 0;
		var i311 = 0;
		var i312 = 0;
		var i313 = 0;
		var i314 = 0;
		var i315 = 0;
		var i316 = 0;
		var i317 = 0;
		var i318 = 0;
		var i320 = 0;
		var i321 = 0;
		var i322 = 0;
		HEAP32[dsp + 18846536 >> 2] = (samplingFreq | 0);
		HEAP32[dsp + 18846540 >> 2] = ((min(192000, ((max(1, (HEAP32[dsp + 18846536 >> 2] | 0))) | 0))) | 0);
		HEAPF32[dsp + 18846544 >> 2] = +((HEAP32[dsp + 18846540 >> 2] | 0));
		HEAPF32[dsp + 18846548 >> 2] = +(1. / +(HEAPF32[dsp + 18846544 >> 2]));
		HEAPF32[dsp + 18846552 >> 2] = +(faustpower2_f(+(HEAPF32[dsp + 18846548 >> 2])));
		HEAPF32[dsp + 18846556 >> 2] = +(4. * +(((faustpower2_i((HEAP32[dsp + 18846540 >> 2] | 0))) | 0)));
		HEAPF32[dsp + 18846560 >> 2] = +(3.14159 / +((HEAP32[dsp + 18846540 >> 2] | 0)));
		HEAPF32[dsp + 18846564 >> 2] = +(50.);
		HEAPF32[dsp + 18846568 >> 2] = +(1.64489 / +(HEAPF32[dsp + 18846544 >> 2]));
		HEAPF32[dsp + 18846572 >> 2] = +(2. * +((HEAP32[dsp + 18846540 >> 2] | 0)));
		HEAPF32[dsp + 18846576 >> 2] = +(0.5 / +((HEAP32[dsp + 18846540 >> 2] | 0)));
		HEAPF32[dsp + 18846580 >> 2] = +(2. / +(HEAPF32[dsp + 18846544 >> 2]));
		HEAPF32[dsp + 18846584 >> 2] = +(6.42109 / +(HEAPF32[dsp + 18846544 >> 2]));
		HEAPF32[dsp + 18846588 >> 2] = +(0.);
		for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844576 + ((i0 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 262144 | 0));
		HEAPF32[dsp + 18846592 >> 2] = +(10.);
		for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844584 + ((i1 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 18846596 >> 2] = 0;
		for (i2 = 0; (((i2 | 0) < 128) | 0); i2 = (((i2 | 0) + 1) | 0)) {
			HEAP32[dsp + 18833344 + ((i2 | 0) << 2) >> 2] = 0;
			
		}
		for (i3 = 0; (((i3 | 0) < 2) | 0); i3 = (((i3 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844592 + ((i3 | 0) << 2) >> 2] = 0;
			
		}
		for (i4 = 0; (((i4 | 0) < 2) | 0); i4 = (((i4 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844600 + ((i4 | 0) << 2) >> 2] = 0;
			
		}
		for (i5 = 0; (((i5 | 0) < 128) | 0); i5 = (((i5 | 0) + 1) | 0)) {
			HEAP32[dsp + 18833856 + ((i5 | 0) << 2) >> 2] = 0;
			
		}
		for (i6 = 0; (((i6 | 0) < 2) | 0); i6 = (((i6 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844608 + ((i6 | 0) << 2) >> 2] = 0;
			
		}
		for (i7 = 0; (((i7 | 0) < 2) | 0); i7 = (((i7 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844616 + ((i7 | 0) << 2) >> 2] = 0;
			
		}
		for (i8 = 0; (((i8 | 0) < 2) | 0); i8 = (((i8 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844624 + ((i8 | 0) << 2) >> 2] = 0;
			
		}
		for (i9 = 0; (((i9 | 0) < 65536) | 0); i9 = (((i9 | 0) + 1) | 0)) {
			HEAPF32[dsp + 17137600 + ((i9 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846600 >> 2] = +(0.);
		for (i10 = 0; (((i10 | 0) < 2) | 0); i10 = (((i10 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844632 + ((i10 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846604 >> 2] = +(0.);
		for (i11 = 0; (((i11 | 0) < 2) | 0); i11 = (((i11 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844640 + ((i11 | 0) << 2) >> 2] = 0.;
			
		}
		for (i12 = 0; (((i12 | 0) < 2) | 0); i12 = (((i12 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844648 + ((i12 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846608 >> 2] = +(0.);
		for (i13 = 0; (((i13 | 0) < 2) | 0); i13 = (((i13 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844656 + ((i13 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846612 >> 2] = +(faustpower3_f(+(HEAPF32[dsp + 18846548 >> 2])));
		HEAPF32[dsp + 18846616 >> 2] = +(4. * +(HEAPF32[dsp + 18846548 >> 2]));
		HEAPF32[dsp + 18846620 >> 2] = +(12.8422 / +(HEAPF32[dsp + 18846544 >> 2]));
		HEAPF32[dsp + 18846624 >> 2] = +(6. * +(HEAPF32[dsp + 18846552 >> 2]));
		for (i14 = 0; (((i14 | 0) < 5) | 0); i14 = (((i14 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844384 + ((i14 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846628 >> 2] = +(0.0792366 * +(faustpower4_f(+(HEAPF32[dsp + 18846548 >> 2]))));
		HEAPF32[dsp + 18846632 >> 2] = +(0.118855 * +(HEAPF32[dsp + 18846552 >> 2]));
		HEAPF32[dsp + 18846636 >> 2] = +(0.0198091 * +(HEAPF32[dsp + 18846552 >> 2]));
		HEAPF32[dsp + 18846640 >> 2] = +(2. * +(HEAPF32[dsp + 18846552 >> 2]));
		for (i15 = 0; (((i15 | 0) < 3) | 0); i15 = (((i15 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844504 + ((i15 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846644 >> 2] = +(0.);
		for (i16 = 0; (((i16 | 0) < 2) | 0); i16 = (((i16 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844664 + ((i16 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846648 >> 2] = +(0.);
		for (i17 = 0; (((i17 | 0) < 2) | 0); i17 = (((i17 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844672 + ((i17 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846652 >> 2] = +(6.28319 / +((HEAP32[dsp + 18846540 >> 2] | 0)));
		HEAPF32[dsp + 18846656 >> 2] = +(100.);
		for (i18 = 0; (((i18 | 0) < 2) | 0); i18 = (((i18 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844680 + ((i18 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846660 >> 2] = +(0.);
		for (i19 = 0; (((i19 | 0) < 2) | 0); i19 = (((i19 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844688 + ((i19 | 0) << 2) >> 2] = 0.;
			
		}
		for (i20 = 0; (((i20 | 0) < 2) | 0); i20 = (((i20 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844696 + ((i20 | 0) << 2) >> 2] = 0.;
			
		}
		for (i21 = 0; (((i21 | 0) < 2) | 0); i21 = (((i21 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844704 + ((i21 | 0) << 2) >> 2] = 0.;
			
		}
		for (i22 = 0; (((i22 | 0) < 2) | 0); i22 = (((i22 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844712 + ((i22 | 0) << 2) >> 2] = 0.;
			
		}
		for (i23 = 0; (((i23 | 0) < 2) | 0); i23 = (((i23 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844720 + ((i23 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846664 >> 2] = +(0.);
		for (i24 = 0; (((i24 | 0) < 2) | 0); i24 = (((i24 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844728 + ((i24 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846668 >> 2] = +(150.);
		for (i25 = 0; (((i25 | 0) < 2) | 0); i25 = (((i25 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844736 + ((i25 | 0) << 2) >> 2] = 0.;
			
		}
		for (i26 = 0; (((i26 | 0) < 2) | 0); i26 = (((i26 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844744 + ((i26 | 0) << 2) >> 2] = 0.;
			
		}
		for (i27 = 0; (((i27 | 0) < 2) | 0); i27 = (((i27 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844752 + ((i27 | 0) << 2) >> 2] = 0.;
			
		}
		for (i28 = 0; (((i28 | 0) < 2) | 0); i28 = (((i28 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844760 + ((i28 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846672 >> 2] = +(0.);
		for (i29 = 0; (((i29 | 0) < 2) | 0); i29 = (((i29 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844768 + ((i29 | 0) << 2) >> 2] = 0.;
			
		}
		for (i30 = 0; (((i30 | 0) < 262144) | 0); i30 = (((i30 | 0) + 1) | 0)) {
			HEAPF32[dsp + 10846144 + ((i30 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846676 >> 2] = +(0.);
		for (i31 = 0; (((i31 | 0) < 2) | 0); i31 = (((i31 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844776 + ((i31 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846680 >> 2] = +(200.);
		HEAPF32[dsp + 18846684 >> 2] = +(0.);
		for (i32 = 0; (((i32 | 0) < 2) | 0); i32 = (((i32 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844784 + ((i32 | 0) << 2) >> 2] = 0.;
			
		}
		for (i33 = 0; (((i33 | 0) < 2048) | 0); i33 = (((i33 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18710464 + ((i33 | 0) << 2) >> 2] = 0.;
			
		}
		for (i34 = 0; (((i34 | 0) < 2) | 0); i34 = (((i34 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844792 + ((i34 | 0) << 2) >> 2] = 0.;
			
		}
		for (i35 = 0; (((i35 | 0) < 2) | 0); i35 = (((i35 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844800 + ((i35 | 0) << 2) >> 2] = 0.;
			
		}
		for (i36 = 0; (((i36 | 0) < 1024) | 0); i36 = (((i36 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18759616 + ((i36 | 0) << 2) >> 2] = 0.;
			
		}
		for (i37 = 0; (((i37 | 0) < 2) | 0); i37 = (((i37 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844808 + ((i37 | 0) << 2) >> 2] = 0.;
			
		}
		for (i38 = 0; (((i38 | 0) < 2) | 0); i38 = (((i38 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844816 + ((i38 | 0) << 2) >> 2] = 0.;
			
		}
		for (i39 = 0; (((i39 | 0) < 1024) | 0); i39 = (((i39 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18763712 + ((i39 | 0) << 2) >> 2] = 0.;
			
		}
		for (i40 = 0; (((i40 | 0) < 2) | 0); i40 = (((i40 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844824 + ((i40 | 0) << 2) >> 2] = 0.;
			
		}
		for (i41 = 0; (((i41 | 0) < 2) | 0); i41 = (((i41 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844832 + ((i41 | 0) << 2) >> 2] = 0.;
			
		}
		for (i42 = 0; (((i42 | 0) < 1024) | 0); i42 = (((i42 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18767808 + ((i42 | 0) << 2) >> 2] = 0.;
			
		}
		for (i43 = 0; (((i43 | 0) < 2) | 0); i43 = (((i43 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844840 + ((i43 | 0) << 2) >> 2] = 0.;
			
		}
		for (i44 = 0; (((i44 | 0) < 2) | 0); i44 = (((i44 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844848 + ((i44 | 0) << 2) >> 2] = 0.;
			
		}
		for (i45 = 0; (((i45 | 0) < 128) | 0); i45 = (((i45 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18834368 + ((i45 | 0) << 2) >> 2] = 0.;
			
		}
		for (i46 = 0; (((i46 | 0) < 2) | 0); i46 = (((i46 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844856 + ((i46 | 0) << 2) >> 2] = 0.;
			
		}
		for (i47 = 0; (((i47 | 0) < 64) | 0); i47 = (((i47 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18842560 + ((i47 | 0) << 2) >> 2] = 0.;
			
		}
		for (i48 = 0; (((i48 | 0) < 2) | 0); i48 = (((i48 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844864 + ((i48 | 0) << 2) >> 2] = 0.;
			
		}
		for (i49 = 0; (((i49 | 0) < 12) | 0); i49 = (((i49 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844096 + ((i49 | 0) << 2) >> 2] = 0.;
			
		}
		for (i50 = 0; (((i50 | 0) < 2) | 0); i50 = (((i50 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844872 + ((i50 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846688 >> 2] = +(5.);
		for (i51 = 0; (((i51 | 0) < 2) | 0); i51 = (((i51 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844880 + ((i51 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846692 >> 2] = +(0.);
		for (i52 = 0; (((i52 | 0) < 2) | 0); i52 = (((i52 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844888 + ((i52 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846696 >> 2] = +(0.);
		for (i53 = 0; (((i53 | 0) < 2) | 0); i53 = (((i53 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844896 + ((i53 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846700 >> 2] = +(0.);
		for (i54 = 0; (((i54 | 0) < 2) | 0); i54 = (((i54 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844904 + ((i54 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846704 >> 2] = +(5.);
		for (i55 = 0; (((i55 | 0) < 2) | 0); i55 = (((i55 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844912 + ((i55 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846708 >> 2] = +(0.);
		for (i56 = 0; (((i56 | 0) < 2) | 0); i56 = (((i56 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844920 + ((i56 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846712 >> 2] = +(0.);
		for (i57 = 0; (((i57 | 0) < 2) | 0); i57 = (((i57 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844928 + ((i57 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846716 >> 2] = +(0.);
		for (i58 = 0; (((i58 | 0) < 2) | 0); i58 = (((i58 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844936 + ((i58 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846720 >> 2] = +(0.);
		for (i59 = 0; (((i59 | 0) < 2) | 0); i59 = (((i59 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844944 + ((i59 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846724 >> 2] = +(50.);
		HEAPF32[dsp + 18846728 >> 2] = +(0.);
		for (i60 = 0; (((i60 | 0) < 2) | 0); i60 = (((i60 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844952 + ((i60 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846732 >> 2] = +(0.);
		for (i61 = 0; (((i61 | 0) < 2) | 0); i61 = (((i61 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844960 + ((i61 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846736 >> 2] = +(0.);
		for (i62 = 0; (((i62 | 0) < 2) | 0); i62 = (((i62 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844968 + ((i62 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 2026144 | 0));
		for (i63 = 0; (((i63 | 0) < 2) | 0); i63 = (((i63 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844976 + ((i63 | 0) << 2) >> 2] = 0;
			
		}
		for (i64 = 0; (((i64 | 0) < 128) | 0); i64 = (((i64 | 0) + 1) | 0)) {
			HEAP32[dsp + 18834880 + ((i64 | 0) << 2) >> 2] = 0;
			
		}
		for (i65 = 0; (((i65 | 0) < 2) | 0); i65 = (((i65 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844984 + ((i65 | 0) << 2) >> 2] = 0;
			
		}
		for (i66 = 0; (((i66 | 0) < 2) | 0); i66 = (((i66 | 0) + 1) | 0)) {
			HEAP32[dsp + 18844992 + ((i66 | 0) << 2) >> 2] = 0;
			
		}
		for (i67 = 0; (((i67 | 0) < 128) | 0); i67 = (((i67 | 0) + 1) | 0)) {
			HEAP32[dsp + 18835392 + ((i67 | 0) << 2) >> 2] = 0;
			
		}
		for (i68 = 0; (((i68 | 0) < 2) | 0); i68 = (((i68 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845000 + ((i68 | 0) << 2) >> 2] = 0;
			
		}
		for (i69 = 0; (((i69 | 0) < 2) | 0); i69 = (((i69 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845008 + ((i69 | 0) << 2) >> 2] = 0;
			
		}
		for (i70 = 0; (((i70 | 0) < 65536) | 0); i70 = (((i70 | 0) + 1) | 0)) {
			HEAPF32[dsp + 17399744 + ((i70 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846740 >> 2] = +(0.);
		for (i71 = 0; (((i71 | 0) < 2) | 0); i71 = (((i71 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845016 + ((i71 | 0) << 2) >> 2] = 0.;
			
		}
		for (i72 = 0; (((i72 | 0) < 2) | 0); i72 = (((i72 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845024 + ((i72 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846744 >> 2] = +(0.);
		for (i73 = 0; (((i73 | 0) < 2) | 0); i73 = (((i73 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845032 + ((i73 | 0) << 2) >> 2] = 0.;
			
		}
		for (i74 = 0; (((i74 | 0) < 5) | 0); i74 = (((i74 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844404 + ((i74 | 0) << 2) >> 2] = 0.;
			
		}
		for (i75 = 0; (((i75 | 0) < 3) | 0); i75 = (((i75 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844516 + ((i75 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846748 >> 2] = +(0.);
		HEAPF32[dsp + 18846752 >> 2] = +(100.);
		for (i76 = 0; (((i76 | 0) < 2) | 0); i76 = (((i76 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845040 + ((i76 | 0) << 2) >> 2] = 0.;
			
		}
		for (i77 = 0; (((i77 | 0) < 2) | 0); i77 = (((i77 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845048 + ((i77 | 0) << 2) >> 2] = 0.;
			
		}
		for (i78 = 0; (((i78 | 0) < 2) | 0); i78 = (((i78 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845056 + ((i78 | 0) << 2) >> 2] = 0.;
			
		}
		for (i79 = 0; (((i79 | 0) < 2) | 0); i79 = (((i79 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845064 + ((i79 | 0) << 2) >> 2] = 0.;
			
		}
		for (i80 = 0; (((i80 | 0) < 2) | 0); i80 = (((i80 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845072 + ((i80 | 0) << 2) >> 2] = 0.;
			
		}
		for (i81 = 0; (((i81 | 0) < 2) | 0); i81 = (((i81 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845080 + ((i81 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846756 >> 2] = +(0.);
		for (i82 = 0; (((i82 | 0) < 2) | 0); i82 = (((i82 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845088 + ((i82 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846760 >> 2] = +(150.);
		for (i83 = 0; (((i83 | 0) < 2) | 0); i83 = (((i83 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845096 + ((i83 | 0) << 2) >> 2] = 0.;
			
		}
		for (i84 = 0; (((i84 | 0) < 2) | 0); i84 = (((i84 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845104 + ((i84 | 0) << 2) >> 2] = 0.;
			
		}
		for (i85 = 0; (((i85 | 0) < 2) | 0); i85 = (((i85 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845112 + ((i85 | 0) << 2) >> 2] = 0.;
			
		}
		for (i86 = 0; (((i86 | 0) < 2) | 0); i86 = (((i86 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845120 + ((i86 | 0) << 2) >> 2] = 0.;
			
		}
		for (i87 = 0; (((i87 | 0) < 262144) | 0); i87 = (((i87 | 0) + 1) | 0)) {
			HEAPF32[dsp + 11894720 + ((i87 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846764 >> 2] = +(200.);
		HEAPF32[dsp + 18846768 >> 2] = +(0.);
		for (i88 = 0; (((i88 | 0) < 2) | 0); i88 = (((i88 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845128 + ((i88 | 0) << 2) >> 2] = 0.;
			
		}
		for (i89 = 0; (((i89 | 0) < 2048) | 0); i89 = (((i89 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18718656 + ((i89 | 0) << 2) >> 2] = 0.;
			
		}
		for (i90 = 0; (((i90 | 0) < 2) | 0); i90 = (((i90 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845136 + ((i90 | 0) << 2) >> 2] = 0.;
			
		}
		for (i91 = 0; (((i91 | 0) < 2) | 0); i91 = (((i91 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845144 + ((i91 | 0) << 2) >> 2] = 0.;
			
		}
		for (i92 = 0; (((i92 | 0) < 1024) | 0); i92 = (((i92 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18771904 + ((i92 | 0) << 2) >> 2] = 0.;
			
		}
		for (i93 = 0; (((i93 | 0) < 2) | 0); i93 = (((i93 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845152 + ((i93 | 0) << 2) >> 2] = 0.;
			
		}
		for (i94 = 0; (((i94 | 0) < 2) | 0); i94 = (((i94 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845160 + ((i94 | 0) << 2) >> 2] = 0.;
			
		}
		for (i95 = 0; (((i95 | 0) < 1024) | 0); i95 = (((i95 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18776000 + ((i95 | 0) << 2) >> 2] = 0.;
			
		}
		for (i96 = 0; (((i96 | 0) < 2) | 0); i96 = (((i96 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845168 + ((i96 | 0) << 2) >> 2] = 0.;
			
		}
		for (i97 = 0; (((i97 | 0) < 2) | 0); i97 = (((i97 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845176 + ((i97 | 0) << 2) >> 2] = 0.;
			
		}
		for (i98 = 0; (((i98 | 0) < 1024) | 0); i98 = (((i98 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18780096 + ((i98 | 0) << 2) >> 2] = 0.;
			
		}
		for (i99 = 0; (((i99 | 0) < 2) | 0); i99 = (((i99 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845184 + ((i99 | 0) << 2) >> 2] = 0.;
			
		}
		for (i100 = 0; (((i100 | 0) < 2) | 0); i100 = (((i100 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845192 + ((i100 | 0) << 2) >> 2] = 0.;
			
		}
		for (i101 = 0; (((i101 | 0) < 128) | 0); i101 = (((i101 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18835904 + ((i101 | 0) << 2) >> 2] = 0.;
			
		}
		for (i102 = 0; (((i102 | 0) < 2) | 0); i102 = (((i102 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845200 + ((i102 | 0) << 2) >> 2] = 0.;
			
		}
		for (i103 = 0; (((i103 | 0) < 64) | 0); i103 = (((i103 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18842816 + ((i103 | 0) << 2) >> 2] = 0.;
			
		}
		for (i104 = 0; (((i104 | 0) < 2) | 0); i104 = (((i104 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845208 + ((i104 | 0) << 2) >> 2] = 0.;
			
		}
		for (i105 = 0; (((i105 | 0) < 12) | 0); i105 = (((i105 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844144 + ((i105 | 0) << 2) >> 2] = 0.;
			
		}
		for (i106 = 0; (((i106 | 0) < 2) | 0); i106 = (((i106 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845216 + ((i106 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846772 >> 2] = +(0.);
		for (i107 = 0; (((i107 | 0) < 2) | 0); i107 = (((i107 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845224 + ((i107 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846776 >> 2] = +(0.);
		for (i108 = 0; (((i108 | 0) < 2) | 0); i108 = (((i108 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845232 + ((i108 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846780 >> 2] = +(0.);
		for (i109 = 0; (((i109 | 0) < 2) | 0); i109 = (((i109 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845240 + ((i109 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846784 >> 2] = +(0.);
		for (i110 = 0; (((i110 | 0) < 2) | 0); i110 = (((i110 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845248 + ((i110 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846788 >> 2] = +(0.);
		HEAPF32[dsp + 18846792 >> 2] = +(0.);
		for (i111 = 0; (((i111 | 0) < 2) | 0); i111 = (((i111 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845256 + ((i111 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846796 >> 2] = +(0.);
		for (i112 = 0; (((i112 | 0) < 2) | 0); i112 = (((i112 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845264 + ((i112 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846800 >> 2] = +(0.);
		for (i113 = 0; (((i113 | 0) < 2) | 0); i113 = (((i113 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845272 + ((i113 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 3790144 | 0));
		for (i114 = 0; (((i114 | 0) < 2) | 0); i114 = (((i114 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845280 + ((i114 | 0) << 2) >> 2] = 0;
			
		}
		for (i115 = 0; (((i115 | 0) < 128) | 0); i115 = (((i115 | 0) + 1) | 0)) {
			HEAP32[dsp + 18836416 + ((i115 | 0) << 2) >> 2] = 0;
			
		}
		for (i116 = 0; (((i116 | 0) < 2) | 0); i116 = (((i116 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845288 + ((i116 | 0) << 2) >> 2] = 0;
			
		}
		for (i117 = 0; (((i117 | 0) < 2) | 0); i117 = (((i117 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845296 + ((i117 | 0) << 2) >> 2] = 0;
			
		}
		for (i118 = 0; (((i118 | 0) < 128) | 0); i118 = (((i118 | 0) + 1) | 0)) {
			HEAP32[dsp + 18836928 + ((i118 | 0) << 2) >> 2] = 0;
			
		}
		for (i119 = 0; (((i119 | 0) < 2) | 0); i119 = (((i119 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845304 + ((i119 | 0) << 2) >> 2] = 0;
			
		}
		for (i120 = 0; (((i120 | 0) < 2) | 0); i120 = (((i120 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845312 + ((i120 | 0) << 2) >> 2] = 0;
			
		}
		for (i121 = 0; (((i121 | 0) < 65536) | 0); i121 = (((i121 | 0) + 1) | 0)) {
			HEAPF32[dsp + 17661888 + ((i121 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846804 >> 2] = +(0.);
		for (i122 = 0; (((i122 | 0) < 2) | 0); i122 = (((i122 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845320 + ((i122 | 0) << 2) >> 2] = 0.;
			
		}
		for (i123 = 0; (((i123 | 0) < 2) | 0); i123 = (((i123 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845328 + ((i123 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846808 >> 2] = +(50.);
		HEAPF32[dsp + 18846812 >> 2] = +(0.);
		for (i124 = 0; (((i124 | 0) < 2) | 0); i124 = (((i124 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845336 + ((i124 | 0) << 2) >> 2] = 0.;
			
		}
		for (i125 = 0; (((i125 | 0) < 5) | 0); i125 = (((i125 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844424 + ((i125 | 0) << 2) >> 2] = 0.;
			
		}
		for (i126 = 0; (((i126 | 0) < 3) | 0); i126 = (((i126 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844528 + ((i126 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846816 >> 2] = +(100.);
		for (i127 = 0; (((i127 | 0) < 2) | 0); i127 = (((i127 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845344 + ((i127 | 0) << 2) >> 2] = 0.;
			
		}
		for (i128 = 0; (((i128 | 0) < 2) | 0); i128 = (((i128 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845352 + ((i128 | 0) << 2) >> 2] = 0.;
			
		}
		for (i129 = 0; (((i129 | 0) < 2) | 0); i129 = (((i129 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845360 + ((i129 | 0) << 2) >> 2] = 0.;
			
		}
		for (i130 = 0; (((i130 | 0) < 2) | 0); i130 = (((i130 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845368 + ((i130 | 0) << 2) >> 2] = 0.;
			
		}
		for (i131 = 0; (((i131 | 0) < 2) | 0); i131 = (((i131 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845376 + ((i131 | 0) << 2) >> 2] = 0.;
			
		}
		for (i132 = 0; (((i132 | 0) < 2) | 0); i132 = (((i132 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845384 + ((i132 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846820 >> 2] = +(0.);
		for (i133 = 0; (((i133 | 0) < 2) | 0); i133 = (((i133 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845392 + ((i133 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846824 >> 2] = +(150.);
		for (i134 = 0; (((i134 | 0) < 2) | 0); i134 = (((i134 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845400 + ((i134 | 0) << 2) >> 2] = 0.;
			
		}
		for (i135 = 0; (((i135 | 0) < 2) | 0); i135 = (((i135 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845408 + ((i135 | 0) << 2) >> 2] = 0.;
			
		}
		for (i136 = 0; (((i136 | 0) < 2) | 0); i136 = (((i136 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845416 + ((i136 | 0) << 2) >> 2] = 0.;
			
		}
		for (i137 = 0; (((i137 | 0) < 2) | 0); i137 = (((i137 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845424 + ((i137 | 0) << 2) >> 2] = 0.;
			
		}
		for (i138 = 0; (((i138 | 0) < 262144) | 0); i138 = (((i138 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12943296 + ((i138 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846828 >> 2] = +(200.);
		HEAPF32[dsp + 18846832 >> 2] = +(0.);
		for (i139 = 0; (((i139 | 0) < 2) | 0); i139 = (((i139 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845432 + ((i139 | 0) << 2) >> 2] = 0.;
			
		}
		for (i140 = 0; (((i140 | 0) < 2048) | 0); i140 = (((i140 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18726848 + ((i140 | 0) << 2) >> 2] = 0.;
			
		}
		for (i141 = 0; (((i141 | 0) < 2) | 0); i141 = (((i141 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845440 + ((i141 | 0) << 2) >> 2] = 0.;
			
		}
		for (i142 = 0; (((i142 | 0) < 2) | 0); i142 = (((i142 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845448 + ((i142 | 0) << 2) >> 2] = 0.;
			
		}
		for (i143 = 0; (((i143 | 0) < 1024) | 0); i143 = (((i143 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18784192 + ((i143 | 0) << 2) >> 2] = 0.;
			
		}
		for (i144 = 0; (((i144 | 0) < 2) | 0); i144 = (((i144 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845456 + ((i144 | 0) << 2) >> 2] = 0.;
			
		}
		for (i145 = 0; (((i145 | 0) < 2) | 0); i145 = (((i145 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845464 + ((i145 | 0) << 2) >> 2] = 0.;
			
		}
		for (i146 = 0; (((i146 | 0) < 1024) | 0); i146 = (((i146 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18788288 + ((i146 | 0) << 2) >> 2] = 0.;
			
		}
		for (i147 = 0; (((i147 | 0) < 2) | 0); i147 = (((i147 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845472 + ((i147 | 0) << 2) >> 2] = 0.;
			
		}
		for (i148 = 0; (((i148 | 0) < 2) | 0); i148 = (((i148 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845480 + ((i148 | 0) << 2) >> 2] = 0.;
			
		}
		for (i149 = 0; (((i149 | 0) < 1024) | 0); i149 = (((i149 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18792384 + ((i149 | 0) << 2) >> 2] = 0.;
			
		}
		for (i150 = 0; (((i150 | 0) < 2) | 0); i150 = (((i150 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845488 + ((i150 | 0) << 2) >> 2] = 0.;
			
		}
		for (i151 = 0; (((i151 | 0) < 2) | 0); i151 = (((i151 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845496 + ((i151 | 0) << 2) >> 2] = 0.;
			
		}
		for (i152 = 0; (((i152 | 0) < 128) | 0); i152 = (((i152 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18837440 + ((i152 | 0) << 2) >> 2] = 0.;
			
		}
		for (i153 = 0; (((i153 | 0) < 2) | 0); i153 = (((i153 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845504 + ((i153 | 0) << 2) >> 2] = 0.;
			
		}
		for (i154 = 0; (((i154 | 0) < 64) | 0); i154 = (((i154 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18843072 + ((i154 | 0) << 2) >> 2] = 0.;
			
		}
		for (i155 = 0; (((i155 | 0) < 2) | 0); i155 = (((i155 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845512 + ((i155 | 0) << 2) >> 2] = 0.;
			
		}
		for (i156 = 0; (((i156 | 0) < 12) | 0); i156 = (((i156 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844192 + ((i156 | 0) << 2) >> 2] = 0.;
			
		}
		for (i157 = 0; (((i157 | 0) < 2) | 0); i157 = (((i157 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845520 + ((i157 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846836 >> 2] = +(5.);
		for (i158 = 0; (((i158 | 0) < 2) | 0); i158 = (((i158 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845528 + ((i158 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846840 >> 2] = +(0.);
		for (i159 = 0; (((i159 | 0) < 2) | 0); i159 = (((i159 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845536 + ((i159 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846844 >> 2] = +(0.);
		for (i160 = 0; (((i160 | 0) < 2) | 0); i160 = (((i160 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845544 + ((i160 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846848 >> 2] = +(5.);
		for (i161 = 0; (((i161 | 0) < 2) | 0); i161 = (((i161 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845552 + ((i161 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846852 >> 2] = +(0.);
		for (i162 = 0; (((i162 | 0) < 2) | 0); i162 = (((i162 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845560 + ((i162 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846856 >> 2] = +(0.);
		for (i163 = 0; (((i163 | 0) < 2) | 0); i163 = (((i163 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845568 + ((i163 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846860 >> 2] = +(0.);
		for (i164 = 0; (((i164 | 0) < 2) | 0); i164 = (((i164 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845576 + ((i164 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846864 >> 2] = +(0.);
		for (i165 = 0; (((i165 | 0) < 2) | 0); i165 = (((i165 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845584 + ((i165 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846868 >> 2] = +(50.);
		HEAPF32[dsp + 18846872 >> 2] = +(0.);
		for (i166 = 0; (((i166 | 0) < 2) | 0); i166 = (((i166 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845592 + ((i166 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846876 >> 2] = +(0.);
		for (i167 = 0; (((i167 | 0) < 2) | 0); i167 = (((i167 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845600 + ((i167 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846880 >> 2] = +(0.);
		for (i168 = 0; (((i168 | 0) < 2) | 0); i168 = (((i168 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845608 + ((i168 | 0) << 2) >> 2] = 0.;
			
		}
		for (i169 = 0; (((i169 | 0) < 2) | 0); i169 = (((i169 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845616 + ((i169 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846884 >> 2] = +(0.);
		for (i170 = 0; (((i170 | 0) < 2) | 0); i170 = (((i170 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845624 + ((i170 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 5554144 | 0));
		for (i171 = 0; (((i171 | 0) < 2) | 0); i171 = (((i171 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845632 + ((i171 | 0) << 2) >> 2] = 0;
			
		}
		for (i172 = 0; (((i172 | 0) < 128) | 0); i172 = (((i172 | 0) + 1) | 0)) {
			HEAP32[dsp + 18837952 + ((i172 | 0) << 2) >> 2] = 0;
			
		}
		for (i173 = 0; (((i173 | 0) < 2) | 0); i173 = (((i173 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845640 + ((i173 | 0) << 2) >> 2] = 0;
			
		}
		for (i174 = 0; (((i174 | 0) < 2) | 0); i174 = (((i174 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845648 + ((i174 | 0) << 2) >> 2] = 0;
			
		}
		for (i175 = 0; (((i175 | 0) < 128) | 0); i175 = (((i175 | 0) + 1) | 0)) {
			HEAP32[dsp + 18838464 + ((i175 | 0) << 2) >> 2] = 0;
			
		}
		for (i176 = 0; (((i176 | 0) < 2) | 0); i176 = (((i176 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845656 + ((i176 | 0) << 2) >> 2] = 0;
			
		}
		for (i177 = 0; (((i177 | 0) < 2) | 0); i177 = (((i177 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845664 + ((i177 | 0) << 2) >> 2] = 0;
			
		}
		for (i178 = 0; (((i178 | 0) < 65536) | 0); i178 = (((i178 | 0) + 1) | 0)) {
			HEAPF32[dsp + 17924032 + ((i178 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846888 >> 2] = +(0.);
		for (i179 = 0; (((i179 | 0) < 2) | 0); i179 = (((i179 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845672 + ((i179 | 0) << 2) >> 2] = 0.;
			
		}
		for (i180 = 0; (((i180 | 0) < 5) | 0); i180 = (((i180 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844444 + ((i180 | 0) << 2) >> 2] = 0.;
			
		}
		for (i181 = 0; (((i181 | 0) < 3) | 0); i181 = (((i181 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844540 + ((i181 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846892 >> 2] = +(0.);
		HEAPF32[dsp + 18846896 >> 2] = +(100.);
		for (i182 = 0; (((i182 | 0) < 2) | 0); i182 = (((i182 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845680 + ((i182 | 0) << 2) >> 2] = 0.;
			
		}
		for (i183 = 0; (((i183 | 0) < 2) | 0); i183 = (((i183 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845688 + ((i183 | 0) << 2) >> 2] = 0.;
			
		}
		for (i184 = 0; (((i184 | 0) < 2) | 0); i184 = (((i184 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845696 + ((i184 | 0) << 2) >> 2] = 0.;
			
		}
		for (i185 = 0; (((i185 | 0) < 2) | 0); i185 = (((i185 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845704 + ((i185 | 0) << 2) >> 2] = 0.;
			
		}
		for (i186 = 0; (((i186 | 0) < 2) | 0); i186 = (((i186 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845712 + ((i186 | 0) << 2) >> 2] = 0.;
			
		}
		for (i187 = 0; (((i187 | 0) < 2) | 0); i187 = (((i187 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845720 + ((i187 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846900 >> 2] = +(0.);
		for (i188 = 0; (((i188 | 0) < 2) | 0); i188 = (((i188 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845728 + ((i188 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846904 >> 2] = +(150.);
		for (i189 = 0; (((i189 | 0) < 2) | 0); i189 = (((i189 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845736 + ((i189 | 0) << 2) >> 2] = 0.;
			
		}
		for (i190 = 0; (((i190 | 0) < 2) | 0); i190 = (((i190 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845744 + ((i190 | 0) << 2) >> 2] = 0.;
			
		}
		for (i191 = 0; (((i191 | 0) < 2) | 0); i191 = (((i191 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845752 + ((i191 | 0) << 2) >> 2] = 0.;
			
		}
		for (i192 = 0; (((i192 | 0) < 2) | 0); i192 = (((i192 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845760 + ((i192 | 0) << 2) >> 2] = 0.;
			
		}
		for (i193 = 0; (((i193 | 0) < 262144) | 0); i193 = (((i193 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13991872 + ((i193 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846908 >> 2] = +(200.);
		HEAPF32[dsp + 18846912 >> 2] = +(0.);
		for (i194 = 0; (((i194 | 0) < 2) | 0); i194 = (((i194 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845768 + ((i194 | 0) << 2) >> 2] = 0.;
			
		}
		for (i195 = 0; (((i195 | 0) < 2048) | 0); i195 = (((i195 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18735040 + ((i195 | 0) << 2) >> 2] = 0.;
			
		}
		for (i196 = 0; (((i196 | 0) < 2) | 0); i196 = (((i196 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845776 + ((i196 | 0) << 2) >> 2] = 0.;
			
		}
		for (i197 = 0; (((i197 | 0) < 2) | 0); i197 = (((i197 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845784 + ((i197 | 0) << 2) >> 2] = 0.;
			
		}
		for (i198 = 0; (((i198 | 0) < 1024) | 0); i198 = (((i198 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18796480 + ((i198 | 0) << 2) >> 2] = 0.;
			
		}
		for (i199 = 0; (((i199 | 0) < 2) | 0); i199 = (((i199 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845792 + ((i199 | 0) << 2) >> 2] = 0.;
			
		}
		for (i200 = 0; (((i200 | 0) < 2) | 0); i200 = (((i200 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845800 + ((i200 | 0) << 2) >> 2] = 0.;
			
		}
		for (i201 = 0; (((i201 | 0) < 1024) | 0); i201 = (((i201 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18800576 + ((i201 | 0) << 2) >> 2] = 0.;
			
		}
		for (i202 = 0; (((i202 | 0) < 2) | 0); i202 = (((i202 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845808 + ((i202 | 0) << 2) >> 2] = 0.;
			
		}
		for (i203 = 0; (((i203 | 0) < 2) | 0); i203 = (((i203 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845816 + ((i203 | 0) << 2) >> 2] = 0.;
			
		}
		for (i204 = 0; (((i204 | 0) < 1024) | 0); i204 = (((i204 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18804672 + ((i204 | 0) << 2) >> 2] = 0.;
			
		}
		for (i205 = 0; (((i205 | 0) < 2) | 0); i205 = (((i205 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845824 + ((i205 | 0) << 2) >> 2] = 0.;
			
		}
		for (i206 = 0; (((i206 | 0) < 2) | 0); i206 = (((i206 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845832 + ((i206 | 0) << 2) >> 2] = 0.;
			
		}
		for (i207 = 0; (((i207 | 0) < 128) | 0); i207 = (((i207 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18838976 + ((i207 | 0) << 2) >> 2] = 0.;
			
		}
		for (i208 = 0; (((i208 | 0) < 2) | 0); i208 = (((i208 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845840 + ((i208 | 0) << 2) >> 2] = 0.;
			
		}
		for (i209 = 0; (((i209 | 0) < 64) | 0); i209 = (((i209 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18843328 + ((i209 | 0) << 2) >> 2] = 0.;
			
		}
		for (i210 = 0; (((i210 | 0) < 2) | 0); i210 = (((i210 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845848 + ((i210 | 0) << 2) >> 2] = 0.;
			
		}
		for (i211 = 0; (((i211 | 0) < 12) | 0); i211 = (((i211 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844240 + ((i211 | 0) << 2) >> 2] = 0.;
			
		}
		for (i212 = 0; (((i212 | 0) < 2) | 0); i212 = (((i212 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845856 + ((i212 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846916 >> 2] = +(0.);
		for (i213 = 0; (((i213 | 0) < 2) | 0); i213 = (((i213 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845864 + ((i213 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846920 >> 2] = +(5.);
		for (i214 = 0; (((i214 | 0) < 2) | 0); i214 = (((i214 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845872 + ((i214 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846924 >> 2] = +(0.);
		for (i215 = 0; (((i215 | 0) < 2) | 0); i215 = (((i215 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845880 + ((i215 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846928 >> 2] = +(0.);
		for (i216 = 0; (((i216 | 0) < 2) | 0); i216 = (((i216 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845888 + ((i216 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846932 >> 2] = +(0.);
		for (i217 = 0; (((i217 | 0) < 2) | 0); i217 = (((i217 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845896 + ((i217 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846936 >> 2] = +(0.);
		for (i218 = 0; (((i218 | 0) < 2) | 0); i218 = (((i218 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845904 + ((i218 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846940 >> 2] = +(0.);
		for (i219 = 0; (((i219 | 0) < 2) | 0); i219 = (((i219 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845912 + ((i219 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846944 >> 2] = +(0.);
		for (i220 = 0; (((i220 | 0) < 2) | 0); i220 = (((i220 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845920 + ((i220 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846948 >> 2] = +(0.);
		for (i221 = 0; (((i221 | 0) < 2) | 0); i221 = (((i221 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845928 + ((i221 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 7318144 | 0));
		for (i222 = 0; (((i222 | 0) < 2) | 0); i222 = (((i222 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845936 + ((i222 | 0) << 2) >> 2] = 0;
			
		}
		for (i223 = 0; (((i223 | 0) < 128) | 0); i223 = (((i223 | 0) + 1) | 0)) {
			HEAP32[dsp + 18839488 + ((i223 | 0) << 2) >> 2] = 0;
			
		}
		for (i224 = 0; (((i224 | 0) < 2) | 0); i224 = (((i224 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845944 + ((i224 | 0) << 2) >> 2] = 0;
			
		}
		for (i225 = 0; (((i225 | 0) < 2) | 0); i225 = (((i225 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845952 + ((i225 | 0) << 2) >> 2] = 0;
			
		}
		for (i226 = 0; (((i226 | 0) < 128) | 0); i226 = (((i226 | 0) + 1) | 0)) {
			HEAP32[dsp + 18840000 + ((i226 | 0) << 2) >> 2] = 0;
			
		}
		for (i227 = 0; (((i227 | 0) < 2) | 0); i227 = (((i227 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845960 + ((i227 | 0) << 2) >> 2] = 0;
			
		}
		for (i228 = 0; (((i228 | 0) < 2) | 0); i228 = (((i228 | 0) + 1) | 0)) {
			HEAP32[dsp + 18845968 + ((i228 | 0) << 2) >> 2] = 0;
			
		}
		for (i229 = 0; (((i229 | 0) < 65536) | 0); i229 = (((i229 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18186176 + ((i229 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846952 >> 2] = +(0.);
		for (i230 = 0; (((i230 | 0) < 2) | 0); i230 = (((i230 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845976 + ((i230 | 0) << 2) >> 2] = 0.;
			
		}
		for (i231 = 0; (((i231 | 0) < 2) | 0); i231 = (((i231 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845984 + ((i231 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846956 >> 2] = +(50.);
		HEAPF32[dsp + 18846960 >> 2] = +(0.);
		for (i232 = 0; (((i232 | 0) < 2) | 0); i232 = (((i232 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18845992 + ((i232 | 0) << 2) >> 2] = 0.;
			
		}
		for (i233 = 0; (((i233 | 0) < 5) | 0); i233 = (((i233 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844464 + ((i233 | 0) << 2) >> 2] = 0.;
			
		}
		for (i234 = 0; (((i234 | 0) < 3) | 0); i234 = (((i234 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844552 + ((i234 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846964 >> 2] = +(0.);
		HEAPF32[dsp + 18846968 >> 2] = +(100.);
		for (i235 = 0; (((i235 | 0) < 2) | 0); i235 = (((i235 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846000 + ((i235 | 0) << 2) >> 2] = 0.;
			
		}
		for (i236 = 0; (((i236 | 0) < 2) | 0); i236 = (((i236 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846008 + ((i236 | 0) << 2) >> 2] = 0.;
			
		}
		for (i237 = 0; (((i237 | 0) < 2) | 0); i237 = (((i237 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846016 + ((i237 | 0) << 2) >> 2] = 0.;
			
		}
		for (i238 = 0; (((i238 | 0) < 2) | 0); i238 = (((i238 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846024 + ((i238 | 0) << 2) >> 2] = 0.;
			
		}
		for (i239 = 0; (((i239 | 0) < 2) | 0); i239 = (((i239 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846032 + ((i239 | 0) << 2) >> 2] = 0.;
			
		}
		for (i240 = 0; (((i240 | 0) < 2) | 0); i240 = (((i240 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846040 + ((i240 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846972 >> 2] = +(0.);
		for (i241 = 0; (((i241 | 0) < 2) | 0); i241 = (((i241 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846048 + ((i241 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846976 >> 2] = +(150.);
		for (i242 = 0; (((i242 | 0) < 2) | 0); i242 = (((i242 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846056 + ((i242 | 0) << 2) >> 2] = 0.;
			
		}
		for (i243 = 0; (((i243 | 0) < 2) | 0); i243 = (((i243 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846064 + ((i243 | 0) << 2) >> 2] = 0.;
			
		}
		for (i244 = 0; (((i244 | 0) < 2) | 0); i244 = (((i244 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846072 + ((i244 | 0) << 2) >> 2] = 0.;
			
		}
		for (i245 = 0; (((i245 | 0) < 2) | 0); i245 = (((i245 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846080 + ((i245 | 0) << 2) >> 2] = 0.;
			
		}
		for (i246 = 0; (((i246 | 0) < 262144) | 0); i246 = (((i246 | 0) + 1) | 0)) {
			HEAPF32[dsp + 15040448 + ((i246 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846980 >> 2] = +(200.);
		HEAPF32[dsp + 18846984 >> 2] = +(0.);
		for (i247 = 0; (((i247 | 0) < 2) | 0); i247 = (((i247 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846088 + ((i247 | 0) << 2) >> 2] = 0.;
			
		}
		for (i248 = 0; (((i248 | 0) < 2048) | 0); i248 = (((i248 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18743232 + ((i248 | 0) << 2) >> 2] = 0.;
			
		}
		for (i249 = 0; (((i249 | 0) < 2) | 0); i249 = (((i249 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846096 + ((i249 | 0) << 2) >> 2] = 0.;
			
		}
		for (i250 = 0; (((i250 | 0) < 2) | 0); i250 = (((i250 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846104 + ((i250 | 0) << 2) >> 2] = 0.;
			
		}
		for (i251 = 0; (((i251 | 0) < 1024) | 0); i251 = (((i251 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18808768 + ((i251 | 0) << 2) >> 2] = 0.;
			
		}
		for (i252 = 0; (((i252 | 0) < 2) | 0); i252 = (((i252 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846112 + ((i252 | 0) << 2) >> 2] = 0.;
			
		}
		for (i253 = 0; (((i253 | 0) < 2) | 0); i253 = (((i253 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846120 + ((i253 | 0) << 2) >> 2] = 0.;
			
		}
		for (i254 = 0; (((i254 | 0) < 1024) | 0); i254 = (((i254 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18812864 + ((i254 | 0) << 2) >> 2] = 0.;
			
		}
		for (i255 = 0; (((i255 | 0) < 2) | 0); i255 = (((i255 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846128 + ((i255 | 0) << 2) >> 2] = 0.;
			
		}
		for (i256 = 0; (((i256 | 0) < 2) | 0); i256 = (((i256 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846136 + ((i256 | 0) << 2) >> 2] = 0.;
			
		}
		for (i257 = 0; (((i257 | 0) < 1024) | 0); i257 = (((i257 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18816960 + ((i257 | 0) << 2) >> 2] = 0.;
			
		}
		for (i258 = 0; (((i258 | 0) < 2) | 0); i258 = (((i258 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846144 + ((i258 | 0) << 2) >> 2] = 0.;
			
		}
		for (i259 = 0; (((i259 | 0) < 2) | 0); i259 = (((i259 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846152 + ((i259 | 0) << 2) >> 2] = 0.;
			
		}
		for (i260 = 0; (((i260 | 0) < 128) | 0); i260 = (((i260 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18840512 + ((i260 | 0) << 2) >> 2] = 0.;
			
		}
		for (i261 = 0; (((i261 | 0) < 2) | 0); i261 = (((i261 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846160 + ((i261 | 0) << 2) >> 2] = 0.;
			
		}
		for (i262 = 0; (((i262 | 0) < 64) | 0); i262 = (((i262 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18843584 + ((i262 | 0) << 2) >> 2] = 0.;
			
		}
		for (i263 = 0; (((i263 | 0) < 2) | 0); i263 = (((i263 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846168 + ((i263 | 0) << 2) >> 2] = 0.;
			
		}
		for (i264 = 0; (((i264 | 0) < 12) | 0); i264 = (((i264 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844288 + ((i264 | 0) << 2) >> 2] = 0.;
			
		}
		for (i265 = 0; (((i265 | 0) < 2) | 0); i265 = (((i265 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846176 + ((i265 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846988 >> 2] = +(0.);
		for (i266 = 0; (((i266 | 0) < 2) | 0); i266 = (((i266 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846184 + ((i266 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846992 >> 2] = +(5.);
		for (i267 = 0; (((i267 | 0) < 2) | 0); i267 = (((i267 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846192 + ((i267 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18846996 >> 2] = +(0.);
		for (i268 = 0; (((i268 | 0) < 2) | 0); i268 = (((i268 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846200 + ((i268 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847000 >> 2] = +(0.);
		for (i269 = 0; (((i269 | 0) < 2) | 0); i269 = (((i269 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846208 + ((i269 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847004 >> 2] = +(0.);
		for (i270 = 0; (((i270 | 0) < 2) | 0); i270 = (((i270 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846216 + ((i270 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847008 >> 2] = +(0.);
		for (i271 = 0; (((i271 | 0) < 2) | 0); i271 = (((i271 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846224 + ((i271 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847012 >> 2] = +(0.);
		for (i272 = 0; (((i272 | 0) < 2) | 0); i272 = (((i272 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846232 + ((i272 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847016 >> 2] = +(0.);
		for (i273 = 0; (((i273 | 0) < 2) | 0); i273 = (((i273 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846240 + ((i273 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847020 >> 2] = +(0.);
		for (i274 = 0; (((i274 | 0) < 2) | 0); i274 = (((i274 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846248 + ((i274 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet1v200SIG0(dsp, (samplingFreq | 0));
		filleffet1v200SIG0(dsp, 441000, (dsp + 9082144 | 0));
		for (i275 = 0; (((i275 | 0) < 2) | 0); i275 = (((i275 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846256 + ((i275 | 0) << 2) >> 2] = 0;
			
		}
		for (i276 = 0; (((i276 | 0) < 128) | 0); i276 = (((i276 | 0) + 1) | 0)) {
			HEAP32[dsp + 18841024 + ((i276 | 0) << 2) >> 2] = 0;
			
		}
		for (i277 = 0; (((i277 | 0) < 2) | 0); i277 = (((i277 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846264 + ((i277 | 0) << 2) >> 2] = 0;
			
		}
		for (i278 = 0; (((i278 | 0) < 2) | 0); i278 = (((i278 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846272 + ((i278 | 0) << 2) >> 2] = 0;
			
		}
		for (i279 = 0; (((i279 | 0) < 128) | 0); i279 = (((i279 | 0) + 1) | 0)) {
			HEAP32[dsp + 18841536 + ((i279 | 0) << 2) >> 2] = 0;
			
		}
		for (i280 = 0; (((i280 | 0) < 2) | 0); i280 = (((i280 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846280 + ((i280 | 0) << 2) >> 2] = 0;
			
		}
		for (i281 = 0; (((i281 | 0) < 2) | 0); i281 = (((i281 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846288 + ((i281 | 0) << 2) >> 2] = 0;
			
		}
		for (i282 = 0; (((i282 | 0) < 65536) | 0); i282 = (((i282 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18448320 + ((i282 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847024 >> 2] = +(0.);
		for (i283 = 0; (((i283 | 0) < 2) | 0); i283 = (((i283 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846296 + ((i283 | 0) << 2) >> 2] = 0.;
			
		}
		for (i284 = 0; (((i284 | 0) < 2) | 0); i284 = (((i284 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846304 + ((i284 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847028 >> 2] = +(50.);
		HEAPF32[dsp + 18847032 >> 2] = +(0.);
		for (i285 = 0; (((i285 | 0) < 2) | 0); i285 = (((i285 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846312 + ((i285 | 0) << 2) >> 2] = 0.;
			
		}
		for (i286 = 0; (((i286 | 0) < 5) | 0); i286 = (((i286 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844484 + ((i286 | 0) << 2) >> 2] = 0.;
			
		}
		for (i287 = 0; (((i287 | 0) < 3) | 0); i287 = (((i287 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844564 + ((i287 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847036 >> 2] = +(0.);
		HEAPF32[dsp + 18847040 >> 2] = +(100.);
		for (i288 = 0; (((i288 | 0) < 2) | 0); i288 = (((i288 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846320 + ((i288 | 0) << 2) >> 2] = 0.;
			
		}
		for (i289 = 0; (((i289 | 0) < 2) | 0); i289 = (((i289 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846328 + ((i289 | 0) << 2) >> 2] = 0.;
			
		}
		for (i290 = 0; (((i290 | 0) < 2) | 0); i290 = (((i290 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846336 + ((i290 | 0) << 2) >> 2] = 0.;
			
		}
		for (i291 = 0; (((i291 | 0) < 2) | 0); i291 = (((i291 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846344 + ((i291 | 0) << 2) >> 2] = 0.;
			
		}
		for (i292 = 0; (((i292 | 0) < 2) | 0); i292 = (((i292 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846352 + ((i292 | 0) << 2) >> 2] = 0.;
			
		}
		for (i293 = 0; (((i293 | 0) < 2) | 0); i293 = (((i293 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846360 + ((i293 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847044 >> 2] = +(0.);
		for (i294 = 0; (((i294 | 0) < 2) | 0); i294 = (((i294 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846368 + ((i294 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847048 >> 2] = +(150.);
		for (i295 = 0; (((i295 | 0) < 2) | 0); i295 = (((i295 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846376 + ((i295 | 0) << 2) >> 2] = 0.;
			
		}
		for (i296 = 0; (((i296 | 0) < 2) | 0); i296 = (((i296 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846384 + ((i296 | 0) << 2) >> 2] = 0.;
			
		}
		for (i297 = 0; (((i297 | 0) < 2) | 0); i297 = (((i297 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846392 + ((i297 | 0) << 2) >> 2] = 0.;
			
		}
		for (i298 = 0; (((i298 | 0) < 2) | 0); i298 = (((i298 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846400 + ((i298 | 0) << 2) >> 2] = 0.;
			
		}
		for (i299 = 0; (((i299 | 0) < 262144) | 0); i299 = (((i299 | 0) + 1) | 0)) {
			HEAPF32[dsp + 16089024 + ((i299 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847052 >> 2] = +(200.);
		HEAPF32[dsp + 18847056 >> 2] = +(0.);
		for (i300 = 0; (((i300 | 0) < 2) | 0); i300 = (((i300 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846408 + ((i300 | 0) << 2) >> 2] = 0.;
			
		}
		for (i301 = 0; (((i301 | 0) < 2048) | 0); i301 = (((i301 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18751424 + ((i301 | 0) << 2) >> 2] = 0.;
			
		}
		for (i302 = 0; (((i302 | 0) < 2) | 0); i302 = (((i302 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846416 + ((i302 | 0) << 2) >> 2] = 0.;
			
		}
		for (i303 = 0; (((i303 | 0) < 2) | 0); i303 = (((i303 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846424 + ((i303 | 0) << 2) >> 2] = 0.;
			
		}
		for (i304 = 0; (((i304 | 0) < 1024) | 0); i304 = (((i304 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18821056 + ((i304 | 0) << 2) >> 2] = 0.;
			
		}
		for (i305 = 0; (((i305 | 0) < 2) | 0); i305 = (((i305 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846432 + ((i305 | 0) << 2) >> 2] = 0.;
			
		}
		for (i306 = 0; (((i306 | 0) < 2) | 0); i306 = (((i306 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846440 + ((i306 | 0) << 2) >> 2] = 0.;
			
		}
		for (i307 = 0; (((i307 | 0) < 1024) | 0); i307 = (((i307 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18825152 + ((i307 | 0) << 2) >> 2] = 0.;
			
		}
		for (i308 = 0; (((i308 | 0) < 2) | 0); i308 = (((i308 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846448 + ((i308 | 0) << 2) >> 2] = 0.;
			
		}
		for (i309 = 0; (((i309 | 0) < 2) | 0); i309 = (((i309 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846456 + ((i309 | 0) << 2) >> 2] = 0.;
			
		}
		for (i310 = 0; (((i310 | 0) < 1024) | 0); i310 = (((i310 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18829248 + ((i310 | 0) << 2) >> 2] = 0.;
			
		}
		for (i311 = 0; (((i311 | 0) < 2) | 0); i311 = (((i311 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846464 + ((i311 | 0) << 2) >> 2] = 0.;
			
		}
		for (i312 = 0; (((i312 | 0) < 2) | 0); i312 = (((i312 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846472 + ((i312 | 0) << 2) >> 2] = 0.;
			
		}
		for (i313 = 0; (((i313 | 0) < 128) | 0); i313 = (((i313 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18842048 + ((i313 | 0) << 2) >> 2] = 0.;
			
		}
		for (i314 = 0; (((i314 | 0) < 2) | 0); i314 = (((i314 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846480 + ((i314 | 0) << 2) >> 2] = 0.;
			
		}
		for (i315 = 0; (((i315 | 0) < 64) | 0); i315 = (((i315 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18843840 + ((i315 | 0) << 2) >> 2] = 0.;
			
		}
		for (i316 = 0; (((i316 | 0) < 2) | 0); i316 = (((i316 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846488 + ((i316 | 0) << 2) >> 2] = 0.;
			
		}
		for (i317 = 0; (((i317 | 0) < 12) | 0); i317 = (((i317 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18844336 + ((i317 | 0) << 2) >> 2] = 0.;
			
		}
		for (i318 = 0; (((i318 | 0) < 2) | 0); i318 = (((i318 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846496 + ((i318 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 18847060 >> 2] = +(0.);
		HEAPF32[dsp + 18847064 >> 2] = +(440. / +(HEAPF32[dsp + 18846544 >> 2]));
		for (i320 = 0; (((i320 | 0) < 2) | 0); i320 = (((i320 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846504 + ((i320 | 0) << 2) >> 2] = 0.;
			
		}
		for (i321 = 0; (((i321 | 0) < 2) | 0); i321 = (((i321 | 0) + 1) | 0)) {
			HEAP32[dsp + 18846512 + ((i321 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 18847068 >> 2] = +(100. / +((HEAP32[dsp + 18846540 >> 2] | 0)));
		HEAPF32[dsp + 18847072 >> 2] = +(1. - +(1. / +(powf(100000., +(1.11111 / +((HEAP32[dsp + 18846540 >> 2] | 0)))))));
		for (i322 = 0; (((i322 | 0) < 2) | 0); i322 = (((i322 | 0) + 1) | 0)) {
			HEAPF32[dsp + 18846520 + ((i322 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function setValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF32[dsp + offset >> 2] = value;
	}
	
	function getValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +HEAPF32[dsp + offset >> 2];
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var iSlow21 = 0;
		var iSlow22 = 0;
		var iSlow23 = 0;
		var iSlow24 = 0;
		var iSlow25 = 0;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var fSlow32 = 0.;
		var fSlow33 = 0.;
		var fSlow34 = 0.;
		var fSlow35 = 0.;
		var fSlow36 = 0.;
		var fSlow37 = 0.;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var fSlow64 = 0.;
		var fSlow65 = 0.;
		var fSlow66 = 0.;
		var fSlow67 = 0.;
		var fSlow68 = 0.;
		var fSlow69 = 0.;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var iSlow85 = 0;
		var iSlow86 = 0;
		var iSlow87 = 0;
		var iSlow88 = 0;
		var iSlow89 = 0;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var fSlow92 = 0.;
		var fSlow93 = 0.;
		var fSlow94 = 0.;
		var fSlow95 = 0.;
		var fSlow96 = 0.;
		var fSlow97 = 0.;
		var fSlow98 = 0.;
		var fSlow99 = 0.;
		var fSlow100 = 0.;
		var fSlow101 = 0.;
		var fSlow102 = 0.;
		var fSlow103 = 0.;
		var fSlow104 = 0.;
		var fSlow105 = 0.;
		var fSlow106 = 0.;
		var fSlow107 = 0.;
		var fSlow108 = 0.;
		var fSlow109 = 0.;
		var fSlow110 = 0.;
		var fSlow111 = 0.;
		var fSlow112 = 0.;
		var fSlow113 = 0.;
		var fSlow114 = 0.;
		var fSlow115 = 0.;
		var fSlow116 = 0.;
		var fSlow117 = 0.;
		var fSlow118 = 0.;
		var fSlow119 = 0.;
		var fSlow120 = 0.;
		var iSlow121 = 0;
		var iSlow122 = 0;
		var iSlow123 = 0;
		var iSlow124 = 0;
		var iSlow125 = 0;
		var fSlow126 = 0.;
		var fSlow127 = 0.;
		var fSlow128 = 0.;
		var fSlow129 = 0.;
		var fSlow130 = 0.;
		var fSlow131 = 0.;
		var fSlow132 = 0.;
		var fSlow133 = 0.;
		var fSlow134 = 0.;
		var fSlow135 = 0.;
		var fSlow136 = 0.;
		var fSlow137 = 0.;
		var fSlow138 = 0.;
		var fSlow139 = 0.;
		var fSlow140 = 0.;
		var fSlow141 = 0.;
		var fSlow142 = 0.;
		var fSlow143 = 0.;
		var fSlow144 = 0.;
		var fSlow145 = 0.;
		var fSlow146 = 0.;
		var fSlow147 = 0.;
		var fSlow148 = 0.;
		var fSlow149 = 0.;
		var fSlow150 = 0.;
		var fSlow151 = 0.;
		var fSlow152 = 0.;
		var fSlow153 = 0.;
		var fSlow154 = 0.;
		var fSlow155 = 0.;
		var fSlow156 = 0.;
		var fSlow157 = 0.;
		var fSlow158 = 0.;
		var fSlow159 = 0.;
		var fSlow160 = 0.;
		var fSlow161 = 0.;
		var fSlow162 = 0.;
		var fSlow163 = 0.;
		var fSlow164 = 0.;
		var fSlow165 = 0.;
		var fSlow166 = 0.;
		var fSlow167 = 0.;
		var fSlow168 = 0.;
		var fSlow169 = 0.;
		var fSlow170 = 0.;
		var fSlow171 = 0.;
		var fSlow172 = 0.;
		var fSlow173 = 0.;
		var fSlow174 = 0.;
		var fSlow175 = 0.;
		var fSlow176 = 0.;
		var fSlow177 = 0.;
		var fSlow178 = 0.;
		var fSlow179 = 0.;
		var fSlow180 = 0.;
		var fSlow181 = 0.;
		var fSlow182 = 0.;
		var fSlow183 = 0.;
		var fSlow184 = 0.;
		var fSlow185 = 0.;
		var fSlow186 = 0.;
		var fSlow187 = 0.;
		var fSlow188 = 0.;
		var fSlow189 = 0.;
		var fSlow190 = 0.;
		var fSlow191 = 0.;
		var fSlow192 = 0.;
		var fSlow193 = 0.;
		var fSlow194 = 0.;
		var fSlow195 = 0.;
		var iSlow196 = 0;
		var iSlow197 = 0;
		var iSlow198 = 0;
		var iSlow199 = 0;
		var iSlow200 = 0;
		var fSlow201 = 0.;
		var fSlow202 = 0.;
		var fSlow203 = 0.;
		var fSlow204 = 0.;
		var fSlow205 = 0.;
		var fSlow206 = 0.;
		var fSlow207 = 0.;
		var fSlow208 = 0.;
		var fSlow209 = 0.;
		var fSlow210 = 0.;
		var fSlow211 = 0.;
		var fSlow212 = 0.;
		var fSlow213 = 0.;
		var fSlow214 = 0.;
		var fSlow215 = 0.;
		var fSlow216 = 0.;
		var fSlow217 = 0.;
		var fSlow218 = 0.;
		var fSlow219 = 0.;
		var fSlow220 = 0.;
		var fSlow221 = 0.;
		var fSlow222 = 0.;
		var fSlow223 = 0.;
		var fSlow224 = 0.;
		var fSlow225 = 0.;
		var fSlow226 = 0.;
		var fSlow227 = 0.;
		var fSlow228 = 0.;
		var fSlow229 = 0.;
		var fSlow230 = 0.;
		var fSlow231 = 0.;
		var iSlow232 = 0;
		var iSlow233 = 0;
		var iSlow234 = 0;
		var iSlow235 = 0;
		var iSlow236 = 0;
		var fSlow237 = 0.;
		var fSlow238 = 0.;
		var fSlow239 = 0.;
		var fSlow240 = 0.;
		var fSlow241 = 0.;
		var fSlow242 = 0.;
		var fSlow243 = 0.;
		var fSlow244 = 0.;
		var fSlow245 = 0.;
		var fSlow246 = 0.;
		var fSlow247 = 0.;
		var fSlow248 = 0.;
		var fSlow249 = 0.;
		var fSlow250 = 0.;
		var fSlow251 = 0.;
		var fSlow252 = 0.;
		var fSlow253 = 0.;
		var fSlow254 = 0.;
		var fSlow255 = 0.;
		var fSlow256 = 0.;
		var fSlow257 = 0.;
		var fSlow258 = 0.;
		var fSlow259 = 0.;
		var fSlow260 = 0.;
		var fSlow261 = 0.;
		var fSlow262 = 0.;
		var fSlow263 = 0.;
		var fSlow264 = 0.;
		var fSlow265 = 0.;
		var fSlow266 = 0.;
		var fSlow267 = 0.;
		var fSlow268 = 0.;
		var fSlow269 = 0.;
		var fSlow270 = 0.;
		var fSlow271 = 0.;
		var fSlow272 = 0.;
		var fSlow273 = 0.;
		var fSlow274 = 0.;
		var fSlow275 = 0.;
		var fSlow276 = 0.;
		var fSlow277 = 0.;
		var fSlow278 = 0.;
		var fSlow279 = 0.;
		var fSlow280 = 0.;
		var fSlow281 = 0.;
		var fSlow282 = 0.;
		var fSlow283 = 0.;
		var fSlow284 = 0.;
		var fSlow285 = 0.;
		var fSlow286 = 0.;
		var iSlow287 = 0;
		var iSlow288 = 0;
		var iSlow289 = 0;
		var iSlow290 = 0;
		var iSlow291 = 0;
		var fSlow292 = 0.;
		var fSlow293 = 0.;
		var fSlow294 = 0.;
		var fSlow295 = 0.;
		var fSlow296 = 0.;
		var fSlow297 = 0.;
		var fSlow298 = 0.;
		var fSlow299 = 0.;
		var fSlow300 = 0.;
		var fSlow301 = 0.;
		var fSlow302 = 0.;
		var fSlow303 = 0.;
		var fSlow304 = 0.;
		var fSlow305 = 0.;
		var fSlow306 = 0.;
		var fSlow307 = 0.;
		var fSlow308 = 0.;
		var fSlow309 = 0.;
		var fSlow310 = 0.;
		var fSlow311 = 0.;
		var fSlow312 = 0.;
		var fSlow313 = 0.;
		var fSlow314 = 0.;
		var fSlow315 = 0.;
		var fSlow316 = 0.;
		var fSlow317 = 0.;
		var fSlow318 = 0.;
		var fSlow319 = 0.;
		var fSlow320 = 0.;
		var fSlow321 = 0.;
		var fSlow322 = 0.;
		var fSlow323 = 0.;
		var fSlow324 = 0.;
		var fSlow325 = 0.;
		var fSlow326 = 0.;
		var fSlow327 = 0.;
		var fSlow328 = 0.;
		var fSlow329 = 0.;
		var fSlow330 = 0.;
		var fSlow331 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var iTemp1 = 0;
		var iTemp2 = 0;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var iTemp5 = 0;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var iTemp8 = 0;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fSel0 = 0.;
		var fSel1 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fRec37 = 0.;
		var fTemp23 = 0.;
		var fRec35 = 0.;
		var fTemp24 = 0.;
		var fRec33 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var iTemp27 = 0;
		var iTemp28 = 0;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var iTemp40 = 0;
		var iTemp41 = 0;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var iTemp49 = 0;
		var fTemp50 = 0.;
		var iTemp51 = 0;
		var iTemp52 = 0;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var iTemp55 = 0;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fTemp62 = 0.;
		var fSel2 = 0.;
		var fSel3 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var fTemp69 = 0.;
		var fRec88 = 0.;
		var fTemp70 = 0.;
		var fRec86 = 0.;
		var fTemp71 = 0.;
		var fRec84 = 0.;
		var fTemp72 = 0.;
		var fTemp73 = 0.;
		var fTemp74 = 0.;
		var iTemp75 = 0;
		var fTemp76 = 0.;
		var iTemp77 = 0;
		var iTemp78 = 0;
		var fTemp79 = 0.;
		var fTemp80 = 0.;
		var iTemp81 = 0;
		var fTemp82 = 0.;
		var fTemp83 = 0.;
		var fTemp84 = 0.;
		var fTemp85 = 0.;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fSel4 = 0.;
		var fSel5 = 0.;
		var fTemp89 = 0.;
		var fTemp90 = 0.;
		var fTemp91 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fTemp94 = 0.;
		var fTemp95 = 0.;
		var fRec134 = 0.;
		var fTemp96 = 0.;
		var fRec132 = 0.;
		var fTemp97 = 0.;
		var fRec130 = 0.;
		var fTemp98 = 0.;
		var fTemp99 = 0.;
		var iTemp100 = 0;
		var iTemp101 = 0;
		var fTemp102 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var fTemp105 = 0.;
		var fTemp106 = 0.;
		var fTemp107 = 0.;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var fTemp111 = 0.;
		var fTemp112 = 0.;
		var iTemp113 = 0;
		var iTemp114 = 0;
		var fTemp115 = 0.;
		var fTemp116 = 0.;
		var fTemp117 = 0.;
		var fTemp118 = 0.;
		var fTemp119 = 0.;
		var fTemp120 = 0.;
		var iTemp121 = 0;
		var iTemp122 = 0;
		var fTemp123 = 0.;
		var fTemp124 = 0.;
		var iTemp125 = 0;
		var iTemp126 = 0;
		var fTemp127 = 0.;
		var fTemp128 = 0.;
		var fTemp129 = 0.;
		var fTemp130 = 0.;
		var fTemp131 = 0.;
		var fTemp132 = 0.;
		var fTemp133 = 0.;
		var fSel6 = 0.;
		var fSel7 = 0.;
		var fTemp134 = 0.;
		var fTemp135 = 0.;
		var fTemp136 = 0.;
		var fTemp137 = 0.;
		var fTemp138 = 0.;
		var fTemp139 = 0.;
		var fTemp140 = 0.;
		var fRec184 = 0.;
		var fTemp141 = 0.;
		var fRec182 = 0.;
		var fTemp142 = 0.;
		var fRec180 = 0.;
		var fTemp143 = 0.;
		var fTemp144 = 0.;
		var fTemp145 = 0.;
		var fTemp146 = 0.;
		var fTemp147 = 0.;
		var fTemp148 = 0.;
		var fTemp149 = 0.;
		var iTemp150 = 0;
		var iTemp151 = 0;
		var fTemp152 = 0.;
		var fTemp153 = 0.;
		var fTemp154 = 0.;
		var fTemp155 = 0.;
		var fTemp156 = 0.;
		var iTemp157 = 0;
		var fTemp158 = 0.;
		var iTemp159 = 0;
		var iTemp160 = 0;
		var fTemp161 = 0.;
		var fTemp162 = 0.;
		var iTemp163 = 0;
		var fTemp164 = 0.;
		var fTemp165 = 0.;
		var fTemp166 = 0.;
		var fTemp167 = 0.;
		var fTemp168 = 0.;
		var fTemp169 = 0.;
		var fSel8 = 0.;
		var fSel9 = 0.;
		var fTemp170 = 0.;
		var fTemp171 = 0.;
		var fTemp172 = 0.;
		var fTemp173 = 0.;
		var fTemp174 = 0.;
		var fTemp175 = 0.;
		var fTemp176 = 0.;
		var fRec232 = 0.;
		var fTemp177 = 0.;
		var fRec230 = 0.;
		var fTemp178 = 0.;
		var fRec228 = 0.;
		var fTemp179 = 0.;
		var fTemp180 = 0.;
		var fTemp181 = 0.;
		var fTemp182 = 0.;
		var fTemp183 = 0.;
		var fTemp184 = 0.;
		var fTemp185 = 0.;
		var iTemp186 = 0;
		var iTemp187 = 0;
		var fTemp188 = 0.;
		var fTemp189 = 0.;
		var fTemp190 = 0.;
		var fTemp191 = 0.;
		var fTemp192 = 0.;
		var iTemp193 = 0;
		var fTemp194 = 0.;
		var iTemp195 = 0;
		var iTemp196 = 0;
		var fTemp197 = 0.;
		var fTemp198 = 0.;
		var iTemp199 = 0;
		var fTemp200 = 0.;
		var fTemp201 = 0.;
		var fTemp202 = 0.;
		var fTemp203 = 0.;
		var fTemp204 = 0.;
		var fTemp205 = 0.;
		var fSel10 = 0.;
		var fSel11 = 0.;
		var fTemp206 = 0.;
		var fTemp207 = 0.;
		var fTemp208 = 0.;
		var fTemp209 = 0.;
		var fTemp210 = 0.;
		var fTemp211 = 0.;
		var fTemp212 = 0.;
		var fRec280 = 0.;
		var fTemp213 = 0.;
		var fRec278 = 0.;
		var fTemp214 = 0.;
		var fRec276 = 0.;
		var fTemp215 = 0.;
		var fTemp216 = 0.;
		var fTemp217 = 0.;
		var fTemp218 = 0.;
		var fTemp219 = 0.;
		var fTemp220 = 0.;
		var fTemp221 = 0.;
		var fTemp222 = 0.;
		var fTemp223 = 0.;
		var fTemp224 = 0.;
		var fTemp225 = 0.;
		var fTemp226 = 0.;
		var fTemp227 = 0.;
		var fTemp228 = 0.;
		var fTemp229 = 0.;
		var fTemp230 = 0.;
		var fTemp231 = 0.;
		var fTemp232 = 0.;
		var fTemp233 = 0.;
		var fTemp234 = 0.;
		var fTemp235 = 0.;
		var fTemp236 = 0.;
		var fTemp237 = 0.;
		var fTemp238 = 0.;
		var fTemp239 = 0.;
		var fTemp240 = 0.;
		var fTemp241 = 0.;
		var fTemp242 = 0.;
		var fTemp243 = 0.;
		var fTemp244 = 0.;
		var fTemp245 = 0.;
		var fTemp246 = 0.;
		var fTemp247 = 0.;
		var fTemp248 = 0.;
		var fTemp249 = 0.;
		var fTemp250 = 0.;
		var fTemp251 = 0.;
		var fTemp252 = 0.;
		var fTemp253 = 0.;
		var fTemp254 = 0.;
		var fTemp255 = 0.;
		var fTemp256 = 0.;
		var fTemp257 = 0.;
		var fTemp258 = 0.;
		var fTemp259 = 0.;
		var fTemp260 = 0.;
		var fTemp261 = 0.;
		var fTemp262 = 0.;
		var fTemp263 = 0.;
		var fTemp264 = 0.;
		var fTemp265 = 0.;
		var fTemp266 = 0.;
		var fTemp267 = 0.;
		var fTemp268 = 0.;
		var fTemp269 = 0.;
		var fTemp270 = 0.;
		var fTemp271 = 0.;
		var iTemp272 = 0;
		var iTemp273 = 0;
		var iTemp274 = 0;
		var fTemp275 = 0.;
		var j0 = 4;
		var j1 = 11;
		var j2 = 4;
		var j3 = 11;
		var j4 = 4;
		var j5 = 11;
		var j6 = 4;
		var j7 = 11;
		var j8 = 4;
		var j9 = 11;
		var j10 = 4;
		var j11 = 11;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(10.582 * +(+(HEAPF32[dsp + 18846564 >> 2])));
		fSlow1 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(300. + +(fSlow0)), 50.)))));
		fSlow2 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow1) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow0), 50.)))))))));
		fSlow3 = +(faustpower2_f(+(fSlow2)));
		fSlow4 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow3));
		fSlow5 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow1)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow3) / +(fSlow1))));
		fSlow6 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow5));
		fSlow7 = +(1. / +(4. + +(+(fSlow4) + +(fSlow6))));
		fSlow8 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow5));
		fSlow9 = +(faustpower2_f(+(fSlow5)));
		fSlow10 = +(+(8. * +(fSlow3)) + +(5.64908 * +(fSlow9)));
		fSlow11 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow3));
		fSlow12 = +(1.60527 * +(fSlow5));
		fSlow13 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow5));
		fSlow14 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow10) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow3) * +(+(fSlow11) + +(fSlow12)))))) + +(fSlow13))));
		fSlow15 = +(+(4.64607 * +(fSlow9)) + +(0.158473 * +(fSlow3)));
		fSlow16 = +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow15)) + 0.316946);
		fSlow17 = +(+(HEAPF32[dsp + 18846588 >> 2]));
		fSlow18 = +(min(1., +(fSlow17)));
		fSlow19 = +(0.01 * +(((+(fSlow17) < 3.) | 0)));
		fSlow20 = +(0.01 * +(+(0.04 * +(+(HEAPF32[dsp + 18846592 >> 2]))) + 1.));
		iSlow21 = ~~(+(fSlow17));
		iSlow22 = (((iSlow21 | 0) == 2) | 0);
		iSlow23 = ((max(0, ((1 - ((abs((((iSlow21 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow24 = (((iSlow21 | 0) == 3) | 0);
		iSlow25 = ((max(0, ((1 - ((abs((((iSlow21 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		fSlow26 = +(0.001 * +(+(HEAPF32[dsp + 18846600 >> 2])));
		fSlow27 = +(0.01 * +(+(HEAPF32[dsp + 18846604 >> 2])));
		fSlow28 = +(0.01 * +(+(HEAPF32[dsp + 18846608 >> 2])));
		fSlow29 = +(3.21055 * +(fSlow5));
		fSlow30 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow3));
		fSlow31 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow5));
		fSlow32 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow3) * +(+(fSlow29) + +(fSlow30)))) - +(64. + +(fSlow31)));
		fSlow33 = +(faustpower4_f(+(fSlow2)));
		fSlow34 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(11.2982 * +(fSlow9)) + +(16. * +(fSlow3)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow33)))));
		fSlow35 = +(+(+(fSlow31) + +(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow3) * +(+(fSlow30) - +(fSlow29))))) - 64.);
		fSlow36 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow10) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow3) * +(+(fSlow11) - +(fSlow12))))))) - +(fSlow13));
		fSlow37 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow33)) - 1.26779);
		fSlow38 = +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow9)) + +(0.316946 * +(fSlow3)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow33)))) + 1.90168);
		fSlow39 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow33));
		fSlow40 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow39) + +(+(fSlow15) + +(fSlow39)))));
		fSlow41 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow3)) - 8.);
		fSlow42 = +(+(4. + +(fSlow4)) - +(fSlow6));
		fSlow43 = +(0. - +(fSlow8));
		fSlow44 = +(0.001 * +(+(HEAPF32[dsp + 18846644 >> 2])));
		fSlow45 = +(0.001 * +(+(HEAPF32[dsp + 18846648 >> 2])));
		fSlow46 = +(0.01 * +(+(HEAPF32[dsp + 18846656 >> 2])));
		fSlow47 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846660 >> 2]))))), 0.999999))))));
		fSlow48 = +(0.001 * +(+(HEAPF32[dsp + 18846664 >> 2])));
		fSlow49 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18846668 >> 2]))));
		fSlow50 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846672 >> 2]))))))));
		fSlow51 = +(0.001 * +(+(HEAPF32[dsp + 18846676 >> 2])));
		fSlow52 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18846680 >> 2])) + +(+(HEAPF32[dsp + 18846684 >> 2]))));
		fSlow53 = +(0.001 * +(+(HEAPF32[dsp + 18846688 >> 2])));
		fSlow54 = +(0.001 * +(+(HEAPF32[dsp + 18846692 >> 2])));
		fSlow55 = +(0.001 * +(+(HEAPF32[dsp + 18846696 >> 2])));
		fSlow56 = +(0.001 * +(+(HEAPF32[dsp + 18846700 >> 2])));
		fSlow57 = +(0.001 * +(+(HEAPF32[dsp + 18846704 >> 2])));
		fSlow58 = +(0.001 * +(+(HEAPF32[dsp + 18846708 >> 2])));
		fSlow59 = +(0.001 * +(+(HEAPF32[dsp + 18846712 >> 2])));
		fSlow60 = +(0.001 * +(+(HEAPF32[dsp + 18846716 >> 2])));
		fSlow61 = +(0.001 * +(+(HEAPF32[dsp + 18846720 >> 2])));
		fSlow62 = +(10.582 * +(+(HEAPF32[dsp + 18846724 >> 2])));
		fSlow63 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(300. + +(fSlow62)), 50.)))));
		fSlow64 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow63) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow62), 50.)))))))));
		fSlow65 = +(faustpower2_f(+(fSlow64)));
		fSlow66 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow65));
		fSlow67 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow63)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow65) / +(fSlow63))));
		fSlow68 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow67));
		fSlow69 = +(1. / +(4. + +(+(fSlow66) + +(fSlow68))));
		fSlow70 = +(0.001 * +(+(HEAPF32[dsp + 18846728 >> 2])));
		fSlow71 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow67));
		fSlow72 = +(0. - +(fSlow71));
		fSlow73 = +(faustpower2_f(+(fSlow67)));
		fSlow74 = +(+(5.64908 * +(fSlow73)) + +(8. * +(fSlow65)));
		fSlow75 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow65));
		fSlow76 = +(1.60527 * +(fSlow67));
		fSlow77 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow67));
		fSlow78 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow74) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow65) * +(+(fSlow75) + +(fSlow76)))))) + +(fSlow77))));
		fSlow79 = +(+(0.158473 * +(fSlow65)) + +(4.64607 * +(fSlow73)));
		fSlow80 = +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow79)) + 0.316946);
		fSlow81 = +(0.001 * +(+(HEAPF32[dsp + 18846732 >> 2])));
		fSlow82 = +(+(HEAPF32[dsp + 18846736 >> 2]));
		fSlow83 = +(min(1., +(fSlow82)));
		fSlow84 = +(0.01 * +(((+(fSlow82) < 3.) | 0)));
		iSlow85 = ~~(+(fSlow82));
		iSlow86 = ((max(0, ((1 - ((abs((((iSlow85 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow87 = (((iSlow85 | 0) == 2) | 0);
		iSlow88 = ((max(0, ((1 - ((abs((((iSlow85 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow89 = (((iSlow85 | 0) == 3) | 0);
		fSlow90 = +(0.01 * +(+(HEAPF32[dsp + 18846740 >> 2])));
		fSlow91 = +(0.01 * +(+(HEAPF32[dsp + 18846744 >> 2])));
		fSlow92 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow74) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow65) * +(+(fSlow75) - +(fSlow76))))))) - +(fSlow77));
		fSlow93 = +(3.21055 * +(fSlow67));
		fSlow94 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow65));
		fSlow95 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow67));
		fSlow96 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow65) * +(+(fSlow93) + +(fSlow94)))) - +(64. + +(fSlow95)));
		fSlow97 = +(faustpower4_f(+(fSlow64)));
		fSlow98 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(16. * +(fSlow65)) + +(11.2982 * +(fSlow73)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow97)))));
		fSlow99 = +(+(+(fSlow95) + +(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow65) * +(+(fSlow94) - +(fSlow93))))) - 64.);
		fSlow100 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow97)) - 1.26779);
		fSlow101 = +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow73)) + +(0.316946 * +(fSlow65)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow97)))) + 1.90168);
		fSlow102 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow97));
		fSlow103 = +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow102) + +(+(fSlow79) + +(fSlow102)))) + 0.316946);
		fSlow104 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow65)) - 8.);
		fSlow105 = +(+(4. + +(fSlow66)) - +(fSlow68));
		fSlow106 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846748 >> 2]))))), 0.999999))))));
		fSlow107 = +(0.01 * +(+(HEAPF32[dsp + 18846752 >> 2])));
		fSlow108 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846756 >> 2]))))))));
		fSlow109 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18846760 >> 2]))));
		fSlow110 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18846764 >> 2])) + +(+(HEAPF32[dsp + 18846768 >> 2]))));
		fSlow111 = +(0.001 * +(+(HEAPF32[dsp + 18846772 >> 2])));
		fSlow112 = +(0.001 * +(+(HEAPF32[dsp + 18846776 >> 2])));
		fSlow113 = +(0.001 * +(+(HEAPF32[dsp + 18846780 >> 2])));
		fSlow114 = +(0.001 * +(+(HEAPF32[dsp + 18846784 >> 2])));
		fSlow115 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846788 >> 2]))))), 0.999999))))));
		fSlow116 = +(0.001 * +(+(HEAPF32[dsp + 18846792 >> 2])));
		fSlow117 = +(0.001 * +(+(HEAPF32[dsp + 18846796 >> 2])));
		fSlow118 = +(+(HEAPF32[dsp + 18846800 >> 2]));
		fSlow119 = +(min(1., +(fSlow118)));
		fSlow120 = +(0.01 * +(((+(fSlow118) < 3.) | 0)));
		iSlow121 = ~~(+(fSlow118));
		iSlow122 = ((max(0, ((1 - ((abs((((iSlow121 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow123 = (((iSlow121 | 0) == 2) | 0);
		iSlow124 = ((max(0, ((1 - ((abs((((iSlow121 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow125 = (((iSlow121 | 0) == 3) | 0);
		fSlow126 = +(0.01 * +(+(HEAPF32[dsp + 18846804 >> 2])));
		fSlow127 = +(10.582 * +(+(HEAPF32[dsp + 18846808 >> 2])));
		fSlow128 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(300. + +(fSlow127)), 50.)))));
		fSlow129 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow128) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow127), 50.)))))))));
		fSlow130 = +(faustpower2_f(+(fSlow129)));
		fSlow131 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow130));
		fSlow132 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow128)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow130) / +(fSlow128))));
		fSlow133 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow132));
		fSlow134 = +(1. / +(4. + +(+(fSlow131) + +(fSlow133))));
		fSlow135 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow132));
		fSlow136 = +(0. - +(fSlow135));
		fSlow137 = +(faustpower2_f(+(fSlow132)));
		fSlow138 = +(+(5.64908 * +(fSlow137)) + +(8. * +(fSlow130)));
		fSlow139 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow130));
		fSlow140 = +(1.60527 * +(fSlow132));
		fSlow141 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow132));
		fSlow142 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow138) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow130) * +(+(fSlow139) + +(fSlow140)))))) + +(fSlow141))));
		fSlow143 = +(+(4.64607 * +(fSlow137)) + +(0.158473 * +(fSlow130)));
		fSlow144 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow143)));
		fSlow145 = +(0.01 * +(+(HEAPF32[dsp + 18846812 >> 2])));
		fSlow146 = +(3.21055 * +(fSlow132));
		fSlow147 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow130));
		fSlow148 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow132));
		fSlow149 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow130) * +(+(fSlow146) + +(fSlow147)))) - +(64. + +(fSlow148)));
		fSlow150 = +(faustpower4_f(+(fSlow129)));
		fSlow151 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(16. * +(fSlow130)) + +(11.2982 * +(fSlow137)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow150)))));
		fSlow152 = +(+(+(fSlow148) + +(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow130) * +(+(fSlow147) - +(fSlow146))))) - 64.);
		fSlow153 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow138) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow130) * +(+(fSlow139) - +(fSlow140))))))) - +(fSlow141));
		fSlow154 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow150)) - 1.26779);
		fSlow155 = +(1.90168 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow137)) + +(0.316946 * +(fSlow130)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow150)))));
		fSlow156 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow150));
		fSlow157 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow156) + +(+(fSlow143) + +(fSlow156)))));
		fSlow158 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow130)) - 8.);
		fSlow159 = +(+(4. + +(fSlow131)) - +(fSlow133));
		fSlow160 = +(0.01 * +(+(HEAPF32[dsp + 18846816 >> 2])));
		fSlow161 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846820 >> 2]))))))));
		fSlow162 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18846824 >> 2]))));
		fSlow163 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18846828 >> 2])) + +(+(HEAPF32[dsp + 18846832 >> 2]))));
		fSlow164 = +(0.001 * +(+(HEAPF32[dsp + 18846836 >> 2])));
		fSlow165 = +(0.001 * +(+(HEAPF32[dsp + 18846840 >> 2])));
		fSlow166 = +(0.001 * +(+(HEAPF32[dsp + 18846844 >> 2])));
		fSlow167 = +(0.001 * +(+(HEAPF32[dsp + 18846848 >> 2])));
		fSlow168 = +(0.001 * +(+(HEAPF32[dsp + 18846852 >> 2])));
		fSlow169 = +(0.001 * +(+(HEAPF32[dsp + 18846856 >> 2])));
		fSlow170 = +(0.001 * +(+(HEAPF32[dsp + 18846860 >> 2])));
		fSlow171 = +(0.001 * +(+(HEAPF32[dsp + 18846864 >> 2])));
		fSlow172 = +(10.582 * +(+(HEAPF32[dsp + 18846868 >> 2])));
		fSlow173 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(300. + +(fSlow172)), 50.)))));
		fSlow174 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow173) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow172), 50.)))))))));
		fSlow175 = +(faustpower2_f(+(fSlow174)));
		fSlow176 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow175));
		fSlow177 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow173)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow175) / +(fSlow173))));
		fSlow178 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow177));
		fSlow179 = +(1. / +(4. + +(+(fSlow176) + +(fSlow178))));
		fSlow180 = +(0.001 * +(+(HEAPF32[dsp + 18846872 >> 2])));
		fSlow181 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow177));
		fSlow182 = +(0. - +(fSlow181));
		fSlow183 = +(faustpower2_f(+(fSlow177)));
		fSlow184 = +(+(8. * +(fSlow175)) + +(5.64908 * +(fSlow183)));
		fSlow185 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow175));
		fSlow186 = +(1.60527 * +(fSlow177));
		fSlow187 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow177));
		fSlow188 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow184) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow175) * +(+(fSlow185) + +(fSlow186)))))) + +(fSlow187))));
		fSlow189 = +(faustpower4_f(+(fSlow174)));
		fSlow190 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow189)) - 1.26779);
		fSlow191 = +(0.001 * +(+(HEAPF32[dsp + 18846876 >> 2])));
		fSlow192 = +(0.01 * +(+(HEAPF32[dsp + 18846880 >> 2])));
		fSlow193 = +(+(HEAPF32[dsp + 18846884 >> 2]));
		fSlow194 = +(min(1., +(fSlow193)));
		fSlow195 = +(0.01 * +(((+(fSlow193) < 3.) | 0)));
		iSlow196 = ~~(+(fSlow193));
		iSlow197 = ((max(0, ((1 - ((abs((((iSlow196 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow198 = (((iSlow196 | 0) == 2) | 0);
		iSlow199 = ((max(0, ((1 - ((abs((((iSlow196 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow200 = (((iSlow196 | 0) == 3) | 0);
		fSlow201 = +(0.01 * +(+(HEAPF32[dsp + 18846888 >> 2])));
		fSlow202 = +(3.21055 * +(fSlow177));
		fSlow203 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow175));
		fSlow204 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow177));
		fSlow205 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow175) * +(+(fSlow202) + +(fSlow203)))) - +(64. + +(fSlow204)));
		fSlow206 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(16. * +(fSlow175)) + +(11.2982 * +(fSlow183)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow189)))));
		fSlow207 = +(+(+(fSlow204) + +(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow175) * +(+(fSlow203) - +(fSlow202))))) - 64.);
		fSlow208 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow184) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow175) * +(+(fSlow185) - +(fSlow186))))))) - +(fSlow187));
		fSlow209 = +(+(4.64607 * +(fSlow183)) + +(0.158473 * +(fSlow175)));
		fSlow210 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow209)));
		fSlow211 = +(1.90168 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow183)) + +(0.316946 * +(fSlow175)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow189)))));
		fSlow212 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow189));
		fSlow213 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow212) + +(+(fSlow212) + +(fSlow209)))));
		fSlow214 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow175)) - 8.);
		fSlow215 = +(+(4. + +(fSlow176)) - +(fSlow178));
		fSlow216 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846892 >> 2]))))), 0.999999))))));
		fSlow217 = +(0.01 * +(+(HEAPF32[dsp + 18846896 >> 2])));
		fSlow218 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846900 >> 2]))))))));
		fSlow219 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18846904 >> 2]))));
		fSlow220 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18846908 >> 2])) + +(+(HEAPF32[dsp + 18846912 >> 2]))));
		fSlow221 = +(0.001 * +(+(HEAPF32[dsp + 18846916 >> 2])));
		fSlow222 = +(0.001 * +(+(HEAPF32[dsp + 18846920 >> 2])));
		fSlow223 = +(0.001 * +(+(HEAPF32[dsp + 18846924 >> 2])));
		fSlow224 = +(0.001 * +(+(HEAPF32[dsp + 18846928 >> 2])));
		fSlow225 = +(0.001 * +(+(HEAPF32[dsp + 18846932 >> 2])));
		fSlow226 = +(0.001 * +(+(HEAPF32[dsp + 18846936 >> 2])));
		fSlow227 = +(0.001 * +(+(HEAPF32[dsp + 18846940 >> 2])));
		fSlow228 = +(0.001 * +(+(HEAPF32[dsp + 18846944 >> 2])));
		fSlow229 = +(+(HEAPF32[dsp + 18846948 >> 2]));
		fSlow230 = +(min(1., +(fSlow229)));
		fSlow231 = +(0.01 * +(((+(fSlow229) < 3.) | 0)));
		iSlow232 = ~~(+(fSlow229));
		iSlow233 = ((max(0, ((1 - ((abs((((iSlow232 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow234 = (((iSlow232 | 0) == 2) | 0);
		iSlow235 = ((max(0, ((1 - ((abs((((iSlow232 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow236 = (((iSlow232 | 0) == 3) | 0);
		fSlow237 = +(0.01 * +(+(HEAPF32[dsp + 18846952 >> 2])));
		fSlow238 = +(10.582 * +(+(HEAPF32[dsp + 18846956 >> 2])));
		fSlow239 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(300. + +(fSlow238)), 50.)))));
		fSlow240 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow239) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow238), 50.)))))))));
		fSlow241 = +(faustpower2_f(+(fSlow240)));
		fSlow242 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow241));
		fSlow243 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow239)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow241) / +(fSlow239))));
		fSlow244 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow243));
		fSlow245 = +(1. / +(4. + +(+(fSlow242) + +(fSlow244))));
		fSlow246 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow243));
		fSlow247 = +(0. - +(fSlow246));
		fSlow248 = +(faustpower2_f(+(fSlow243)));
		fSlow249 = +(+(5.64908 * +(fSlow248)) + +(8. * +(fSlow241)));
		fSlow250 = +(1.60527 * +(fSlow243));
		fSlow251 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow241));
		fSlow252 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow243));
		fSlow253 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow249) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow241) * +(+(fSlow250) + +(fSlow251)))))) + +(fSlow252))));
		fSlow254 = +(+(4.64607 * +(fSlow248)) + +(0.158473 * +(fSlow241)));
		fSlow255 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow254)));
		fSlow256 = +(0.01 * +(+(HEAPF32[dsp + 18846960 >> 2])));
		fSlow257 = +(faustpower4_f(+(fSlow240)));
		fSlow258 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(16. * +(fSlow241)) + +(11.2982 * +(fSlow248)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow257)))));
		fSlow259 = +(3.21055 * +(fSlow243));
		fSlow260 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow241));
		fSlow261 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow243));
		fSlow262 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow241) * +(+(fSlow259) + +(fSlow260)))) - +(64. + +(fSlow261)));
		fSlow263 = +(+(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow241) * +(+(fSlow260) - +(fSlow259)))) + +(fSlow261)) - 64.);
		fSlow264 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow249) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow241) * +(+(fSlow251) - +(fSlow250))))))) - +(fSlow252));
		fSlow265 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow257)) - 1.26779);
		fSlow266 = +(1.90168 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow248)) + +(0.316946 * +(fSlow241)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow257)))));
		fSlow267 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow257));
		fSlow268 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow267) + +(+(fSlow254) + +(fSlow267)))));
		fSlow269 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow241)) - 8.);
		fSlow270 = +(+(4. + +(fSlow242)) - +(fSlow244));
		fSlow271 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846964 >> 2]))))), 0.999999))))));
		fSlow272 = +(0.01 * +(+(HEAPF32[dsp + 18846968 >> 2])));
		fSlow273 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18846972 >> 2]))))))));
		fSlow274 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18846976 >> 2]))));
		fSlow275 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18846980 >> 2])) + +(+(HEAPF32[dsp + 18846984 >> 2]))));
		fSlow276 = +(0.001 * +(+(HEAPF32[dsp + 18846988 >> 2])));
		fSlow277 = +(0.001 * +(+(HEAPF32[dsp + 18846992 >> 2])));
		fSlow278 = +(0.001 * +(+(HEAPF32[dsp + 18846996 >> 2])));
		fSlow279 = +(0.001 * +(+(HEAPF32[dsp + 18847000 >> 2])));
		fSlow280 = +(0.001 * +(+(HEAPF32[dsp + 18847004 >> 2])));
		fSlow281 = +(0.001 * +(+(HEAPF32[dsp + 18847008 >> 2])));
		fSlow282 = +(0.001 * +(+(HEAPF32[dsp + 18847012 >> 2])));
		fSlow283 = +(0.001 * +(+(HEAPF32[dsp + 18847016 >> 2])));
		fSlow284 = +(+(HEAPF32[dsp + 18847020 >> 2]));
		fSlow285 = +(min(1., +(fSlow284)));
		fSlow286 = +(0.01 * +(((+(fSlow284) < 3.) | 0)));
		iSlow287 = ~~(+(fSlow284));
		iSlow288 = ((max(0, ((1 - ((abs((((iSlow287 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow289 = (((iSlow287 | 0) == 2) | 0);
		iSlow290 = ((max(0, ((1 - ((abs((((iSlow287 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow291 = (((iSlow287 | 0) == 3) | 0);
		fSlow292 = +(0.01 * +(+(HEAPF32[dsp + 18847024 >> 2])));
		fSlow293 = +(10.582 * +(+(HEAPF32[dsp + 18847028 >> 2])));
		fSlow294 = +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(+(fSlow293) + 300.), 50.)))));
		fSlow295 = +(sqrtf(+(+(HEAPF32[dsp + 18846556 >> 2]) * +(+(fSlow294) * +(tanf(+(+(HEAPF32[dsp + 18846560 >> 2]) * +(max(+(fSlow293), 50.)))))))));
		fSlow296 = +(faustpower2_f(+(fSlow295)));
		fSlow297 = +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow296));
		fSlow298 = +(+(+(HEAPF32[dsp + 18846572 >> 2]) * +(fSlow294)) - +(+(HEAPF32[dsp + 18846576 >> 2]) * +(+(fSlow296) / +(fSlow294))));
		fSlow299 = +(+(HEAPF32[dsp + 18846568 >> 2]) * +(fSlow298));
		fSlow300 = +(1. / +(4. + +(+(fSlow297) + +(fSlow299))));
		fSlow301 = +(+(HEAPF32[dsp + 18846580 >> 2]) * +(fSlow298));
		fSlow302 = +(0. - +(fSlow301));
		fSlow303 = +(+(HEAPF32[dsp + 18846584 >> 2]) * +(fSlow298));
		fSlow304 = +(faustpower2_f(+(fSlow298)));
		fSlow305 = +(+(5.64908 * +(fSlow304)) + +(8. * +(fSlow296)));
		fSlow306 = +(+(HEAPF32[dsp + 18846548 >> 2]) * +(fSlow296));
		fSlow307 = +(1.60527 * +(fSlow298));
		fSlow308 = +(1. / +(16. + +(+(fSlow303) + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow305) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow296) * +(+(fSlow306) + +(fSlow307)))))))));
		fSlow309 = +(+(0.158473 * +(fSlow296)) + +(4.64607 * +(fSlow304)));
		fSlow310 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(fSlow309)));
		fSlow311 = +(0.01 * +(+(HEAPF32[dsp + 18847032 >> 2])));
		fSlow312 = +(3.21055 * +(fSlow298));
		fSlow313 = +(+(HEAPF32[dsp + 18846616 >> 2]) * +(fSlow296));
		fSlow314 = +(+(HEAPF32[dsp + 18846620 >> 2]) * +(fSlow298));
		fSlow315 = +(+(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow296) * +(+(fSlow312) + +(fSlow313)))) - +(64. + +(fSlow314)));
		fSlow316 = +(faustpower4_f(+(fSlow295)));
		fSlow317 = +(96. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(16. * +(fSlow296)) + +(11.2982 * +(fSlow304)))) + +(+(HEAPF32[dsp + 18846624 >> 2]) * +(fSlow316)))));
		fSlow318 = +(+(+(fSlow314) + +(+(HEAPF32[dsp + 18846612 >> 2]) * +(+(fSlow296) * +(+(fSlow313) - +(fSlow312))))) - 64.);
		fSlow319 = +(+(16. + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow305) + +(+(HEAPF32[dsp + 18846548 >> 2]) * +(+(fSlow296) * +(+(fSlow306) - +(fSlow307))))))) - +(fSlow303));
		fSlow320 = +(+(+(HEAPF32[dsp + 18846628 >> 2]) * +(fSlow316)) - 1.26779);
		fSlow321 = +(1.90168 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow304)) + +(0.316946 * +(fSlow296)))) + +(+(HEAPF32[dsp + 18846632 >> 2]) * +(fSlow316)))));
		fSlow322 = +(+(HEAPF32[dsp + 18846636 >> 2]) * +(fSlow316));
		fSlow323 = +(0.316946 + +(+(HEAPF32[dsp + 18846552 >> 2]) * +(+(fSlow322) + +(+(fSlow309) + +(fSlow322)))));
		fSlow324 = +(+(+(HEAPF32[dsp + 18846640 >> 2]) * +(fSlow296)) - 8.);
		fSlow325 = +(+(4. + +(fSlow297)) - +(fSlow299));
		fSlow326 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18847036 >> 2]))))), 0.999999))))));
		fSlow327 = +(0.01 * +(+(HEAPF32[dsp + 18847040 >> 2])));
		fSlow328 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 18847044 >> 2]))))))));
		fSlow329 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 18847048 >> 2]))));
		fSlow330 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 18847052 >> 2])) + +(+(HEAPF32[dsp + 18847056 >> 2]))));
		fSlow331 = +(0.01 * +(+(HEAPF32[dsp + 18847060 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF32[input0 + ((i | 0) << 2) >> 2]));
			HEAPF32[dsp + 18844576 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18844576 + (1 << 2) >> 2])) + +(fSlow19));
			HEAPF32[dsp + 18844584 + (0 << 2) >> 2] = +(+(fSlow20) + +(+(HEAPF32[dsp + 18844584 + (1 << 2) >> 2]) % 1000.));
			iTemp1 = ((+(HEAPF32[dsp + 18844584 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 18844584 + (1 << 2) >> 2])) | 0);
			HEAP32[dsp + 18833344 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow22 | 0):(HEAP32[dsp + 18833344 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp2 = (imul(((1 - (HEAP32[dsp + 18833344 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 18833344 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18844592 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow23 | 0):(HEAP32[dsp + 18844592 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18844600 + (0 << 2) >> 2] = (((((((iTemp2 | 0)?0:(HEAP32[dsp + 18844600 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0) + (HEAP32[dsp + 18844592 + (0 << 2) >> 2] | 0)) | 0);
			HEAPF32[dsp + 262144 + ((HEAP32[dsp + 18844600 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow18) * +(fTemp0));
			HEAP32[dsp + 18833856 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow24 | 0):(HEAP32[dsp + 18833856 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18844608 + (0 << 2) >> 2] = (((((iTemp2 | 0)?0:(HEAP32[dsp + 18844608 + (1 << 2) >> 2] | 0)) | 0) + (HEAP32[dsp + 18844592 + (0 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18844616 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow25 | 0):(HEAP32[dsp + 18844616 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18844624 + (0 << 2) >> 2] = (((((((imul(((1 - (HEAP32[dsp + 18833856 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 18833856 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)?0:(HEAP32[dsp + 18844624 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18844608 + (0 << 2) >> 2] | 0))) | 0)) | 0) + (HEAP32[dsp + 18844616 + (0 << 2) >> 2] | 0)) | 0);
			fTemp3 = +(+(+(fSlow18) * +(+(fTemp0) * +(HEAPF32[dsp + 18844576 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 262144 + ((HEAP32[dsp + 18844624 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 17137600 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp3);
			HEAPF32[dsp + 18844632 + (0 << 2) >> 2] = +(+(fSlow26) + +(0.999 * +(HEAPF32[dsp + 18844632 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844640 + (0 << 2) >> 2] = +(+(fSlow27) + +(0.99 * +(HEAPF32[dsp + 18844640 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844648 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18844648 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18844640 + (0 << 2) >> 2]))))))), 256.));
			iTemp4 = ~~(+(HEAPF32[dsp + 18844648 + (0 << 2) >> 2]));
			iTemp5 = ((1 + (iTemp4 | 0)) | 0);
			fTemp6 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18844648 + (0 << 2) >> 2])), 1.));
			fTemp7 = +(256. + +(HEAPF32[dsp + 18844648 + (0 << 2) >> 2]));
			iTemp8 = ~~(+(fTemp7));
			fTemp9 = +(+(+(fTemp3) * +(1. - +(HEAPF32[dsp + 18844632 + (0 << 2) >> 2]))) + +(+(+(+(+(+(HEAPF32[dsp + 17137600 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp4 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp5 | 0)) - +(HEAPF32[dsp + 18844648 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 17137600 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp5 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+(HEAPF32[dsp + 18844648 + (0 << 2) >> 2]) - +((iTemp4 | 0))))) * +(fTemp6)) + +(+(+(+(HEAPF32[dsp + 17137600 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp8 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp8 | 0)) - +(255. + +(HEAPF32[dsp + 18844648 + (0 << 2) >> 2])))) + +(+(+(fTemp7) - +((iTemp8 | 0))) * +(HEAPF32[dsp + 17137600 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp8 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp6)))) * +(HEAPF32[dsp + 18844632 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18844656 + (0 << 2) >> 2] = +(+(fSlow28) + +(0.99 * +(HEAPF32[dsp + 18844656 + (1 << 2) >> 2])));
			fTemp10 = +(max(-1., +(min(1., +(+(fTemp9) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18844656 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844384 + (0 << 2) >> 2] = +(+(+(fTemp10) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp10)))))) - +(+(fSlow14) * +(+(+(+(+(fSlow32) * +(HEAPF32[dsp + 18844384 + (1 << 2) >> 2])) + +(+(fSlow34) * +(HEAPF32[dsp + 18844384 + (2 << 2) >> 2]))) + +(+(fSlow35) * +(HEAPF32[dsp + 18844384 + (3 << 2) >> 2]))) + +(+(fSlow36) * +(HEAPF32[dsp + 18844384 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 18844504 + (0 << 2) >> 2] = +(+(+(fSlow14) * +(+(+(+(+(+(fSlow16) * +(HEAPF32[dsp + 18844384 + (0 << 2) >> 2])) + +(+(fSlow37) * +(HEAPF32[dsp + 18844384 + (1 << 2) >> 2]))) + +(+(fSlow38) * +(HEAPF32[dsp + 18844384 + (2 << 2) >> 2]))) + +(+(fSlow37) * +(HEAPF32[dsp + 18844384 + (3 << 2) >> 2]))) + +(+(fSlow40) * +(HEAPF32[dsp + 18844384 + (4 << 2) >> 2])))) - +(+(fSlow7) * +(+(+(fSlow41) * +(HEAPF32[dsp + 18844504 + (1 << 2) >> 2])) + +(+(fSlow42) * +(HEAPF32[dsp + 18844504 + (2 << 2) >> 2])))));
			HEAPF32[dsp + 18844664 + (0 << 2) >> 2] = +(+(fSlow44) + +(0.999 * +(HEAPF32[dsp + 18844664 + (1 << 2) >> 2])));
			fTemp11 = +(+(fSlow7) * +(+(+(+(fSlow8) * +(HEAPF32[dsp + 18844504 + (0 << 2) >> 2])) + +(+(fSlow43) * +(HEAPF32[dsp + 18844504 + (2 << 2) >> 2]))) * +(HEAPF32[dsp + 18844664 + (0 << 2) >> 2])));
			fTemp12 = +(+(fTemp9) * +(1. - +(HEAPF32[dsp + 18844664 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18844672 + (0 << 2) >> 2] = +(+(fSlow45) + +(0.999 * +(HEAPF32[dsp + 18844672 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844680 + (0 << 2) >> 2] = +(+(fSlow46) + +(0.99 * +(HEAPF32[dsp + 18844680 + (1 << 2) >> 2])));
			fTemp13 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18844680 + (0 << 2) >> 2]))));
			fTemp14 = +(1. - +(fTemp13));
			HEAPF32[dsp + 18844688 + (0 << 2) >> 2] = +(+(+(+(fSlow47) * +(HEAPF32[dsp + 18844720 + (1 << 2) >> 2])) + +(+(fTemp11) + +(+(fTemp14) * +(HEAPF32[dsp + 18844688 + (1 << 2) >> 2])))) + +(fTemp12));
			HEAPF32[dsp + 18844696 + (0 << 2) >> 2] = +(+(+(fTemp14) * +(HEAPF32[dsp + 18844696 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18844688 + (0 << 2) >> 2]));
			HEAPF32[dsp + 18844704 + (0 << 2) >> 2] = +(+(+(fTemp14) * +(HEAPF32[dsp + 18844704 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18844696 + (0 << 2) >> 2]));
			HEAPF32[dsp + 18844712 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 18844712 + (1 << 2) >> 2]) * +(fTemp14)) + +(HEAPF32[dsp + 18844704 + (0 << 2) >> 2]));
			HEAPF32[dsp + 18844720 + (0 << 2) >> 2] = +(+(powf(+(fTemp13), 4.)) * +(HEAPF32[dsp + 18844712 + (0 << 2) >> 2]));
			fTemp15 = +(+(+(+(fTemp11) + +(fTemp12)) * +(1. - +(HEAPF32[dsp + 18844672 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 18844672 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18844720 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18844728 + (0 << 2) >> 2] = +(+(fSlow48) + +(0.999 * +(HEAPF32[dsp + 18844728 + (1 << 2) >> 2])));
			fSel0 = 0.;
			if ((((((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow49) != +(HEAPF32[dsp + 18844752 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel0 = 0.00390625;
				
			} else {
				fSel0 = +(((((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow49) != +(HEAPF32[dsp + 18844760 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel1 = 0.;
			if ((((+(HEAPF32[dsp + 18844736 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel1 = +(((((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18844736 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel1 = +(fSel0);
				
			}
			HEAPF32[dsp + 18844736 + (0 << 2) >> 2] = +(fSel1);
			HEAPF32[dsp + 18844744 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) + +(fSel1))))));
			HEAPF32[dsp + 18844752 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18844760 + (1 << 2) >> 2]) != +(fSlow49)) | 0)) | 0)?+(fSlow49):+(HEAPF32[dsp + 18844752 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18844760 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18844744 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18844752 + (1 << 2) >> 2]) != +(fSlow49)) | 0)) | 0)?+(fSlow49):+(HEAPF32[dsp + 18844760 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18844768 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18844768 + (1 << 2) >> 2])) + +(fSlow50));
			HEAPF32[dsp + 10846144 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp15) + +(+(+(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18844752 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 18844744 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18844760 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 18844744 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 18844768 + (0 << 2) >> 2])));
			fTemp16 = +(+(+(fTemp15) * +(1. - +(HEAPF32[dsp + 18844728 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 18844728 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18844776 + (0 << 2) >> 2] = +(+(fSlow51) + +(0.999 * +(HEAPF32[dsp + 18844776 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844784 + (0 << 2) >> 2] = +(+(fSlow52) + +(0.999 * +(HEAPF32[dsp + 18844784 + (1 << 2) >> 2])));
			fTemp17 = +(0.2 * +(fTemp16));
			fTemp18 = +(+(fTemp17) + +(0.764 * +(HEAPF32[dsp + 18844792 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18710464 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp18);
			HEAPF32[dsp + 18844792 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18710464 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18844800 + (0 << 2) >> 2] = +(fTemp18);
			fTemp19 = +(+(fTemp17) + +(0.783 * +(HEAPF32[dsp + 18844808 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18759616 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp19);
			HEAPF32[dsp + 18844808 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18759616 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18844816 + (0 << 2) >> 2] = +(fTemp19);
			fTemp20 = +(+(fTemp17) + +(0.805 * +(HEAPF32[dsp + 18844824 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18763712 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp20);
			HEAPF32[dsp + 18844824 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18763712 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18844832 + (0 << 2) >> 2] = +(fTemp20);
			fTemp21 = +(+(0.827 * +(HEAPF32[dsp + 18844840 + (1 << 2) >> 2])) + +(fTemp17));
			HEAPF32[dsp + 18767808 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp21);
			HEAPF32[dsp + 18844840 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18767808 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18844848 + (0 << 2) >> 2] = +(fTemp21);
			fTemp22 = +(+(HEAPF32[dsp + 18844800 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18844816 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18844832 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18844856 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18844848 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18834368 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp22);
			HEAPF32[dsp + 18844856 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18834368 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec37 = +(0. - +(0.7 * +(fTemp22)));
			fTemp23 = +(+(+(0.7 * +(HEAPF32[dsp + 18844864 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18844856 + (1 << 2) >> 2])) + +(fRec37));
			HEAPF32[dsp + 18842560 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp23);
			HEAPF32[dsp + 18844864 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18842560 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec35 = +(0. - +(0.7 * +(fTemp23)));
			fTemp24 = +(+(+(0.7 * +(HEAPF32[dsp + 18844872 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18844864 + (1 << 2) >> 2])) + +(fRec35));
			HEAPF32[dsp + 18844096 + (0 << 2) >> 2] = +(fTemp24);
			HEAPF32[dsp + 18844872 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844096 + (11 << 2) >> 2]);
			fRec33 = +(0. - +(0.7 * +(fTemp24)));
			HEAPF32[dsp + 18844880 + (0 << 2) >> 2] = +(+(fSlow53) + +(0.999 * +(HEAPF32[dsp + 18844880 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844888 + (0 << 2) >> 2] = +(+(fSlow54) + +(0.999 * +(HEAPF32[dsp + 18844888 + (1 << 2) >> 2])));
			fTemp25 = +(0. - +(HEAPF32[dsp + 18844888 + (0 << 2) >> 2]));
			fTemp26 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18844880 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp25)))), 0.5));
			iTemp27 = ((+(fTemp26) > 1.) | 0);
			iTemp28 = ((+(fTemp26) < 1.) | 0);
			fTemp29 = +(+((iTemp27 | 0)) + +(+(fTemp26) * +((iTemp28 | 0))));
			HEAPF32[dsp + 18844896 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18844896 + (1 << 2) >> 2])) + +(fSlow55));
			fTemp30 = +(+(+(+(+(fTemp16) * +(1. - +(HEAPF32[dsp + 18844776 + (0 << 2) >> 2]))) + +(+(+(+(fTemp16) * +(1. - +(HEAPF32[dsp + 18844784 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18844872 + (1 << 2) >> 2]) + +(fRec33)) * +(HEAPF32[dsp + 18844784 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 18844776 + (0 << 2) >> 2]))) * +(1. + +(1.38629 * +(0. - +(+(fTemp29) - 1.))))) * +(HEAPF32[dsp + 18844896 + (0 << 2) >> 2]));
			fTemp31 = +(1.38629 * +(fTemp29));
			fTemp32 = +(+(fTemp31) - 1.09861);
			fTemp33 = +(3.47606 * +(fTemp32));
			fTemp34 = +(+(3.47606 * +(+(+(fTemp32) * +(((+(fTemp33) > 0.) | 0))) * +(((+(fTemp33) <= 1.) | 0)))) + +(((+(fTemp33) > 1.) | 0)));
			fTemp35 = +(atan2f(+(fTemp25), +(HEAPF32[dsp + 18844880 + (0 << 2) >> 2])));
			fTemp36 = +(3. * +(fTemp35));
			fTemp37 = +(+(+(faustpower2_f(+(fTemp26))) * +((iTemp27 | 0))) + +((iTemp28 | 0)));
			HEAPF32[dsp + 18844904 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18844904 + (1 << 2) >> 2])) + +(fSlow56));
			HEAPF32[dsp + 18844912 + (0 << 2) >> 2] = +(+(fSlow57) + +(0.999 * +(HEAPF32[dsp + 18844912 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844920 + (0 << 2) >> 2] = +(+(fSlow58) + +(0.999 * +(HEAPF32[dsp + 18844920 + (1 << 2) >> 2])));
			fTemp38 = +(0. - +(HEAPF32[dsp + 18844920 + (0 << 2) >> 2]));
			fTemp39 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18844912 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp38)))), 0.5));
			iTemp40 = ((+(fTemp39) > 1.) | 0);
			iTemp41 = ((+(fTemp39) < 1.) | 0);
			fTemp42 = +(+((iTemp40 | 0)) + +(+(fTemp39) * +((iTemp41 | 0))));
			fTemp43 = +(1.38629 * +(fTemp42));
			fTemp44 = +(+(fTemp43) - 1.09861);
			fTemp45 = +(3.47606 * +(fTemp44));
			fTemp46 = +(+(3.47606 * +(+(+(fTemp44) * +(((+(fTemp45) > 0.) | 0))) * +(((+(fTemp45) <= 1.) | 0)))) + +(((+(fTemp45) > 1.) | 0)));
			fTemp47 = +(atan2f(+(fTemp38), +(HEAPF32[dsp + 18844912 + (0 << 2) >> 2])));
			fTemp48 = +(3. * +(fTemp47));
			HEAPF32[dsp + 18844928 + (0 << 2) >> 2] = +(+(fSlow59) + +(0.999 * +(HEAPF32[dsp + 18844928 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844936 + (0 << 2) >> 2] = +(+(fSlow60) + +(0.999 * +(HEAPF32[dsp + 18844936 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844944 + (0 << 2) >> 2] = +(+(fSlow61) + +(0.999 * +(HEAPF32[dsp + 18844944 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844952 + (0 << 2) >> 2] = +(+(fSlow70) + +(0.999 * +(HEAPF32[dsp + 18844952 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844960 + (0 << 2) >> 2] = +(+(fSlow81) + +(0.999 * +(HEAPF32[dsp + 18844960 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18844968 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18844968 + (1 << 2) >> 2])) + +(fSlow84));
			HEAP32[dsp + 18844976 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow86 | 0):(HEAP32[dsp + 18844976 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18834880 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow87 | 0):(HEAP32[dsp + 18834880 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp49 = (imul((HEAP32[dsp + 18834880 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18834880 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18844984 + (0 << 2) >> 2] = (((HEAP32[dsp + 18844976 + (0 << 2) >> 2] | 0) + (((((iTemp49 | 0)?0:(HEAP32[dsp + 18844984 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 2026144 + ((HEAP32[dsp + 18844984 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow83) * +(fTemp0));
			HEAP32[dsp + 18844992 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow88 | 0):(HEAP32[dsp + 18844992 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18835392 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow89 | 0):(HEAP32[dsp + 18835392 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18845000 + (0 << 2) >> 2] = (((HEAP32[dsp + 18844976 + (0 << 2) >> 2] | 0) + (((iTemp49 | 0)?0:(HEAP32[dsp + 18845000 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845008 + (0 << 2) >> 2] = (((HEAP32[dsp + 18844992 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 18835392 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18835392 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 18845008 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18845000 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp50 = +(+(+(fSlow83) * +(+(fTemp0) * +(HEAPF32[dsp + 18844968 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 2026144 + ((HEAP32[dsp + 18845008 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 17399744 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp50);
			HEAPF32[dsp + 18845016 + (0 << 2) >> 2] = +(+(fSlow90) + +(0.99 * +(HEAPF32[dsp + 18845016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845024 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18845024 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18845016 + (0 << 2) >> 2]))))))), 256.));
			iTemp51 = ~~(+(HEAPF32[dsp + 18845024 + (0 << 2) >> 2]));
			iTemp52 = ((1 + (iTemp51 | 0)) | 0);
			fTemp53 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18845024 + (0 << 2) >> 2])), 1.));
			fTemp54 = +(256. + +(HEAPF32[dsp + 18845024 + (0 << 2) >> 2]));
			iTemp55 = ~~(+(fTemp54));
			fTemp56 = +(+(+(1. - +(HEAPF32[dsp + 18844960 + (0 << 2) >> 2])) * +(fTemp50)) + +(+(HEAPF32[dsp + 18844960 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 17399744 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp51 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp52 | 0)) - +(HEAPF32[dsp + 18845024 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18845024 + (0 << 2) >> 2]) - +((iTemp51 | 0))) * +(HEAPF32[dsp + 17399744 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp52 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp53)) + +(+(+(+(HEAPF32[dsp + 17399744 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp55 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp55 | 0)) - +(255. + +(HEAPF32[dsp + 18845024 + (0 << 2) >> 2])))) + +(+(+(fTemp54) - +((iTemp55 | 0))) * +(HEAPF32[dsp + 17399744 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp55 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp53))))));
			HEAPF32[dsp + 18845032 + (0 << 2) >> 2] = +(+(fSlow91) + +(0.99 * +(HEAPF32[dsp + 18845032 + (1 << 2) >> 2])));
			fTemp57 = +(max(-1., +(min(1., +(+(fTemp56) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18845032 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844404 + (0 << 2) >> 2] = +(+(+(fTemp57) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp57)))))) - +(+(fSlow78) * +(+(+(fSlow92) * +(HEAPF32[dsp + 18844404 + (4 << 2) >> 2])) + +(+(+(+(fSlow96) * +(HEAPF32[dsp + 18844404 + (1 << 2) >> 2])) + +(+(fSlow98) * +(HEAPF32[dsp + 18844404 + (2 << 2) >> 2]))) + +(+(fSlow99) * +(HEAPF32[dsp + 18844404 + (3 << 2) >> 2]))))));
			HEAPF32[dsp + 18844516 + (0 << 2) >> 2] = +(+(+(fSlow78) * +(+(+(+(+(+(fSlow80) * +(HEAPF32[dsp + 18844404 + (0 << 2) >> 2])) + +(+(fSlow100) * +(HEAPF32[dsp + 18844404 + (1 << 2) >> 2]))) + +(+(fSlow101) * +(HEAPF32[dsp + 18844404 + (2 << 2) >> 2]))) + +(+(fSlow100) * +(HEAPF32[dsp + 18844404 + (3 << 2) >> 2]))) + +(+(fSlow103) * +(HEAPF32[dsp + 18844404 + (4 << 2) >> 2])))) - +(+(fSlow69) * +(+(+(fSlow104) * +(HEAPF32[dsp + 18844516 + (1 << 2) >> 2])) + +(+(fSlow105) * +(HEAPF32[dsp + 18844516 + (2 << 2) >> 2])))));
			fTemp58 = +(+(fSlow69) * +(+(HEAPF32[dsp + 18844952 + (0 << 2) >> 2]) * +(+(+(fSlow72) * +(HEAPF32[dsp + 18844516 + (2 << 2) >> 2])) + +(+(fSlow71) * +(HEAPF32[dsp + 18844516 + (0 << 2) >> 2])))));
			fTemp59 = +(+(1. - +(HEAPF32[dsp + 18844952 + (0 << 2) >> 2])) * +(fTemp56));
			HEAPF32[dsp + 18845040 + (0 << 2) >> 2] = +(+(fSlow107) + +(0.99 * +(HEAPF32[dsp + 18845040 + (1 << 2) >> 2])));
			fTemp60 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18845040 + (0 << 2) >> 2]))));
			fTemp61 = +(1. - +(fTemp60));
			HEAPF32[dsp + 18845048 + (0 << 2) >> 2] = +(+(+(+(fSlow106) * +(HEAPF32[dsp + 18845080 + (1 << 2) >> 2])) + +(+(fTemp58) + +(+(fTemp61) * +(HEAPF32[dsp + 18845048 + (1 << 2) >> 2])))) + +(fTemp59));
			HEAPF32[dsp + 18845056 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845048 + (0 << 2) >> 2]) + +(+(fTemp61) * +(HEAPF32[dsp + 18845056 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845064 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845056 + (0 << 2) >> 2]) + +(+(fTemp61) * +(HEAPF32[dsp + 18845064 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845072 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845064 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845072 + (1 << 2) >> 2]) * +(fTemp61)));
			HEAPF32[dsp + 18845080 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845072 + (0 << 2) >> 2]) * +(powf(+(fTemp60), 4.)));
			fTemp62 = +(+(+(1. - +(HEAPF32[dsp + 18844944 + (0 << 2) >> 2])) * +(+(fTemp58) + +(fTemp59))) + +(+(HEAPF32[dsp + 18844944 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18845080 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18845088 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845088 + (1 << 2) >> 2])) + +(fSlow108));
			fSel2 = 0.;
			if ((((((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow109) != +(HEAPF32[dsp + 18845112 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel2 = 0.00390625;
				
			} else {
				fSel2 = +(((((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow109) != +(HEAPF32[dsp + 18845120 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel3 = 0.;
			if ((((+(HEAPF32[dsp + 18845096 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel3 = +(((((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18845096 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel3 = +(fSel2);
				
			}
			HEAPF32[dsp + 18845096 + (0 << 2) >> 2] = +(fSel3);
			HEAPF32[dsp + 18845104 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) + +(fSel3))))));
			HEAPF32[dsp + 18845112 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18845120 + (1 << 2) >> 2]) != +(fSlow109)) | 0)) | 0)?+(fSlow109):+(HEAPF32[dsp + 18845112 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18845120 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845104 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18845112 + (1 << 2) >> 2]) != +(fSlow109)) | 0)) | 0)?+(fSlow109):+(HEAPF32[dsp + 18845120 + (1 << 2) >> 2]));
			HEAPF32[dsp + 11894720 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp62) + +(+(HEAPF32[dsp + 18845088 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845104 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845112 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 18845104 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845120 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp63 = +(+(+(1. - +(HEAPF32[dsp + 18844936 + (0 << 2) >> 2])) * +(fTemp62)) + +(+(HEAPF32[dsp + 18844936 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18845128 + (0 << 2) >> 2] = +(+(fSlow110) + +(0.999 * +(HEAPF32[dsp + 18845128 + (1 << 2) >> 2])));
			fTemp64 = +(0.2 * +(fTemp63));
			fTemp65 = +(+(fTemp64) + +(0.764 * +(HEAPF32[dsp + 18845136 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18718656 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp65);
			HEAPF32[dsp + 18845136 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18718656 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845144 + (0 << 2) >> 2] = +(fTemp65);
			fTemp66 = +(+(fTemp64) + +(0.783 * +(HEAPF32[dsp + 18845152 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18771904 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp66);
			HEAPF32[dsp + 18845152 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18771904 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845160 + (0 << 2) >> 2] = +(fTemp66);
			fTemp67 = +(+(fTemp64) + +(0.805 * +(HEAPF32[dsp + 18845168 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18776000 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp67);
			HEAPF32[dsp + 18845168 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18776000 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845176 + (0 << 2) >> 2] = +(fTemp67);
			fTemp68 = +(+(0.827 * +(HEAPF32[dsp + 18845184 + (1 << 2) >> 2])) + +(fTemp64));
			HEAPF32[dsp + 18780096 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp68);
			HEAPF32[dsp + 18845184 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18780096 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845192 + (0 << 2) >> 2] = +(fTemp68);
			fTemp69 = +(+(HEAPF32[dsp + 18845144 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845160 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845176 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18845200 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18845192 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18835904 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp69);
			HEAPF32[dsp + 18845200 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18835904 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec88 = +(0. - +(0.7 * +(fTemp69)));
			fTemp70 = +(+(HEAPF32[dsp + 18845200 + (1 << 2) >> 2]) + +(+(fRec88) + +(0.7 * +(HEAPF32[dsp + 18845208 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18842816 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp70);
			HEAPF32[dsp + 18845208 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18842816 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec86 = +(0. - +(0.7 * +(fTemp70)));
			fTemp71 = +(+(HEAPF32[dsp + 18845208 + (1 << 2) >> 2]) + +(+(fRec86) + +(0.7 * +(HEAPF32[dsp + 18845216 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18844144 + (0 << 2) >> 2] = +(fTemp71);
			HEAPF32[dsp + 18845216 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844144 + (11 << 2) >> 2]);
			fRec84 = +(0. - +(0.7 * +(fTemp71)));
			fTemp72 = +(+(+(1. - +(HEAPF32[dsp + 18844928 + (0 << 2) >> 2])) * +(fTemp63)) + +(+(HEAPF32[dsp + 18844928 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845128 + (0 << 2) >> 2])) * +(fTemp63)) + +(+(HEAPF32[dsp + 18845128 + (0 << 2) >> 2]) * +(+(fRec84) + +(HEAPF32[dsp + 18845216 + (1 << 2) >> 2]))))));
			fTemp73 = +(1. + +(1.38629 * +(0. - +(+(fTemp42) - 1.))));
			fTemp74 = +(+(+(faustpower2_f(+(fTemp39))) * +((iTemp40 | 0))) + +((iTemp41 | 0)));
			HEAPF32[dsp + 18845224 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18845224 + (1 << 2) >> 2])) + +(fSlow111));
			HEAPF32[dsp + 18845232 + (0 << 2) >> 2] = +(+(fSlow112) + +(0.999 * +(HEAPF32[dsp + 18845232 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845240 + (0 << 2) >> 2] = +(+(fSlow113) + +(0.999 * +(HEAPF32[dsp + 18845240 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845248 + (0 << 2) >> 2] = +(+(fSlow114) + +(0.999 * +(HEAPF32[dsp + 18845248 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845256 + (0 << 2) >> 2] = +(+(fSlow116) + +(0.999 * +(HEAPF32[dsp + 18845256 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845264 + (0 << 2) >> 2] = +(+(fSlow117) + +(0.999 * +(HEAPF32[dsp + 18845264 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845272 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845272 + (1 << 2) >> 2])) + +(fSlow120));
			HEAP32[dsp + 18845280 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow122 | 0):(HEAP32[dsp + 18845280 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18836416 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow123 | 0):(HEAP32[dsp + 18836416 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp75 = (imul((HEAP32[dsp + 18836416 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18836416 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845288 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845280 + (0 << 2) >> 2] | 0) + (((((iTemp75 | 0)?0:(HEAP32[dsp + 18845288 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 3790144 + ((HEAP32[dsp + 18845288 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow119) * +(fTemp0));
			HEAP32[dsp + 18845296 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow124 | 0):(HEAP32[dsp + 18845296 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18836928 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow125 | 0):(HEAP32[dsp + 18836928 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18845304 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845280 + (0 << 2) >> 2] | 0) + (((iTemp75 | 0)?0:(HEAP32[dsp + 18845304 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845312 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845296 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 18836928 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18836928 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 18845312 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18845304 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp76 = +(+(+(fSlow119) * +(+(fTemp0) * +(HEAPF32[dsp + 18845272 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 3790144 + ((HEAP32[dsp + 18845312 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 17661888 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp76);
			HEAPF32[dsp + 18845320 + (0 << 2) >> 2] = +(+(fSlow126) + +(0.99 * +(HEAPF32[dsp + 18845320 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845328 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18845328 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18845320 + (0 << 2) >> 2]))))))), 256.));
			iTemp77 = ~~(+(HEAPF32[dsp + 18845328 + (0 << 2) >> 2]));
			iTemp78 = ((1 + (iTemp77 | 0)) | 0);
			fTemp79 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18845328 + (0 << 2) >> 2])), 1.));
			fTemp80 = +(256. + +(HEAPF32[dsp + 18845328 + (0 << 2) >> 2]));
			iTemp81 = ~~(+(fTemp80));
			fTemp82 = +(+(+(1. - +(HEAPF32[dsp + 18845264 + (0 << 2) >> 2])) * +(fTemp76)) + +(+(HEAPF32[dsp + 18845264 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 17661888 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp77 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp78 | 0)) - +(HEAPF32[dsp + 18845328 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18845328 + (0 << 2) >> 2]) - +((iTemp77 | 0))) * +(HEAPF32[dsp + 17661888 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp78 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp79)) + +(+(+(+(HEAPF32[dsp + 17661888 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp81 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp81 | 0)) - +(255. + +(HEAPF32[dsp + 18845328 + (0 << 2) >> 2])))) + +(+(+(fTemp80) - +((iTemp81 | 0))) * +(HEAPF32[dsp + 17661888 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp81 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp79))))));
			HEAPF32[dsp + 18845336 + (0 << 2) >> 2] = +(+(fSlow145) + +(0.99 * +(HEAPF32[dsp + 18845336 + (1 << 2) >> 2])));
			fTemp83 = +(max(-1., +(min(1., +(+(fTemp82) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18845336 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844424 + (0 << 2) >> 2] = +(+(+(fTemp83) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp83)))))) - +(+(fSlow142) * +(+(+(+(+(fSlow149) * +(HEAPF32[dsp + 18844424 + (1 << 2) >> 2])) + +(+(fSlow151) * +(HEAPF32[dsp + 18844424 + (2 << 2) >> 2]))) + +(+(fSlow152) * +(HEAPF32[dsp + 18844424 + (3 << 2) >> 2]))) + +(+(fSlow153) * +(HEAPF32[dsp + 18844424 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 18844528 + (0 << 2) >> 2] = +(+(+(fSlow142) * +(+(+(+(+(+(fSlow144) * +(HEAPF32[dsp + 18844424 + (0 << 2) >> 2])) + +(+(fSlow154) * +(HEAPF32[dsp + 18844424 + (1 << 2) >> 2]))) + +(+(fSlow155) * +(HEAPF32[dsp + 18844424 + (2 << 2) >> 2]))) + +(+(fSlow154) * +(HEAPF32[dsp + 18844424 + (3 << 2) >> 2]))) + +(+(fSlow157) * +(HEAPF32[dsp + 18844424 + (4 << 2) >> 2])))) - +(+(fSlow134) * +(+(+(fSlow158) * +(HEAPF32[dsp + 18844528 + (1 << 2) >> 2])) + +(+(fSlow159) * +(HEAPF32[dsp + 18844528 + (2 << 2) >> 2])))));
			fTemp84 = +(+(+(1. - +(HEAPF32[dsp + 18845256 + (0 << 2) >> 2])) * +(fTemp82)) + +(+(fSlow134) * +(+(HEAPF32[dsp + 18845256 + (0 << 2) >> 2]) * +(+(+(fSlow136) * +(HEAPF32[dsp + 18844528 + (2 << 2) >> 2])) + +(+(fSlow135) * +(HEAPF32[dsp + 18844528 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18845344 + (0 << 2) >> 2] = +(+(fSlow160) + +(0.99 * +(HEAPF32[dsp + 18845344 + (1 << 2) >> 2])));
			fTemp85 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18845344 + (0 << 2) >> 2]))));
			fTemp86 = +(1. - +(fTemp85));
			HEAPF32[dsp + 18845352 + (0 << 2) >> 2] = +(+(+(fSlow115) * +(HEAPF32[dsp + 18845384 + (1 << 2) >> 2])) + +(+(fTemp84) + +(+(fTemp86) * +(HEAPF32[dsp + 18845352 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18845360 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845352 + (0 << 2) >> 2]) + +(+(fTemp86) * +(HEAPF32[dsp + 18845360 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845368 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845360 + (0 << 2) >> 2]) + +(+(fTemp86) * +(HEAPF32[dsp + 18845368 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845376 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845368 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845376 + (1 << 2) >> 2]) * +(fTemp86)));
			HEAPF32[dsp + 18845384 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845376 + (0 << 2) >> 2]) * +(powf(+(fTemp85), 4.)));
			fTemp87 = +(+(HEAPF32[dsp + 18845248 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18845384 + (0 << 2) >> 2]));
			fTemp88 = +(+(1. - +(HEAPF32[dsp + 18845248 + (0 << 2) >> 2])) * +(fTemp84));
			HEAPF32[dsp + 18845392 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845392 + (1 << 2) >> 2])) + +(fSlow161));
			fSel4 = 0.;
			if ((((((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow162) != +(HEAPF32[dsp + 18845416 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel4 = 0.00390625;
				
			} else {
				fSel4 = +(((((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow162) != +(HEAPF32[dsp + 18845424 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel5 = 0.;
			if ((((+(HEAPF32[dsp + 18845400 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel5 = +(((((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18845400 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel5 = +(fSel4);
				
			}
			HEAPF32[dsp + 18845400 + (0 << 2) >> 2] = +(fSel5);
			HEAPF32[dsp + 18845408 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) + +(fSel5))))));
			HEAPF32[dsp + 18845416 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18845424 + (1 << 2) >> 2]) != +(fSlow162)) | 0)) | 0)?+(fSlow162):+(HEAPF32[dsp + 18845416 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18845424 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845408 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18845416 + (1 << 2) >> 2]) != +(fSlow162)) | 0)) | 0)?+(fSlow162):+(HEAPF32[dsp + 18845424 + (1 << 2) >> 2]));
			HEAPF32[dsp + 12943296 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(+(fTemp87) + +(+(HEAPF32[dsp + 18845392 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845408 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845416 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 18845408 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845424 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]))))) + +(fTemp88));
			fTemp89 = +(+(+(1. - +(HEAPF32[dsp + 18845240 + (0 << 2) >> 2])) * +(+(fTemp87) + +(fTemp88))) + +(+(HEAPF32[dsp + 18845240 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18845432 + (0 << 2) >> 2] = +(+(fSlow163) + +(0.999 * +(HEAPF32[dsp + 18845432 + (1 << 2) >> 2])));
			fTemp90 = +(0.2 * +(fTemp89));
			fTemp91 = +(+(fTemp90) + +(0.764 * +(HEAPF32[dsp + 18845440 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18726848 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp91);
			HEAPF32[dsp + 18845440 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18726848 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845448 + (0 << 2) >> 2] = +(fTemp91);
			fTemp92 = +(+(fTemp90) + +(0.783 * +(HEAPF32[dsp + 18845456 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18784192 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp92);
			HEAPF32[dsp + 18845456 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18784192 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845464 + (0 << 2) >> 2] = +(fTemp92);
			fTemp93 = +(+(fTemp90) + +(0.805 * +(HEAPF32[dsp + 18845472 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18788288 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp93);
			HEAPF32[dsp + 18845472 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18788288 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845480 + (0 << 2) >> 2] = +(fTemp93);
			fTemp94 = +(+(0.827 * +(HEAPF32[dsp + 18845488 + (1 << 2) >> 2])) + +(fTemp90));
			HEAPF32[dsp + 18792384 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp94);
			HEAPF32[dsp + 18845488 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18792384 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845496 + (0 << 2) >> 2] = +(fTemp94);
			fTemp95 = +(+(HEAPF32[dsp + 18845448 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845464 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845480 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18845504 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18845496 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18837440 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp95);
			HEAPF32[dsp + 18845504 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18837440 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec134 = +(0. - +(0.7 * +(fTemp95)));
			fTemp96 = +(+(HEAPF32[dsp + 18845504 + (1 << 2) >> 2]) + +(+(fRec134) + +(0.7 * +(HEAPF32[dsp + 18845512 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18843072 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp96);
			HEAPF32[dsp + 18845512 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18843072 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec132 = +(0. - +(0.7 * +(fTemp96)));
			fTemp97 = +(+(HEAPF32[dsp + 18845512 + (1 << 2) >> 2]) + +(+(fRec132) + +(0.7 * +(HEAPF32[dsp + 18845520 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18844192 + (0 << 2) >> 2] = +(fTemp97);
			HEAPF32[dsp + 18845520 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844192 + (11 << 2) >> 2]);
			fRec130 = +(0. - +(0.7 * +(fTemp97)));
			HEAPF32[dsp + 18845528 + (0 << 2) >> 2] = +(+(fSlow164) + +(0.999 * +(HEAPF32[dsp + 18845528 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845536 + (0 << 2) >> 2] = +(+(fSlow165) + +(0.999 * +(HEAPF32[dsp + 18845536 + (1 << 2) >> 2])));
			fTemp98 = +(0. - +(HEAPF32[dsp + 18845536 + (0 << 2) >> 2]));
			fTemp99 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18845528 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp98)))), 0.5));
			iTemp100 = ((+(fTemp99) > 1.) | 0);
			iTemp101 = ((+(fTemp99) < 1.) | 0);
			fTemp102 = +(+((iTemp100 | 0)) + +(+(fTemp99) * +((iTemp101 | 0))));
			fTemp103 = +(+(+(HEAPF32[dsp + 18845224 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845232 + (0 << 2) >> 2])) * +(fTemp89)) + +(+(HEAPF32[dsp + 18845232 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845432 + (0 << 2) >> 2])) * +(fTemp89)) + +(+(HEAPF32[dsp + 18845432 + (0 << 2) >> 2]) * +(+(fRec130) + +(HEAPF32[dsp + 18845520 + (1 << 2) >> 2]))))))) * +(1. + +(1.38629 * +(0. - +(+(fTemp102) - 1.)))));
			fTemp104 = +(1.38629 * +(fTemp102));
			fTemp105 = +(+(fTemp104) - 1.09861);
			fTemp106 = +(3.47606 * +(fTemp105));
			fTemp107 = +(+(3.47606 * +(+(+(fTemp105) * +(((+(fTemp106) > 0.) | 0))) * +(((+(fTemp106) <= 1.) | 0)))) + +(((+(fTemp106) > 1.) | 0)));
			fTemp108 = +(atan2f(+(fTemp98), +(HEAPF32[dsp + 18845528 + (0 << 2) >> 2])));
			fTemp109 = +(3. * +(fTemp108));
			fTemp110 = +(+(+(faustpower2_f(+(fTemp99))) * +((iTemp100 | 0))) + +((iTemp101 | 0)));
			HEAPF32[dsp + 18845544 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18845544 + (1 << 2) >> 2])) + +(fSlow166));
			HEAPF32[dsp + 18845552 + (0 << 2) >> 2] = +(+(fSlow167) + +(0.999 * +(HEAPF32[dsp + 18845552 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845560 + (0 << 2) >> 2] = +(+(fSlow168) + +(0.999 * +(HEAPF32[dsp + 18845560 + (1 << 2) >> 2])));
			fTemp111 = +(0. - +(HEAPF32[dsp + 18845560 + (0 << 2) >> 2]));
			fTemp112 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18845552 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp111)))), 0.5));
			iTemp113 = ((+(fTemp112) > 1.) | 0);
			iTemp114 = ((+(fTemp112) < 1.) | 0);
			fTemp115 = +(+((iTemp113 | 0)) + +(+(fTemp112) * +((iTemp114 | 0))));
			fTemp116 = +(1.38629 * +(fTemp115));
			fTemp117 = +(+(fTemp116) - 1.09861);
			fTemp118 = +(3.47606 * +(fTemp117));
			fTemp119 = +(+(3.47606 * +(+(+(fTemp117) * +(((+(fTemp118) > 0.) | 0))) * +(((+(fTemp118) <= 1.) | 0)))) + +(((+(fTemp118) > 1.) | 0)));
			HEAPF32[dsp + 18845568 + (0 << 2) >> 2] = +(+(fSlow169) + +(0.999 * +(HEAPF32[dsp + 18845568 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845576 + (0 << 2) >> 2] = +(+(fSlow170) + +(0.999 * +(HEAPF32[dsp + 18845576 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845584 + (0 << 2) >> 2] = +(+(fSlow171) + +(0.999 * +(HEAPF32[dsp + 18845584 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845592 + (0 << 2) >> 2] = +(+(fSlow180) + +(0.999 * +(HEAPF32[dsp + 18845592 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845600 + (0 << 2) >> 2] = +(+(fSlow191) + +(0.999 * +(HEAPF32[dsp + 18845600 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845608 + (0 << 2) >> 2] = +(+(fSlow192) + +(0.99 * +(HEAPF32[dsp + 18845608 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845616 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18845616 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18845608 + (0 << 2) >> 2]))))))), 256.));
			fTemp120 = +(256. + +(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]));
			iTemp121 = ~~(+(fTemp120));
			HEAPF32[dsp + 18845624 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845624 + (1 << 2) >> 2])) + +(fSlow195));
			HEAP32[dsp + 18845632 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow197 | 0):(HEAP32[dsp + 18845632 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18837952 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow198 | 0):(HEAP32[dsp + 18837952 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp122 = (imul((HEAP32[dsp + 18837952 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18837952 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845640 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845632 + (0 << 2) >> 2] | 0) + (((((iTemp122 | 0)?0:(HEAP32[dsp + 18845640 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 5554144 + ((HEAP32[dsp + 18845640 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow194) * +(fTemp0));
			HEAP32[dsp + 18845648 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow199 | 0):(HEAP32[dsp + 18845648 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18838464 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow200 | 0):(HEAP32[dsp + 18838464 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18845656 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845632 + (0 << 2) >> 2] | 0) + (((iTemp122 | 0)?0:(HEAP32[dsp + 18845656 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845664 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845648 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 18838464 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18838464 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 18845664 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18845656 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp123 = +(+(+(fSlow194) * +(+(fTemp0) * +(HEAPF32[dsp + 18845624 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 5554144 + ((HEAP32[dsp + 18845664 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 17924032 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp123);
			fTemp124 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18845616 + (0 << 2) >> 2])), 1.));
			iTemp125 = ~~(+(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]));
			iTemp126 = ((1 + (iTemp125 | 0)) | 0);
			fTemp127 = +(+(+(HEAPF32[dsp + 18845600 + (0 << 2) >> 2]) * +(+(+(+(+(+((iTemp121 | 0)) - +(255. + +(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 17924032 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp121 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 17924032 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp121 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+(fTemp120) - +((iTemp121 | 0))))) * +(1. - +(fTemp124))) + +(+(+(+(HEAPF32[dsp + 17924032 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp125 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp126 | 0)) - +(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]) - +((iTemp125 | 0))) * +(HEAPF32[dsp + 17924032 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp126 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp124)))) + +(+(1. - +(HEAPF32[dsp + 18845600 + (0 << 2) >> 2])) * +(fTemp123)));
			HEAPF32[dsp + 18845672 + (0 << 2) >> 2] = +(+(fSlow201) + +(0.99 * +(HEAPF32[dsp + 18845672 + (1 << 2) >> 2])));
			fTemp128 = +(max(-1., +(min(1., +(+(fTemp127) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18845672 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844444 + (0 << 2) >> 2] = +(+(+(fTemp128) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp128)))))) - +(+(fSlow188) * +(+(+(+(+(fSlow205) * +(HEAPF32[dsp + 18844444 + (1 << 2) >> 2])) + +(+(fSlow206) * +(HEAPF32[dsp + 18844444 + (2 << 2) >> 2]))) + +(+(fSlow207) * +(HEAPF32[dsp + 18844444 + (3 << 2) >> 2]))) + +(+(fSlow208) * +(HEAPF32[dsp + 18844444 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 18844540 + (0 << 2) >> 2] = +(+(+(fSlow188) * +(+(+(+(+(+(fSlow190) * +(HEAPF32[dsp + 18844444 + (1 << 2) >> 2])) + +(+(fSlow210) * +(HEAPF32[dsp + 18844444 + (0 << 2) >> 2]))) + +(+(fSlow211) * +(HEAPF32[dsp + 18844444 + (2 << 2) >> 2]))) + +(+(fSlow190) * +(HEAPF32[dsp + 18844444 + (3 << 2) >> 2]))) + +(+(fSlow213) * +(HEAPF32[dsp + 18844444 + (4 << 2) >> 2])))) - +(+(fSlow179) * +(+(+(fSlow214) * +(HEAPF32[dsp + 18844540 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 18844540 + (2 << 2) >> 2])))));
			fTemp129 = +(+(fSlow179) * +(+(HEAPF32[dsp + 18845592 + (0 << 2) >> 2]) * +(+(+(fSlow182) * +(HEAPF32[dsp + 18844540 + (2 << 2) >> 2])) + +(+(fSlow181) * +(HEAPF32[dsp + 18844540 + (0 << 2) >> 2])))));
			fTemp130 = +(+(1. - +(HEAPF32[dsp + 18845592 + (0 << 2) >> 2])) * +(fTemp127));
			HEAPF32[dsp + 18845680 + (0 << 2) >> 2] = +(+(fSlow217) + +(0.99 * +(HEAPF32[dsp + 18845680 + (1 << 2) >> 2])));
			fTemp131 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18845680 + (0 << 2) >> 2]))));
			fTemp132 = +(1. - +(fTemp131));
			HEAPF32[dsp + 18845688 + (0 << 2) >> 2] = +(+(+(+(fSlow216) * +(HEAPF32[dsp + 18845720 + (1 << 2) >> 2])) + +(+(fTemp129) + +(+(fTemp132) * +(HEAPF32[dsp + 18845688 + (1 << 2) >> 2])))) + +(fTemp130));
			HEAPF32[dsp + 18845696 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845688 + (0 << 2) >> 2]) + +(+(fTemp132) * +(HEAPF32[dsp + 18845696 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845704 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845696 + (0 << 2) >> 2]) + +(+(fTemp132) * +(HEAPF32[dsp + 18845704 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845712 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845704 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845712 + (1 << 2) >> 2]) * +(fTemp132)));
			HEAPF32[dsp + 18845720 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18845712 + (0 << 2) >> 2]) * +(powf(+(fTemp131), 4.)));
			fTemp133 = +(+(+(1. - +(HEAPF32[dsp + 18845584 + (0 << 2) >> 2])) * +(+(fTemp129) + +(fTemp130))) + +(+(HEAPF32[dsp + 18845584 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18845720 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18845728 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845728 + (1 << 2) >> 2])) + +(fSlow218));
			fSel6 = 0.;
			if ((((((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow219) != +(HEAPF32[dsp + 18845752 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel6 = 0.00390625;
				
			} else {
				fSel6 = +(((((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow219) != +(HEAPF32[dsp + 18845760 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel7 = 0.;
			if ((((+(HEAPF32[dsp + 18845736 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel7 = +(((((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18845736 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel7 = +(fSel6);
				
			}
			HEAPF32[dsp + 18845736 + (0 << 2) >> 2] = +(fSel7);
			HEAPF32[dsp + 18845744 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) + +(fSel7))))));
			HEAPF32[dsp + 18845752 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18845760 + (1 << 2) >> 2]) != +(fSlow219)) | 0)) | 0)?+(fSlow219):+(HEAPF32[dsp + 18845752 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18845760 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18845744 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18845752 + (1 << 2) >> 2]) != +(fSlow219)) | 0)) | 0)?+(fSlow219):+(HEAPF32[dsp + 18845760 + (1 << 2) >> 2]));
			HEAPF32[dsp + 13991872 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp133) + +(+(HEAPF32[dsp + 18845728 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845744 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845752 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 18845744 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18845760 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp134 = +(+(+(1. - +(HEAPF32[dsp + 18845576 + (0 << 2) >> 2])) * +(fTemp133)) + +(+(HEAPF32[dsp + 18845576 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18845768 + (0 << 2) >> 2] = +(+(fSlow220) + +(0.999 * +(HEAPF32[dsp + 18845768 + (1 << 2) >> 2])));
			fTemp135 = +(0.2 * +(fTemp134));
			fTemp136 = +(+(fTemp135) + +(0.764 * +(HEAPF32[dsp + 18845776 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18735040 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp136);
			HEAPF32[dsp + 18845776 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18735040 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845784 + (0 << 2) >> 2] = +(fTemp136);
			fTemp137 = +(+(fTemp135) + +(0.783 * +(HEAPF32[dsp + 18845792 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18796480 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp137);
			HEAPF32[dsp + 18845792 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18796480 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845800 + (0 << 2) >> 2] = +(fTemp137);
			fTemp138 = +(+(fTemp135) + +(0.805 * +(HEAPF32[dsp + 18845808 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18800576 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp138);
			HEAPF32[dsp + 18845808 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18800576 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845816 + (0 << 2) >> 2] = +(fTemp138);
			fTemp139 = +(+(0.827 * +(HEAPF32[dsp + 18845824 + (1 << 2) >> 2])) + +(fTemp135));
			HEAPF32[dsp + 18804672 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp139);
			HEAPF32[dsp + 18845824 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18804672 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18845832 + (0 << 2) >> 2] = +(fTemp139);
			fTemp140 = +(+(HEAPF32[dsp + 18845784 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845800 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18845816 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18845840 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18845832 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18838976 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp140);
			HEAPF32[dsp + 18845840 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18838976 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec184 = +(0. - +(0.7 * +(fTemp140)));
			fTemp141 = +(+(HEAPF32[dsp + 18845840 + (1 << 2) >> 2]) + +(+(fRec184) + +(0.7 * +(HEAPF32[dsp + 18845848 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18843328 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp141);
			HEAPF32[dsp + 18845848 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18843328 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec182 = +(0. - +(0.7 * +(fTemp141)));
			fTemp142 = +(+(HEAPF32[dsp + 18845848 + (1 << 2) >> 2]) + +(+(fRec182) + +(0.7 * +(HEAPF32[dsp + 18845856 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18844240 + (0 << 2) >> 2] = +(fTemp142);
			HEAPF32[dsp + 18845856 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844240 + (11 << 2) >> 2]);
			fRec180 = +(0. - +(0.7 * +(fTemp142)));
			fTemp143 = +(+(+(1. - +(HEAPF32[dsp + 18845568 + (0 << 2) >> 2])) * +(fTemp134)) + +(+(HEAPF32[dsp + 18845568 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18845768 + (0 << 2) >> 2])) * +(fTemp134)) + +(+(HEAPF32[dsp + 18845768 + (0 << 2) >> 2]) * +(+(fRec180) + +(HEAPF32[dsp + 18845856 + (1 << 2) >> 2]))))));
			fTemp144 = +(1. + +(1.38629 * +(0. - +(+(fTemp115) - 1.))));
			fTemp145 = +(atan2f(+(fTemp111), +(HEAPF32[dsp + 18845552 + (0 << 2) >> 2])));
			fTemp146 = +(3. * +(fTemp145));
			fTemp147 = +(+(+(faustpower2_f(+(fTemp112))) * +((iTemp113 | 0))) + +((iTemp114 | 0)));
			HEAPF32[dsp + 18845864 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18845864 + (1 << 2) >> 2])) + +(fSlow221));
			HEAPF32[dsp + 18845872 + (0 << 2) >> 2] = +(+(fSlow222) + +(0.999 * +(HEAPF32[dsp + 18845872 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845880 + (0 << 2) >> 2] = +(+(fSlow223) + +(0.999 * +(HEAPF32[dsp + 18845880 + (1 << 2) >> 2])));
			fTemp148 = +(0. - +(HEAPF32[dsp + 18845880 + (0 << 2) >> 2]));
			fTemp149 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18845872 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp148)))), 0.5));
			iTemp150 = ((+(fTemp149) > 1.) | 0);
			iTemp151 = ((+(fTemp149) < 1.) | 0);
			fTemp152 = +(+((iTemp150 | 0)) + +(+(fTemp149) * +((iTemp151 | 0))));
			fTemp153 = +(1.38629 * +(fTemp152));
			fTemp154 = +(+(fTemp153) - 1.09861);
			fTemp155 = +(3.47606 * +(fTemp154));
			fTemp156 = +(+(3.47606 * +(+(+(fTemp154) * +(((+(fTemp155) > 0.) | 0))) * +(((+(fTemp155) <= 1.) | 0)))) + +(((+(fTemp155) > 1.) | 0)));
			HEAPF32[dsp + 18845888 + (0 << 2) >> 2] = +(+(fSlow224) + +(0.999 * +(HEAPF32[dsp + 18845888 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845896 + (0 << 2) >> 2] = +(+(fSlow225) + +(0.999 * +(HEAPF32[dsp + 18845896 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845904 + (0 << 2) >> 2] = +(+(fSlow226) + +(0.999 * +(HEAPF32[dsp + 18845904 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845912 + (0 << 2) >> 2] = +(+(fSlow227) + +(0.999 * +(HEAPF32[dsp + 18845912 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845920 + (0 << 2) >> 2] = +(+(fSlow228) + +(0.999 * +(HEAPF32[dsp + 18845920 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845928 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18845928 + (1 << 2) >> 2])) + +(fSlow231));
			HEAP32[dsp + 18845936 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow233 | 0):(HEAP32[dsp + 18845936 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18839488 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow234 | 0):(HEAP32[dsp + 18839488 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp157 = (imul((HEAP32[dsp + 18839488 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18839488 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845944 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845936 + (0 << 2) >> 2] | 0) + (((((iTemp157 | 0)?0:(HEAP32[dsp + 18845944 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 7318144 + ((HEAP32[dsp + 18845944 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow230) * +(fTemp0));
			HEAP32[dsp + 18845952 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow235 | 0):(HEAP32[dsp + 18845952 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18840000 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow236 | 0):(HEAP32[dsp + 18840000 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18845960 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845936 + (0 << 2) >> 2] | 0) + (((iTemp157 | 0)?0:(HEAP32[dsp + 18845960 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18845968 + (0 << 2) >> 2] = (((HEAP32[dsp + 18845952 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 18840000 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18840000 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 18845968 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18845960 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp158 = +(+(+(fSlow230) * +(+(fTemp0) * +(HEAPF32[dsp + 18845928 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 7318144 + ((HEAP32[dsp + 18845968 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 18186176 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp158);
			HEAPF32[dsp + 18845976 + (0 << 2) >> 2] = +(+(fSlow237) + +(0.99 * +(HEAPF32[dsp + 18845976 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18845984 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18845984 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18845976 + (0 << 2) >> 2]))))))), 256.));
			iTemp159 = ~~(+(HEAPF32[dsp + 18845984 + (0 << 2) >> 2]));
			iTemp160 = ((1 + (iTemp159 | 0)) | 0);
			fTemp161 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18845984 + (0 << 2) >> 2])), 1.));
			fTemp162 = +(256. + +(HEAPF32[dsp + 18845984 + (0 << 2) >> 2]));
			iTemp163 = ~~(+(fTemp162));
			fTemp164 = +(+(+(1. - +(HEAPF32[dsp + 18845920 + (0 << 2) >> 2])) * +(fTemp158)) + +(+(HEAPF32[dsp + 18845920 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 18186176 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp159 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp160 | 0)) - +(HEAPF32[dsp + 18845984 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18845984 + (0 << 2) >> 2]) - +((iTemp159 | 0))) * +(HEAPF32[dsp + 18186176 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp160 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp161)) + +(+(+(+(HEAPF32[dsp + 18186176 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp163 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp163 | 0)) - +(255. + +(HEAPF32[dsp + 18845984 + (0 << 2) >> 2])))) + +(+(+(fTemp162) - +((iTemp163 | 0))) * +(HEAPF32[dsp + 18186176 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp163 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp161))))));
			HEAPF32[dsp + 18845992 + (0 << 2) >> 2] = +(+(fSlow256) + +(0.99 * +(HEAPF32[dsp + 18845992 + (1 << 2) >> 2])));
			fTemp165 = +(max(-1., +(min(1., +(+(fTemp164) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18845992 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844464 + (0 << 2) >> 2] = +(+(+(fTemp165) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp165)))))) - +(+(fSlow253) * +(+(+(+(+(fSlow258) * +(HEAPF32[dsp + 18844464 + (2 << 2) >> 2])) + +(+(fSlow262) * +(HEAPF32[dsp + 18844464 + (1 << 2) >> 2]))) + +(+(fSlow263) * +(HEAPF32[dsp + 18844464 + (3 << 2) >> 2]))) + +(+(fSlow264) * +(HEAPF32[dsp + 18844464 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 18844552 + (0 << 2) >> 2] = +(+(+(fSlow253) * +(+(+(+(+(+(fSlow255) * +(HEAPF32[dsp + 18844464 + (0 << 2) >> 2])) + +(+(fSlow265) * +(HEAPF32[dsp + 18844464 + (1 << 2) >> 2]))) + +(+(fSlow266) * +(HEAPF32[dsp + 18844464 + (2 << 2) >> 2]))) + +(+(fSlow265) * +(HEAPF32[dsp + 18844464 + (3 << 2) >> 2]))) + +(+(fSlow268) * +(HEAPF32[dsp + 18844464 + (4 << 2) >> 2])))) - +(+(fSlow245) * +(+(+(fSlow269) * +(HEAPF32[dsp + 18844552 + (1 << 2) >> 2])) + +(+(fSlow270) * +(HEAPF32[dsp + 18844552 + (2 << 2) >> 2])))));
			fTemp166 = +(+(+(1. - +(HEAPF32[dsp + 18845912 + (0 << 2) >> 2])) * +(fTemp164)) + +(+(fSlow245) * +(+(HEAPF32[dsp + 18845912 + (0 << 2) >> 2]) * +(+(+(fSlow247) * +(HEAPF32[dsp + 18844552 + (2 << 2) >> 2])) + +(+(fSlow246) * +(HEAPF32[dsp + 18844552 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18846000 + (0 << 2) >> 2] = +(+(fSlow272) + +(0.99 * +(HEAPF32[dsp + 18846000 + (1 << 2) >> 2])));
			fTemp167 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18846000 + (0 << 2) >> 2]))));
			fTemp168 = +(1. - +(fTemp167));
			HEAPF32[dsp + 18846008 + (0 << 2) >> 2] = +(+(+(fSlow271) * +(HEAPF32[dsp + 18846040 + (1 << 2) >> 2])) + +(+(fTemp166) + +(+(fTemp168) * +(HEAPF32[dsp + 18846008 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18846016 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846008 + (0 << 2) >> 2]) + +(+(fTemp168) * +(HEAPF32[dsp + 18846016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846024 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846016 + (0 << 2) >> 2]) + +(+(fTemp168) * +(HEAPF32[dsp + 18846024 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846032 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846024 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846032 + (1 << 2) >> 2]) * +(fTemp168)));
			HEAPF32[dsp + 18846040 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846032 + (0 << 2) >> 2]) * +(powf(+(fTemp167), 4.)));
			fTemp169 = +(+(+(1. - +(HEAPF32[dsp + 18845904 + (0 << 2) >> 2])) * +(fTemp166)) + +(+(HEAPF32[dsp + 18845904 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18846040 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18846048 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18846048 + (1 << 2) >> 2])) + +(fSlow273));
			fSel8 = 0.;
			if ((((((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow274) != +(HEAPF32[dsp + 18846072 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel8 = 0.00390625;
				
			} else {
				fSel8 = +(((((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow274) != +(HEAPF32[dsp + 18846080 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel9 = 0.;
			if ((((+(HEAPF32[dsp + 18846056 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel9 = +(((((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18846056 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel9 = +(fSel8);
				
			}
			HEAPF32[dsp + 18846056 + (0 << 2) >> 2] = +(fSel9);
			HEAPF32[dsp + 18846064 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) + +(fSel9))))));
			HEAPF32[dsp + 18846072 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18846080 + (1 << 2) >> 2]) != +(fSlow274)) | 0)) | 0)?+(fSlow274):+(HEAPF32[dsp + 18846072 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18846080 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18846064 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18846072 + (1 << 2) >> 2]) != +(fSlow274)) | 0)) | 0)?+(fSlow274):+(HEAPF32[dsp + 18846080 + (1 << 2) >> 2]));
			HEAPF32[dsp + 15040448 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp169) + +(+(HEAPF32[dsp + 18846048 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18846064 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18846072 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 18846064 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18846080 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp170 = +(+(+(1. - +(HEAPF32[dsp + 18845896 + (0 << 2) >> 2])) * +(fTemp169)) + +(+(HEAPF32[dsp + 18845896 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18846088 + (0 << 2) >> 2] = +(+(fSlow275) + +(0.999 * +(HEAPF32[dsp + 18846088 + (1 << 2) >> 2])));
			fTemp171 = +(0.2 * +(fTemp170));
			fTemp172 = +(+(fTemp171) + +(0.764 * +(HEAPF32[dsp + 18846096 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18743232 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp172);
			HEAPF32[dsp + 18846096 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18743232 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846104 + (0 << 2) >> 2] = +(fTemp172);
			fTemp173 = +(+(fTemp171) + +(0.783 * +(HEAPF32[dsp + 18846112 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18808768 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp173);
			HEAPF32[dsp + 18846112 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18808768 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846120 + (0 << 2) >> 2] = +(fTemp173);
			fTemp174 = +(+(fTemp171) + +(0.805 * +(HEAPF32[dsp + 18846128 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18812864 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp174);
			HEAPF32[dsp + 18846128 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18812864 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846136 + (0 << 2) >> 2] = +(fTemp174);
			fTemp175 = +(+(0.827 * +(HEAPF32[dsp + 18846144 + (1 << 2) >> 2])) + +(fTemp171));
			HEAPF32[dsp + 18816960 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp175);
			HEAPF32[dsp + 18846144 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18816960 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846152 + (0 << 2) >> 2] = +(fTemp175);
			fTemp176 = +(+(HEAPF32[dsp + 18846104 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846120 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846136 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18846160 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18846152 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18840512 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp176);
			HEAPF32[dsp + 18846160 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18840512 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec232 = +(0. - +(0.7 * +(fTemp176)));
			fTemp177 = +(+(HEAPF32[dsp + 18846160 + (1 << 2) >> 2]) + +(+(fRec232) + +(0.7 * +(HEAPF32[dsp + 18846168 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18843584 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp177);
			HEAPF32[dsp + 18846168 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18843584 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec230 = +(0. - +(0.7 * +(fTemp177)));
			fTemp178 = +(+(HEAPF32[dsp + 18846168 + (1 << 2) >> 2]) + +(+(fRec230) + +(0.7 * +(HEAPF32[dsp + 18846176 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18844288 + (0 << 2) >> 2] = +(fTemp178);
			HEAPF32[dsp + 18846176 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844288 + (11 << 2) >> 2]);
			fRec228 = +(0. - +(0.7 * +(fTemp178)));
			fTemp179 = +(+(+(1. - +(HEAPF32[dsp + 18845888 + (0 << 2) >> 2])) * +(fTemp170)) + +(+(HEAPF32[dsp + 18845888 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18846088 + (0 << 2) >> 2])) * +(fTemp170)) + +(+(HEAPF32[dsp + 18846088 + (0 << 2) >> 2]) * +(+(fRec228) + +(HEAPF32[dsp + 18846176 + (1 << 2) >> 2]))))));
			fTemp180 = +(1. + +(1.38629 * +(0. - +(+(fTemp152) - 1.))));
			fTemp181 = +(atan2f(+(fTemp148), +(HEAPF32[dsp + 18845872 + (0 << 2) >> 2])));
			fTemp182 = +(3. * +(fTemp181));
			fTemp183 = +(+(+(faustpower2_f(+(fTemp149))) * +((iTemp150 | 0))) + +((iTemp151 | 0)));
			HEAPF32[dsp + 18846184 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 18846184 + (1 << 2) >> 2])) + +(fSlow276));
			HEAPF32[dsp + 18846192 + (0 << 2) >> 2] = +(+(fSlow277) + +(0.999 * +(HEAPF32[dsp + 18846192 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846200 + (0 << 2) >> 2] = +(+(fSlow278) + +(0.999 * +(HEAPF32[dsp + 18846200 + (1 << 2) >> 2])));
			fTemp184 = +(0. - +(HEAPF32[dsp + 18846200 + (0 << 2) >> 2]));
			fTemp185 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 18846192 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp184)))), 0.5));
			iTemp186 = ((+(fTemp185) > 1.) | 0);
			iTemp187 = ((+(fTemp185) < 1.) | 0);
			fTemp188 = +(+((iTemp186 | 0)) + +(+(fTemp185) * +((iTemp187 | 0))));
			fTemp189 = +(1.38629 * +(fTemp188));
			fTemp190 = +(+(fTemp189) - 1.09861);
			fTemp191 = +(3.47606 * +(fTemp190));
			fTemp192 = +(+(3.47606 * +(+(+(fTemp190) * +(((+(fTemp191) > 0.) | 0))) * +(((+(fTemp191) <= 1.) | 0)))) + +(((+(fTemp191) > 1.) | 0)));
			HEAPF32[dsp + 18846208 + (0 << 2) >> 2] = +(+(fSlow279) + +(0.999 * +(HEAPF32[dsp + 18846208 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846216 + (0 << 2) >> 2] = +(+(fSlow280) + +(0.999 * +(HEAPF32[dsp + 18846216 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846224 + (0 << 2) >> 2] = +(+(fSlow281) + +(0.999 * +(HEAPF32[dsp + 18846224 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846232 + (0 << 2) >> 2] = +(+(fSlow282) + +(0.999 * +(HEAPF32[dsp + 18846232 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846240 + (0 << 2) >> 2] = +(+(fSlow283) + +(0.999 * +(HEAPF32[dsp + 18846240 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846248 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18846248 + (1 << 2) >> 2])) + +(fSlow286));
			HEAP32[dsp + 18846256 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow288 | 0):(HEAP32[dsp + 18846256 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18841024 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow289 | 0):(HEAP32[dsp + 18841024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp193 = (imul((HEAP32[dsp + 18841024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18841024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18846264 + (0 << 2) >> 2] = (((HEAP32[dsp + 18846256 + (0 << 2) >> 2] | 0) + (((((iTemp193 | 0)?0:(HEAP32[dsp + 18846264 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 9082144 + ((HEAP32[dsp + 18846264 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow285) * +(fTemp0));
			HEAP32[dsp + 18846272 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow290 | 0):(HEAP32[dsp + 18846272 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18841536 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow291 | 0):(HEAP32[dsp + 18841536 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 18846280 + (0 << 2) >> 2] = (((HEAP32[dsp + 18846256 + (0 << 2) >> 2] | 0) + (((iTemp193 | 0)?0:(HEAP32[dsp + 18846280 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 18846288 + (0 << 2) >> 2] = (((HEAP32[dsp + 18846272 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 18841536 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 18841536 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 18846288 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 18846280 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp194 = +(+(+(fSlow285) * +(+(fTemp0) * +(HEAPF32[dsp + 18846248 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 9082144 + ((HEAP32[dsp + 18846288 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 18448320 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp194);
			HEAPF32[dsp + 18846296 + (0 << 2) >> 2] = +(+(fSlow292) + +(0.99 * +(HEAPF32[dsp + 18846296 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846304 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 18846304 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.031746 * +(HEAPF32[dsp + 18846296 + (0 << 2) >> 2]))))))), 256.));
			iTemp195 = ~~(+(HEAPF32[dsp + 18846304 + (0 << 2) >> 2]));
			iTemp196 = ((1 + (iTemp195 | 0)) | 0);
			fTemp197 = +(min(+(0.00390625 * +(HEAPF32[dsp + 18846304 + (0 << 2) >> 2])), 1.));
			fTemp198 = +(256. + +(HEAPF32[dsp + 18846304 + (0 << 2) >> 2]));
			iTemp199 = ~~(+(fTemp198));
			fTemp200 = +(+(+(1. - +(HEAPF32[dsp + 18846240 + (0 << 2) >> 2])) * +(fTemp194)) + +(+(HEAPF32[dsp + 18846240 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 18448320 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp195 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp196 | 0)) - +(HEAPF32[dsp + 18846304 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18846304 + (0 << 2) >> 2]) - +((iTemp195 | 0))) * +(HEAPF32[dsp + 18448320 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp196 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp197)) + +(+(+(+(HEAPF32[dsp + 18448320 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - (((iTemp199 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp199 | 0)) - +(255. + +(HEAPF32[dsp + 18846304 + (0 << 2) >> 2])))) + +(+(+(fTemp198) - +((iTemp199 | 0))) * +(HEAPF32[dsp + 18448320 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((((1 + (iTemp199 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp197))))));
			HEAPF32[dsp + 18846312 + (0 << 2) >> 2] = +(+(fSlow311) + +(0.99 * +(HEAPF32[dsp + 18846312 + (1 << 2) >> 2])));
			fTemp201 = +(max(-1., +(min(1., +(+(fTemp200) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 18846312 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 18844484 + (0 << 2) >> 2] = +(+(+(fTemp201) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp201)))))) - +(+(fSlow308) * +(+(+(+(+(fSlow315) * +(HEAPF32[dsp + 18844484 + (1 << 2) >> 2])) + +(+(fSlow317) * +(HEAPF32[dsp + 18844484 + (2 << 2) >> 2]))) + +(+(fSlow318) * +(HEAPF32[dsp + 18844484 + (3 << 2) >> 2]))) + +(+(fSlow319) * +(HEAPF32[dsp + 18844484 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 18844564 + (0 << 2) >> 2] = +(+(+(fSlow308) * +(+(+(+(+(+(fSlow310) * +(HEAPF32[dsp + 18844484 + (0 << 2) >> 2])) + +(+(fSlow320) * +(HEAPF32[dsp + 18844484 + (1 << 2) >> 2]))) + +(+(fSlow321) * +(HEAPF32[dsp + 18844484 + (2 << 2) >> 2]))) + +(+(fSlow320) * +(HEAPF32[dsp + 18844484 + (3 << 2) >> 2]))) + +(+(fSlow323) * +(HEAPF32[dsp + 18844484 + (4 << 2) >> 2])))) - +(+(fSlow300) * +(+(+(fSlow324) * +(HEAPF32[dsp + 18844564 + (1 << 2) >> 2])) + +(+(fSlow325) * +(HEAPF32[dsp + 18844564 + (2 << 2) >> 2])))));
			fTemp202 = +(+(+(1. - +(HEAPF32[dsp + 18846232 + (0 << 2) >> 2])) * +(fTemp200)) + +(+(fSlow300) * +(+(HEAPF32[dsp + 18846232 + (0 << 2) >> 2]) * +(+(+(fSlow302) * +(HEAPF32[dsp + 18844564 + (2 << 2) >> 2])) + +(+(fSlow301) * +(HEAPF32[dsp + 18844564 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18846320 + (0 << 2) >> 2] = +(+(fSlow327) + +(0.99 * +(HEAPF32[dsp + 18846320 + (1 << 2) >> 2])));
			fTemp203 = +(+(HEAPF32[dsp + 18846652 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 18846320 + (0 << 2) >> 2]))));
			fTemp204 = +(1. - +(fTemp203));
			HEAPF32[dsp + 18846328 + (0 << 2) >> 2] = +(+(+(fSlow326) * +(HEAPF32[dsp + 18846360 + (1 << 2) >> 2])) + +(+(fTemp202) + +(+(fTemp204) * +(HEAPF32[dsp + 18846328 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18846336 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846328 + (0 << 2) >> 2]) + +(+(fTemp204) * +(HEAPF32[dsp + 18846336 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846344 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846336 + (0 << 2) >> 2]) + +(+(fTemp204) * +(HEAPF32[dsp + 18846344 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18846352 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846344 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846352 + (1 << 2) >> 2]) * +(fTemp204)));
			HEAPF32[dsp + 18846360 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 18846352 + (0 << 2) >> 2]) * +(powf(+(fTemp203), 4.)));
			fTemp205 = +(+(+(1. - +(HEAPF32[dsp + 18846224 + (0 << 2) >> 2])) * +(fTemp202)) + +(+(HEAPF32[dsp + 18846224 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18846360 + (0 << 2) >> 2])));
			HEAPF32[dsp + 18846368 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 18846368 + (1 << 2) >> 2])) + +(fSlow328));
			fSel10 = 0.;
			if ((((((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow329) != +(HEAPF32[dsp + 18846392 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel10 = 0.00390625;
				
			} else {
				fSel10 = +(((((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow329) != +(HEAPF32[dsp + 18846400 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel11 = 0.;
			if ((((+(HEAPF32[dsp + 18846376 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel11 = +(((((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 18846376 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel11 = +(fSel10);
				
			}
			HEAPF32[dsp + 18846376 + (0 << 2) >> 2] = +(fSel11);
			HEAPF32[dsp + 18846384 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) + +(fSel11))))));
			HEAPF32[dsp + 18846392 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 18846400 + (1 << 2) >> 2]) != +(fSlow329)) | 0)) | 0)?+(fSlow329):+(HEAPF32[dsp + 18846392 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18846400 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 18846384 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 18846392 + (1 << 2) >> 2]) != +(fSlow329)) | 0)) | 0)?+(fSlow329):+(HEAPF32[dsp + 18846400 + (1 << 2) >> 2]));
			HEAPF32[dsp + 16089024 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp205) + +(+(HEAPF32[dsp + 18846368 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18846384 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18846392 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 18846384 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 18846400 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp206 = +(+(+(1. - +(HEAPF32[dsp + 18846216 + (0 << 2) >> 2])) * +(fTemp205)) + +(+(HEAPF32[dsp + 18846216 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 18846408 + (0 << 2) >> 2] = +(+(fSlow330) + +(0.999 * +(HEAPF32[dsp + 18846408 + (1 << 2) >> 2])));
			fTemp207 = +(0.2 * +(fTemp206));
			fTemp208 = +(+(fTemp207) + +(0.764 * +(HEAPF32[dsp + 18846416 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18751424 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp208);
			HEAPF32[dsp + 18846416 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18751424 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846424 + (0 << 2) >> 2] = +(fTemp208);
			fTemp209 = +(+(fTemp207) + +(0.783 * +(HEAPF32[dsp + 18846432 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18821056 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp209);
			HEAPF32[dsp + 18846432 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18821056 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846440 + (0 << 2) >> 2] = +(fTemp209);
			fTemp210 = +(+(fTemp207) + +(0.805 * +(HEAPF32[dsp + 18846448 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18825152 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp210);
			HEAPF32[dsp + 18846448 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18825152 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846456 + (0 << 2) >> 2] = +(fTemp210);
			fTemp211 = +(+(0.827 * +(HEAPF32[dsp + 18846464 + (1 << 2) >> 2])) + +(fTemp207));
			HEAPF32[dsp + 18829248 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp211);
			HEAPF32[dsp + 18846464 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18829248 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 18846472 + (0 << 2) >> 2] = +(fTemp211);
			fTemp212 = +(+(HEAPF32[dsp + 18846424 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846440 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 18846456 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 18846480 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 18846472 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 18842048 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp212);
			HEAPF32[dsp + 18846480 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18842048 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec280 = +(0. - +(0.7 * +(fTemp212)));
			fTemp213 = +(+(HEAPF32[dsp + 18846480 + (1 << 2) >> 2]) + +(+(fRec280) + +(0.7 * +(HEAPF32[dsp + 18846488 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18843840 + ((((HEAP32[dsp + 18846596 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp213);
			HEAPF32[dsp + 18846488 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18843840 + ((((((HEAP32[dsp + 18846596 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec278 = +(0. - +(0.7 * +(fTemp213)));
			fTemp214 = +(+(HEAPF32[dsp + 18846488 + (1 << 2) >> 2]) + +(+(fRec278) + +(0.7 * +(HEAPF32[dsp + 18846496 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 18844336 + (0 << 2) >> 2] = +(fTemp214);
			HEAPF32[dsp + 18846496 + (0 << 2) >> 2] = +(HEAPF32[dsp + 18844336 + (11 << 2) >> 2]);
			fRec276 = +(0. - +(0.7 * +(fTemp214)));
			fTemp215 = +(+(+(1. - +(HEAPF32[dsp + 18846208 + (0 << 2) >> 2])) * +(fTemp206)) + +(+(HEAPF32[dsp + 18846208 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 18846408 + (0 << 2) >> 2])) * +(fTemp206)) + +(+(HEAPF32[dsp + 18846408 + (0 << 2) >> 2]) * +(+(fRec276) + +(HEAPF32[dsp + 18846496 + (1 << 2) >> 2]))))));
			fTemp216 = +(1. + +(1.38629 * +(0. - +(+(fTemp188) - 1.))));
			fTemp217 = +(atan2f(+(fTemp184), +(HEAPF32[dsp + 18846192 + (0 << 2) >> 2])));
			fTemp218 = +(3. * +(fTemp217));
			fTemp219 = +(+(+(faustpower2_f(+(fTemp185))) * +((iTemp186 | 0))) + +((iTemp187 | 0)));
			fTemp220 = +(+(+(+(+(+(+(+(+(fTemp30) * +(fTemp34)) * +(cosf(+(fTemp36)))) / +(fTemp37)) + +(+(+(+(+(+(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]) * +(fTemp46)) * +(cosf(+(fTemp48)))) * +(fTemp72)) * +(fTemp73)) / +(fTemp74))) + +(+(+(+(fTemp103) * +(fTemp107)) * +(cosf(+(fTemp109)))) / +(fTemp110))) + +(+(+(+(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(fTemp119)) * +(fTemp143)) * +(fTemp144)) * +(cosf(+(fTemp146)))) / +(fTemp147))) + +(+(+(+(+(+(HEAPF32[dsp + 18845864 + (0 << 2) >> 2]) * +(fTemp156)) * +(fTemp179)) * +(fTemp180)) * +(cosf(+(fTemp182)))) / +(fTemp183))) + +(+(+(+(+(+(HEAPF32[dsp + 18846184 + (0 << 2) >> 2]) * +(fTemp192)) * +(fTemp215)) * +(fTemp216)) * +(cosf(+(fTemp218)))) / +(fTemp219)));
			fTemp221 = +(2. * +(fTemp29));
			fTemp222 = +(+(fTemp30) * +(+(2. * +(+(+(fTemp29) * +(((+(fTemp221) > 0.) | 0))) * +(((+(fTemp221) <= 1.) | 0)))) + +(((+(fTemp221) > 1.) | 0))));
			fTemp223 = +(2. * +(fTemp42));
			fTemp224 = +(+(2. * +(+((imul(((+(fTemp223) > 0.) | 0), ((+(fTemp223) <= 1.) | 0)) | 0)) * +(fTemp42))) + +(((+(fTemp223) > 1.) | 0)));
			fTemp225 = +(2. * +(fTemp102));
			fTemp226 = +(+(2. * +(+(+(fTemp102) * +(((+(fTemp225) > 0.) | 0))) * +(((+(fTemp225) <= 1.) | 0)))) + +(((+(fTemp225) > 1.) | 0)));
			fTemp227 = +(2. * +(fTemp115));
			fTemp228 = +(+(2. * +(+((imul(((+(fTemp227) > 0.) | 0), ((+(fTemp227) <= 1.) | 0)) | 0)) * +(fTemp115))) + +(((+(fTemp227) > 1.) | 0)));
			fTemp229 = +(+(+(HEAPF32[dsp + 18845864 + (0 << 2) >> 2]) * +(fTemp179)) * +(fTemp180));
			fTemp230 = +(2. * +(fTemp152));
			fTemp231 = +(+(2. * +(+(+(fTemp152) * +(((+(fTemp230) > 0.) | 0))) * +(((+(fTemp230) <= 1.) | 0)))) + +(((+(fTemp230) > 1.) | 0)));
			fTemp232 = +(+(+(HEAPF32[dsp + 18846184 + (0 << 2) >> 2]) * +(fTemp215)) * +(fTemp216));
			fTemp233 = +(2. * +(fTemp188));
			fTemp234 = +(+(2. * +(+(+(fTemp188) * +(((+(fTemp233) > 0.) | 0))) * +(((+(fTemp233) <= 1.) | 0)))) + +(((+(fTemp233) > 1.) | 0)));
			fTemp235 = +(+(+(+(+(+(+(+(fTemp222) * +(cosf(+(fTemp35)))) / +(fTemp37)) + +(+(+(+(+(+(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]) * +(fTemp224)) * +(fTemp72)) * +(fTemp73)) * +(cosf(+(fTemp47)))) / +(fTemp74))) + +(+(+(+(fTemp103) * +(fTemp226)) * +(cosf(+(fTemp108)))) / +(fTemp110))) + +(+(+(+(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(fTemp228)) * +(fTemp143)) * +(fTemp144)) * +(cosf(+(fTemp145)))) / +(fTemp147))) + +(+(+(+(fTemp229) * +(fTemp231)) * +(cosf(+(fTemp181)))) / +(fTemp183))) + +(+(+(+(fTemp232) * +(fTemp234)) * +(cosf(+(fTemp217)))) / +(fTemp219)));
			fTemp236 = +(+(fTemp31) - 0.693147);
			fTemp237 = +(2.4663 * +(fTemp236));
			fTemp238 = +(+(fTemp30) * +(+(2.4663 * +(+(+(fTemp236) * +(((+(fTemp237) > 0.) | 0))) * +(((+(fTemp237) <= 1.) | 0)))) + +(((+(fTemp237) > 1.) | 0))));
			fTemp239 = +(2. * +(fTemp35));
			fTemp240 = +(+(+(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]) * +(fTemp72)) * +(fTemp73));
			fTemp241 = +(2. * +(fTemp47));
			fTemp242 = +(+(fTemp43) - 0.693147);
			fTemp243 = +(2.4663 * +(fTemp242));
			fTemp244 = +(+(2.4663 * +(+(+(fTemp242) * +(((+(fTemp243) > 0.) | 0))) * +(((+(fTemp243) <= 1.) | 0)))) + +(((+(fTemp243) > 1.) | 0)));
			fTemp245 = +(2. * +(fTemp108));
			fTemp246 = +(+(fTemp104) - 0.693147);
			fTemp247 = +(2.4663 * +(fTemp246));
			fTemp248 = +(+(2.4663 * +(+(+(fTemp246) * +(((+(fTemp247) > 0.) | 0))) * +(((+(fTemp247) <= 1.) | 0)))) + +(((+(fTemp247) > 1.) | 0)));
			fTemp249 = +(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(fTemp143)) * +(fTemp144));
			fTemp250 = +(2. * +(fTemp145));
			fTemp251 = +(+(fTemp116) - 0.693147);
			fTemp252 = +(2.4663 * +(fTemp251));
			fTemp253 = +(+(2.4663 * +(+(+(fTemp251) * +(((+(fTemp252) > 0.) | 0))) * +(((+(fTemp252) <= 1.) | 0)))) + +(((+(fTemp252) > 1.) | 0)));
			fTemp254 = +(2. * +(fTemp181));
			fTemp255 = +(+(fTemp153) - 0.693147);
			fTemp256 = +(2.4663 * +(fTemp255));
			fTemp257 = +(+(2.4663 * +(+(+(fTemp255) * +(((+(fTemp256) > 0.) | 0))) * +(((+(fTemp256) <= 1.) | 0)))) + +(((+(fTemp256) > 1.) | 0)));
			fTemp258 = +(2. * +(fTemp217));
			fTemp259 = +(+(fTemp189) - 0.693147);
			fTemp260 = +(2.4663 * +(fTemp259));
			fTemp261 = +(+(2.4663 * +(+(+(fTemp259) * +(((+(fTemp260) > 0.) | 0))) * +(((+(fTemp260) <= 1.) | 0)))) + +(((+(fTemp260) > 1.) | 0)));
			fTemp262 = +(+(+(+(+(+(+(+(fTemp238) * +(sinf(+(fTemp239)))) / +(fTemp37)) + +(+(+(+(fTemp240) * +(sinf(+(fTemp241)))) * +(fTemp244)) / +(fTemp74))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp245)))) * +(fTemp248)) / +(fTemp110))) + +(+(+(+(fTemp249) * +(sinf(+(fTemp250)))) * +(fTemp253)) / +(fTemp147))) + +(+(+(+(fTemp229) * +(sinf(+(fTemp254)))) * +(fTemp257)) / +(fTemp183))) + +(+(+(+(fTemp232) * +(sinf(+(fTemp258)))) * +(fTemp261)) / +(fTemp219)));
			fTemp263 = +(+(+(+(+(+(+(fTemp30) / +(fTemp37)) + +(+(fTemp103) / +(fTemp110))) + +(+(fTemp249) / +(fTemp147))) + +(+(fTemp229) / +(fTemp183))) + +(+(fTemp232) / +(fTemp219))) + +(+(fTemp240) / +(fTemp74)));
			fTemp264 = +(0.5 * +(fTemp263));
			fTemp265 = +(+(+(+(+(+(+(+(+(fTemp103) * +(cosf(+(fTemp245)))) * +(fTemp248)) / +(fTemp110)) + +(+(+(+(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(cosf(+(fTemp250)))) * +(fTemp143)) * +(fTemp144)) * +(fTemp253)) / +(fTemp147))) + +(+(+(+(+(+(HEAPF32[dsp + 18845864 + (0 << 2) >> 2]) * +(cosf(+(fTemp254)))) * +(fTemp179)) * +(fTemp180)) * +(fTemp257)) / +(fTemp183))) + +(+(+(+(+(+(HEAPF32[dsp + 18846184 + (0 << 2) >> 2]) * +(cosf(+(fTemp258)))) * +(fTemp215)) * +(fTemp216)) * +(fTemp261)) / +(fTemp219))) + +(+(+(fTemp238) * +(cosf(+(fTemp239)))) / +(fTemp37))) + +(+(+(+(fTemp240) * +(fTemp244)) * +(cosf(+(fTemp241)))) / +(fTemp74)));
			fTemp266 = +(+(+(+(+(+(+(+(+(fTemp30) * +(sinf(+(fTemp36)))) * +(fTemp34)) / +(fTemp37)) + +(+(+(+(+(+(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]) * +(sinf(+(fTemp48)))) * +(fTemp46)) * +(fTemp72)) * +(fTemp73)) / +(fTemp74))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp109)))) * +(fTemp107)) / +(fTemp110))) + +(+(+(+(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(sinf(+(fTemp146)))) * +(fTemp119)) * +(fTemp143)) * +(fTemp144)) / +(fTemp147))) + +(+(+(+(+(+(HEAPF32[dsp + 18845864 + (0 << 2) >> 2]) * +(sinf(+(fTemp182)))) * +(fTemp156)) * +(fTemp179)) * +(fTemp180)) / +(fTemp183))) + +(+(+(+(+(+(HEAPF32[dsp + 18846184 + (0 << 2) >> 2]) * +(sinf(+(fTemp218)))) * +(fTemp192)) * +(fTemp215)) * +(fTemp216)) / +(fTemp219)));
			fTemp267 = +(+(+(+(+(+(+(+(fTemp222) * +(sinf(+(fTemp35)))) / +(fTemp37)) + +(+(+(+(+(+(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]) * +(sinf(+(fTemp47)))) * +(fTemp224)) * +(fTemp72)) * +(fTemp73)) / +(fTemp74))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp108)))) * +(fTemp226)) / +(fTemp110))) + +(+(+(+(+(+(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]) * +(sinf(+(fTemp145)))) * +(fTemp228)) * +(fTemp143)) * +(fTemp144)) / +(fTemp147))) + +(+(+(+(fTemp229) * +(sinf(+(fTemp181)))) * +(fTemp231)) / +(fTemp183))) + +(+(+(+(fTemp232) * +(sinf(+(fTemp217)))) * +(fTemp234)) / +(fTemp219)));
			fTemp268 = +(0.142857 * +(fTemp263));
			fTemp269 = +(0.285714 * +(fTemp262));
			fTemp270 = +(0.202031 * +(fTemp220));
			fTemp271 = +(+(HEAPF32[dsp + 18847064 >> 2]) + +(HEAPF32[dsp + 18846504 + (1 << 2) >> 2]));
			HEAPF32[dsp + 18846504 + (0 << 2) >> 2] = +(+(fTemp271) - +(floorf(+(fTemp271))));
			iTemp272 = ((+(HEAPF32[dsp + 18844584 + (0 << 2) >> 2]) < 500.) | 0);
			iTemp273 = (((iTemp272 | 0) > 0) | 0);
			HEAP32[dsp + 18846512 + (0 << 2) >> 2] = (((iTemp273 | 0) & (((HEAP32[dsp + 18846512 + (1 << 2) >> 2] | 0) | ((+(HEAPF32[dsp + 18846520 + (1 << 2) >> 2]) >= 1.) | 0)) | 0)) | 0);
			iTemp274 = (((((iTemp272 | 0) <= 0) | 0) & ((+(HEAPF32[dsp + 18846520 + (1 << 2) >> 2]) > 0.) | 0)) | 0);
			HEAPF32[dsp + 18846520 + (0 << 2) >> 2] = +(+(+(+(HEAPF32[dsp + 18847068 >> 2]) * +((((((((HEAP32[dsp + 18846512 + (1 << 2) >> 2] | 0) == 0) | 0) & (iTemp273 | 0)) | 0) & ((+(HEAPF32[dsp + 18846520 + (1 << 2) >> 2]) < 1.) | 0)) | 0))) + +(+(HEAPF32[dsp + 18846520 + (1 << 2) >> 2]) * +(1. - +(+(HEAPF32[dsp + 18847072 >> 2]) * +((iTemp274 | 0)))))) * +((((((iTemp274 | 0) == 0) | 0) | ((+(HEAPF32[dsp + 18846520 + (1 << 2) >> 2]) >= 1.e-06) | 0)) | 0)));
			fTemp275 = +(+(+(fSlow331) * +(+(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 18846504 + (0 << 2) >> 2]))) << 2) >> 2]) * +(HEAPF32[dsp + 18846520 + (0 << 2) >> 2]))) + +(0.202031 * +(+(+(+(fTemp265) + +(fTemp264)) + +(fTemp235)) + +(fTemp220))));
			HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(1.22465e-16 * +(0. - +(0.285714 * +(+(+(+(fTemp220) + +(fTemp235)) + +(2.44929e-16 * +(fTemp262))) - +(+(+(fTemp264) + +(+(fTemp265) + +(3.67394e-16 * +(fTemp266)))) + +(1.22465e-16 * +(fTemp267))))))) + +(+(0.45399 * +(+(+(0.202031 * +(fTemp267)) + +(+(+(0.202031 * +(fTemp266)) + +(fTemp268)) + +(0.202031 * +(fTemp220)))) - +(+(fTemp269) + +(+(0.202031 * +(fTemp235)) + +(5.24849e-17 * +(fTemp265)))))) + +(+(0.809017 * +(0. - +(+(5.24849e-17 * +(fTemp220)) + +(0.285714 * +(+(+(fTemp265) + +(fTemp266)) - +(+(+(+(fTemp264) + +(fTemp267)) + +(6.12323e-17 * +(fTemp235))) + +(1.22465e-16 * +(fTemp262)))))))) + +(+(0.987688 * +(+(0.202031 * +(+(+(+(+(+(fTemp266) + +(8.65956e-17 * +(fTemp265))) + +(0.707107 * +(fTemp263))) + +(1. * +(fTemp267))) + +(fTemp235)) + +(1.41421 * +(fTemp262)))) - +(fTemp270))) + +(fTemp275))))));
			HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(0.987688 * +(0. - +(+(fTemp270) + +(0.202031 * +(+(+(+(+(fTemp266) + +(6.06169e-16 * +(fTemp265))) + +(fTemp267)) + +(1.41421 * +(fTemp262))) - +(+(0.707107 * +(fTemp263)) + +(1. * +(fTemp235)))))))) + +(+(0.809017 * +(+(+(0.285714 * +(fTemp266)) + +(1.57455e-16 * +(fTemp220))) - +(0.285714 * +(+(+(+(fTemp265) + +(fTemp267)) + +(1.83697e-16 * +(fTemp235))) - +(+(fTemp264) + +(3.67394e-16 * +(fTemp262))))))) + +(+(fTemp275) + +(0.45399 * +(+(+(fTemp269) + +(+(+(8.74748e-17 * +(fTemp265)) + +(fTemp268)) + +(0.202031 * +(fTemp220)))) - +(+(0.202031 * +(fTemp235)) + +(+(0.202031 * +(fTemp267)) + +(0.202031 * +(fTemp266))))))))));
			HEAPF32[dsp + 18844576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844584 + (0 << 2) >> 2]);
			HEAP32[dsp + 18846596 >> 2] = (((HEAP32[dsp + 18846596 >> 2] | 0) + 1) | 0);
			HEAP32[dsp + 18844592 + (1 << 2) >> 2] = (HEAP32[dsp + 18844592 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844600 + (1 << 2) >> 2] = (HEAP32[dsp + 18844600 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844608 + (1 << 2) >> 2] = (HEAP32[dsp + 18844608 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844616 + (1 << 2) >> 2] = (HEAP32[dsp + 18844616 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844624 + (1 << 2) >> 2] = (HEAP32[dsp + 18844624 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18844632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844656 + (0 << 2) >> 2]);
			for (j0 = 4; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844384 + ((j0 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844384 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844504 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844504 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844848 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844864 + (0 << 2) >> 2]);
			for (j1 = 11; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844096 + ((j1 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844096 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18844968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844968 + (0 << 2) >> 2]);
			HEAP32[dsp + 18844976 + (1 << 2) >> 2] = (HEAP32[dsp + 18844976 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844984 + (1 << 2) >> 2] = (HEAP32[dsp + 18844984 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18844992 + (1 << 2) >> 2] = (HEAP32[dsp + 18844992 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845000 + (1 << 2) >> 2] = (HEAP32[dsp + 18845000 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845008 + (1 << 2) >> 2] = (HEAP32[dsp + 18845008 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18845016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845032 + (0 << 2) >> 2]);
			for (j2 = 4; (((j2 | 0) > 0) | 0); j2 = (((j2 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844404 + ((j2 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844404 + ((((j2 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844516 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844516 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844516 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844516 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845208 + (0 << 2) >> 2]);
			for (j3 = 11; (((j3 | 0) > 0) | 0); j3 = (((j3 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844144 + ((j3 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844144 + ((((j3 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18845216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845248 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845256 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845256 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845272 + (0 << 2) >> 2]);
			HEAP32[dsp + 18845280 + (1 << 2) >> 2] = (HEAP32[dsp + 18845280 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845288 + (1 << 2) >> 2] = (HEAP32[dsp + 18845288 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845296 + (1 << 2) >> 2] = (HEAP32[dsp + 18845296 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845304 + (1 << 2) >> 2] = (HEAP32[dsp + 18845304 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845312 + (1 << 2) >> 2] = (HEAP32[dsp + 18845312 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18845320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845336 + (0 << 2) >> 2]);
			for (j4 = 4; (((j4 | 0) > 0) | 0); j4 = (((j4 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844424 + ((j4 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844424 + ((((j4 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844528 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844528 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845512 + (0 << 2) >> 2]);
			for (j5 = 11; (((j5 | 0) > 0) | 0); j5 = (((j5 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844192 + ((j5 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844192 + ((((j5 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18845520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845592 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845624 + (0 << 2) >> 2]);
			HEAP32[dsp + 18845632 + (1 << 2) >> 2] = (HEAP32[dsp + 18845632 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845640 + (1 << 2) >> 2] = (HEAP32[dsp + 18845640 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845648 + (1 << 2) >> 2] = (HEAP32[dsp + 18845648 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845656 + (1 << 2) >> 2] = (HEAP32[dsp + 18845656 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845664 + (1 << 2) >> 2] = (HEAP32[dsp + 18845664 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18845672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845672 + (0 << 2) >> 2]);
			for (j6 = 4; (((j6 | 0) > 0) | 0); j6 = (((j6 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844444 + ((j6 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844444 + ((((j6 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844540 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844540 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844540 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844540 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845848 + (0 << 2) >> 2]);
			for (j7 = 11; (((j7 | 0) > 0) | 0); j7 = (((j7 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844240 + ((j7 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844240 + ((((j7 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18845856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845928 + (0 << 2) >> 2]);
			HEAP32[dsp + 18845936 + (1 << 2) >> 2] = (HEAP32[dsp + 18845936 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845944 + (1 << 2) >> 2] = (HEAP32[dsp + 18845944 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845952 + (1 << 2) >> 2] = (HEAP32[dsp + 18845952 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845960 + (1 << 2) >> 2] = (HEAP32[dsp + 18845960 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18845968 + (1 << 2) >> 2] = (HEAP32[dsp + 18845968 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18845976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18845992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18845992 + (0 << 2) >> 2]);
			for (j8 = 4; (((j8 | 0) > 0) | 0); j8 = (((j8 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844464 + ((j8 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844464 + ((((j8 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844552 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844552 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846168 + (0 << 2) >> 2]);
			for (j9 = 11; (((j9 | 0) > 0) | 0); j9 = (((j9 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844288 + ((j9 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844288 + ((((j9 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18846176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846248 + (0 << 2) >> 2]);
			HEAP32[dsp + 18846256 + (1 << 2) >> 2] = (HEAP32[dsp + 18846256 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18846264 + (1 << 2) >> 2] = (HEAP32[dsp + 18846264 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18846272 + (1 << 2) >> 2] = (HEAP32[dsp + 18846272 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18846280 + (1 << 2) >> 2] = (HEAP32[dsp + 18846280 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 18846288 + (1 << 2) >> 2] = (HEAP32[dsp + 18846288 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18846296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846312 + (0 << 2) >> 2]);
			for (j10 = 4; (((j10 | 0) > 0) | 0); j10 = (((j10 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844484 + ((j10 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844484 + ((((j10 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18844564 + (2 << 2) >> 2] = +(HEAPF32[dsp + 18844564 + (1 << 2) >> 2]);
			HEAPF32[dsp + 18844564 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18844564 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846488 + (0 << 2) >> 2]);
			for (j11 = 11; (((j11 | 0) > 0) | 0); j11 = (((j11 | 0) - 1) | 0)) {
				HEAPF32[dsp + 18844336 + ((j11 | 0) << 2) >> 2] = +(HEAPF32[dsp + 18844336 + ((((j11 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 18846496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 18846504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846504 + (0 << 2) >> 2]);
			HEAP32[dsp + 18846512 + (1 << 2) >> 2] = (HEAP32[dsp + 18846512 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 18846520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 18846520 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };
}

function getSizeeffet1v200() {
	return 18847076;
}

function getPathTableeffet1v200() {
	var pathTable = [];
	pathTable["/0x00/OctB0"] = 18846600;
	pathTable["/0x00/SatB0"] = 18846644;
	pathTable["/0x00/RevB2"] = 18846776;
	pathTable["/0x00/DelB2"] = 18846780;
	pathTable["/0x00/FilB2"] = 18846784;
	pathTable["/0x00/SatB2"] = 18846792;
	pathTable["/0x00/OctB2"] = 18846796;
	pathTable["/0x00/RevB3"] = 18846856;
	pathTable["/0x00/DelB3"] = 18846860;
	pathTable["/0x00/FilB3"] = 18846864;
	pathTable["/0x00/SatB3"] = 18846872;
	pathTable["/0x00/OctB3"] = 18846876;
	pathTable["/0x00/FilB0"] = 18846648;
	pathTable["/0x00/RevB4"] = 18846928;
	pathTable["/0x00/DelB4"] = 18846932;
	pathTable["/0x00/FilB4"] = 18846936;
	pathTable["/0x00/SatB4"] = 18846940;
	pathTable["/0x00/OctB4"] = 18846944;
	pathTable["/0x00/RevB5"] = 18847000;
	pathTable["/0x00/DelB5"] = 18847004;
	pathTable["/0x00/FilB5"] = 18847008;
	pathTable["/0x00/SatB5"] = 18847012;
	pathTable["/0x00/OctB5"] = 18847016;
	pathTable["/0x00/DelB0"] = 18846664;
	pathTable["/0x00/RevB0"] = 18846676;
	pathTable["/0x00/RevB1"] = 18846712;
	pathTable["/0x00/DelB1"] = 18846716;
	pathTable["/0x00/FilB1"] = 18846720;
	pathTable["/0x00/SatB1"] = 18846728;
	pathTable["/0x00/OctB1"] = 18846732;
	pathTable["/0x00/SatX0"] = 18846564;
	pathTable["/0x00/opt0"] = 18846588;
	pathTable["/0x00/MovY0"] = 18846688;
	pathTable["/0x00/MovX0"] = 18846692;
	pathTable["/0x00/Vol0"] = 18846696;
	pathTable["/0x00/Vol1"] = 18846700;
	pathTable["/0x00/MovY1"] = 18846704;
	pathTable["/0x00/MovX1"] = 18846708;
	pathTable["/0x00/SatX1"] = 18846724;
	pathTable["/0x00/opt1"] = 18846736;
	pathTable["/0x00/OctX1"] = 18846740;
	pathTable["/0x00/SatY1"] = 18846744;
	pathTable["/0x00/OctX0"] = 18846604;
	pathTable["/0x00/FilY1"] = 18846748;
	pathTable["/0x00/FilX1"] = 18846752;
	pathTable["/0x00/DelY1"] = 18846756;
	pathTable["/0x00/DelX1"] = 18846760;
	pathTable["/0x00/RevX1"] = 18846764;
	pathTable["/0x00/RevY1"] = 18846768;
	pathTable["/0x00/Vol2"] = 18846772;
	pathTable["/0x00/FilY2"] = 18846788;
	pathTable["/0x00/opt2"] = 18846800;
	pathTable["/0x00/OctX2"] = 18846804;
	pathTable["/0x00/SatY0"] = 18846608;
	pathTable["/0x00/SatX2"] = 18846808;
	pathTable["/0x00/SatY2"] = 18846812;
	pathTable["/0x00/FilX2"] = 18846816;
	pathTable["/0x00/DelY2"] = 18846820;
	pathTable["/0x00/DelX2"] = 18846824;
	pathTable["/0x00/RevX2"] = 18846828;
	pathTable["/0x00/RevY2"] = 18846832;
	pathTable["/0x00/MovY2"] = 18846836;
	pathTable["/0x00/MovX2"] = 18846840;
	pathTable["/0x00/Vol3"] = 18846844;
	pathTable["/0x00/FilX0"] = 18846656;
	pathTable["/0x00/MovY3"] = 18846848;
	pathTable["/0x00/MovX3"] = 18846852;
	pathTable["/0x00/SatX3"] = 18846868;
	pathTable["/0x00/OctX3"] = 18846880;
	pathTable["/0x00/opt3"] = 18846884;
	pathTable["/0x00/SatY3"] = 18846888;
	pathTable["/0x00/FilY3"] = 18846892;
	pathTable["/0x00/FilX3"] = 18846896;
	pathTable["/0x00/DelY3"] = 18846900;
	pathTable["/0x00/DelX3"] = 18846904;
	pathTable["/0x00/FilY0"] = 18846660;
	pathTable["/0x00/RevX3"] = 18846908;
	pathTable["/0x00/RevY3"] = 18846912;
	pathTable["/0x00/Vol4"] = 18846916;
	pathTable["/0x00/MovY4"] = 18846920;
	pathTable["/0x00/MovX4"] = 18846924;
	pathTable["/0x00/opt4"] = 18846948;
	pathTable["/0x00/OctX4"] = 18846952;
	pathTable["/0x00/SatX4"] = 18846956;
	pathTable["/0x00/SatY4"] = 18846960;
	pathTable["/0x00/FilY4"] = 18846964;
	pathTable["/0x00/DelX0"] = 18846668;
	pathTable["/0x00/FilX4"] = 18846968;
	pathTable["/0x00/DelY4"] = 18846972;
	pathTable["/0x00/DelX4"] = 18846976;
	pathTable["/0x00/RevX4"] = 18846980;
	pathTable["/0x00/RevY4"] = 18846984;
	pathTable["/0x00/Vol5"] = 18846988;
	pathTable["/0x00/MovY5"] = 18846992;
	pathTable["/0x00/MovX5"] = 18846996;
	pathTable["/0x00/opt5"] = 18847020;
	pathTable["/0x00/OctX5"] = 18847024;
	pathTable["/0x00/DelY0"] = 18846672;
	pathTable["/0x00/SatX5"] = 18847028;
	pathTable["/0x00/SatY5"] = 18847032;
	pathTable["/0x00/FilY5"] = 18847036;
	pathTable["/0x00/FilX5"] = 18847040;
	pathTable["/0x00/DelY5"] = 18847044;
	pathTable["/0x00/DelX5"] = 18847048;
	pathTable["/0x00/RevX5"] = 18847052;
	pathTable["/0x00/RevY5"] = 18847056;
	pathTable["/0x00/RevX0"] = 18846680;
	pathTable["/0x00/RevY0"] = 18846684;
	pathTable["/0x00/VolS"] = 18846592;
	pathTable["/0x00/VolV"] = 18847060;
	return pathTable;
}

function getJSONeffet1v200() {
	return "{  \"name\": \"\",  \"inputs\": \"1\",  \"outputs\": \"2\",  \"meta\": [    { \"effect.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"effect.lib/copyright\": \"Julius O. Smith III\" },   { \"effect.lib/exciter_author\": \"Priyanka Shekar (pshekar@ccrma.stanford.edu)\" },   { \"effect.lib/exciter_copyright\": \"Copyright (c) 2013 Priyanka Shekar\" },   { \"effect.lib/exciter_license\": \"MIT License (MIT)\" },   { \"effect.lib/exciter_name\": \"Harmonic Exciter\" },   { \"effect.lib/exciter_version\": \"1.0\" },   { \"effect.lib/license\": \"STK-4.3\" },   { \"effect.lib/name\": \"Faust Audio Effect Library\" },   { \"effect.lib/version\": \"1.33\" },   { \"filter.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"filter.lib/copyright\": \"Julius O. Smith III\" },   { \"filter.lib/license\": \"STK-4.3\" },   { \"filter.lib/name\": \"Faust Filter Library\" },   { \"filter.lib/reference\": \"https://ccrma.stanford.edu/~jos/filters/\" },   { \"filter.lib/version\": \"1.29\" },   { \"hoa.lib/author\": \"Pierre Guillot\" },   { \"hoa.lib/copyright\": \"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\" },   { \"hoa.lib/name\": \"HOA\" },   { \"hoa.lib/title\": \"High Order Ambisonics library\" },   { \"instrument.lib/author\": \"Romain Michon (rmichon@ccrma.stanford.edu)\" },   { \"instrument.lib/copyright\": \"Romain Michon\" },   { \"instrument.lib/licence\": \"STK-4.3\" },   { \"instrument.lib/name\": \"Faust-STK Tools Library\" },   { \"instrument.lib/version\": \"1.0\" },   { \"math.lib/author\": \"GRAME\" },   { \"math.lib/copyright\": \"GRAME\" },   { \"math.lib/license\": \"LGPL with exception\" },   { \"math.lib/name\": \"Math Library\" },   { \"math.lib/version\": \"1.0\" },   { \"music.lib/author\": \"GRAME\" },   { \"music.lib/copyright\": \"GRAME\" },   { \"music.lib/license\": \"LGPL with exception\" },   { \"music.lib/name\": \"Music Library\" },   { \"music.lib/version\": \"1.0\" }  ],  \"ui\": [    {    \"type\": \"vgroup\",    \"label\": \"0x00\",    \"items\": [      {      \"type\": \"button\",      \"label\": \"DelB0\",      \"address\": \"/0x00/DelB0\"     },     {      \"type\": \"button\",      \"label\": \"DelB1\",      \"address\": \"/0x00/DelB1\"     },     {      \"type\": \"button\",      \"label\": \"DelB2\",      \"address\": \"/0x00/DelB2\"     },     {      \"type\": \"button\",      \"label\": \"DelB3\",      \"address\": \"/0x00/DelB3\"     },     {      \"type\": \"button\",      \"label\": \"DelB4\",      \"address\": \"/0x00/DelB4\"     },     {      \"type\": \"button\",      \"label\": \"DelB5\",      \"address\": \"/0x00/DelB5\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX0\",      \"address\": \"/0x00/DelX0\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX1\",      \"address\": \"/0x00/DelX1\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX2\",      \"address\": \"/0x00/DelX2\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX3\",      \"address\": \"/0x00/DelX3\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX4\",      \"address\": \"/0x00/DelX4\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX5\",      \"address\": \"/0x00/DelX5\",      \"init\": \"150\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY0\",      \"address\": \"/0x00/DelY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY1\",      \"address\": \"/0x00/DelY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY2\",      \"address\": \"/0x00/DelY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY3\",      \"address\": \"/0x00/DelY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY4\",      \"address\": \"/0x00/DelY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY5\",      \"address\": \"/0x00/DelY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"FilB0\",      \"address\": \"/0x00/FilB0\"     },     {      \"type\": \"button\",      \"label\": \"FilB1\",      \"address\": \"/0x00/FilB1\"     },     {      \"type\": \"button\",      \"label\": \"FilB2\",      \"address\": \"/0x00/FilB2\"     },     {      \"type\": \"button\",      \"label\": \"FilB3\",      \"address\": \"/0x00/FilB3\"     },     {      \"type\": \"button\",      \"label\": \"FilB4\",      \"address\": \"/0x00/FilB4\"     },     {      \"type\": \"button\",      \"label\": \"FilB5\",      \"address\": \"/0x00/FilB5\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX0\",      \"address\": \"/0x00/FilX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX1\",      \"address\": \"/0x00/FilX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX2\",      \"address\": \"/0x00/FilX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX3\",      \"address\": \"/0x00/FilX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX4\",      \"address\": \"/0x00/FilX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX5\",      \"address\": \"/0x00/FilX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY0\",      \"address\": \"/0x00/FilY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY1\",      \"address\": \"/0x00/FilY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY2\",      \"address\": \"/0x00/FilY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY3\",      \"address\": \"/0x00/FilY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY4\",      \"address\": \"/0x00/FilY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY5\",      \"address\": \"/0x00/FilY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX0\",      \"address\": \"/0x00/MovX0\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX1\",      \"address\": \"/0x00/MovX1\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX2\",      \"address\": \"/0x00/MovX2\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX3\",      \"address\": \"/0x00/MovX3\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX4\",      \"address\": \"/0x00/MovX4\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX5\",      \"address\": \"/0x00/MovX5\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY0\",      \"address\": \"/0x00/MovY0\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY1\",      \"address\": \"/0x00/MovY1\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY2\",      \"address\": \"/0x00/MovY2\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY3\",      \"address\": \"/0x00/MovY3\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY4\",      \"address\": \"/0x00/MovY4\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY5\",      \"address\": \"/0x00/MovY5\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"button\",      \"label\": \"OctB0\",      \"address\": \"/0x00/OctB0\"     },     {      \"type\": \"button\",      \"label\": \"OctB1\",      \"address\": \"/0x00/OctB1\"     },     {      \"type\": \"button\",      \"label\": \"OctB2\",      \"address\": \"/0x00/OctB2\"     },     {      \"type\": \"button\",      \"label\": \"OctB3\",      \"address\": \"/0x00/OctB3\"     },     {      \"type\": \"button\",      \"label\": \"OctB4\",      \"address\": \"/0x00/OctB4\"     },     {      \"type\": \"button\",      \"label\": \"OctB5\",      \"address\": \"/0x00/OctB5\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX0\",      \"address\": \"/0x00/OctX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX1\",      \"address\": \"/0x00/OctX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX2\",      \"address\": \"/0x00/OctX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX3\",      \"address\": \"/0x00/OctX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX4\",      \"address\": \"/0x00/OctX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctX5\",      \"address\": \"/0x00/OctX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"RevB0\",      \"address\": \"/0x00/RevB0\"     },     {      \"type\": \"button\",      \"label\": \"RevB1\",      \"address\": \"/0x00/RevB1\"     },     {      \"type\": \"button\",      \"label\": \"RevB2\",      \"address\": \"/0x00/RevB2\"     },     {      \"type\": \"button\",      \"label\": \"RevB3\",      \"address\": \"/0x00/RevB3\"     },     {      \"type\": \"button\",      \"label\": \"RevB4\",      \"address\": \"/0x00/RevB4\"     },     {      \"type\": \"button\",      \"label\": \"RevB5\",      \"address\": \"/0x00/RevB5\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX0\",      \"address\": \"/0x00/RevX0\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX1\",      \"address\": \"/0x00/RevX1\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX2\",      \"address\": \"/0x00/RevX2\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX3\",      \"address\": \"/0x00/RevX3\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX4\",      \"address\": \"/0x00/RevX4\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX5\",      \"address\": \"/0x00/RevX5\",      \"init\": \"200\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY0\",      \"address\": \"/0x00/RevY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY1\",      \"address\": \"/0x00/RevY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY2\",      \"address\": \"/0x00/RevY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY3\",      \"address\": \"/0x00/RevY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY4\",      \"address\": \"/0x00/RevY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY5\",      \"address\": \"/0x00/RevY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"SatB0\",      \"address\": \"/0x00/SatB0\"     },     {      \"type\": \"button\",      \"label\": \"SatB1\",      \"address\": \"/0x00/SatB1\"     },     {      \"type\": \"button\",      \"label\": \"SatB2\",      \"address\": \"/0x00/SatB2\"     },     {      \"type\": \"button\",      \"label\": \"SatB3\",      \"address\": \"/0x00/SatB3\"     },     {      \"type\": \"button\",      \"label\": \"SatB4\",      \"address\": \"/0x00/SatB4\"     },     {      \"type\": \"button\",      \"label\": \"SatB5\",      \"address\": \"/0x00/SatB5\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX0\",      \"address\": \"/0x00/SatX0\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX1\",      \"address\": \"/0x00/SatX1\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX2\",      \"address\": \"/0x00/SatX2\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX3\",      \"address\": \"/0x00/SatX3\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX4\",      \"address\": \"/0x00/SatX4\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX5\",      \"address\": \"/0x00/SatX5\",      \"init\": \"50\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY0\",      \"address\": \"/0x00/SatY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY1\",      \"address\": \"/0x00/SatY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY2\",      \"address\": \"/0x00/SatY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY3\",      \"address\": \"/0x00/SatY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY4\",      \"address\": \"/0x00/SatY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY5\",      \"address\": \"/0x00/SatY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol0\",      \"address\": \"/0x00/Vol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol1\",      \"address\": \"/0x00/Vol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol2\",      \"address\": \"/0x00/Vol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol3\",      \"address\": \"/0x00/Vol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol4\",      \"address\": \"/0x00/Vol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol5\",      \"address\": \"/0x00/Vol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"vslider\",      \"label\": \"VolS\",      \"address\": \"/0x00/VolS\",      \"init\": \"10\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"vslider\",      \"label\": \"VolV\",      \"address\": \"/0x00/VolV\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"opt0\",      \"address\": \"/0x00/opt0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt1\",      \"address\": \"/0x00/opt1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt2\",      \"address\": \"/0x00/opt2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt3\",      \"address\": \"/0x00/opt3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt4\",      \"address\": \"/0x00/opt4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt5\",      \"address\": \"/0x00/opt5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     }    ]   }  ] } ";
}

function metadataeffet1v200(m) {
	m.declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("effect.lib/copyright", "Julius O. Smith III");
	m.declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
	m.declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("effect.lib/exciter_license", "MIT License (MIT)");
	m.declare("effect.lib/exciter_name", "Harmonic Exciter");
	m.declare("effect.lib/exciter_version", "1.0");
	m.declare("effect.lib/license", "STK-4.3");
	m.declare("effect.lib/name", "Faust Audio Effect Library");
	m.declare("effect.lib/version", "1.33");
	m.declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("filter.lib/copyright", "Julius O. Smith III");
	m.declare("filter.lib/license", "STK-4.3");
	m.declare("filter.lib/name", "Faust Filter Library");
	m.declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
	m.declare("filter.lib/version", "1.29");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "HOA");
	m.declare("hoa.lib/title", "High Order Ambisonics library");
	m.declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
	m.declare("instrument.lib/copyright", "Romain Michon");
	m.declare("instrument.lib/licence", "STK-4.3");
	m.declare("instrument.lib/name", "Faust-STK Tools Library");
	m.declare("instrument.lib/version", "1.0");
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
}


// Standard Faust DSP

faust.effet1v200 = function (context, buffer_size) {

    var handler = null;
    var ins, outs;
    var numIn, numOut;
    
    var scriptProcessor;
    
    var dspInChannnels = [];
    var dspOutChannnels = [];
   
    // Keep JSON parsed object
    var jon_object = JSON.parse(getJSONeffet1v200());
    
    function getNumInputsAux () 
    {
        return (jon_object.inputs !== undefined) ? parseInt(jon_object.inputs) : 0;
    }
    
    function getNumOutputsAux () 
    {
        return (jon_object.outputs !== undefined) ? parseInt(jon_object.outputs) : 0;
    }
     
    // Memory allocator
    var ptr_size = 4; 
    var sample_size = 4;
    
    function pow2limit (x)
    {
        var n = 2;
        while (n < x) { n = 2 * n; }
        return (n < 65536) ? 65536 : n; // Minimum = 64 kB
    }
     
    var memory_size = pow2limit(getSizeeffet1v200() + (getNumInputsAux() + getNumOutputsAux()) * (ptr_size + (buffer_size * sample_size)));
   
    var HEAP = new ArrayBuffer(memory_size);
    var HEAP32 = new Int32Array(HEAP);
    var HEAPF32 = new Float32Array(HEAP);
     
    console.log(HEAP);
    console.log(HEAP32);
    console.log(HEAPF32);
 
    // bargraph
    var ouputs_timer = 5;
    var ouputs_items = [];
     
    // input items
    var inputs_items = [];
     
    // Start of HEAP index
    var audio_heap_ptr = 0;
     
    // Setup pointers offset
    var audio_heap_ptr_inputs = audio_heap_ptr; 
    var audio_heap_ptr_outputs = audio_heap_ptr_inputs + (getNumInputsAux() * ptr_size);
     
    // Setup buffer offset
    var audio_heap_inputs = audio_heap_ptr_outputs + (getNumOutputsAux() * ptr_size);
    var audio_heap_outputs = audio_heap_inputs + (getNumInputsAux() * buffer_size * sample_size);
    
    // Setup DSP offset
    var dsp_start = audio_heap_outputs + (getNumOutputsAux() * buffer_size * sample_size);
     
    // Start of DSP memory
    var dsp = dsp_start;
 
    // ASM module
    var factory = effet1v200Module(window, null, HEAP);
    console.log(factory);
 
    var pathTable = getPathTableeffet1v200();
    
    // Allocate table for 'setValue'
    var value_table = [];
        
    function update_outputs () 
    {
        if (ouputs_items.length > 0 && handler && ouputs_timer-- === 0) {
            ouputs_timer = 5;
            for (var i = 0; i < ouputs_items.length; i++) {
                handler(ouputs_items[i], factory.getValue(dsp, pathTable[ouputs_items[i]]));
            }
        }
    }
    
    function compute (e) 
    {
        var i, j;
        
        // Read inputs
        for (i = 0; i < numIn; i++) {
            var input = e.inputBuffer.getChannelData(i);
            var dspInput = dspInChannnels[i];
            for (j = 0; j < input.length; j++) {
                dspInput[j] = input[j];
            }
        }
        
        // Update control state
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = value_table[path];
            factory.setValue(dsp, pathTable[path], values[0]);
            values[0] = values[1];
        }
        
        // Compute
        factory.compute(dsp, buffer_size, ins, outs);
       
        // Update bargraph
        update_outputs();
        
        // Write outputs
        for (i = 0; i < numOut; i++) {
            var output = e.outputBuffer.getChannelData(i);
            var dspOutput = dspOutChannnels[i];
            for (j = 0; j < output.length; j++) {
                output[j] = dspOutput[j];
            }
        }
    };
         
    // JSON parsing
    function parse_ui (ui) 
    {
        for (var i = 0; i < ui.length; i++) {
            console.log(ui[i]);
            parse_group(ui[i]);
        }
    }
    
    function parse_group (group) 
    {
        if (group.items) {
            parse_items(group.items);
        }
    }
    
    function parse_items (items) 
    {
        var i;
        for (i = 0; i < items.length; i++) {
            parse_item(items[i]);
        }
    }
    
    function parse_item (item) 
    {
        if (item.type === "vgroup" || item.type === "hgroup" || item.type === "tgroup") {
            parse_items(item.items);
        } else if (item.type === "hbargraph" || item.type === "vbargraph") {
            // Keep bargraph adresses
            ouputs_items.push(item.address);
        } else if (item.type === "vslider" || item.type === "hslider" || item.type === "button" || item.type === "checkbox" || item.type === "nentry") {
            // Keep inputs adresses
            inputs_items.push(item.address);
        }
    }
      
    function init ()
    {
        var i;
        
        // Get input / output counts
        numIn = getNumInputsAux();
        numOut = getNumOutputsAux();
         
        // Setup web audio context
        console.log("buffer_size %d", buffer_size);
        scriptProcessor = context.createScriptProcessor(buffer_size, numIn, numOut);
        scriptProcessor.onaudioprocess = compute;
        
        if (numIn > 0) {
            ins = audio_heap_ptr_inputs; 
            for (i = 0; i < numIn; i++) { 
                HEAP32[(ins >> 2) + i] = audio_heap_inputs + ((buffer_size * sample_size) * i);
            }
     
            var dspInChans = HEAP32.subarray(ins >> 2, (ins + numIn * ptr_size) >> 2);
            for (i = 0; i < numIn; i++) {
                dspInChannnels[i] = HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + buffer_size * sample_size) >> 2);
            }
        }
        
        if (numOut > 0) {
            outs = audio_heap_ptr_outputs; 
            for (i = 0; i < numOut; i++) { 
                HEAP32[(outs >> 2) + i] = audio_heap_outputs + ((buffer_size * sample_size) * i);
            }
          
            var dspOutChans = HEAP32.subarray(outs >> 2, (outs + numOut * ptr_size) >> 2);
            for (i = 0; i < numOut; i++) {
                dspOutChannnels[i] = HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + buffer_size * sample_size) >> 2);
            }
        }
                                
        // bargraph
        parse_ui(jon_object.ui);
        
        // Init DSP
        factory.init(dsp, context.sampleRate);
        
        // Init 'value' table
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = new Float32Array(2);
            values[0] = values[1] = factory.getValue(dsp, pathTable[path]);
            value_table[path] = values;
        }
    }
    
    init();
    
    // External API
    return {
    
        getNumInputs : function () 
        {
            return getNumInputsAux();
        },
        
        getNumOutputs : function() 
        {
            return getNumOutputsAux();
        },
    
        destroy : function  ()
        {
            // Nothing to do
        },
        
        // Connect/disconnect to another node
        connect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.connect(node.getProcessor());
            } else {
                scriptProcessor.connect(node);
            }
        },

        disconnect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.disconnect(node.getProcessor());
            } else {
                scriptProcessor.disconnect(node);
            }
        },
        
        setHandler : function (hd)
        {
            handler = hd;
        },
        
        start : function () 
        {
            scriptProcessor.connect(context.destination);
        },

        stop : function () 
        {
            scriptProcessor.disconnect(context.destination);
        },

        setValue : function (path, val) 
        {
            var values = value_table[path];
            if (values) {
                if (factory.getValue(dsp, pathTable[path]) == values[0]) {
                    values[0] = val;
                } 
                values[1] = val;
            }
        },

        getValue : function (path) 
        {
            return factory.getValue(dsp, pathTable[path]);
        },
        
        controls : function()
        {
            return inputs_items;
        },
        
        json : function ()
        {
            return getJSONeffet1v200();
        },
        
        getProcessor : function ()
        {
            return scriptProcessor;
        }
    };
};

