/* ------------------------------------------------------------
Code generated with Faust 2.0.a41 (http://faust.grame.fr)
------------------------------------------------------------ */
/*
 faust2webaudio
 
 Primarily written by Myles Borins
 During the Spring 2013 offering of Music 420b with Julius Smith
 A bit during the Summer of 2013 with the help of Joshua Kit Clayton
 And finally a sprint during the late fall of 2013 to get everything working
 A Special thanks to Yann Orlarey and St√©phane Letz
 
 faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
 Choose the license that best suits your project. The text of the MIT and GPL
 licenses are at the root directory.
 
 Additional code : GRAME 2014
 
 */
 
'use strict';

var faust = faust || {};



function looperModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF32 = new global.Float32Array(buffer);
	
	var imul = global.Math.imul;
	var log = global.Math.log;
	
	var atan2f = global.Math.atan2;
	var cosf = global.Math.cos;
	var floorf = global.Math.floor;
	var max = global.Math.max;
	var min = global.Math.min;
	var powf = global.Math.pow;
	var sinf = global.Math.sin;
	var tanf = global.Math.tan;
	function faustpower2_f(value) {
		value = +(value);
		return +((value * value));
		
	}
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }

	function getNumInputslooperSIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputslooperSIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceInitlooperSIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i16 = 0;
		for (i16 = 0; (((i16 | 0) < 2) | 0); i16 = (((i16 | 0) + 1) | 0)) {
			HEAP32[dsp + 14869128 + ((i16 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function filllooperSIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 14869128 + (0 << 2) >> 2] = ((1 + (HEAP32[dsp + 14869128 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF32[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738e-05 * +((((HEAP32[dsp + 14869128 + (0 << 2) >> 2] | 0) - 1) | 0)))));
			HEAP32[dsp + 14869128 + (1 << 2) >> 2] = (HEAP32[dsp + 14869128 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceInitlooperSIG0(dsp, (samplingFreq | 0));
		filllooperSIG0(dsp, 65536, (dsp + 0 | 0));
		
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var i3 = 0;
		var i4 = 0;
		var i5 = 0;
		var i6 = 0;
		var i7 = 0;
		var i8 = 0;
		var i9 = 0;
		var i10 = 0;
		var i11 = 0;
		var i12 = 0;
		var i13 = 0;
		var i14 = 0;
		var i15 = 0;
		var i17 = 0;
		var i18 = 0;
		var i19 = 0;
		var i20 = 0;
		var i21 = 0;
		var i22 = 0;
		var i23 = 0;
		var i24 = 0;
		var i25 = 0;
		var i26 = 0;
		var i27 = 0;
		var i28 = 0;
		var i29 = 0;
		var i30 = 0;
		var i31 = 0;
		var i32 = 0;
		var i33 = 0;
		var i34 = 0;
		var i35 = 0;
		var i36 = 0;
		var i37 = 0;
		var i38 = 0;
		var i39 = 0;
		var i40 = 0;
		var i41 = 0;
		var i42 = 0;
		var i43 = 0;
		var i44 = 0;
		var i45 = 0;
		var i46 = 0;
		var i47 = 0;
		var i48 = 0;
		var i49 = 0;
		var i50 = 0;
		var i51 = 0;
		var i52 = 0;
		var i53 = 0;
		var i54 = 0;
		var i55 = 0;
		var i56 = 0;
		var i57 = 0;
		var i58 = 0;
		var i59 = 0;
		var i60 = 0;
		var i61 = 0;
		var i62 = 0;
		var i63 = 0;
		var i64 = 0;
		var i65 = 0;
		var i66 = 0;
		var i67 = 0;
		var i68 = 0;
		var i69 = 0;
		var i70 = 0;
		var i71 = 0;
		var i72 = 0;
		var i73 = 0;
		var i74 = 0;
		var i75 = 0;
		var i76 = 0;
		var i77 = 0;
		var i78 = 0;
		var i79 = 0;
		var i80 = 0;
		var i81 = 0;
		var i82 = 0;
		var i83 = 0;
		var i84 = 0;
		var i85 = 0;
		var i86 = 0;
		var i87 = 0;
		var i88 = 0;
		var i89 = 0;
		var i90 = 0;
		var i91 = 0;
		var i92 = 0;
		var i93 = 0;
		var i94 = 0;
		var i95 = 0;
		var i96 = 0;
		var i97 = 0;
		var i98 = 0;
		var i99 = 0;
		var i100 = 0;
		var i101 = 0;
		var i102 = 0;
		var i103 = 0;
		var i104 = 0;
		var i105 = 0;
		var i106 = 0;
		var i107 = 0;
		var i108 = 0;
		var i109 = 0;
		var i110 = 0;
		var i111 = 0;
		var i112 = 0;
		var i113 = 0;
		var i114 = 0;
		var i115 = 0;
		var i116 = 0;
		var i117 = 0;
		var i118 = 0;
		var i119 = 0;
		var i120 = 0;
		var i121 = 0;
		var i122 = 0;
		var i123 = 0;
		var i124 = 0;
		var i125 = 0;
		var i126 = 0;
		var i127 = 0;
		var i128 = 0;
		var i129 = 0;
		var i130 = 0;
		var i131 = 0;
		var i132 = 0;
		var i133 = 0;
		var i134 = 0;
		var i135 = 0;
		var i136 = 0;
		var i137 = 0;
		var i138 = 0;
		var i139 = 0;
		var i140 = 0;
		var i141 = 0;
		var i142 = 0;
		var i143 = 0;
		var i144 = 0;
		var i145 = 0;
		var i146 = 0;
		var i147 = 0;
		var i148 = 0;
		var i149 = 0;
		var i150 = 0;
		var i151 = 0;
		var i152 = 0;
		var i153 = 0;
		var i154 = 0;
		var i155 = 0;
		var i156 = 0;
		var i157 = 0;
		var i158 = 0;
		var i159 = 0;
		var i160 = 0;
		var i161 = 0;
		var i162 = 0;
		var i163 = 0;
		var i164 = 0;
		var i165 = 0;
		var i166 = 0;
		var i167 = 0;
		var i168 = 0;
		var i169 = 0;
		var i170 = 0;
		var i171 = 0;
		var i172 = 0;
		var i173 = 0;
		var i174 = 0;
		var i175 = 0;
		var i176 = 0;
		var i177 = 0;
		var i178 = 0;
		var i179 = 0;
		var i180 = 0;
		var i181 = 0;
		var i182 = 0;
		var i183 = 0;
		var i184 = 0;
		var i185 = 0;
		var i186 = 0;
		var i187 = 0;
		var i188 = 0;
		var i189 = 0;
		var i190 = 0;
		var i191 = 0;
		var i192 = 0;
		var i193 = 0;
		var i194 = 0;
		var i195 = 0;
		var i196 = 0;
		var i197 = 0;
		var i198 = 0;
		var i199 = 0;
		var i200 = 0;
		var i201 = 0;
		var i202 = 0;
		var i203 = 0;
		var i204 = 0;
		var i205 = 0;
		var i206 = 0;
		var i207 = 0;
		var i208 = 0;
		var i209 = 0;
		var i210 = 0;
		var i211 = 0;
		var i212 = 0;
		var i213 = 0;
		var i214 = 0;
		var i215 = 0;
		var i216 = 0;
		var i217 = 0;
		var i218 = 0;
		var i219 = 0;
		var i220 = 0;
		var i221 = 0;
		var i222 = 0;
		var i223 = 0;
		var i224 = 0;
		var i225 = 0;
		var i226 = 0;
		var i227 = 0;
		var i228 = 0;
		var i229 = 0;
		var i230 = 0;
		var i231 = 0;
		var i232 = 0;
		var i233 = 0;
		var i234 = 0;
		var i235 = 0;
		var i236 = 0;
		var i237 = 0;
		var i238 = 0;
		var i239 = 0;
		var i240 = 0;
		var i241 = 0;
		var i242 = 0;
		var i243 = 0;
		var i244 = 0;
		var i245 = 0;
		var i246 = 0;
		var i247 = 0;
		var i248 = 0;
		var i249 = 0;
		var i250 = 0;
		var i251 = 0;
		var i252 = 0;
		var i253 = 0;
		var i254 = 0;
		var i255 = 0;
		var i256 = 0;
		var i257 = 0;
		var i258 = 0;
		var i259 = 0;
		var i260 = 0;
		var i261 = 0;
		var i262 = 0;
		var i263 = 0;
		var i264 = 0;
		var i265 = 0;
		var i266 = 0;
		var i267 = 0;
		var i268 = 0;
		var i269 = 0;
		var i270 = 0;
		var i271 = 0;
		var i272 = 0;
		var i273 = 0;
		var i274 = 0;
		var i275 = 0;
		var i276 = 0;
		var i277 = 0;
		var i278 = 0;
		var i279 = 0;
		var i280 = 0;
		var i281 = 0;
		var i282 = 0;
		var i283 = 0;
		var i284 = 0;
		var i285 = 0;
		var i286 = 0;
		var i287 = 0;
		var i288 = 0;
		var i289 = 0;
		var i290 = 0;
		var i291 = 0;
		var i292 = 0;
		var i293 = 0;
		var i294 = 0;
		var i295 = 0;
		var i296 = 0;
		var i297 = 0;
		var i298 = 0;
		var i299 = 0;
		var i300 = 0;
		var i301 = 0;
		var i302 = 0;
		var i303 = 0;
		var i304 = 0;
		var i305 = 0;
		var i306 = 0;
		var i307 = 0;
		var i308 = 0;
		var i309 = 0;
		var i310 = 0;
		var i311 = 0;
		var i312 = 0;
		var i313 = 0;
		var i314 = 0;
		var i315 = 0;
		var i316 = 0;
		var i317 = 0;
		var i318 = 0;
		var i319 = 0;
		var i320 = 0;
		var i321 = 0;
		var i322 = 0;
		var i323 = 0;
		var i324 = 0;
		var i325 = 0;
		var i326 = 0;
		var i327 = 0;
		var i328 = 0;
		var i329 = 0;
		var i330 = 0;
		var i331 = 0;
		var i332 = 0;
		var i333 = 0;
		var i334 = 0;
		var i335 = 0;
		var i336 = 0;
		var i337 = 0;
		var i338 = 0;
		var i339 = 0;
		var i340 = 0;
		var i341 = 0;
		var i342 = 0;
		var i343 = 0;
		var i344 = 0;
		var i345 = 0;
		var i346 = 0;
		var i347 = 0;
		var i348 = 0;
		var i349 = 0;
		var i350 = 0;
		var i351 = 0;
		var i352 = 0;
		var i353 = 0;
		var i354 = 0;
		var i355 = 0;
		var i356 = 0;
		var i357 = 0;
		var i358 = 0;
		var i359 = 0;
		var i360 = 0;
		var i361 = 0;
		var i362 = 0;
		var i363 = 0;
		var i364 = 0;
		var i365 = 0;
		var i366 = 0;
		var i367 = 0;
		var i368 = 0;
		var i369 = 0;
		var i370 = 0;
		var i371 = 0;
		var i372 = 0;
		var i373 = 0;
		var i374 = 0;
		var i375 = 0;
		var i376 = 0;
		var i377 = 0;
		var i378 = 0;
		var i379 = 0;
		var i380 = 0;
		var i381 = 0;
		var i382 = 0;
		var i383 = 0;
		var i384 = 0;
		var i385 = 0;
		var i386 = 0;
		var i387 = 0;
		var i388 = 0;
		var i389 = 0;
		var i390 = 0;
		var i391 = 0;
		var i392 = 0;
		var i393 = 0;
		var i394 = 0;
		var i395 = 0;
		var i396 = 0;
		var i397 = 0;
		var i398 = 0;
		var i399 = 0;
		var i400 = 0;
		var i401 = 0;
		var i402 = 0;
		var i403 = 0;
		var i404 = 0;
		var i405 = 0;
		var i406 = 0;
		var i407 = 0;
		HEAP32[dsp + 14869140 >> 2] = (samplingFreq | 0);
		HEAPF32[dsp + 14869136 >> 2] = +(0.);
		for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866744 + ((i0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 14869144 >> 2] = ((min(192000, ((max(1, (HEAP32[dsp + 14869140 >> 2] | 0))) | 0))) | 0);
		HEAPF32[dsp + 14869148 >> 2] = +(0.008 * +((HEAP32[dsp + 14869144 >> 2] | 0)));
		HEAPF32[dsp + 14869152 >> 2] = +(100.);
		HEAPF32[dsp + 14869156 >> 2] = +(100. / +((HEAP32[dsp + 14869144 >> 2] | 0)));
		HEAPF32[dsp + 14869160 >> 2] = +(0. - +(HEAPF32[dsp + 14869156 >> 2]));
		for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866752 + ((i1 | 0) << 2) >> 2] = 0.;
			
		}
		for (i2 = 0; (((i2 | 0) < 2) | 0); i2 = (((i2 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866760 + ((i2 | 0) << 2) >> 2] = 0.;
			
		}
		for (i3 = 0; (((i3 | 0) < 2) | 0); i3 = (((i3 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866768 + ((i3 | 0) << 2) >> 2] = 0.;
			
		}
		for (i4 = 0; (((i4 | 0) < 2) | 0); i4 = (((i4 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866776 + ((i4 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869164 >> 2] = +(0.);
		for (i5 = 0; (((i5 | 0) < 2) | 0); i5 = (((i5 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866784 + ((i5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869168 >> 2] = +(0.);
		for (i6 = 0; (((i6 | 0) < 2) | 0); i6 = (((i6 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866792 + ((i6 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869172 >> 2] = +(0.);
		for (i7 = 0; (((i7 | 0) < 2) | 0); i7 = (((i7 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866800 + ((i7 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869176 >> 2] = +(5. / +((HEAP32[dsp + 14869144 >> 2] | 0)));
		for (i8 = 0; (((i8 | 0) < 2) | 0); i8 = (((i8 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866808 + ((i8 | 0) << 2) >> 2] = 0.;
			
		}
		for (i9 = 0; (((i9 | 0) < 6) | 0); i9 = (((i9 | 0) + 1) | 0)) {
			HEAP32[dsp + 14866432 + ((i9 | 0) << 2) >> 2] = 0;
			
		}
		for (i10 = 0; (((i10 | 0) < 2) | 0); i10 = (((i10 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866816 + ((i10 | 0) << 2) >> 2] = 0.;
			
		}
		for (i11 = 0; (((i11 | 0) < 2) | 0); i11 = (((i11 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866824 + ((i11 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869180 >> 2] = +(0.);
		for (i12 = 0; (((i12 | 0) < 2) | 0); i12 = (((i12 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866832 + ((i12 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 14869184 >> 2] = ~~(+(0.2 * +((HEAP32[dsp + 14869144 >> 2] | 0))));
		for (i13 = 0; (((i13 | 0) < 2) | 0); i13 = (((i13 | 0) + 1) | 0)) {
			HEAP32[dsp + 14866840 + ((i13 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 14869188 >> 2] = +(0.1 * +((HEAP32[dsp + 14869144 >> 2] | 0)));
		for (i14 = 0; (((i14 | 0) < 2) | 0); i14 = (((i14 | 0) + 1) | 0)) {
			HEAP32[dsp + 14866848 + ((i14 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 14869192 >> 2] = +(1. - +(1. / +(powf(100000., +(10. / +((HEAP32[dsp + 14869144 >> 2] | 0)))))));
		for (i15 = 0; (((i15 | 0) < 2) | 0); i15 = (((i15 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866856 + ((i15 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869196 >> 2] = +(1. / +((HEAP32[dsp + 14869144 >> 2] | 0)));
		for (i17 = 0; (((i17 | 0) < 2) | 0); i17 = (((i17 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866864 + ((i17 | 0) << 2) >> 2] = 0.;
			
		}
		for (i18 = 0; (((i18 | 0) < 2) | 0); i18 = (((i18 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866872 + ((i18 | 0) << 2) >> 2] = 0.;
			
		}
		for (i19 = 0; (((i19 | 0) < 2) | 0); i19 = (((i19 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866880 + ((i19 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 14869200 >> 2] = 0;
		for (i20 = 0; (((i20 | 0) < 65536) | 0); i20 = (((i20 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12845056 + ((i20 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869204 >> 2] = +(100.);
		for (i21 = 0; (((i21 | 0) < 2) | 0); i21 = (((i21 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866888 + ((i21 | 0) << 2) >> 2] = 0.;
			
		}
		for (i22 = 0; (((i22 | 0) < 2) | 0); i22 = (((i22 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866896 + ((i22 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869208 >> 2] = +(100.);
		for (i23 = 0; (((i23 | 0) < 2) | 0); i23 = (((i23 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866904 + ((i23 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869212 >> 2] = +(6.28319 / +((HEAP32[dsp + 14869144 >> 2] | 0)));
		HEAPF32[dsp + 14869216 >> 2] = +(100.);
		for (i24 = 0; (((i24 | 0) < 2) | 0); i24 = (((i24 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866912 + ((i24 | 0) << 2) >> 2] = 0.;
			
		}
		for (i25 = 0; (((i25 | 0) < 2) | 0); i25 = (((i25 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866920 + ((i25 | 0) << 2) >> 2] = 0.;
			
		}
		for (i26 = 0; (((i26 | 0) < 2) | 0); i26 = (((i26 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866928 + ((i26 | 0) << 2) >> 2] = 0.;
			
		}
		for (i27 = 0; (((i27 | 0) < 2) | 0); i27 = (((i27 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866936 + ((i27 | 0) << 2) >> 2] = 0.;
			
		}
		for (i28 = 0; (((i28 | 0) < 2) | 0); i28 = (((i28 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866944 + ((i28 | 0) << 2) >> 2] = 0.;
			
		}
		for (i29 = 0; (((i29 | 0) < 2) | 0); i29 = (((i29 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866952 + ((i29 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869220 >> 2] = +(3.14159 / +((HEAP32[dsp + 14869144 >> 2] | 0)));
		HEAPF32[dsp + 14869224 >> 2] = +(100.);
		for (i30 = 0; (((i30 | 0) < 2) | 0); i30 = (((i30 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866960 + ((i30 | 0) << 2) >> 2] = 0.;
			
		}
		for (i31 = 0; (((i31 | 0) < 3) | 0); i31 = (((i31 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866456 + ((i31 | 0) << 2) >> 2] = 0.;
			
		}
		for (i32 = 0; (((i32 | 0) < 3) | 0); i32 = (((i32 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866468 + ((i32 | 0) << 2) >> 2] = 0.;
			
		}
		for (i33 = 0; (((i33 | 0) < 3) | 0); i33 = (((i33 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866480 + ((i33 | 0) << 2) >> 2] = 0.;
			
		}
		for (i34 = 0; (((i34 | 0) < 3) | 0); i34 = (((i34 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866492 + ((i34 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869228 >> 2] = +(0.);
		for (i35 = 0; (((i35 | 0) < 524288) | 0); i35 = (((i35 | 0) + 1) | 0)) {
			HEAPF32[dsp + 262144 + ((i35 | 0) << 2) >> 2] = 0.;
			
		}
		for (i36 = 0; (((i36 | 0) < 2) | 0); i36 = (((i36 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866968 + ((i36 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869232 >> 2] = +(0.);
		for (i37 = 0; (((i37 | 0) < 2) | 0); i37 = (((i37 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866976 + ((i37 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869236 >> 2] = +(100.);
		for (i38 = 0; (((i38 | 0) < 2) | 0); i38 = (((i38 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866984 + ((i38 | 0) << 2) >> 2] = 0.;
			
		}
		for (i39 = 0; (((i39 | 0) < 2) | 0); i39 = (((i39 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866992 + ((i39 | 0) << 2) >> 2] = 0.;
			
		}
		for (i40 = 0; (((i40 | 0) < 2048) | 0); i40 = (((i40 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14417920 + ((i40 | 0) << 2) >> 2] = 0.;
			
		}
		for (i41 = 0; (((i41 | 0) < 2) | 0); i41 = (((i41 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867000 + ((i41 | 0) << 2) >> 2] = 0.;
			
		}
		for (i42 = 0; (((i42 | 0) < 2) | 0); i42 = (((i42 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867008 + ((i42 | 0) << 2) >> 2] = 0.;
			
		}
		for (i43 = 0; (((i43 | 0) < 2048) | 0); i43 = (((i43 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14426112 + ((i43 | 0) << 2) >> 2] = 0.;
			
		}
		for (i44 = 0; (((i44 | 0) < 2) | 0); i44 = (((i44 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867016 + ((i44 | 0) << 2) >> 2] = 0.;
			
		}
		for (i45 = 0; (((i45 | 0) < 2) | 0); i45 = (((i45 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867024 + ((i45 | 0) << 2) >> 2] = 0.;
			
		}
		for (i46 = 0; (((i46 | 0) < 2048) | 0); i46 = (((i46 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14434304 + ((i46 | 0) << 2) >> 2] = 0.;
			
		}
		for (i47 = 0; (((i47 | 0) < 2) | 0); i47 = (((i47 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867032 + ((i47 | 0) << 2) >> 2] = 0.;
			
		}
		for (i48 = 0; (((i48 | 0) < 2) | 0); i48 = (((i48 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867040 + ((i48 | 0) << 2) >> 2] = 0.;
			
		}
		for (i49 = 0; (((i49 | 0) < 2048) | 0); i49 = (((i49 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14442496 + ((i49 | 0) << 2) >> 2] = 0.;
			
		}
		for (i50 = 0; (((i50 | 0) < 2) | 0); i50 = (((i50 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867048 + ((i50 | 0) << 2) >> 2] = 0.;
			
		}
		for (i51 = 0; (((i51 | 0) < 2) | 0); i51 = (((i51 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867056 + ((i51 | 0) << 2) >> 2] = 0.;
			
		}
		for (i52 = 0; (((i52 | 0) < 2048) | 0); i52 = (((i52 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14450688 + ((i52 | 0) << 2) >> 2] = 0.;
			
		}
		for (i53 = 0; (((i53 | 0) < 2) | 0); i53 = (((i53 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867064 + ((i53 | 0) << 2) >> 2] = 0.;
			
		}
		for (i54 = 0; (((i54 | 0) < 2) | 0); i54 = (((i54 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867072 + ((i54 | 0) << 2) >> 2] = 0.;
			
		}
		for (i55 = 0; (((i55 | 0) < 2048) | 0); i55 = (((i55 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14458880 + ((i55 | 0) << 2) >> 2] = 0.;
			
		}
		for (i56 = 0; (((i56 | 0) < 2) | 0); i56 = (((i56 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867080 + ((i56 | 0) << 2) >> 2] = 0.;
			
		}
		for (i57 = 0; (((i57 | 0) < 2) | 0); i57 = (((i57 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867088 + ((i57 | 0) << 2) >> 2] = 0.;
			
		}
		for (i58 = 0; (((i58 | 0) < 2048) | 0); i58 = (((i58 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14467072 + ((i58 | 0) << 2) >> 2] = 0.;
			
		}
		for (i59 = 0; (((i59 | 0) < 2) | 0); i59 = (((i59 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867096 + ((i59 | 0) << 2) >> 2] = 0.;
			
		}
		for (i60 = 0; (((i60 | 0) < 2) | 0); i60 = (((i60 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867104 + ((i60 | 0) << 2) >> 2] = 0.;
			
		}
		for (i61 = 0; (((i61 | 0) < 2048) | 0); i61 = (((i61 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14475264 + ((i61 | 0) << 2) >> 2] = 0.;
			
		}
		for (i62 = 0; (((i62 | 0) < 2) | 0); i62 = (((i62 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867112 + ((i62 | 0) << 2) >> 2] = 0.;
			
		}
		for (i63 = 0; (((i63 | 0) < 1024) | 0); i63 = (((i63 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14811136 + ((i63 | 0) << 2) >> 2] = 0.;
			
		}
		for (i64 = 0; (((i64 | 0) < 2) | 0); i64 = (((i64 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867120 + ((i64 | 0) << 2) >> 2] = 0.;
			
		}
		for (i65 = 0; (((i65 | 0) < 512) | 0); i65 = (((i65 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14835712 + ((i65 | 0) << 2) >> 2] = 0.;
			
		}
		for (i66 = 0; (((i66 | 0) < 2) | 0); i66 = (((i66 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867128 + ((i66 | 0) << 2) >> 2] = 0.;
			
		}
		for (i67 = 0; (((i67 | 0) < 512) | 0); i67 = (((i67 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14837760 + ((i67 | 0) << 2) >> 2] = 0.;
			
		}
		for (i68 = 0; (((i68 | 0) < 2) | 0); i68 = (((i68 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867136 + ((i68 | 0) << 2) >> 2] = 0.;
			
		}
		for (i69 = 0; (((i69 | 0) < 256) | 0); i69 = (((i69 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14860288 + ((i69 | 0) << 2) >> 2] = 0.;
			
		}
		for (i70 = 0; (((i70 | 0) < 2) | 0); i70 = (((i70 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867144 + ((i70 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869240 >> 2] = +(5.);
		for (i71 = 0; (((i71 | 0) < 2) | 0); i71 = (((i71 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867152 + ((i71 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869244 >> 2] = +(0.);
		for (i72 = 0; (((i72 | 0) < 2) | 0); i72 = (((i72 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867160 + ((i72 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869248 >> 2] = +(0.);
		for (i73 = 0; (((i73 | 0) < 2) | 0); i73 = (((i73 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867168 + ((i73 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869252 >> 2] = +(100.);
		for (i74 = 0; (((i74 | 0) < 2) | 0); i74 = (((i74 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867176 + ((i74 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869256 >> 2] = +(0.);
		for (i75 = 0; (((i75 | 0) < 2) | 0); i75 = (((i75 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867184 + ((i75 | 0) << 2) >> 2] = 0.;
			
		}
		for (i76 = 0; (((i76 | 0) < 2) | 0); i76 = (((i76 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867192 + ((i76 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869260 >> 2] = +(0.);
		for (i77 = 0; (((i77 | 0) < 2) | 0); i77 = (((i77 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867200 + ((i77 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869264 >> 2] = +(0.);
		for (i78 = 0; (((i78 | 0) < 2) | 0); i78 = (((i78 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867208 + ((i78 | 0) << 2) >> 2] = 0.;
			
		}
		for (i79 = 0; (((i79 | 0) < 2) | 0); i79 = (((i79 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867216 + ((i79 | 0) << 2) >> 2] = 0.;
			
		}
		for (i80 = 0; (((i80 | 0) < 2) | 0); i80 = (((i80 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867224 + ((i80 | 0) << 2) >> 2] = 0.;
			
		}
		for (i81 = 0; (((i81 | 0) < 2) | 0); i81 = (((i81 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867232 + ((i81 | 0) << 2) >> 2] = 0.;
			
		}
		for (i82 = 0; (((i82 | 0) < 65536) | 0); i82 = (((i82 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13107200 + ((i82 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869268 >> 2] = +(100.);
		for (i83 = 0; (((i83 | 0) < 2) | 0); i83 = (((i83 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867240 + ((i83 | 0) << 2) >> 2] = 0.;
			
		}
		for (i84 = 0; (((i84 | 0) < 2) | 0); i84 = (((i84 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867248 + ((i84 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869272 >> 2] = +(100.);
		for (i85 = 0; (((i85 | 0) < 2) | 0); i85 = (((i85 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867256 + ((i85 | 0) << 2) >> 2] = 0.;
			
		}
		for (i86 = 0; (((i86 | 0) < 2) | 0); i86 = (((i86 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867264 + ((i86 | 0) << 2) >> 2] = 0.;
			
		}
		for (i87 = 0; (((i87 | 0) < 2) | 0); i87 = (((i87 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867272 + ((i87 | 0) << 2) >> 2] = 0.;
			
		}
		for (i88 = 0; (((i88 | 0) < 2) | 0); i88 = (((i88 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867280 + ((i88 | 0) << 2) >> 2] = 0.;
			
		}
		for (i89 = 0; (((i89 | 0) < 2) | 0); i89 = (((i89 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867288 + ((i89 | 0) << 2) >> 2] = 0.;
			
		}
		for (i90 = 0; (((i90 | 0) < 2) | 0); i90 = (((i90 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867296 + ((i90 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869276 >> 2] = +(0.);
		for (i91 = 0; (((i91 | 0) < 2) | 0); i91 = (((i91 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867304 + ((i91 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869280 >> 2] = +(100.);
		for (i92 = 0; (((i92 | 0) < 2) | 0); i92 = (((i92 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867312 + ((i92 | 0) << 2) >> 2] = 0.;
			
		}
		for (i93 = 0; (((i93 | 0) < 3) | 0); i93 = (((i93 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866504 + ((i93 | 0) << 2) >> 2] = 0.;
			
		}
		for (i94 = 0; (((i94 | 0) < 3) | 0); i94 = (((i94 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866516 + ((i94 | 0) << 2) >> 2] = 0.;
			
		}
		for (i95 = 0; (((i95 | 0) < 3) | 0); i95 = (((i95 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866528 + ((i95 | 0) << 2) >> 2] = 0.;
			
		}
		for (i96 = 0; (((i96 | 0) < 3) | 0); i96 = (((i96 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866540 + ((i96 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869284 >> 2] = +(0.);
		for (i97 = 0; (((i97 | 0) < 524288) | 0); i97 = (((i97 | 0) + 1) | 0)) {
			HEAPF32[dsp + 2359296 + ((i97 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869288 >> 2] = +(100.);
		for (i98 = 0; (((i98 | 0) < 2) | 0); i98 = (((i98 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867320 + ((i98 | 0) << 2) >> 2] = 0.;
			
		}
		for (i99 = 0; (((i99 | 0) < 2) | 0); i99 = (((i99 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867328 + ((i99 | 0) << 2) >> 2] = 0.;
			
		}
		for (i100 = 0; (((i100 | 0) < 2) | 0); i100 = (((i100 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867336 + ((i100 | 0) << 2) >> 2] = 0.;
			
		}
		for (i101 = 0; (((i101 | 0) < 2) | 0); i101 = (((i101 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867344 + ((i101 | 0) << 2) >> 2] = 0.;
			
		}
		for (i102 = 0; (((i102 | 0) < 2) | 0); i102 = (((i102 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867352 + ((i102 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869292 >> 2] = +(0.);
		for (i103 = 0; (((i103 | 0) < 2) | 0); i103 = (((i103 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867360 + ((i103 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869296 >> 2] = +(100.);
		for (i104 = 0; (((i104 | 0) < 2) | 0); i104 = (((i104 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867368 + ((i104 | 0) << 2) >> 2] = 0.;
			
		}
		for (i105 = 0; (((i105 | 0) < 2) | 0); i105 = (((i105 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867376 + ((i105 | 0) << 2) >> 2] = 0.;
			
		}
		for (i106 = 0; (((i106 | 0) < 2048) | 0); i106 = (((i106 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14483456 + ((i106 | 0) << 2) >> 2] = 0.;
			
		}
		for (i107 = 0; (((i107 | 0) < 2) | 0); i107 = (((i107 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867384 + ((i107 | 0) << 2) >> 2] = 0.;
			
		}
		for (i108 = 0; (((i108 | 0) < 2) | 0); i108 = (((i108 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867392 + ((i108 | 0) << 2) >> 2] = 0.;
			
		}
		for (i109 = 0; (((i109 | 0) < 2048) | 0); i109 = (((i109 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14491648 + ((i109 | 0) << 2) >> 2] = 0.;
			
		}
		for (i110 = 0; (((i110 | 0) < 2) | 0); i110 = (((i110 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867400 + ((i110 | 0) << 2) >> 2] = 0.;
			
		}
		for (i111 = 0; (((i111 | 0) < 2) | 0); i111 = (((i111 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867408 + ((i111 | 0) << 2) >> 2] = 0.;
			
		}
		for (i112 = 0; (((i112 | 0) < 2048) | 0); i112 = (((i112 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14499840 + ((i112 | 0) << 2) >> 2] = 0.;
			
		}
		for (i113 = 0; (((i113 | 0) < 2) | 0); i113 = (((i113 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867416 + ((i113 | 0) << 2) >> 2] = 0.;
			
		}
		for (i114 = 0; (((i114 | 0) < 2) | 0); i114 = (((i114 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867424 + ((i114 | 0) << 2) >> 2] = 0.;
			
		}
		for (i115 = 0; (((i115 | 0) < 2048) | 0); i115 = (((i115 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14508032 + ((i115 | 0) << 2) >> 2] = 0.;
			
		}
		for (i116 = 0; (((i116 | 0) < 2) | 0); i116 = (((i116 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867432 + ((i116 | 0) << 2) >> 2] = 0.;
			
		}
		for (i117 = 0; (((i117 | 0) < 2) | 0); i117 = (((i117 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867440 + ((i117 | 0) << 2) >> 2] = 0.;
			
		}
		for (i118 = 0; (((i118 | 0) < 2048) | 0); i118 = (((i118 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14516224 + ((i118 | 0) << 2) >> 2] = 0.;
			
		}
		for (i119 = 0; (((i119 | 0) < 2) | 0); i119 = (((i119 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867448 + ((i119 | 0) << 2) >> 2] = 0.;
			
		}
		for (i120 = 0; (((i120 | 0) < 2) | 0); i120 = (((i120 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867456 + ((i120 | 0) << 2) >> 2] = 0.;
			
		}
		for (i121 = 0; (((i121 | 0) < 2048) | 0); i121 = (((i121 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14524416 + ((i121 | 0) << 2) >> 2] = 0.;
			
		}
		for (i122 = 0; (((i122 | 0) < 2) | 0); i122 = (((i122 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867464 + ((i122 | 0) << 2) >> 2] = 0.;
			
		}
		for (i123 = 0; (((i123 | 0) < 2) | 0); i123 = (((i123 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867472 + ((i123 | 0) << 2) >> 2] = 0.;
			
		}
		for (i124 = 0; (((i124 | 0) < 2048) | 0); i124 = (((i124 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14532608 + ((i124 | 0) << 2) >> 2] = 0.;
			
		}
		for (i125 = 0; (((i125 | 0) < 2) | 0); i125 = (((i125 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867480 + ((i125 | 0) << 2) >> 2] = 0.;
			
		}
		for (i126 = 0; (((i126 | 0) < 2) | 0); i126 = (((i126 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867488 + ((i126 | 0) << 2) >> 2] = 0.;
			
		}
		for (i127 = 0; (((i127 | 0) < 2048) | 0); i127 = (((i127 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14540800 + ((i127 | 0) << 2) >> 2] = 0.;
			
		}
		for (i128 = 0; (((i128 | 0) < 2) | 0); i128 = (((i128 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867496 + ((i128 | 0) << 2) >> 2] = 0.;
			
		}
		for (i129 = 0; (((i129 | 0) < 1024) | 0); i129 = (((i129 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14815232 + ((i129 | 0) << 2) >> 2] = 0.;
			
		}
		for (i130 = 0; (((i130 | 0) < 2) | 0); i130 = (((i130 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867504 + ((i130 | 0) << 2) >> 2] = 0.;
			
		}
		for (i131 = 0; (((i131 | 0) < 512) | 0); i131 = (((i131 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14839808 + ((i131 | 0) << 2) >> 2] = 0.;
			
		}
		for (i132 = 0; (((i132 | 0) < 2) | 0); i132 = (((i132 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867512 + ((i132 | 0) << 2) >> 2] = 0.;
			
		}
		for (i133 = 0; (((i133 | 0) < 512) | 0); i133 = (((i133 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14841856 + ((i133 | 0) << 2) >> 2] = 0.;
			
		}
		for (i134 = 0; (((i134 | 0) < 2) | 0); i134 = (((i134 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867520 + ((i134 | 0) << 2) >> 2] = 0.;
			
		}
		for (i135 = 0; (((i135 | 0) < 256) | 0); i135 = (((i135 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14861312 + ((i135 | 0) << 2) >> 2] = 0.;
			
		}
		for (i136 = 0; (((i136 | 0) < 2) | 0); i136 = (((i136 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867528 + ((i136 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869300 >> 2] = +(0.);
		for (i137 = 0; (((i137 | 0) < 2) | 0); i137 = (((i137 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867536 + ((i137 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869304 >> 2] = +(5.);
		for (i138 = 0; (((i138 | 0) < 2) | 0); i138 = (((i138 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867544 + ((i138 | 0) << 2) >> 2] = 0.;
			
		}
		for (i139 = 0; (((i139 | 0) < 2) | 0); i139 = (((i139 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867552 + ((i139 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869308 >> 2] = +(0.);
		for (i140 = 0; (((i140 | 0) < 2) | 0); i140 = (((i140 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867560 + ((i140 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869312 >> 2] = +(0.);
		for (i141 = 0; (((i141 | 0) < 2) | 0); i141 = (((i141 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867568 + ((i141 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869316 >> 2] = +(5.);
		for (i142 = 0; (((i142 | 0) < 2) | 0); i142 = (((i142 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867576 + ((i142 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869320 >> 2] = +(100.);
		for (i143 = 0; (((i143 | 0) < 2) | 0); i143 = (((i143 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867584 + ((i143 | 0) << 2) >> 2] = 0.;
			
		}
		for (i144 = 0; (((i144 | 0) < 2) | 0); i144 = (((i144 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867592 + ((i144 | 0) << 2) >> 2] = 0.;
			
		}
		for (i145 = 0; (((i145 | 0) < 2) | 0); i145 = (((i145 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867600 + ((i145 | 0) << 2) >> 2] = 0.;
			
		}
		for (i146 = 0; (((i146 | 0) < 2) | 0); i146 = (((i146 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867608 + ((i146 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869324 >> 2] = +(0.);
		for (i147 = 0; (((i147 | 0) < 2) | 0); i147 = (((i147 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867616 + ((i147 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869328 >> 2] = +(0.);
		for (i148 = 0; (((i148 | 0) < 2) | 0); i148 = (((i148 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867624 + ((i148 | 0) << 2) >> 2] = 0.;
			
		}
		for (i149 = 0; (((i149 | 0) < 2) | 0); i149 = (((i149 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867632 + ((i149 | 0) << 2) >> 2] = 0.;
			
		}
		for (i150 = 0; (((i150 | 0) < 2) | 0); i150 = (((i150 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867640 + ((i150 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869332 >> 2] = +(0.);
		for (i151 = 0; (((i151 | 0) < 2) | 0); i151 = (((i151 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867648 + ((i151 | 0) << 2) >> 2] = 0.;
			
		}
		for (i152 = 0; (((i152 | 0) < 2) | 0); i152 = (((i152 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867656 + ((i152 | 0) << 2) >> 2] = 0.;
			
		}
		for (i153 = 0; (((i153 | 0) < 2) | 0); i153 = (((i153 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867664 + ((i153 | 0) << 2) >> 2] = 0.;
			
		}
		for (i154 = 0; (((i154 | 0) < 2) | 0); i154 = (((i154 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867672 + ((i154 | 0) << 2) >> 2] = 0.;
			
		}
		for (i155 = 0; (((i155 | 0) < 65536) | 0); i155 = (((i155 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13369344 + ((i155 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869336 >> 2] = +(100.);
		for (i156 = 0; (((i156 | 0) < 2) | 0); i156 = (((i156 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867680 + ((i156 | 0) << 2) >> 2] = 0.;
			
		}
		for (i157 = 0; (((i157 | 0) < 2) | 0); i157 = (((i157 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867688 + ((i157 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869340 >> 2] = +(100.);
		for (i158 = 0; (((i158 | 0) < 2) | 0); i158 = (((i158 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867696 + ((i158 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869344 >> 2] = +(100.);
		for (i159 = 0; (((i159 | 0) < 2) | 0); i159 = (((i159 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867704 + ((i159 | 0) << 2) >> 2] = 0.;
			
		}
		for (i160 = 0; (((i160 | 0) < 2) | 0); i160 = (((i160 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867712 + ((i160 | 0) << 2) >> 2] = 0.;
			
		}
		for (i161 = 0; (((i161 | 0) < 2) | 0); i161 = (((i161 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867720 + ((i161 | 0) << 2) >> 2] = 0.;
			
		}
		for (i162 = 0; (((i162 | 0) < 2) | 0); i162 = (((i162 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867728 + ((i162 | 0) << 2) >> 2] = 0.;
			
		}
		for (i163 = 0; (((i163 | 0) < 2) | 0); i163 = (((i163 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867736 + ((i163 | 0) << 2) >> 2] = 0.;
			
		}
		for (i164 = 0; (((i164 | 0) < 2) | 0); i164 = (((i164 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867744 + ((i164 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869348 >> 2] = +(0.);
		for (i165 = 0; (((i165 | 0) < 2) | 0); i165 = (((i165 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867752 + ((i165 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869352 >> 2] = +(100.);
		for (i166 = 0; (((i166 | 0) < 2) | 0); i166 = (((i166 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867760 + ((i166 | 0) << 2) >> 2] = 0.;
			
		}
		for (i167 = 0; (((i167 | 0) < 3) | 0); i167 = (((i167 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866552 + ((i167 | 0) << 2) >> 2] = 0.;
			
		}
		for (i168 = 0; (((i168 | 0) < 3) | 0); i168 = (((i168 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866564 + ((i168 | 0) << 2) >> 2] = 0.;
			
		}
		for (i169 = 0; (((i169 | 0) < 3) | 0); i169 = (((i169 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866576 + ((i169 | 0) << 2) >> 2] = 0.;
			
		}
		for (i170 = 0; (((i170 | 0) < 3) | 0); i170 = (((i170 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866588 + ((i170 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869356 >> 2] = +(0.);
		for (i171 = 0; (((i171 | 0) < 524288) | 0); i171 = (((i171 | 0) + 1) | 0)) {
			HEAPF32[dsp + 4456448 + ((i171 | 0) << 2) >> 2] = 0.;
			
		}
		for (i172 = 0; (((i172 | 0) < 2) | 0); i172 = (((i172 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867768 + ((i172 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869360 >> 2] = +(0.);
		for (i173 = 0; (((i173 | 0) < 2) | 0); i173 = (((i173 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867776 + ((i173 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869364 >> 2] = +(100.);
		for (i174 = 0; (((i174 | 0) < 2) | 0); i174 = (((i174 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867784 + ((i174 | 0) << 2) >> 2] = 0.;
			
		}
		for (i175 = 0; (((i175 | 0) < 2) | 0); i175 = (((i175 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867792 + ((i175 | 0) << 2) >> 2] = 0.;
			
		}
		for (i176 = 0; (((i176 | 0) < 2048) | 0); i176 = (((i176 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14548992 + ((i176 | 0) << 2) >> 2] = 0.;
			
		}
		for (i177 = 0; (((i177 | 0) < 2) | 0); i177 = (((i177 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867800 + ((i177 | 0) << 2) >> 2] = 0.;
			
		}
		for (i178 = 0; (((i178 | 0) < 2) | 0); i178 = (((i178 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867808 + ((i178 | 0) << 2) >> 2] = 0.;
			
		}
		for (i179 = 0; (((i179 | 0) < 2048) | 0); i179 = (((i179 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14557184 + ((i179 | 0) << 2) >> 2] = 0.;
			
		}
		for (i180 = 0; (((i180 | 0) < 2) | 0); i180 = (((i180 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867816 + ((i180 | 0) << 2) >> 2] = 0.;
			
		}
		for (i181 = 0; (((i181 | 0) < 2) | 0); i181 = (((i181 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867824 + ((i181 | 0) << 2) >> 2] = 0.;
			
		}
		for (i182 = 0; (((i182 | 0) < 2048) | 0); i182 = (((i182 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14565376 + ((i182 | 0) << 2) >> 2] = 0.;
			
		}
		for (i183 = 0; (((i183 | 0) < 2) | 0); i183 = (((i183 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867832 + ((i183 | 0) << 2) >> 2] = 0.;
			
		}
		for (i184 = 0; (((i184 | 0) < 2) | 0); i184 = (((i184 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867840 + ((i184 | 0) << 2) >> 2] = 0.;
			
		}
		for (i185 = 0; (((i185 | 0) < 2048) | 0); i185 = (((i185 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14573568 + ((i185 | 0) << 2) >> 2] = 0.;
			
		}
		for (i186 = 0; (((i186 | 0) < 2) | 0); i186 = (((i186 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867848 + ((i186 | 0) << 2) >> 2] = 0.;
			
		}
		for (i187 = 0; (((i187 | 0) < 2) | 0); i187 = (((i187 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867856 + ((i187 | 0) << 2) >> 2] = 0.;
			
		}
		for (i188 = 0; (((i188 | 0) < 2048) | 0); i188 = (((i188 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14581760 + ((i188 | 0) << 2) >> 2] = 0.;
			
		}
		for (i189 = 0; (((i189 | 0) < 2) | 0); i189 = (((i189 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867864 + ((i189 | 0) << 2) >> 2] = 0.;
			
		}
		for (i190 = 0; (((i190 | 0) < 2) | 0); i190 = (((i190 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867872 + ((i190 | 0) << 2) >> 2] = 0.;
			
		}
		for (i191 = 0; (((i191 | 0) < 2048) | 0); i191 = (((i191 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14589952 + ((i191 | 0) << 2) >> 2] = 0.;
			
		}
		for (i192 = 0; (((i192 | 0) < 2) | 0); i192 = (((i192 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867880 + ((i192 | 0) << 2) >> 2] = 0.;
			
		}
		for (i193 = 0; (((i193 | 0) < 2) | 0); i193 = (((i193 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867888 + ((i193 | 0) << 2) >> 2] = 0.;
			
		}
		for (i194 = 0; (((i194 | 0) < 2048) | 0); i194 = (((i194 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14598144 + ((i194 | 0) << 2) >> 2] = 0.;
			
		}
		for (i195 = 0; (((i195 | 0) < 2) | 0); i195 = (((i195 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867896 + ((i195 | 0) << 2) >> 2] = 0.;
			
		}
		for (i196 = 0; (((i196 | 0) < 2) | 0); i196 = (((i196 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867904 + ((i196 | 0) << 2) >> 2] = 0.;
			
		}
		for (i197 = 0; (((i197 | 0) < 2048) | 0); i197 = (((i197 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14606336 + ((i197 | 0) << 2) >> 2] = 0.;
			
		}
		for (i198 = 0; (((i198 | 0) < 2) | 0); i198 = (((i198 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867912 + ((i198 | 0) << 2) >> 2] = 0.;
			
		}
		for (i199 = 0; (((i199 | 0) < 1024) | 0); i199 = (((i199 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14819328 + ((i199 | 0) << 2) >> 2] = 0.;
			
		}
		for (i200 = 0; (((i200 | 0) < 2) | 0); i200 = (((i200 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867920 + ((i200 | 0) << 2) >> 2] = 0.;
			
		}
		for (i201 = 0; (((i201 | 0) < 512) | 0); i201 = (((i201 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14843904 + ((i201 | 0) << 2) >> 2] = 0.;
			
		}
		for (i202 = 0; (((i202 | 0) < 2) | 0); i202 = (((i202 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867928 + ((i202 | 0) << 2) >> 2] = 0.;
			
		}
		for (i203 = 0; (((i203 | 0) < 512) | 0); i203 = (((i203 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14845952 + ((i203 | 0) << 2) >> 2] = 0.;
			
		}
		for (i204 = 0; (((i204 | 0) < 2) | 0); i204 = (((i204 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867936 + ((i204 | 0) << 2) >> 2] = 0.;
			
		}
		for (i205 = 0; (((i205 | 0) < 256) | 0); i205 = (((i205 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14862336 + ((i205 | 0) << 2) >> 2] = 0.;
			
		}
		for (i206 = 0; (((i206 | 0) < 2) | 0); i206 = (((i206 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867944 + ((i206 | 0) << 2) >> 2] = 0.;
			
		}
		for (i207 = 0; (((i207 | 0) < 2) | 0); i207 = (((i207 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867952 + ((i207 | 0) << 2) >> 2] = 0.;
			
		}
		for (i208 = 0; (((i208 | 0) < 2) | 0); i208 = (((i208 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867960 + ((i208 | 0) << 2) >> 2] = 0.;
			
		}
		for (i209 = 0; (((i209 | 0) < 2) | 0); i209 = (((i209 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867968 + ((i209 | 0) << 2) >> 2] = 0.;
			
		}
		for (i210 = 0; (((i210 | 0) < 2) | 0); i210 = (((i210 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867976 + ((i210 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869368 >> 2] = +(0.);
		for (i211 = 0; (((i211 | 0) < 2) | 0); i211 = (((i211 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867984 + ((i211 | 0) << 2) >> 2] = 0.;
			
		}
		for (i212 = 0; (((i212 | 0) < 65536) | 0); i212 = (((i212 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13631488 + ((i212 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869372 >> 2] = +(0.);
		for (i213 = 0; (((i213 | 0) < 2) | 0); i213 = (((i213 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14867992 + ((i213 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869376 >> 2] = +(100.);
		for (i214 = 0; (((i214 | 0) < 2) | 0); i214 = (((i214 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868000 + ((i214 | 0) << 2) >> 2] = 0.;
			
		}
		for (i215 = 0; (((i215 | 0) < 2) | 0); i215 = (((i215 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868008 + ((i215 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869380 >> 2] = +(0.);
		for (i216 = 0; (((i216 | 0) < 2) | 0); i216 = (((i216 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868016 + ((i216 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869384 >> 2] = +(100.);
		for (i217 = 0; (((i217 | 0) < 2) | 0); i217 = (((i217 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868024 + ((i217 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869388 >> 2] = +(0.);
		for (i218 = 0; (((i218 | 0) < 2) | 0); i218 = (((i218 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868032 + ((i218 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869392 >> 2] = +(100.);
		for (i219 = 0; (((i219 | 0) < 2) | 0); i219 = (((i219 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868040 + ((i219 | 0) << 2) >> 2] = 0.;
			
		}
		for (i220 = 0; (((i220 | 0) < 2) | 0); i220 = (((i220 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868048 + ((i220 | 0) << 2) >> 2] = 0.;
			
		}
		for (i221 = 0; (((i221 | 0) < 2) | 0); i221 = (((i221 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868056 + ((i221 | 0) << 2) >> 2] = 0.;
			
		}
		for (i222 = 0; (((i222 | 0) < 2) | 0); i222 = (((i222 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868064 + ((i222 | 0) << 2) >> 2] = 0.;
			
		}
		for (i223 = 0; (((i223 | 0) < 2) | 0); i223 = (((i223 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868072 + ((i223 | 0) << 2) >> 2] = 0.;
			
		}
		for (i224 = 0; (((i224 | 0) < 2) | 0); i224 = (((i224 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868080 + ((i224 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869396 >> 2] = +(100.);
		for (i225 = 0; (((i225 | 0) < 2) | 0); i225 = (((i225 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868088 + ((i225 | 0) << 2) >> 2] = 0.;
			
		}
		for (i226 = 0; (((i226 | 0) < 3) | 0); i226 = (((i226 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866600 + ((i226 | 0) << 2) >> 2] = 0.;
			
		}
		for (i227 = 0; (((i227 | 0) < 3) | 0); i227 = (((i227 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866612 + ((i227 | 0) << 2) >> 2] = 0.;
			
		}
		for (i228 = 0; (((i228 | 0) < 3) | 0); i228 = (((i228 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866624 + ((i228 | 0) << 2) >> 2] = 0.;
			
		}
		for (i229 = 0; (((i229 | 0) < 3) | 0); i229 = (((i229 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866636 + ((i229 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869400 >> 2] = +(0.);
		for (i230 = 0; (((i230 | 0) < 2) | 0); i230 = (((i230 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868096 + ((i230 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869404 >> 2] = +(0.);
		for (i231 = 0; (((i231 | 0) < 524288) | 0); i231 = (((i231 | 0) + 1) | 0)) {
			HEAPF32[dsp + 6553600 + ((i231 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869408 >> 2] = +(100.);
		for (i232 = 0; (((i232 | 0) < 2) | 0); i232 = (((i232 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868104 + ((i232 | 0) << 2) >> 2] = 0.;
			
		}
		for (i233 = 0; (((i233 | 0) < 2) | 0); i233 = (((i233 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868112 + ((i233 | 0) << 2) >> 2] = 0.;
			
		}
		for (i234 = 0; (((i234 | 0) < 2) | 0); i234 = (((i234 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868120 + ((i234 | 0) << 2) >> 2] = 0.;
			
		}
		for (i235 = 0; (((i235 | 0) < 2) | 0); i235 = (((i235 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868128 + ((i235 | 0) << 2) >> 2] = 0.;
			
		}
		for (i236 = 0; (((i236 | 0) < 2) | 0); i236 = (((i236 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868136 + ((i236 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869412 >> 2] = +(0.);
		for (i237 = 0; (((i237 | 0) < 2) | 0); i237 = (((i237 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868144 + ((i237 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869416 >> 2] = +(100.);
		for (i238 = 0; (((i238 | 0) < 2) | 0); i238 = (((i238 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868152 + ((i238 | 0) << 2) >> 2] = 0.;
			
		}
		for (i239 = 0; (((i239 | 0) < 2) | 0); i239 = (((i239 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868160 + ((i239 | 0) << 2) >> 2] = 0.;
			
		}
		for (i240 = 0; (((i240 | 0) < 2048) | 0); i240 = (((i240 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14614528 + ((i240 | 0) << 2) >> 2] = 0.;
			
		}
		for (i241 = 0; (((i241 | 0) < 2) | 0); i241 = (((i241 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868168 + ((i241 | 0) << 2) >> 2] = 0.;
			
		}
		for (i242 = 0; (((i242 | 0) < 2) | 0); i242 = (((i242 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868176 + ((i242 | 0) << 2) >> 2] = 0.;
			
		}
		for (i243 = 0; (((i243 | 0) < 2048) | 0); i243 = (((i243 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14622720 + ((i243 | 0) << 2) >> 2] = 0.;
			
		}
		for (i244 = 0; (((i244 | 0) < 2) | 0); i244 = (((i244 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868184 + ((i244 | 0) << 2) >> 2] = 0.;
			
		}
		for (i245 = 0; (((i245 | 0) < 2) | 0); i245 = (((i245 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868192 + ((i245 | 0) << 2) >> 2] = 0.;
			
		}
		for (i246 = 0; (((i246 | 0) < 2048) | 0); i246 = (((i246 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14630912 + ((i246 | 0) << 2) >> 2] = 0.;
			
		}
		for (i247 = 0; (((i247 | 0) < 2) | 0); i247 = (((i247 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868200 + ((i247 | 0) << 2) >> 2] = 0.;
			
		}
		for (i248 = 0; (((i248 | 0) < 2) | 0); i248 = (((i248 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868208 + ((i248 | 0) << 2) >> 2] = 0.;
			
		}
		for (i249 = 0; (((i249 | 0) < 2048) | 0); i249 = (((i249 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14639104 + ((i249 | 0) << 2) >> 2] = 0.;
			
		}
		for (i250 = 0; (((i250 | 0) < 2) | 0); i250 = (((i250 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868216 + ((i250 | 0) << 2) >> 2] = 0.;
			
		}
		for (i251 = 0; (((i251 | 0) < 2) | 0); i251 = (((i251 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868224 + ((i251 | 0) << 2) >> 2] = 0.;
			
		}
		for (i252 = 0; (((i252 | 0) < 2048) | 0); i252 = (((i252 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14647296 + ((i252 | 0) << 2) >> 2] = 0.;
			
		}
		for (i253 = 0; (((i253 | 0) < 2) | 0); i253 = (((i253 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868232 + ((i253 | 0) << 2) >> 2] = 0.;
			
		}
		for (i254 = 0; (((i254 | 0) < 2) | 0); i254 = (((i254 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868240 + ((i254 | 0) << 2) >> 2] = 0.;
			
		}
		for (i255 = 0; (((i255 | 0) < 2048) | 0); i255 = (((i255 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14655488 + ((i255 | 0) << 2) >> 2] = 0.;
			
		}
		for (i256 = 0; (((i256 | 0) < 2) | 0); i256 = (((i256 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868248 + ((i256 | 0) << 2) >> 2] = 0.;
			
		}
		for (i257 = 0; (((i257 | 0) < 2) | 0); i257 = (((i257 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868256 + ((i257 | 0) << 2) >> 2] = 0.;
			
		}
		for (i258 = 0; (((i258 | 0) < 2048) | 0); i258 = (((i258 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14663680 + ((i258 | 0) << 2) >> 2] = 0.;
			
		}
		for (i259 = 0; (((i259 | 0) < 2) | 0); i259 = (((i259 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868264 + ((i259 | 0) << 2) >> 2] = 0.;
			
		}
		for (i260 = 0; (((i260 | 0) < 2) | 0); i260 = (((i260 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868272 + ((i260 | 0) << 2) >> 2] = 0.;
			
		}
		for (i261 = 0; (((i261 | 0) < 2048) | 0); i261 = (((i261 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14671872 + ((i261 | 0) << 2) >> 2] = 0.;
			
		}
		for (i262 = 0; (((i262 | 0) < 2) | 0); i262 = (((i262 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868280 + ((i262 | 0) << 2) >> 2] = 0.;
			
		}
		for (i263 = 0; (((i263 | 0) < 1024) | 0); i263 = (((i263 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14823424 + ((i263 | 0) << 2) >> 2] = 0.;
			
		}
		for (i264 = 0; (((i264 | 0) < 2) | 0); i264 = (((i264 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868288 + ((i264 | 0) << 2) >> 2] = 0.;
			
		}
		for (i265 = 0; (((i265 | 0) < 512) | 0); i265 = (((i265 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14848000 + ((i265 | 0) << 2) >> 2] = 0.;
			
		}
		for (i266 = 0; (((i266 | 0) < 2) | 0); i266 = (((i266 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868296 + ((i266 | 0) << 2) >> 2] = 0.;
			
		}
		for (i267 = 0; (((i267 | 0) < 512) | 0); i267 = (((i267 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14850048 + ((i267 | 0) << 2) >> 2] = 0.;
			
		}
		for (i268 = 0; (((i268 | 0) < 2) | 0); i268 = (((i268 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868304 + ((i268 | 0) << 2) >> 2] = 0.;
			
		}
		for (i269 = 0; (((i269 | 0) < 256) | 0); i269 = (((i269 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14863360 + ((i269 | 0) << 2) >> 2] = 0.;
			
		}
		for (i270 = 0; (((i270 | 0) < 2) | 0); i270 = (((i270 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868312 + ((i270 | 0) << 2) >> 2] = 0.;
			
		}
		for (i271 = 0; (((i271 | 0) < 2) | 0); i271 = (((i271 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868320 + ((i271 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869420 >> 2] = +(5.);
		for (i272 = 0; (((i272 | 0) < 2) | 0); i272 = (((i272 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868328 + ((i272 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869424 >> 2] = +(0.);
		for (i273 = 0; (((i273 | 0) < 2) | 0); i273 = (((i273 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868336 + ((i273 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869428 >> 2] = +(0.);
		for (i274 = 0; (((i274 | 0) < 2) | 0); i274 = (((i274 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868344 + ((i274 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869432 >> 2] = +(5.);
		for (i275 = 0; (((i275 | 0) < 2) | 0); i275 = (((i275 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868352 + ((i275 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869436 >> 2] = +(0.);
		for (i276 = 0; (((i276 | 0) < 2) | 0); i276 = (((i276 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868360 + ((i276 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869440 >> 2] = +(100.);
		for (i277 = 0; (((i277 | 0) < 2) | 0); i277 = (((i277 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868368 + ((i277 | 0) << 2) >> 2] = 0.;
			
		}
		for (i278 = 0; (((i278 | 0) < 2) | 0); i278 = (((i278 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868376 + ((i278 | 0) << 2) >> 2] = 0.;
			
		}
		for (i279 = 0; (((i279 | 0) < 2) | 0); i279 = (((i279 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868384 + ((i279 | 0) << 2) >> 2] = 0.;
			
		}
		for (i280 = 0; (((i280 | 0) < 2) | 0); i280 = (((i280 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868392 + ((i280 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869444 >> 2] = +(0.);
		for (i281 = 0; (((i281 | 0) < 2) | 0); i281 = (((i281 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868400 + ((i281 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869448 >> 2] = +(0.);
		for (i282 = 0; (((i282 | 0) < 2) | 0); i282 = (((i282 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868408 + ((i282 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869452 >> 2] = +(0.);
		for (i283 = 0; (((i283 | 0) < 2) | 0); i283 = (((i283 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868416 + ((i283 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869456 >> 2] = +(0.);
		for (i284 = 0; (((i284 | 0) < 2) | 0); i284 = (((i284 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868424 + ((i284 | 0) << 2) >> 2] = 0.;
			
		}
		for (i285 = 0; (((i285 | 0) < 2) | 0); i285 = (((i285 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868432 + ((i285 | 0) << 2) >> 2] = 0.;
			
		}
		for (i286 = 0; (((i286 | 0) < 2) | 0); i286 = (((i286 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868440 + ((i286 | 0) << 2) >> 2] = 0.;
			
		}
		for (i287 = 0; (((i287 | 0) < 2) | 0); i287 = (((i287 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868448 + ((i287 | 0) << 2) >> 2] = 0.;
			
		}
		for (i288 = 0; (((i288 | 0) < 2) | 0); i288 = (((i288 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868456 + ((i288 | 0) << 2) >> 2] = 0.;
			
		}
		for (i289 = 0; (((i289 | 0) < 2) | 0); i289 = (((i289 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868464 + ((i289 | 0) << 2) >> 2] = 0.;
			
		}
		for (i290 = 0; (((i290 | 0) < 65536) | 0); i290 = (((i290 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13893632 + ((i290 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869460 >> 2] = +(100.);
		for (i291 = 0; (((i291 | 0) < 2) | 0); i291 = (((i291 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868472 + ((i291 | 0) << 2) >> 2] = 0.;
			
		}
		for (i292 = 0; (((i292 | 0) < 2) | 0); i292 = (((i292 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868480 + ((i292 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869464 >> 2] = +(100.);
		for (i293 = 0; (((i293 | 0) < 2) | 0); i293 = (((i293 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868488 + ((i293 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869468 >> 2] = +(100.);
		for (i294 = 0; (((i294 | 0) < 2) | 0); i294 = (((i294 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868496 + ((i294 | 0) << 2) >> 2] = 0.;
			
		}
		for (i295 = 0; (((i295 | 0) < 2) | 0); i295 = (((i295 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868504 + ((i295 | 0) << 2) >> 2] = 0.;
			
		}
		for (i296 = 0; (((i296 | 0) < 2) | 0); i296 = (((i296 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868512 + ((i296 | 0) << 2) >> 2] = 0.;
			
		}
		for (i297 = 0; (((i297 | 0) < 2) | 0); i297 = (((i297 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868520 + ((i297 | 0) << 2) >> 2] = 0.;
			
		}
		for (i298 = 0; (((i298 | 0) < 2) | 0); i298 = (((i298 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868528 + ((i298 | 0) << 2) >> 2] = 0.;
			
		}
		for (i299 = 0; (((i299 | 0) < 2) | 0); i299 = (((i299 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868536 + ((i299 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869472 >> 2] = +(100.);
		for (i300 = 0; (((i300 | 0) < 2) | 0); i300 = (((i300 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868544 + ((i300 | 0) << 2) >> 2] = 0.;
			
		}
		for (i301 = 0; (((i301 | 0) < 3) | 0); i301 = (((i301 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866648 + ((i301 | 0) << 2) >> 2] = 0.;
			
		}
		for (i302 = 0; (((i302 | 0) < 3) | 0); i302 = (((i302 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866660 + ((i302 | 0) << 2) >> 2] = 0.;
			
		}
		for (i303 = 0; (((i303 | 0) < 3) | 0); i303 = (((i303 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866672 + ((i303 | 0) << 2) >> 2] = 0.;
			
		}
		for (i304 = 0; (((i304 | 0) < 3) | 0); i304 = (((i304 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866684 + ((i304 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869476 >> 2] = +(0.);
		for (i305 = 0; (((i305 | 0) < 524288) | 0); i305 = (((i305 | 0) + 1) | 0)) {
			HEAPF32[dsp + 8650752 + ((i305 | 0) << 2) >> 2] = 0.;
			
		}
		for (i306 = 0; (((i306 | 0) < 2) | 0); i306 = (((i306 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868552 + ((i306 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869480 >> 2] = +(0.);
		for (i307 = 0; (((i307 | 0) < 2) | 0); i307 = (((i307 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868560 + ((i307 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869484 >> 2] = +(100.);
		for (i308 = 0; (((i308 | 0) < 2) | 0); i308 = (((i308 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868568 + ((i308 | 0) << 2) >> 2] = 0.;
			
		}
		for (i309 = 0; (((i309 | 0) < 2) | 0); i309 = (((i309 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868576 + ((i309 | 0) << 2) >> 2] = 0.;
			
		}
		for (i310 = 0; (((i310 | 0) < 2048) | 0); i310 = (((i310 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14680064 + ((i310 | 0) << 2) >> 2] = 0.;
			
		}
		for (i311 = 0; (((i311 | 0) < 2) | 0); i311 = (((i311 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868584 + ((i311 | 0) << 2) >> 2] = 0.;
			
		}
		for (i312 = 0; (((i312 | 0) < 2) | 0); i312 = (((i312 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868592 + ((i312 | 0) << 2) >> 2] = 0.;
			
		}
		for (i313 = 0; (((i313 | 0) < 2048) | 0); i313 = (((i313 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14688256 + ((i313 | 0) << 2) >> 2] = 0.;
			
		}
		for (i314 = 0; (((i314 | 0) < 2) | 0); i314 = (((i314 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868600 + ((i314 | 0) << 2) >> 2] = 0.;
			
		}
		for (i315 = 0; (((i315 | 0) < 2) | 0); i315 = (((i315 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868608 + ((i315 | 0) << 2) >> 2] = 0.;
			
		}
		for (i316 = 0; (((i316 | 0) < 2048) | 0); i316 = (((i316 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14696448 + ((i316 | 0) << 2) >> 2] = 0.;
			
		}
		for (i317 = 0; (((i317 | 0) < 2) | 0); i317 = (((i317 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868616 + ((i317 | 0) << 2) >> 2] = 0.;
			
		}
		for (i318 = 0; (((i318 | 0) < 2) | 0); i318 = (((i318 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868624 + ((i318 | 0) << 2) >> 2] = 0.;
			
		}
		for (i319 = 0; (((i319 | 0) < 2048) | 0); i319 = (((i319 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14704640 + ((i319 | 0) << 2) >> 2] = 0.;
			
		}
		for (i320 = 0; (((i320 | 0) < 2) | 0); i320 = (((i320 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868632 + ((i320 | 0) << 2) >> 2] = 0.;
			
		}
		for (i321 = 0; (((i321 | 0) < 2) | 0); i321 = (((i321 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868640 + ((i321 | 0) << 2) >> 2] = 0.;
			
		}
		for (i322 = 0; (((i322 | 0) < 2048) | 0); i322 = (((i322 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14712832 + ((i322 | 0) << 2) >> 2] = 0.;
			
		}
		for (i323 = 0; (((i323 | 0) < 2) | 0); i323 = (((i323 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868648 + ((i323 | 0) << 2) >> 2] = 0.;
			
		}
		for (i324 = 0; (((i324 | 0) < 2) | 0); i324 = (((i324 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868656 + ((i324 | 0) << 2) >> 2] = 0.;
			
		}
		for (i325 = 0; (((i325 | 0) < 2048) | 0); i325 = (((i325 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14721024 + ((i325 | 0) << 2) >> 2] = 0.;
			
		}
		for (i326 = 0; (((i326 | 0) < 2) | 0); i326 = (((i326 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868664 + ((i326 | 0) << 2) >> 2] = 0.;
			
		}
		for (i327 = 0; (((i327 | 0) < 2) | 0); i327 = (((i327 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868672 + ((i327 | 0) << 2) >> 2] = 0.;
			
		}
		for (i328 = 0; (((i328 | 0) < 2048) | 0); i328 = (((i328 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14729216 + ((i328 | 0) << 2) >> 2] = 0.;
			
		}
		for (i329 = 0; (((i329 | 0) < 2) | 0); i329 = (((i329 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868680 + ((i329 | 0) << 2) >> 2] = 0.;
			
		}
		for (i330 = 0; (((i330 | 0) < 2) | 0); i330 = (((i330 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868688 + ((i330 | 0) << 2) >> 2] = 0.;
			
		}
		for (i331 = 0; (((i331 | 0) < 2048) | 0); i331 = (((i331 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14737408 + ((i331 | 0) << 2) >> 2] = 0.;
			
		}
		for (i332 = 0; (((i332 | 0) < 2) | 0); i332 = (((i332 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868696 + ((i332 | 0) << 2) >> 2] = 0.;
			
		}
		for (i333 = 0; (((i333 | 0) < 1024) | 0); i333 = (((i333 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14827520 + ((i333 | 0) << 2) >> 2] = 0.;
			
		}
		for (i334 = 0; (((i334 | 0) < 2) | 0); i334 = (((i334 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868704 + ((i334 | 0) << 2) >> 2] = 0.;
			
		}
		for (i335 = 0; (((i335 | 0) < 512) | 0); i335 = (((i335 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14852096 + ((i335 | 0) << 2) >> 2] = 0.;
			
		}
		for (i336 = 0; (((i336 | 0) < 2) | 0); i336 = (((i336 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868712 + ((i336 | 0) << 2) >> 2] = 0.;
			
		}
		for (i337 = 0; (((i337 | 0) < 512) | 0); i337 = (((i337 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14854144 + ((i337 | 0) << 2) >> 2] = 0.;
			
		}
		for (i338 = 0; (((i338 | 0) < 2) | 0); i338 = (((i338 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868720 + ((i338 | 0) << 2) >> 2] = 0.;
			
		}
		for (i339 = 0; (((i339 | 0) < 256) | 0); i339 = (((i339 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14864384 + ((i339 | 0) << 2) >> 2] = 0.;
			
		}
		for (i340 = 0; (((i340 | 0) < 2) | 0); i340 = (((i340 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868728 + ((i340 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869488 >> 2] = +(100.);
		for (i341 = 0; (((i341 | 0) < 2) | 0); i341 = (((i341 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868736 + ((i341 | 0) << 2) >> 2] = 0.;
			
		}
		for (i342 = 0; (((i342 | 0) < 2) | 0); i342 = (((i342 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868744 + ((i342 | 0) << 2) >> 2] = 0.;
			
		}
		for (i343 = 0; (((i343 | 0) < 2) | 0); i343 = (((i343 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868752 + ((i343 | 0) << 2) >> 2] = 0.;
			
		}
		for (i344 = 0; (((i344 | 0) < 2) | 0); i344 = (((i344 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868760 + ((i344 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869492 >> 2] = +(0.);
		for (i345 = 0; (((i345 | 0) < 2) | 0); i345 = (((i345 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868768 + ((i345 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869496 >> 2] = +(0.);
		for (i346 = 0; (((i346 | 0) < 2) | 0); i346 = (((i346 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868776 + ((i346 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869500 >> 2] = +(0.);
		for (i347 = 0; (((i347 | 0) < 2) | 0); i347 = (((i347 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868784 + ((i347 | 0) << 2) >> 2] = 0.;
			
		}
		for (i348 = 0; (((i348 | 0) < 2) | 0); i348 = (((i348 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868792 + ((i348 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869504 >> 2] = +(0.);
		for (i349 = 0; (((i349 | 0) < 2) | 0); i349 = (((i349 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868800 + ((i349 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869508 >> 2] = +(0.);
		for (i350 = 0; (((i350 | 0) < 2) | 0); i350 = (((i350 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868808 + ((i350 | 0) << 2) >> 2] = 0.;
			
		}
		for (i351 = 0; (((i351 | 0) < 2) | 0); i351 = (((i351 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868816 + ((i351 | 0) << 2) >> 2] = 0.;
			
		}
		for (i352 = 0; (((i352 | 0) < 2) | 0); i352 = (((i352 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868824 + ((i352 | 0) << 2) >> 2] = 0.;
			
		}
		for (i353 = 0; (((i353 | 0) < 2) | 0); i353 = (((i353 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868832 + ((i353 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869512 >> 2] = +(100.);
		for (i354 = 0; (((i354 | 0) < 2) | 0); i354 = (((i354 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868840 + ((i354 | 0) << 2) >> 2] = 0.;
			
		}
		for (i355 = 0; (((i355 | 0) < 2) | 0); i355 = (((i355 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868848 + ((i355 | 0) << 2) >> 2] = 0.;
			
		}
		for (i356 = 0; (((i356 | 0) < 65536) | 0); i356 = (((i356 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14155776 + ((i356 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869516 >> 2] = +(100.);
		for (i357 = 0; (((i357 | 0) < 2) | 0); i357 = (((i357 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868856 + ((i357 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869520 >> 2] = +(100.);
		for (i358 = 0; (((i358 | 0) < 2) | 0); i358 = (((i358 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868864 + ((i358 | 0) << 2) >> 2] = 0.;
			
		}
		for (i359 = 0; (((i359 | 0) < 2) | 0); i359 = (((i359 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868872 + ((i359 | 0) << 2) >> 2] = 0.;
			
		}
		for (i360 = 0; (((i360 | 0) < 2) | 0); i360 = (((i360 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868880 + ((i360 | 0) << 2) >> 2] = 0.;
			
		}
		for (i361 = 0; (((i361 | 0) < 2) | 0); i361 = (((i361 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868888 + ((i361 | 0) << 2) >> 2] = 0.;
			
		}
		for (i362 = 0; (((i362 | 0) < 2) | 0); i362 = (((i362 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868896 + ((i362 | 0) << 2) >> 2] = 0.;
			
		}
		for (i363 = 0; (((i363 | 0) < 2) | 0); i363 = (((i363 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868904 + ((i363 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869524 >> 2] = +(100.);
		for (i364 = 0; (((i364 | 0) < 2) | 0); i364 = (((i364 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868912 + ((i364 | 0) << 2) >> 2] = 0.;
			
		}
		for (i365 = 0; (((i365 | 0) < 3) | 0); i365 = (((i365 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866696 + ((i365 | 0) << 2) >> 2] = 0.;
			
		}
		for (i366 = 0; (((i366 | 0) < 3) | 0); i366 = (((i366 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866708 + ((i366 | 0) << 2) >> 2] = 0.;
			
		}
		for (i367 = 0; (((i367 | 0) < 3) | 0); i367 = (((i367 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866720 + ((i367 | 0) << 2) >> 2] = 0.;
			
		}
		for (i368 = 0; (((i368 | 0) < 3) | 0); i368 = (((i368 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866732 + ((i368 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869528 >> 2] = +(0.);
		for (i369 = 0; (((i369 | 0) < 524288) | 0); i369 = (((i369 | 0) + 1) | 0)) {
			HEAPF32[dsp + 10747904 + ((i369 | 0) << 2) >> 2] = 0.;
			
		}
		for (i370 = 0; (((i370 | 0) < 2) | 0); i370 = (((i370 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868920 + ((i370 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869532 >> 2] = +(0.);
		for (i371 = 0; (((i371 | 0) < 2) | 0); i371 = (((i371 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868928 + ((i371 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869536 >> 2] = +(100.);
		for (i372 = 0; (((i372 | 0) < 2) | 0); i372 = (((i372 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868936 + ((i372 | 0) << 2) >> 2] = 0.;
			
		}
		for (i373 = 0; (((i373 | 0) < 2) | 0); i373 = (((i373 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868944 + ((i373 | 0) << 2) >> 2] = 0.;
			
		}
		for (i374 = 0; (((i374 | 0) < 2048) | 0); i374 = (((i374 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14745600 + ((i374 | 0) << 2) >> 2] = 0.;
			
		}
		for (i375 = 0; (((i375 | 0) < 2) | 0); i375 = (((i375 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868952 + ((i375 | 0) << 2) >> 2] = 0.;
			
		}
		for (i376 = 0; (((i376 | 0) < 2) | 0); i376 = (((i376 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868960 + ((i376 | 0) << 2) >> 2] = 0.;
			
		}
		for (i377 = 0; (((i377 | 0) < 2048) | 0); i377 = (((i377 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14753792 + ((i377 | 0) << 2) >> 2] = 0.;
			
		}
		for (i378 = 0; (((i378 | 0) < 2) | 0); i378 = (((i378 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868968 + ((i378 | 0) << 2) >> 2] = 0.;
			
		}
		for (i379 = 0; (((i379 | 0) < 2) | 0); i379 = (((i379 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868976 + ((i379 | 0) << 2) >> 2] = 0.;
			
		}
		for (i380 = 0; (((i380 | 0) < 2048) | 0); i380 = (((i380 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14761984 + ((i380 | 0) << 2) >> 2] = 0.;
			
		}
		for (i381 = 0; (((i381 | 0) < 2) | 0); i381 = (((i381 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868984 + ((i381 | 0) << 2) >> 2] = 0.;
			
		}
		for (i382 = 0; (((i382 | 0) < 2) | 0); i382 = (((i382 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14868992 + ((i382 | 0) << 2) >> 2] = 0.;
			
		}
		for (i383 = 0; (((i383 | 0) < 2048) | 0); i383 = (((i383 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14770176 + ((i383 | 0) << 2) >> 2] = 0.;
			
		}
		for (i384 = 0; (((i384 | 0) < 2) | 0); i384 = (((i384 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869000 + ((i384 | 0) << 2) >> 2] = 0.;
			
		}
		for (i385 = 0; (((i385 | 0) < 2) | 0); i385 = (((i385 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869008 + ((i385 | 0) << 2) >> 2] = 0.;
			
		}
		for (i386 = 0; (((i386 | 0) < 2048) | 0); i386 = (((i386 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14778368 + ((i386 | 0) << 2) >> 2] = 0.;
			
		}
		for (i387 = 0; (((i387 | 0) < 2) | 0); i387 = (((i387 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869016 + ((i387 | 0) << 2) >> 2] = 0.;
			
		}
		for (i388 = 0; (((i388 | 0) < 2) | 0); i388 = (((i388 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869024 + ((i388 | 0) << 2) >> 2] = 0.;
			
		}
		for (i389 = 0; (((i389 | 0) < 2048) | 0); i389 = (((i389 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14786560 + ((i389 | 0) << 2) >> 2] = 0.;
			
		}
		for (i390 = 0; (((i390 | 0) < 2) | 0); i390 = (((i390 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869032 + ((i390 | 0) << 2) >> 2] = 0.;
			
		}
		for (i391 = 0; (((i391 | 0) < 2) | 0); i391 = (((i391 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869040 + ((i391 | 0) << 2) >> 2] = 0.;
			
		}
		for (i392 = 0; (((i392 | 0) < 2048) | 0); i392 = (((i392 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14794752 + ((i392 | 0) << 2) >> 2] = 0.;
			
		}
		for (i393 = 0; (((i393 | 0) < 2) | 0); i393 = (((i393 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869048 + ((i393 | 0) << 2) >> 2] = 0.;
			
		}
		for (i394 = 0; (((i394 | 0) < 2) | 0); i394 = (((i394 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869056 + ((i394 | 0) << 2) >> 2] = 0.;
			
		}
		for (i395 = 0; (((i395 | 0) < 2048) | 0); i395 = (((i395 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14802944 + ((i395 | 0) << 2) >> 2] = 0.;
			
		}
		for (i396 = 0; (((i396 | 0) < 2) | 0); i396 = (((i396 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869064 + ((i396 | 0) << 2) >> 2] = 0.;
			
		}
		for (i397 = 0; (((i397 | 0) < 1024) | 0); i397 = (((i397 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14831616 + ((i397 | 0) << 2) >> 2] = 0.;
			
		}
		for (i398 = 0; (((i398 | 0) < 2) | 0); i398 = (((i398 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869072 + ((i398 | 0) << 2) >> 2] = 0.;
			
		}
		for (i399 = 0; (((i399 | 0) < 512) | 0); i399 = (((i399 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14856192 + ((i399 | 0) << 2) >> 2] = 0.;
			
		}
		for (i400 = 0; (((i400 | 0) < 2) | 0); i400 = (((i400 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869080 + ((i400 | 0) << 2) >> 2] = 0.;
			
		}
		for (i401 = 0; (((i401 | 0) < 512) | 0); i401 = (((i401 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14858240 + ((i401 | 0) << 2) >> 2] = 0.;
			
		}
		for (i402 = 0; (((i402 | 0) < 2) | 0); i402 = (((i402 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869088 + ((i402 | 0) << 2) >> 2] = 0.;
			
		}
		for (i403 = 0; (((i403 | 0) < 256) | 0); i403 = (((i403 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14865408 + ((i403 | 0) << 2) >> 2] = 0.;
			
		}
		for (i404 = 0; (((i404 | 0) < 2) | 0); i404 = (((i404 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869096 + ((i404 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869540 >> 2] = +(0.);
		for (i405 = 0; (((i405 | 0) < 2) | 0); i405 = (((i405 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869104 + ((i405 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 14869544 >> 2] = +(5.);
		for (i406 = 0; (((i406 | 0) < 2) | 0); i406 = (((i406 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869112 + ((i406 | 0) << 2) >> 2] = 0.;
			
		}
		for (i407 = 0; (((i407 | 0) < 2) | 0); i407 = (((i407 | 0) + 1) | 0)) {
			HEAPF32[dsp + 14869120 + ((i407 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function setValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF32[dsp + offset >> 2] = value;
	}
	
	function getValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +HEAPF32[dsp + offset >> 2];
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var fSlow32 = 0.;
		var fSlow33 = 0.;
		var fSlow34 = 0.;
		var fSlow35 = 0.;
		var fSlow36 = 0.;
		var fSlow37 = 0.;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var fSlow64 = 0.;
		var fSlow65 = 0.;
		var fSlow66 = 0.;
		var fSlow67 = 0.;
		var fSlow68 = 0.;
		var fSlow69 = 0.;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var fSlow85 = 0.;
		var fSlow86 = 0.;
		var fSlow87 = 0.;
		var fSlow88 = 0.;
		var fSlow89 = 0.;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var fSlow92 = 0.;
		var fSlow93 = 0.;
		var fSlow94 = 0.;
		var fSlow95 = 0.;
		var fSlow96 = 0.;
		var fSlow97 = 0.;
		var fSlow98 = 0.;
		var fSlow99 = 0.;
		var fSlow100 = 0.;
		var fSlow101 = 0.;
		var i = 0;
		var fSel0 = 0.;
		var fSel1 = 0.;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fSel2 = 0.;
		var iTemp2 = 0;
		var iTemp3 = 0;
		var iTemp4 = 0;
		var fSel3 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var iTemp7 = 0;
		var iTemp8 = 0;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var iTemp11 = 0;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fRec43 = 0.;
		var fRec41 = 0.;
		var fRec39 = 0.;
		var fRec37 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var iTemp38 = 0;
		var iTemp39 = 0;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fTemp62 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var fTemp69 = 0.;
		var fTemp70 = 0.;
		var fTemp71 = 0.;
		var fTemp72 = 0.;
		var fSel4 = 0.;
		var fTemp73 = 0.;
		var fSel5 = 0.;
		var fTemp74 = 0.;
		var fTemp75 = 0.;
		var iTemp76 = 0;
		var iTemp77 = 0;
		var fTemp78 = 0.;
		var fTemp79 = 0.;
		var iTemp80 = 0;
		var fTemp81 = 0.;
		var fTemp82 = 0.;
		var fTemp83 = 0.;
		var fTemp84 = 0.;
		var fTemp85 = 0.;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fTemp89 = 0.;
		var fTemp90 = 0.;
		var fTemp91 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fTemp94 = 0.;
		var fTemp95 = 0.;
		var fTemp96 = 0.;
		var fTemp97 = 0.;
		var fTemp98 = 0.;
		var fTemp99 = 0.;
		var fSel6 = 0.;
		var fSel7 = 0.;
		var fTemp100 = 0.;
		var fTemp101 = 0.;
		var fTemp102 = 0.;
		var fRec99 = 0.;
		var fRec97 = 0.;
		var fRec95 = 0.;
		var fRec93 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var iTemp105 = 0;
		var iTemp106 = 0;
		var fTemp107 = 0.;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var fTemp111 = 0.;
		var fTemp112 = 0.;
		var fTemp113 = 0.;
		var fTemp114 = 0.;
		var fTemp115 = 0.;
		var fTemp116 = 0.;
		var fTemp117 = 0.;
		var fTemp118 = 0.;
		var fTemp119 = 0.;
		var fTemp120 = 0.;
		var fTemp121 = 0.;
		var fTemp122 = 0.;
		var fTemp123 = 0.;
		var fTemp124 = 0.;
		var fTemp125 = 0.;
		var fTemp126 = 0.;
		var fTemp127 = 0.;
		var fTemp128 = 0.;
		var fTemp129 = 0.;
		var fTemp130 = 0.;
		var fTemp131 = 0.;
		var fTemp132 = 0.;
		var fTemp133 = 0.;
		var fTemp134 = 0.;
		var fTemp135 = 0.;
		var fTemp136 = 0.;
		var fTemp137 = 0.;
		var fTemp138 = 0.;
		var fTemp139 = 0.;
		var fTemp140 = 0.;
		var iTemp141 = 0;
		var iTemp142 = 0;
		var fTemp143 = 0.;
		var fTemp144 = 0.;
		var fTemp145 = 0.;
		var fTemp146 = 0.;
		var fTemp147 = 0.;
		var fTemp148 = 0.;
		var fTemp149 = 0.;
		var fTemp150 = 0.;
		var fTemp151 = 0.;
		var fTemp152 = 0.;
		var fTemp153 = 0.;
		var fTemp154 = 0.;
		var fTemp155 = 0.;
		var fTemp156 = 0.;
		var fTemp157 = 0.;
		var fTemp158 = 0.;
		var fTemp159 = 0.;
		var fTemp160 = 0.;
		var fTemp161 = 0.;
		var fTemp162 = 0.;
		var fTemp163 = 0.;
		var fTemp164 = 0.;
		var fTemp165 = 0.;
		var fTemp166 = 0.;
		var fTemp167 = 0.;
		var fTemp168 = 0.;
		var fTemp169 = 0.;
		var fTemp170 = 0.;
		var fSel8 = 0.;
		var fSel9 = 0.;
		var fTemp171 = 0.;
		var fSel10 = 0.;
		var fTemp172 = 0.;
		var fSel11 = 0.;
		var fTemp173 = 0.;
		var fTemp174 = 0.;
		var iTemp175 = 0;
		var iTemp176 = 0;
		var fTemp177 = 0.;
		var fTemp178 = 0.;
		var iTemp179 = 0;
		var fTemp180 = 0.;
		var fTemp181 = 0.;
		var fTemp182 = 0.;
		var fTemp183 = 0.;
		var fTemp184 = 0.;
		var fTemp185 = 0.;
		var fTemp186 = 0.;
		var fTemp187 = 0.;
		var fTemp188 = 0.;
		var fTemp189 = 0.;
		var fTemp190 = 0.;
		var fTemp191 = 0.;
		var fTemp192 = 0.;
		var fTemp193 = 0.;
		var fTemp194 = 0.;
		var fTemp195 = 0.;
		var fTemp196 = 0.;
		var fTemp197 = 0.;
		var fTemp198 = 0.;
		var fTemp199 = 0.;
		var fTemp200 = 0.;
		var fTemp201 = 0.;
		var fTemp202 = 0.;
		var fTemp203 = 0.;
		var fRec159 = 0.;
		var fRec157 = 0.;
		var fRec155 = 0.;
		var fRec153 = 0.;
		var fTemp204 = 0.;
		var fTemp205 = 0.;
		var fTemp206 = 0.;
		var fTemp207 = 0.;
		var fSel12 = 0.;
		var fTemp208 = 0.;
		var fSel13 = 0.;
		var fTemp209 = 0.;
		var iTemp210 = 0;
		var iTemp211 = 0;
		var fTemp212 = 0.;
		var fTemp213 = 0.;
		var iTemp214 = 0;
		var fTemp215 = 0.;
		var fTemp216 = 0.;
		var fTemp217 = 0.;
		var fTemp218 = 0.;
		var fTemp219 = 0.;
		var fTemp220 = 0.;
		var fTemp221 = 0.;
		var fTemp222 = 0.;
		var fTemp223 = 0.;
		var fTemp224 = 0.;
		var fTemp225 = 0.;
		var fTemp226 = 0.;
		var fTemp227 = 0.;
		var fTemp228 = 0.;
		var fTemp229 = 0.;
		var fTemp230 = 0.;
		var fTemp231 = 0.;
		var fTemp232 = 0.;
		var fTemp233 = 0.;
		var fTemp234 = 0.;
		var fSel14 = 0.;
		var fSel15 = 0.;
		var fTemp235 = 0.;
		var fTemp236 = 0.;
		var fTemp237 = 0.;
		var fRec213 = 0.;
		var fRec211 = 0.;
		var fRec209 = 0.;
		var fRec207 = 0.;
		var fTemp238 = 0.;
		var fTemp239 = 0.;
		var iTemp240 = 0;
		var iTemp241 = 0;
		var fTemp242 = 0.;
		var fTemp243 = 0.;
		var fTemp244 = 0.;
		var fTemp245 = 0.;
		var fTemp246 = 0.;
		var fTemp247 = 0.;
		var fTemp248 = 0.;
		var fTemp249 = 0.;
		var fTemp250 = 0.;
		var fTemp251 = 0.;
		var fTemp252 = 0.;
		var fTemp253 = 0.;
		var fTemp254 = 0.;
		var fTemp255 = 0.;
		var fTemp256 = 0.;
		var fTemp257 = 0.;
		var fTemp258 = 0.;
		var fTemp259 = 0.;
		var fTemp260 = 0.;
		var fTemp261 = 0.;
		var fTemp262 = 0.;
		var fTemp263 = 0.;
		var fTemp264 = 0.;
		var fTemp265 = 0.;
		var fTemp266 = 0.;
		var fTemp267 = 0.;
		var fTemp268 = 0.;
		var fTemp269 = 0.;
		var fTemp270 = 0.;
		var fTemp271 = 0.;
		var fTemp272 = 0.;
		var fTemp273 = 0.;
		var fTemp274 = 0.;
		var iTemp275 = 0;
		var iTemp276 = 0;
		var fTemp277 = 0.;
		var fTemp278 = 0.;
		var fTemp279 = 0.;
		var fTemp280 = 0.;
		var fTemp281 = 0.;
		var fTemp282 = 0.;
		var fTemp283 = 0.;
		var fTemp284 = 0.;
		var fTemp285 = 0.;
		var fTemp286 = 0.;
		var fTemp287 = 0.;
		var fTemp288 = 0.;
		var fTemp289 = 0.;
		var fTemp290 = 0.;
		var fTemp291 = 0.;
		var fTemp292 = 0.;
		var fTemp293 = 0.;
		var fTemp294 = 0.;
		var fTemp295 = 0.;
		var fTemp296 = 0.;
		var fTemp297 = 0.;
		var fTemp298 = 0.;
		var fTemp299 = 0.;
		var fTemp300 = 0.;
		var fTemp301 = 0.;
		var fTemp302 = 0.;
		var fTemp303 = 0.;
		var fTemp304 = 0.;
		var fTemp305 = 0.;
		var fSel16 = 0.;
		var fSel17 = 0.;
		var fTemp306 = 0.;
		var fSel18 = 0.;
		var fSel19 = 0.;
		var fTemp307 = 0.;
		var fTemp308 = 0.;
		var iTemp309 = 0;
		var iTemp310 = 0;
		var fTemp311 = 0.;
		var fTemp312 = 0.;
		var iTemp313 = 0;
		var fTemp314 = 0.;
		var fTemp315 = 0.;
		var fTemp316 = 0.;
		var fTemp317 = 0.;
		var fTemp318 = 0.;
		var fTemp319 = 0.;
		var fTemp320 = 0.;
		var fTemp321 = 0.;
		var fTemp322 = 0.;
		var fTemp323 = 0.;
		var fTemp324 = 0.;
		var fTemp325 = 0.;
		var fTemp326 = 0.;
		var fTemp327 = 0.;
		var fTemp328 = 0.;
		var fTemp329 = 0.;
		var fTemp330 = 0.;
		var fTemp331 = 0.;
		var fTemp332 = 0.;
		var fTemp333 = 0.;
		var fTemp334 = 0.;
		var fTemp335 = 0.;
		var fTemp336 = 0.;
		var fTemp337 = 0.;
		var fRec273 = 0.;
		var fRec271 = 0.;
		var fRec269 = 0.;
		var fRec267 = 0.;
		var fTemp338 = 0.;
		var fTemp339 = 0.;
		var fTemp340 = 0.;
		var fSel20 = 0.;
		var fSel21 = 0.;
		var fTemp341 = 0.;
		var fSel22 = 0.;
		var fTemp342 = 0.;
		var fSel23 = 0.;
		var fTemp343 = 0.;
		var iTemp344 = 0;
		var iTemp345 = 0;
		var fTemp346 = 0.;
		var fTemp347 = 0.;
		var fTemp348 = 0.;
		var iTemp349 = 0;
		var fTemp350 = 0.;
		var fTemp351 = 0.;
		var fTemp352 = 0.;
		var fTemp353 = 0.;
		var fTemp354 = 0.;
		var fTemp355 = 0.;
		var fTemp356 = 0.;
		var fTemp357 = 0.;
		var fTemp358 = 0.;
		var fTemp359 = 0.;
		var fTemp360 = 0.;
		var fTemp361 = 0.;
		var fTemp362 = 0.;
		var fTemp363 = 0.;
		var fTemp364 = 0.;
		var fTemp365 = 0.;
		var fTemp366 = 0.;
		var fTemp367 = 0.;
		var fTemp368 = 0.;
		var fTemp369 = 0.;
		var fTemp370 = 0.;
		var fTemp371 = 0.;
		var fTemp372 = 0.;
		var fRec327 = 0.;
		var fRec325 = 0.;
		var fRec323 = 0.;
		var fRec321 = 0.;
		var fTemp373 = 0.;
		var fTemp374 = 0.;
		var fTemp375 = 0.;
		var iTemp376 = 0;
		var iTemp377 = 0;
		var fTemp378 = 0.;
		var fTemp379 = 0.;
		var fTemp380 = 0.;
		var fTemp381 = 0.;
		var fTemp382 = 0.;
		var fTemp383 = 0.;
		var fTemp384 = 0.;
		var fTemp385 = 0.;
		var fTemp386 = 0.;
		var fTemp387 = 0.;
		var fTemp388 = 0.;
		var fTemp389 = 0.;
		var fTemp390 = 0.;
		var fTemp391 = 0.;
		var fTemp392 = 0.;
		var fTemp393 = 0.;
		var fTemp394 = 0.;
		var fTemp395 = 0.;
		var fTemp396 = 0.;
		var fTemp397 = 0.;
		var fTemp398 = 0.;
		var fTemp399 = 0.;
		var fTemp400 = 0.;
		var fTemp401 = 0.;
		var fTemp402 = 0.;
		var fTemp403 = 0.;
		var fTemp404 = 0.;
		var fTemp405 = 0.;
		var fTemp406 = 0.;
		var fTemp407 = 0.;
		var fTemp408 = 0.;
		var j0 = 5;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF32[dsp + 14869136 >> 2]));
		fSlow1 = +(0.001 * +(fSlow0));
		fSlow2 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869152 >> 2])) - 80.));
		fSlow3 = +(1.e-05 * +(+(HEAPF32[dsp + 14869164 >> 2])));
		fSlow4 = +(1.e-05 * +(+(HEAPF32[dsp + 14869168 >> 2])));
		fSlow5 = +(1.e-05 * +(+(HEAPF32[dsp + 14869172 >> 2])));
		fSlow6 = +(0.01 * +(fSlow0));
		fSlow7 = +(1.e-05 * +(+(HEAPF32[dsp + 14869180 >> 2])));
		fSlow8 = +(0.01 * +(+(HEAPF32[dsp + 14869204 >> 2])));
		fSlow9 = +(0.01 * +(+(HEAPF32[dsp + 14869208 >> 2])));
		fSlow10 = +(0.01 * +(+(HEAPF32[dsp + 14869216 >> 2])));
		fSlow11 = +(0.01 * +(+(HEAPF32[dsp + 14869224 >> 2])));
		fSlow12 = +(0.00990099 * +(+(HEAPF32[dsp + 14869228 >> 2])));
		fSlow13 = +(1.e-05 * +(+(HEAPF32[dsp + 14869232 >> 2])));
		fSlow14 = +(0.01 * +(+(HEAPF32[dsp + 14869236 >> 2])));
		fSlow15 = +(0.001 * +(+(HEAPF32[dsp + 14869240 >> 2])));
		fSlow16 = +(0.001 * +(+(HEAPF32[dsp + 14869244 >> 2])));
		fSlow17 = +(1.e-05 * +(+(HEAPF32[dsp + 14869248 >> 2])));
		fSlow18 = +(0.01 * +(+(HEAPF32[dsp + 14869252 >> 2])));
		fSlow19 = +(1.e-05 * +(+(HEAPF32[dsp + 14869256 >> 2])));
		fSlow20 = +(+(HEAPF32[dsp + 14869260 >> 2]));
		fSlow21 = +(0.01 * +(fSlow20));
		fSlow22 = +(1.e-05 * +(+(HEAPF32[dsp + 14869264 >> 2])));
		fSlow23 = +(0.01 * +(+(HEAPF32[dsp + 14869268 >> 2])));
		fSlow24 = +(0.01 * +(+(HEAPF32[dsp + 14869272 >> 2])));
		fSlow25 = +(1.e-05 * +(+(HEAPF32[dsp + 14869276 >> 2])));
		fSlow26 = +(0.01 * +(+(HEAPF32[dsp + 14869280 >> 2])));
		fSlow27 = +(0.00990099 * +(+(HEAPF32[dsp + 14869284 >> 2])));
		fSlow28 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869288 >> 2])) - 80.));
		fSlow29 = +(1.e-05 * +(+(HEAPF32[dsp + 14869292 >> 2])));
		fSlow30 = +(0.01 * +(+(HEAPF32[dsp + 14869296 >> 2])));
		fSlow31 = +(0.001 * +(+(HEAPF32[dsp + 14869300 >> 2])));
		fSlow32 = +(0.001 * +(+(HEAPF32[dsp + 14869304 >> 2])));
		fSlow33 = +(0.001 * +(fSlow20));
		fSlow34 = +(+(HEAPF32[dsp + 14869308 >> 2]));
		fSlow35 = +(0.001 * +(fSlow34));
		fSlow36 = +(0.001 * +(+(HEAPF32[dsp + 14869312 >> 2])));
		fSlow37 = +(0.001 * +(+(HEAPF32[dsp + 14869316 >> 2])));
		fSlow38 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869320 >> 2])) - 80.));
		fSlow39 = +(1.e-05 * +(+(HEAPF32[dsp + 14869324 >> 2])));
		fSlow40 = +(1.e-05 * +(+(HEAPF32[dsp + 14869328 >> 2])));
		fSlow41 = +(0.01 * +(fSlow34));
		fSlow42 = +(1.e-05 * +(+(HEAPF32[dsp + 14869332 >> 2])));
		fSlow43 = +(0.01 * +(+(HEAPF32[dsp + 14869336 >> 2])));
		fSlow44 = +(0.01 * +(+(HEAPF32[dsp + 14869340 >> 2])));
		fSlow45 = +(0.01 * +(+(HEAPF32[dsp + 14869344 >> 2])));
		fSlow46 = +(1.e-05 * +(+(HEAPF32[dsp + 14869348 >> 2])));
		fSlow47 = +(0.01 * +(+(HEAPF32[dsp + 14869352 >> 2])));
		fSlow48 = +(0.00990099 * +(+(HEAPF32[dsp + 14869356 >> 2])));
		fSlow49 = +(1.e-05 * +(+(HEAPF32[dsp + 14869360 >> 2])));
		fSlow50 = +(0.01 * +(+(HEAPF32[dsp + 14869364 >> 2])));
		fSlow51 = +(+(HEAPF32[dsp + 14869368 >> 2]));
		fSlow52 = +(0.01 * +(fSlow51));
		fSlow53 = +(1.e-05 * +(+(HEAPF32[dsp + 14869372 >> 2])));
		fSlow54 = +(0.01 * +(+(HEAPF32[dsp + 14869376 >> 2])));
		fSlow55 = +(1.e-05 * +(+(HEAPF32[dsp + 14869380 >> 2])));
		fSlow56 = +(0.01 * +(+(HEAPF32[dsp + 14869384 >> 2])));
		fSlow57 = +(1.e-05 * +(+(HEAPF32[dsp + 14869388 >> 2])));
		fSlow58 = +(0.01 * +(+(HEAPF32[dsp + 14869392 >> 2])));
		fSlow59 = +(0.01 * +(+(HEAPF32[dsp + 14869396 >> 2])));
		fSlow60 = +(1.e-05 * +(+(HEAPF32[dsp + 14869400 >> 2])));
		fSlow61 = +(0.00990099 * +(+(HEAPF32[dsp + 14869404 >> 2])));
		fSlow62 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869408 >> 2])) - 80.));
		fSlow63 = +(1.e-05 * +(+(HEAPF32[dsp + 14869412 >> 2])));
		fSlow64 = +(0.01 * +(+(HEAPF32[dsp + 14869416 >> 2])));
		fSlow65 = +(0.001 * +(fSlow51));
		fSlow66 = +(0.001 * +(+(HEAPF32[dsp + 14869420 >> 2])));
		fSlow67 = +(0.001 * +(+(HEAPF32[dsp + 14869424 >> 2])));
		fSlow68 = +(+(HEAPF32[dsp + 14869428 >> 2]));
		fSlow69 = +(0.001 * +(fSlow68));
		fSlow70 = +(0.001 * +(+(HEAPF32[dsp + 14869432 >> 2])));
		fSlow71 = +(0.001 * +(+(HEAPF32[dsp + 14869436 >> 2])));
		fSlow72 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869440 >> 2])) - 80.));
		fSlow73 = +(1.e-05 * +(+(HEAPF32[dsp + 14869444 >> 2])));
		fSlow74 = +(1.e-05 * +(+(HEAPF32[dsp + 14869448 >> 2])));
		fSlow75 = +(1.e-05 * +(+(HEAPF32[dsp + 14869452 >> 2])));
		fSlow76 = +(1.e-05 * +(+(HEAPF32[dsp + 14869456 >> 2])));
		fSlow77 = +(0.01 * +(fSlow68));
		fSlow78 = +(0.01 * +(+(HEAPF32[dsp + 14869460 >> 2])));
		fSlow79 = +(0.01 * +(+(HEAPF32[dsp + 14869464 >> 2])));
		fSlow80 = +(0.01 * +(+(HEAPF32[dsp + 14869468 >> 2])));
		fSlow81 = +(0.01 * +(+(HEAPF32[dsp + 14869472 >> 2])));
		fSlow82 = +(0.00990099 * +(+(HEAPF32[dsp + 14869476 >> 2])));
		fSlow83 = +(1.e-05 * +(+(HEAPF32[dsp + 14869480 >> 2])));
		fSlow84 = +(0.01 * +(+(HEAPF32[dsp + 14869484 >> 2])));
		fSlow85 = +(+(HEAPF32[dsp + 14869148 >> 2]) * +(+(+(HEAPF32[dsp + 14869488 >> 2])) - 80.));
		fSlow86 = +(1.e-05 * +(+(HEAPF32[dsp + 14869492 >> 2])));
		fSlow87 = +(1.e-05 * +(+(HEAPF32[dsp + 14869496 >> 2])));
		fSlow88 = +(1.e-05 * +(+(HEAPF32[dsp + 14869500 >> 2])));
		fSlow89 = +(+(HEAPF32[dsp + 14869504 >> 2]));
		fSlow90 = +(0.01 * +(fSlow89));
		fSlow91 = +(1.e-05 * +(+(HEAPF32[dsp + 14869508 >> 2])));
		fSlow92 = +(0.01 * +(+(HEAPF32[dsp + 14869512 >> 2])));
		fSlow93 = +(0.01 * +(+(HEAPF32[dsp + 14869516 >> 2])));
		fSlow94 = +(0.01 * +(+(HEAPF32[dsp + 14869520 >> 2])));
		fSlow95 = +(0.01 * +(+(HEAPF32[dsp + 14869524 >> 2])));
		fSlow96 = +(0.00990099 * +(+(HEAPF32[dsp + 14869528 >> 2])));
		fSlow97 = +(1.e-05 * +(+(HEAPF32[dsp + 14869532 >> 2])));
		fSlow98 = +(0.01 * +(+(HEAPF32[dsp + 14869536 >> 2])));
		fSlow99 = +(0.001 * +(+(HEAPF32[dsp + 14869540 >> 2])));
		fSlow100 = +(0.001 * +(+(HEAPF32[dsp + 14869544 >> 2])));
		fSlow101 = +(0.001 * +(fSlow89));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[dsp + 14866744 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999 * +(HEAPF32[dsp + 14866744 + (1 << 2) >> 2])));
			fSel0 = 0.;
			if ((((((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow2) != +(HEAPF32[dsp + 14866768 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel0 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel0 = +(((((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow2) != +(HEAPF32[dsp + 14866776 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel1 = 0.;
			if ((((+(HEAPF32[dsp + 14866752 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel1 = +(((((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14866752 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel1 = +(fSel0);
				
			}
			HEAPF32[dsp + 14866752 + (0 << 2) >> 2] = +(fSel1);
			HEAPF32[dsp + 14866760 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) + +(fSel1))))));
			HEAPF32[dsp + 14866768 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14866776 + (1 << 2) >> 2]) != +(fSlow2)) | 0)) | 0)?+(fSlow2):+(HEAPF32[dsp + 14866768 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14866776 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14866760 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14866768 + (1 << 2) >> 2]) != +(fSlow2)) | 0)) | 0)?+(fSlow2):+(HEAPF32[dsp + 14866776 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14866784 + (0 << 2) >> 2] = +(+(fSlow3) + +(0.999 * +(HEAPF32[dsp + 14866784 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866792 + (0 << 2) >> 2] = +(+(fSlow4) + +(0.999 * +(HEAPF32[dsp + 14866792 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866800 + (0 << 2) >> 2] = +(+(fSlow5) + +(0.999 * +(HEAPF32[dsp + 14866800 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866808 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 14869176 >> 2]) + +(HEAPF32[dsp + 14866808 + (1 << 2) >> 2])), 1.));
			iTemp0 = ((+(HEAPF32[dsp + 14866808 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 14866808 + (1 << 2) >> 2])) | 0);
			HEAP32[dsp + 14866432 + (0 << 2) >> 2] = ((12345 + (imul(1103515245, (HEAP32[dsp + 14866432 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			fTemp1 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (2 << 2) >> 2] | 0))));
			fSel2 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel2 = +(0.5 * +(fTemp1));
				
			} else {
				fSel2 = +(HEAPF32[dsp + 14866816 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14866816 + (0 << 2) >> 2] = +(fSel2);
			HEAPF32[dsp + 14866824 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14866824 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14866816 + (0 << 2) >> 2]) < +(fSlow6)) | 0))));
			HEAPF32[dsp + 14866832 + (0 << 2) >> 2] = +(+(fSlow7) + +(0.999 * +(HEAPF32[dsp + 14866832 + (1 << 2) >> 2])));
			HEAP32[dsp + 14866840 + (0 << 2) >> 2] = ((((1 + (HEAP32[dsp + 14866840 + (1 << 2) >> 2] | 0)) | 0) % (HEAP32[dsp + 14869184 >> 2] | 0)) | 0);
			iTemp2 = ((+((HEAP32[dsp + 14866840 + (0 << 2) >> 2] | 0)) < +(HEAPF32[dsp + 14869188 >> 2])) | 0);
			iTemp3 = (((iTemp2 | 0) > 0) | 0);
			HEAP32[dsp + 14866848 + (0 << 2) >> 2] = (((iTemp3 | 0) & (((HEAP32[dsp + 14866848 + (1 << 2) >> 2] | 0) | ((+(HEAPF32[dsp + 14866856 + (1 << 2) >> 2]) >= 1.) | 0)) | 0)) | 0);
			iTemp4 = (((((iTemp2 | 0) <= 0) | 0) & ((+(HEAPF32[dsp + 14866856 + (1 << 2) >> 2]) > 0.) | 0)) | 0);
			HEAPF32[dsp + 14866856 + (0 << 2) >> 2] = +(+(+(+(HEAPF32[dsp + 14869156 >> 2]) * +((((((((HEAP32[dsp + 14866848 + (1 << 2) >> 2] | 0) == 0) | 0) & (iTemp3 | 0)) | 0) & ((+(HEAPF32[dsp + 14866856 + (1 << 2) >> 2]) < 1.) | 0)) | 0))) + +(+(HEAPF32[dsp + 14866856 + (1 << 2) >> 2]) * +(1. - +(+(HEAPF32[dsp + 14869192 >> 2]) * +((iTemp4 | 0)))))) * +((((((iTemp4 | 0) == 0) | 0) | ((+(HEAPF32[dsp + 14866856 + (1 << 2) >> 2]) >= 1.e-06) | 0)) | 0)));
			fSel3 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel3 = +(40. + +(20. * +(fTemp1)));
				
			} else {
				fSel3 = +(HEAPF32[dsp + 14866864 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14866864 + (0 << 2) >> 2] = +(fSel3);
			HEAPF32[dsp + 14866872 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14866872 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14866864 + (0 << 2) >> 2]) - 69.))))));
			fTemp5 = +(+(HEAPF32[dsp + 14866880 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14866872 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14866880 + (0 << 2) >> 2] = +(+(fTemp5) - +(floorf(+(fTemp5))));
			fTemp6 = +(+(+(HEAPF32[dsp + 14866824 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14866880 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 12845056 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp6);
			HEAPF32[dsp + 14866888 + (0 << 2) >> 2] = +(+(fSlow8) + +(0.99 * +(HEAPF32[dsp + 14866888 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866896 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14866896 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14866888 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp7 = ~~(+(HEAPF32[dsp + 14866896 + (0 << 2) >> 2]));
			iTemp8 = ((1 + (iTemp7 | 0)) | 0);
			fTemp9 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14866896 + (0 << 2) >> 2])), 1.));
			fTemp10 = +(256. + +(HEAPF32[dsp + 14866896 + (0 << 2) >> 2]));
			iTemp11 = ~~(+(fTemp10));
			fTemp12 = +(+(+(+(+(HEAPF32[dsp + 14866824 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14866832 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14866880 + (0 << 2) >> 2]))) << 2) >> 2])) + +(+(HEAPF32[dsp + 14866832 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 12845056 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp7 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp8 | 0)) - +(HEAPF32[dsp + 14866896 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 14866896 + (0 << 2) >> 2]) - +((iTemp7 | 0))) * +(HEAPF32[dsp + 12845056 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp8 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp9)) + +(+(+(+(HEAPF32[dsp + 12845056 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp11 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp11 | 0)) - +(255. + +(HEAPF32[dsp + 14866896 + (0 << 2) >> 2])))) + +(+(+(fTemp10) - +((iTemp11 | 0))) * +(HEAPF32[dsp + 12845056 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp11 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp9))))));
			HEAPF32[dsp + 14866904 + (0 << 2) >> 2] = +(+(fSlow9) + +(0.99 * +(HEAPF32[dsp + 14866904 + (1 << 2) >> 2])));
			fTemp13 = +(max(-1., +(min(1., +(+(fTemp12) * +(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14866904 + (0 << 2) >> 2]) - 80.)))))))));
			fTemp14 = +(+(+(1. - +(HEAPF32[dsp + 14866800 + (0 << 2) >> 2])) * +(fTemp12)) + +(+(+(HEAPF32[dsp + 14866800 + (0 << 2) >> 2]) * +(fTemp13)) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp13)))))));
			HEAPF32[dsp + 14866912 + (0 << 2) >> 2] = +(+(fSlow10) + +(0.99 * +(HEAPF32[dsp + 14866912 + (1 << 2) >> 2])));
			fTemp15 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14866912 + (0 << 2) >> 2]) - 80.))));
			fTemp16 = +(1. - +(fTemp15));
			HEAPF32[dsp + 14866920 + (0 << 2) >> 2] = +(+(+(fTemp14) + +(+(fTemp16) * +(HEAPF32[dsp + 14866920 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14866952 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866928 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14866920 + (0 << 2) >> 2]) + +(+(fTemp16) * +(HEAPF32[dsp + 14866928 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866936 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14866928 + (0 << 2) >> 2]) + +(+(fTemp16) * +(HEAPF32[dsp + 14866936 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14866944 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14866936 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 14866944 + (1 << 2) >> 2]) * +(fTemp16)));
			HEAPF32[dsp + 14866952 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14866944 + (0 << 2) >> 2]) * +(powf(+(fTemp15), 4.)));
			fTemp17 = +(+(+(1. - +(HEAPF32[dsp + 14866792 + (0 << 2) >> 2])) * +(fTemp14)) + +(+(HEAPF32[dsp + 14866792 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14866952 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14866960 + (0 << 2) >> 2] = +(+(fSlow11) + +(0.99 * +(HEAPF32[dsp + 14866960 + (1 << 2) >> 2])));
			fTemp18 = +(+(HEAPF32[dsp + 14866960 + (0 << 2) >> 2]) - 80.);
			fTemp19 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp18))))));
			fTemp20 = +(1. / +(fTemp19));
			fTemp21 = +(1. + +(+(0.00333333 + +(fTemp20)) / +(fTemp19)));
			HEAPF32[dsp + 14866456 + (0 << 2) >> 2] = +(+(fTemp17) - +(+(+(+(HEAPF32[dsp + 14866456 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp20) - 0.00333333) / +(fTemp19)))) + +(2. * +(+(HEAPF32[dsp + 14866456 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp19)))))))) / +(fTemp21)));
			fTemp22 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp18))))));
			fTemp23 = +(1. / +(fTemp22));
			fTemp24 = +(1. + +(+(0.00333333 + +(fTemp23)) / +(fTemp22)));
			HEAPF32[dsp + 14866468 + (0 << 2) >> 2] = +(+(fTemp17) - +(+(+(+(HEAPF32[dsp + 14866468 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp23) - 0.00333333) / +(fTemp22)))) + +(2. * +(+(HEAPF32[dsp + 14866468 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp22)))))))) / +(fTemp24)));
			fTemp25 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp18))))));
			fTemp26 = +(1. / +(fTemp25));
			fTemp27 = +(1. + +(+(0.00333333 + +(fTemp26)) / +(fTemp25)));
			HEAPF32[dsp + 14866480 + (0 << 2) >> 2] = +(+(fTemp17) - +(+(+(+(HEAPF32[dsp + 14866480 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp26) - 0.00333333) / +(fTemp25)))) + +(2. * +(+(HEAPF32[dsp + 14866480 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp25)))))))) / +(fTemp27)));
			fTemp28 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp18))))));
			fTemp29 = +(1. / +(fTemp28));
			fTemp30 = +(1. + +(+(0.00333333 + +(fTemp29)) / +(fTemp28)));
			HEAPF32[dsp + 14866492 + (0 << 2) >> 2] = +(+(fTemp17) - +(+(+(+(HEAPF32[dsp + 14866492 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp29) - 0.00333333) / +(fTemp28)))) + +(2. * +(+(HEAPF32[dsp + 14866492 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp28)))))))) / +(fTemp30)));
			fTemp31 = +(+(+(HEAPF32[dsp + 14866784 + (0 << 2) >> 2]) * +(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 14866456 + (2 << 2) >> 2])) + +(+(0.5 * +(HEAPF32[dsp + 14866456 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14866456 + (1 << 2) >> 2]))) / +(fTemp21)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 14866468 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 14866468 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866468 + (2 << 2) >> 2]))) / +(fTemp24))) + +(+(+(+(0.4 * +(HEAPF32[dsp + 14866480 + (0 << 2) >> 2])) + +(0.8 * +(HEAPF32[dsp + 14866480 + (1 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866480 + (2 << 2) >> 2]))) / +(fTemp27))) + +(+(+(+(0.3 * +(HEAPF32[dsp + 14866492 + (0 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 14866492 + (1 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866492 + (2 << 2) >> 2]))) / +(fTemp30)))) + +(+(+(fSlow12) * +(HEAPF32[dsp + 14866968 + (1 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 14866784 + (0 << 2) >> 2])) * +(fTemp17))));
			HEAPF32[dsp + 262144 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp31);
			HEAPF32[dsp + 14866968 + (0 << 2) >> 2] = +(+(+(1. - +(HEAPF32[dsp + 14866760 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 262144 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14866768 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 14866760 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 262144 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14866776 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])));
			HEAPF32[dsp + 14866976 + (0 << 2) >> 2] = +(+(fSlow13) + +(0.999 * +(HEAPF32[dsp + 14866976 + (1 << 2) >> 2])));
			fTemp32 = +(2. * +(HEAPF32[dsp + 14866968 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14866984 + (0 << 2) >> 2] = +(+(fSlow14) + +(0.99 * +(HEAPF32[dsp + 14866984 + (1 << 2) >> 2])));
			fTemp33 = +(+(HEAPF32[dsp + 14866984 + (0 << 2) >> 2]) - 80.);
			fTemp34 = +(1. - +(0.00833333 * +(fTemp33)));
			HEAPF32[dsp + 14866992 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14866992 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 14867000 + (1 << 2) >> 2]) * +(fTemp34)));
			HEAPF32[dsp + 14417920 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14866992 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867000 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14417920 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867008 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867008 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14426112 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867008 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867016 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14426112 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867024 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867024 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867032 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14434304 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867024 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867032 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14434304 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867040 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867040 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867048 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14442496 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867040 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867048 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14442496 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867056 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867056 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867064 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14450688 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867056 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867064 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14450688 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867072 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867072 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867080 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14458880 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867072 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867080 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14458880 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867088 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867088 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867096 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14467072 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867088 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867096 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14467072 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867104 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp33) * +(HEAPF32[dsp + 14867104 + (1 << 2) >> 2]))) + +(+(fTemp34) * +(HEAPF32[dsp + 14867112 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14475264 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp32) + +(0.5 * +(HEAPF32[dsp + 14867104 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867112 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14475264 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			fTemp35 = +(+(+(+(+(+(+(+(HEAPF32[dsp + 14867000 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14867016 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867032 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867048 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867064 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867080 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867096 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867112 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14811136 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(fTemp35) + +(0.5 * +(HEAPF32[dsp + 14867120 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867120 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14811136 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec43 = +(0. - +(+(fTemp35) - +(HEAPF32[dsp + 14867120 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14835712 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec43) + +(0.5 * +(HEAPF32[dsp + 14867128 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867128 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14835712 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec41 = +(+(HEAPF32[dsp + 14867128 + (1 << 2) >> 2]) - +(fRec43));
			HEAPF32[dsp + 14837760 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec41) + +(0.5 * +(HEAPF32[dsp + 14867136 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867136 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14837760 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec39 = +(+(HEAPF32[dsp + 14867136 + (1 << 2) >> 2]) - +(fRec41));
			HEAPF32[dsp + 14860288 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(fRec39) + +(0.5 * +(HEAPF32[dsp + 14867144 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867144 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14860288 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec37 = +(+(HEAPF32[dsp + 14867144 + (1 << 2) >> 2]) - +(fRec39));
			HEAPF32[dsp + 14867152 + (0 << 2) >> 2] = +(+(fSlow15) + +(0.999 * +(HEAPF32[dsp + 14867152 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867160 + (0 << 2) >> 2] = +(+(fSlow16) + +(0.999 * +(HEAPF32[dsp + 14867160 + (1 << 2) >> 2])));
			fTemp36 = +(0. - +(HEAPF32[dsp + 14867160 + (0 << 2) >> 2]));
			fTemp37 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 14867152 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp36)))), 0.5));
			iTemp38 = ((+(fTemp37) > 1.) | 0);
			iTemp39 = ((+(fTemp37) < 1.) | 0);
			fTemp40 = +(+((iTemp38 | 0)) + +(+(fTemp37) * +((iTemp39 | 0))));
			fTemp41 = +(+(+(HEAPF32[dsp + 14866744 + (0 << 2) >> 2]) * +(+(2. * +(+(HEAPF32[dsp + 14866968 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14866976 + (0 << 2) >> 2])))) + +(+(HEAPF32[dsp + 14866976 + (0 << 2) >> 2]) * +(fRec37)))) * +(1. + +(1.38629 * +(0. - +(+(fTemp40) - 1.)))));
			fTemp42 = +(2. * +(fTemp40));
			fTemp43 = +(+(2. * +(+(+(fTemp40) * +(((+(fTemp42) > 0.) | 0))) * +(((+(fTemp42) <= 1.) | 0)))) + +(((+(fTemp42) > 1.) | 0)));
			fTemp44 = +(atan2f(+(fTemp36), +(HEAPF32[dsp + 14867152 + (0 << 2) >> 2])));
			fTemp45 = +(+(fTemp43) * +(cosf(+(fTemp44))));
			fTemp46 = +(0.285714 * +(fTemp45));
			fTemp47 = +(1.38629 * +(fTemp40));
			fTemp48 = +(+(fTemp47) - 0.693147);
			fTemp49 = +(2.4663 * +(fTemp48));
			fTemp50 = +(+(2.4663 * +(+(+(fTemp48) * +(((+(fTemp49) > 0.) | 0))) * +(((+(fTemp49) <= 1.) | 0)))) + +(((+(fTemp49) > 1.) | 0)));
			fTemp51 = +(2. * +(fTemp44));
			fTemp52 = +(+(fTemp50) * +(cosf(+(fTemp51))));
			fTemp53 = +(0.285714 * +(fTemp52));
			fTemp54 = +(+(fTemp47) - 1.09861);
			fTemp55 = +(3.47606 * +(fTemp54));
			fTemp56 = +(+(3.47606 * +(+(+(fTemp54) * +(((+(fTemp55) > 0.) | 0))) * +(((+(fTemp55) <= 1.) | 0)))) + +(((+(fTemp55) > 1.) | 0)));
			fTemp57 = +(3. * +(fTemp44));
			fTemp58 = +(+(fTemp56) * +(cosf(+(fTemp57))));
			fTemp59 = +(0.285714 * +(fTemp58));
			fTemp60 = +(0.707107 * +(+(+(0.142857 + +(fTemp46)) + +(fTemp53)) + +(fTemp59)));
			fTemp61 = +(+(sinf(+(fTemp44))) * +(fTemp43));
			fTemp62 = +(0.202031 * +(fTemp61));
			fTemp63 = +(+(sinf(+(fTemp51))) * +(fTemp50));
			fTemp64 = +(0.285714 * +(fTemp63));
			fTemp65 = +(+(sinf(+(fTemp57))) * +(fTemp56));
			fTemp66 = +(0.202031 * +(fTemp58));
			fTemp67 = +(0.285714 * +(fTemp61));
			fTemp68 = +(0.285714 * +(fTemp65));
			fTemp69 = +(0.202031 * +(fTemp45));
			fTemp70 = +(+(+(faustpower2_f(+(fTemp37))) * +((iTemp38 | 0))) + +((iTemp39 | 0)));
			HEAPF32[dsp + 14867168 + (0 << 2) >> 2] = +(+(fSlow17) + +(0.999 * +(HEAPF32[dsp + 14867168 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867176 + (0 << 2) >> 2] = +(+(fSlow18) + +(0.99 * +(HEAPF32[dsp + 14867176 + (1 << 2) >> 2])));
			fTemp71 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14867176 + (0 << 2) >> 2]) - 80.))));
			HEAPF32[dsp + 14867184 + (0 << 2) >> 2] = +(+(fSlow19) + +(0.999 * +(HEAPF32[dsp + 14867184 + (1 << 2) >> 2])));
			fTemp72 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (1 << 2) >> 2] | 0))));
			fSel4 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel4 = +(0.5 * +(fTemp72));
				
			} else {
				fSel4 = +(HEAPF32[dsp + 14867192 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867192 + (0 << 2) >> 2] = +(fSel4);
			HEAPF32[dsp + 14867200 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867200 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14867192 + (0 << 2) >> 2]) < +(fSlow21)) | 0))));
			fTemp73 = +(+(HEAPF32[dsp + 14866856 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14867200 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867208 + (0 << 2) >> 2] = +(+(fSlow22) + +(0.999 * +(HEAPF32[dsp + 14867208 + (1 << 2) >> 2])));
			fSel5 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel5 = +(40. + +(20. * +(fTemp72)));
				
			} else {
				fSel5 = +(HEAPF32[dsp + 14867216 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867216 + (0 << 2) >> 2] = +(fSel5);
			HEAPF32[dsp + 14867224 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867224 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14867216 + (0 << 2) >> 2]) - 69.))))));
			fTemp74 = +(+(HEAPF32[dsp + 14867232 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14867224 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867232 + (0 << 2) >> 2] = +(+(fTemp74) - +(floorf(+(fTemp74))));
			fTemp75 = +(+(fTemp73) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14867232 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 13107200 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp75);
			HEAPF32[dsp + 14867240 + (0 << 2) >> 2] = +(+(fSlow23) + +(0.99 * +(HEAPF32[dsp + 14867240 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867248 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14867248 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14867240 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp76 = ~~(+(HEAPF32[dsp + 14867248 + (0 << 2) >> 2]));
			iTemp77 = ((1 + (iTemp76 | 0)) | 0);
			fTemp78 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14867248 + (0 << 2) >> 2])), 1.));
			fTemp79 = +(256. + +(HEAPF32[dsp + 14867248 + (0 << 2) >> 2]));
			iTemp80 = ~~(+(fTemp79));
			fTemp81 = +(+(+(+(fTemp73) * +(1. - +(HEAPF32[dsp + 14867208 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14867232 + (0 << 2) >> 2]))) << 2) >> 2])) + +(+(HEAPF32[dsp + 14867208 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 13107200 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp76 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp77 | 0)) - +(HEAPF32[dsp + 14867248 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 14867248 + (0 << 2) >> 2]) - +((iTemp76 | 0))) * +(HEAPF32[dsp + 13107200 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp77 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp78)) + +(+(+(+(HEAPF32[dsp + 13107200 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp80 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp80 | 0)) - +(255. + +(HEAPF32[dsp + 14867248 + (0 << 2) >> 2])))) + +(+(+(fTemp79) - +((iTemp80 | 0))) * +(HEAPF32[dsp + 13107200 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp80 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp78))))));
			HEAPF32[dsp + 14867256 + (0 << 2) >> 2] = +(+(fSlow24) + +(0.99 * +(HEAPF32[dsp + 14867256 + (1 << 2) >> 2])));
			fTemp82 = +(max(-1., +(min(1., +(+(fTemp81) * +(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14867256 + (0 << 2) >> 2]) - 80.)))))))));
			fTemp83 = +(+(+(1. - +(HEAPF32[dsp + 14867184 + (0 << 2) >> 2])) * +(fTemp81)) + +(+(+(HEAPF32[dsp + 14867184 + (0 << 2) >> 2]) * +(fTemp82)) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp82)))))));
			fTemp84 = +(1. - +(fTemp71));
			HEAPF32[dsp + 14867264 + (0 << 2) >> 2] = +(+(+(fTemp83) + +(+(fTemp84) * +(HEAPF32[dsp + 14867264 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14867296 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867272 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867264 + (0 << 2) >> 2]) + +(+(fTemp84) * +(HEAPF32[dsp + 14867272 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867280 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867272 + (0 << 2) >> 2]) + +(+(fTemp84) * +(HEAPF32[dsp + 14867280 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867288 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867280 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 14867288 + (1 << 2) >> 2]) * +(fTemp84)));
			HEAPF32[dsp + 14867296 + (0 << 2) >> 2] = +(+(powf(+(fTemp71), 4.)) * +(HEAPF32[dsp + 14867288 + (0 << 2) >> 2]));
			fTemp85 = +(+(+(HEAPF32[dsp + 14867168 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14867296 + (0 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 14867168 + (0 << 2) >> 2])) * +(fTemp83)));
			HEAPF32[dsp + 14867304 + (0 << 2) >> 2] = +(+(fSlow25) + +(0.999 * +(HEAPF32[dsp + 14867304 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867312 + (0 << 2) >> 2] = +(+(fSlow26) + +(0.99 * +(HEAPF32[dsp + 14867312 + (1 << 2) >> 2])));
			fTemp86 = +(+(HEAPF32[dsp + 14867312 + (0 << 2) >> 2]) - 80.);
			fTemp87 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp86))))));
			fTemp88 = +(1. / +(fTemp87));
			fTemp89 = +(1. + +(+(0.00333333 + +(fTemp88)) / +(fTemp87)));
			HEAPF32[dsp + 14866504 + (0 << 2) >> 2] = +(+(fTemp85) - +(+(+(+(HEAPF32[dsp + 14866504 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp88) - 0.00333333) / +(fTemp87)))) + +(2. * +(+(HEAPF32[dsp + 14866504 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp87)))))))) / +(fTemp89)));
			fTemp90 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp86))))));
			fTemp91 = +(1. / +(fTemp90));
			fTemp92 = +(1. + +(+(0.00333333 + +(fTemp91)) / +(fTemp90)));
			HEAPF32[dsp + 14866516 + (0 << 2) >> 2] = +(+(fTemp85) - +(+(+(+(HEAPF32[dsp + 14866516 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp91) - 0.00333333) / +(fTemp90)))) + +(2. * +(+(HEAPF32[dsp + 14866516 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp90)))))))) / +(fTemp92)));
			fTemp93 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp86))))));
			fTemp94 = +(1. / +(fTemp93));
			fTemp95 = +(1. + +(+(0.00333333 + +(fTemp94)) / +(fTemp93)));
			HEAPF32[dsp + 14866528 + (0 << 2) >> 2] = +(+(fTemp85) - +(+(+(+(HEAPF32[dsp + 14866528 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp94) - 0.00333333) / +(fTemp93)))) + +(2. * +(+(HEAPF32[dsp + 14866528 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp93)))))))) / +(fTemp95)));
			fTemp96 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp86))))));
			fTemp97 = +(1. / +(fTemp96));
			fTemp98 = +(1. + +(+(0.00333333 + +(fTemp97)) / +(fTemp96)));
			HEAPF32[dsp + 14866540 + (0 << 2) >> 2] = +(+(fTemp85) - +(+(+(+(HEAPF32[dsp + 14866540 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp97) - 0.00333333) / +(fTemp96)))) + +(2. * +(+(HEAPF32[dsp + 14866540 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp96)))))))) / +(fTemp98)));
			fTemp99 = +(+(+(+(fTemp85) * +(1. - +(HEAPF32[dsp + 14867304 + (0 << 2) >> 2]))) + +(+(+(+(+(+(+(+(1.2 * +(HEAPF32[dsp + 14866504 + (1 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 14866504 + (0 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866504 + (2 << 2) >> 2]))) / +(fTemp89)) + +(+(+(+(HEAPF32[dsp + 14866516 + (1 << 2) >> 2]) + +(0.5 * +(HEAPF32[dsp + 14866516 + (0 << 2) >> 2]))) + +(0.5 * +(HEAPF32[dsp + 14866516 + (2 << 2) >> 2]))) / +(fTemp92))) + +(+(+(+(0.8 * +(HEAPF32[dsp + 14866528 + (1 << 2) >> 2])) + +(0.4 * +(HEAPF32[dsp + 14866528 + (0 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866528 + (2 << 2) >> 2]))) / +(fTemp95))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 14866540 + (1 << 2) >> 2])) + +(0.3 * +(HEAPF32[dsp + 14866540 + (0 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866540 + (2 << 2) >> 2]))) / +(fTemp98))) * +(HEAPF32[dsp + 14867304 + (0 << 2) >> 2]))) + +(+(fSlow27) * +(HEAPF32[dsp + 14867352 + (1 << 2) >> 2])));
			HEAPF32[dsp + 2359296 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp99);
			fSel6 = 0.;
			if ((((((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow28) != +(HEAPF32[dsp + 14867336 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel6 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel6 = +(((((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow28) != +(HEAPF32[dsp + 14867344 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel7 = 0.;
			if ((((+(HEAPF32[dsp + 14867320 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel7 = +(((((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14867320 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel7 = +(fSel6);
				
			}
			HEAPF32[dsp + 14867320 + (0 << 2) >> 2] = +(fSel7);
			HEAPF32[dsp + 14867328 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) + +(fSel7))))));
			HEAPF32[dsp + 14867336 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14867344 + (1 << 2) >> 2]) != +(fSlow28)) | 0)) | 0)?+(fSlow28):+(HEAPF32[dsp + 14867336 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14867344 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14867328 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14867336 + (1 << 2) >> 2]) != +(fSlow28)) | 0)) | 0)?+(fSlow28):+(HEAPF32[dsp + 14867344 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14867352 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 2359296 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14867336 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14867328 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 2359296 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14867344 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 14867328 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867360 + (0 << 2) >> 2] = +(+(fSlow29) + +(0.999 * +(HEAPF32[dsp + 14867360 + (1 << 2) >> 2])));
			fTemp100 = +(2. * +(HEAPF32[dsp + 14867352 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867368 + (0 << 2) >> 2] = +(+(fSlow30) + +(0.99 * +(HEAPF32[dsp + 14867368 + (1 << 2) >> 2])));
			fTemp101 = +(+(HEAPF32[dsp + 14867368 + (0 << 2) >> 2]) - 80.);
			fTemp102 = +(1. - +(0.00833333 * +(fTemp101)));
			HEAPF32[dsp + 14867376 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867376 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(HEAPF32[dsp + 14867384 + (1 << 2) >> 2]) * +(fTemp102)));
			HEAPF32[dsp + 14483456 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867376 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867384 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14483456 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867392 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867392 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867400 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14491648 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867392 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867400 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14491648 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867408 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867408 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867416 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14499840 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867408 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867416 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14499840 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867424 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867424 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867432 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14508032 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867424 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867432 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14508032 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867440 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867440 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867448 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14516224 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867440 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867448 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14516224 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867456 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867456 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867464 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14524416 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867456 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867464 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14524416 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867472 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867472 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867480 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14532608 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867472 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867480 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14532608 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867488 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14867488 + (1 << 2) >> 2]) * +(fTemp101))) + +(+(fTemp102) * +(HEAPF32[dsp + 14867496 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14540800 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp100) + +(0.5 * +(HEAPF32[dsp + 14867488 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867496 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14540800 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14815232 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 14867504 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 14867384 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867400 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867416 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867432 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867448 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867464 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867480 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867496 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867504 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14815232 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec99 = +(0. - +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 14867384 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14867400 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867416 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867432 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867448 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867464 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867480 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867496 + (0 << 2) >> 2])) - +(HEAPF32[dsp + 14867504 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14839808 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14867512 + (1 << 2) >> 2])) + +(fRec99));
			HEAPF32[dsp + 14867512 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14839808 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec97 = +(+(HEAPF32[dsp + 14867512 + (1 << 2) >> 2]) - +(fRec99));
			HEAPF32[dsp + 14841856 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14867520 + (1 << 2) >> 2])) + +(fRec97));
			HEAPF32[dsp + 14867520 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14841856 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec95 = +(+(HEAPF32[dsp + 14867520 + (1 << 2) >> 2]) - +(fRec97));
			HEAPF32[dsp + 14861312 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14867528 + (1 << 2) >> 2])) + +(fRec95));
			HEAPF32[dsp + 14867528 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14861312 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec93 = +(+(HEAPF32[dsp + 14867528 + (1 << 2) >> 2]) - +(fRec95));
			HEAPF32[dsp + 14867536 + (0 << 2) >> 2] = +(+(fSlow31) + +(0.999 * +(HEAPF32[dsp + 14867536 + (1 << 2) >> 2])));
			fTemp103 = +(0. - +(HEAPF32[dsp + 14867536 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867544 + (0 << 2) >> 2] = +(+(fSlow32) + +(0.999 * +(HEAPF32[dsp + 14867544 + (1 << 2) >> 2])));
			fTemp104 = +(powf(+(+(faustpower2_f(+(fTemp103))) + +(faustpower2_f(+(HEAPF32[dsp + 14867544 + (0 << 2) >> 2])))), 0.5));
			iTemp105 = ((+(fTemp104) > 1.) | 0);
			iTemp106 = ((+(fTemp104) < 1.) | 0);
			fTemp107 = +(+((iTemp105 | 0)) + +(+(fTemp104) * +((iTemp106 | 0))));
			HEAPF32[dsp + 14867552 + (0 << 2) >> 2] = +(+(fSlow33) + +(0.999 * +(HEAPF32[dsp + 14867552 + (1 << 2) >> 2])));
			fTemp108 = +(+(+(+(2. * +(+(HEAPF32[dsp + 14867352 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14867360 + (0 << 2) >> 2])))) + +(+(fRec93) * +(HEAPF32[dsp + 14867360 + (0 << 2) >> 2]))) * +(1. + +(1.38629 * +(0. - +(+(fTemp107) - 1.))))) * +(HEAPF32[dsp + 14867552 + (0 << 2) >> 2]));
			fTemp109 = +(2. * +(fTemp107));
			fTemp110 = +(+(2. * +(+(+(fTemp107) * +(((+(fTemp109) > 0.) | 0))) * +(((+(fTemp109) <= 1.) | 0)))) + +(((+(fTemp109) > 1.) | 0)));
			fTemp111 = +(atan2f(+(fTemp103), +(HEAPF32[dsp + 14867544 + (0 << 2) >> 2])));
			fTemp112 = +(+(fTemp110) * +(cosf(+(fTemp111))));
			fTemp113 = +(0.285714 * +(fTemp112));
			fTemp114 = +(1.38629 * +(fTemp107));
			fTemp115 = +(+(fTemp114) - 0.693147);
			fTemp116 = +(2.4663 * +(fTemp115));
			fTemp117 = +(+(2.4663 * +(+(+(fTemp115) * +(((+(fTemp116) > 0.) | 0))) * +(((+(fTemp116) <= 1.) | 0)))) + +(((+(fTemp116) > 1.) | 0)));
			fTemp118 = +(2. * +(fTemp111));
			fTemp119 = +(+(fTemp117) * +(cosf(+(fTemp118))));
			fTemp120 = +(0.285714 * +(fTemp119));
			fTemp121 = +(+(fTemp114) - 1.09861);
			fTemp122 = +(3.47606 * +(fTemp121));
			fTemp123 = +(+(3.47606 * +(+(+(fTemp121) * +(((+(fTemp122) > 0.) | 0))) * +(((+(fTemp122) <= 1.) | 0)))) + +(((+(fTemp122) > 1.) | 0)));
			fTemp124 = +(3. * +(fTemp111));
			fTemp125 = +(+(fTemp123) * +(cosf(+(fTemp124))));
			fTemp126 = +(0.285714 * +(fTemp125));
			fTemp127 = +(0.707107 * +(+(+(+(fTemp113) + 0.142857) + +(fTemp120)) + +(fTemp126)));
			fTemp128 = +(+(sinf(+(fTemp111))) * +(fTemp110));
			fTemp129 = +(0.202031 * +(fTemp128));
			fTemp130 = +(+(sinf(+(fTemp118))) * +(fTemp117));
			fTemp131 = +(0.285714 * +(fTemp130));
			fTemp132 = +(+(sinf(+(fTemp124))) * +(fTemp123));
			fTemp133 = +(0.202031 * +(fTemp125));
			fTemp134 = +(0.285714 * +(fTemp128));
			fTemp135 = +(0.285714 * +(fTemp132));
			fTemp136 = +(0.202031 * +(fTemp112));
			fTemp137 = +(+(+(faustpower2_f(+(fTemp104))) * +((iTemp105 | 0))) + +((iTemp106 | 0)));
			HEAPF32[dsp + 14867560 + (0 << 2) >> 2] = +(+(fSlow35) + +(0.999 * +(HEAPF32[dsp + 14867560 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867568 + (0 << 2) >> 2] = +(+(fSlow36) + +(0.999 * +(HEAPF32[dsp + 14867568 + (1 << 2) >> 2])));
			fTemp138 = +(0. - +(HEAPF32[dsp + 14867568 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867576 + (0 << 2) >> 2] = +(+(fSlow37) + +(0.999 * +(HEAPF32[dsp + 14867576 + (1 << 2) >> 2])));
			fTemp139 = +(atan2f(+(fTemp138), +(HEAPF32[dsp + 14867576 + (0 << 2) >> 2])));
			fTemp140 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 14867576 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp138)))), 0.5));
			iTemp141 = ((+(fTemp140) > 1.) | 0);
			iTemp142 = ((+(fTemp140) < 1.) | 0);
			fTemp143 = +(+((iTemp141 | 0)) + +(+(fTemp140) * +((iTemp142 | 0))));
			fTemp144 = +(2. * +(fTemp143));
			fTemp145 = +(+(2. * +(+(+(fTemp143) * +(((+(fTemp144) > 0.) | 0))) * +(((+(fTemp144) <= 1.) | 0)))) + +(((+(fTemp144) > 1.) | 0)));
			fTemp146 = +(+(sinf(+(fTemp139))) * +(fTemp145));
			fTemp147 = +(+(fTemp145) * +(cosf(+(fTemp139))));
			fTemp148 = +(0.285714 * +(fTemp147));
			fTemp149 = +(2. * +(fTemp139));
			fTemp150 = +(1.38629 * +(fTemp143));
			fTemp151 = +(+(fTemp150) - 0.693147);
			fTemp152 = +(2.4663 * +(fTemp151));
			fTemp153 = +(+(2.4663 * +(+(+(fTemp151) * +(((+(fTemp152) > 0.) | 0))) * +(((+(fTemp152) <= 1.) | 0)))) + +(((+(fTemp152) > 1.) | 0)));
			fTemp154 = +(+(sinf(+(fTemp149))) * +(fTemp153));
			fTemp155 = +(+(fTemp153) * +(cosf(+(fTemp149))));
			fTemp156 = +(0.285714 * +(fTemp155));
			fTemp157 = +(3. * +(fTemp139));
			fTemp158 = +(+(fTemp150) - 1.09861);
			fTemp159 = +(3.47606 * +(fTemp158));
			fTemp160 = +(+(3.47606 * +(+(+(fTemp158) * +(((+(fTemp159) > 0.) | 0))) * +(((+(fTemp159) <= 1.) | 0)))) + +(((+(fTemp159) > 1.) | 0)));
			fTemp161 = +(+(sinf(+(fTemp157))) * +(fTemp160));
			fTemp162 = +(+(fTemp160) * +(cosf(+(fTemp157))));
			fTemp163 = +(0.285714 * +(fTemp162));
			fTemp164 = +(0.707107 * +(+(+(0.142857 + +(fTemp148)) + +(fTemp156)) + +(fTemp163)));
			fTemp165 = +(0.202031 * +(fTemp146));
			fTemp166 = +(0.285714 * +(fTemp154));
			fTemp167 = +(0.202031 * +(fTemp162));
			fTemp168 = +(0.285714 * +(fTemp146));
			fTemp169 = +(0.285714 * +(fTemp161));
			fTemp170 = +(0.202031 * +(fTemp147));
			fSel8 = 0.;
			if ((((((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow38) != +(HEAPF32[dsp + 14867600 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel8 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel8 = +(((((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow38) != +(HEAPF32[dsp + 14867608 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel9 = 0.;
			if ((((+(HEAPF32[dsp + 14867584 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel9 = +(((((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14867584 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel9 = +(fSel8);
				
			}
			HEAPF32[dsp + 14867584 + (0 << 2) >> 2] = +(fSel9);
			HEAPF32[dsp + 14867592 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) + +(fSel9))))));
			HEAPF32[dsp + 14867600 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14867608 + (1 << 2) >> 2]) != +(fSlow38)) | 0)) | 0)?+(fSlow38):+(HEAPF32[dsp + 14867600 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14867608 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14867592 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14867600 + (1 << 2) >> 2]) != +(fSlow38)) | 0)) | 0)?+(fSlow38):+(HEAPF32[dsp + 14867608 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14867616 + (0 << 2) >> 2] = +(+(fSlow39) + +(0.999 * +(HEAPF32[dsp + 14867616 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867624 + (0 << 2) >> 2] = +(+(fSlow40) + +(0.999 * +(HEAPF32[dsp + 14867624 + (1 << 2) >> 2])));
			fTemp171 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (3 << 2) >> 2] | 0))));
			fSel10 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel10 = +(0.5 * +(fTemp171));
				
			} else {
				fSel10 = +(HEAPF32[dsp + 14867632 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867632 + (0 << 2) >> 2] = +(fSel10);
			HEAPF32[dsp + 14867640 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867640 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14867632 + (0 << 2) >> 2]) < +(fSlow41)) | 0))));
			fTemp172 = +(+(HEAPF32[dsp + 14867640 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867648 + (0 << 2) >> 2] = +(+(fSlow42) + +(0.999 * +(HEAPF32[dsp + 14867648 + (1 << 2) >> 2])));
			fSel11 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel11 = +(40. + +(20. * +(fTemp171)));
				
			} else {
				fSel11 = +(HEAPF32[dsp + 14867656 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867656 + (0 << 2) >> 2] = +(fSel11);
			HEAPF32[dsp + 14867664 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867664 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14867656 + (0 << 2) >> 2]) - 69.))))));
			fTemp173 = +(+(HEAPF32[dsp + 14867672 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14867664 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867672 + (0 << 2) >> 2] = +(+(fTemp173) - +(floorf(+(fTemp173))));
			fTemp174 = +(+(fTemp172) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14867672 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 13369344 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp174);
			HEAPF32[dsp + 14867680 + (0 << 2) >> 2] = +(+(fSlow43) + +(0.99 * +(HEAPF32[dsp + 14867680 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867688 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14867688 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14867680 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp175 = ~~(+(HEAPF32[dsp + 14867688 + (0 << 2) >> 2]));
			iTemp176 = ((1 + (iTemp175 | 0)) | 0);
			fTemp177 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14867688 + (0 << 2) >> 2])), 1.));
			fTemp178 = +(256. + +(HEAPF32[dsp + 14867688 + (0 << 2) >> 2]));
			iTemp179 = ~~(+(fTemp178));
			fTemp180 = +(+(+(+(fTemp172) * +(1. - +(HEAPF32[dsp + 14867648 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14867672 + (0 << 2) >> 2]))) << 2) >> 2])) + +(+(HEAPF32[dsp + 14867648 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 13369344 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp175 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp176 | 0)) - +(HEAPF32[dsp + 14867688 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 14867688 + (0 << 2) >> 2]) - +((iTemp175 | 0))) * +(HEAPF32[dsp + 13369344 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp176 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp177)) + +(+(+(+(HEAPF32[dsp + 13369344 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp179 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp179 | 0)) - +(255. + +(HEAPF32[dsp + 14867688 + (0 << 2) >> 2])))) + +(+(+(fTemp178) - +((iTemp179 | 0))) * +(HEAPF32[dsp + 13369344 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp179 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp177))))));
			HEAPF32[dsp + 14867696 + (0 << 2) >> 2] = +(+(fSlow44) + +(0.99 * +(HEAPF32[dsp + 14867696 + (1 << 2) >> 2])));
			fTemp181 = +(max(-1., +(min(1., +(+(fTemp180) * +(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14867696 + (0 << 2) >> 2]) - 80.)))))))));
			fTemp182 = +(+(+(1. - +(HEAPF32[dsp + 14867624 + (0 << 2) >> 2])) * +(fTemp180)) + +(+(+(HEAPF32[dsp + 14867624 + (0 << 2) >> 2]) * +(fTemp181)) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp181)))))));
			HEAPF32[dsp + 14867704 + (0 << 2) >> 2] = +(+(fSlow45) + +(0.99 * +(HEAPF32[dsp + 14867704 + (1 << 2) >> 2])));
			fTemp183 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14867704 + (0 << 2) >> 2]) - 80.))));
			fTemp184 = +(1. - +(fTemp183));
			HEAPF32[dsp + 14867712 + (0 << 2) >> 2] = +(+(+(fTemp182) + +(+(fTemp184) * +(HEAPF32[dsp + 14867712 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14867744 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867720 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867712 + (0 << 2) >> 2]) + +(+(fTemp184) * +(HEAPF32[dsp + 14867720 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867728 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867720 + (0 << 2) >> 2]) + +(+(fTemp184) * +(HEAPF32[dsp + 14867728 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867736 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867728 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 14867736 + (1 << 2) >> 2]) * +(fTemp184)));
			HEAPF32[dsp + 14867744 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14867736 + (0 << 2) >> 2]) * +(powf(+(fTemp183), 4.)));
			HEAPF32[dsp + 14867752 + (0 << 2) >> 2] = +(+(fSlow46) + +(0.999 * +(HEAPF32[dsp + 14867752 + (1 << 2) >> 2])));
			fTemp185 = +(+(+(HEAPF32[dsp + 14867744 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14867752 + (0 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 14867752 + (0 << 2) >> 2])) * +(fTemp182)));
			HEAPF32[dsp + 14867760 + (0 << 2) >> 2] = +(+(fSlow47) + +(0.99 * +(HEAPF32[dsp + 14867760 + (1 << 2) >> 2])));
			fTemp186 = +(+(HEAPF32[dsp + 14867760 + (0 << 2) >> 2]) - 80.);
			fTemp187 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp186))))));
			fTemp188 = +(1. / +(fTemp187));
			fTemp189 = +(1. + +(+(0.00333333 + +(fTemp188)) / +(fTemp187)));
			HEAPF32[dsp + 14866552 + (0 << 2) >> 2] = +(+(fTemp185) - +(+(+(+(HEAPF32[dsp + 14866552 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp188) - 0.00333333) / +(fTemp187)))) + +(2. * +(+(HEAPF32[dsp + 14866552 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp187)))))))) / +(fTemp189)));
			fTemp190 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp186))))));
			fTemp191 = +(1. / +(fTemp190));
			fTemp192 = +(1. + +(+(0.00333333 + +(fTemp191)) / +(fTemp190)));
			HEAPF32[dsp + 14866564 + (0 << 2) >> 2] = +(+(fTemp185) - +(+(+(+(HEAPF32[dsp + 14866564 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp191) - 0.00333333) / +(fTemp190)))) + +(2. * +(+(HEAPF32[dsp + 14866564 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp190)))))))) / +(fTemp192)));
			fTemp193 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp186))))));
			fTemp194 = +(1. / +(fTemp193));
			fTemp195 = +(1. + +(+(0.00333333 + +(fTemp194)) / +(fTemp193)));
			HEAPF32[dsp + 14866576 + (0 << 2) >> 2] = +(+(fTemp185) - +(+(+(+(HEAPF32[dsp + 14866576 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp194) - 0.00333333) / +(fTemp193)))) + +(2. * +(+(HEAPF32[dsp + 14866576 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp193)))))))) / +(fTemp195)));
			fTemp196 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp186))))));
			fTemp197 = +(1. / +(fTemp196));
			fTemp198 = +(1. + +(+(0.00333333 + +(fTemp197)) / +(fTemp196)));
			HEAPF32[dsp + 14866588 + (0 << 2) >> 2] = +(+(fTemp185) - +(+(+(+(HEAPF32[dsp + 14866588 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp197) - 0.00333333) / +(fTemp196)))) + +(2. * +(+(HEAPF32[dsp + 14866588 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp196)))))))) / +(fTemp198)));
			fTemp199 = +(+(+(HEAPF32[dsp + 14867616 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 14866552 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 14866552 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866552 + (2 << 2) >> 2]))) / +(fTemp189)) + +(+(+(+(HEAPF32[dsp + 14866564 + (1 << 2) >> 2]) + +(0.5 * +(HEAPF32[dsp + 14866564 + (0 << 2) >> 2]))) + +(0.5 * +(HEAPF32[dsp + 14866564 + (2 << 2) >> 2]))) / +(fTemp192))) + +(+(+(+(0.4 * +(HEAPF32[dsp + 14866576 + (0 << 2) >> 2])) + +(0.8 * +(HEAPF32[dsp + 14866576 + (1 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866576 + (2 << 2) >> 2]))) / +(fTemp195))) + +(+(+(+(0.3 * +(HEAPF32[dsp + 14866588 + (0 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 14866588 + (1 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866588 + (2 << 2) >> 2]))) / +(fTemp198)))) + +(+(+(fSlow48) * +(HEAPF32[dsp + 14867768 + (1 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 14867616 + (0 << 2) >> 2])) * +(fTemp185))));
			HEAPF32[dsp + 4456448 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp199);
			HEAPF32[dsp + 14867768 + (0 << 2) >> 2] = +(+(+(1. - +(HEAPF32[dsp + 14867592 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 4456448 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14867600 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 14867592 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 4456448 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14867608 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])));
			HEAPF32[dsp + 14867776 + (0 << 2) >> 2] = +(+(fSlow49) + +(0.999 * +(HEAPF32[dsp + 14867776 + (1 << 2) >> 2])));
			fTemp200 = +(2. * +(HEAPF32[dsp + 14867768 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14867784 + (0 << 2) >> 2] = +(+(fSlow50) + +(0.99 * +(HEAPF32[dsp + 14867784 + (1 << 2) >> 2])));
			fTemp201 = +(+(HEAPF32[dsp + 14867784 + (0 << 2) >> 2]) - 80.);
			fTemp202 = +(1. - +(0.00833333 * +(fTemp201)));
			HEAPF32[dsp + 14867792 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867792 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 14867800 + (1 << 2) >> 2]) * +(fTemp202)));
			HEAPF32[dsp + 14548992 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867792 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867800 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14548992 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867808 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867808 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867816 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14557184 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867808 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867816 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14557184 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867824 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867824 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867832 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14565376 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867824 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867832 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14565376 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867840 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867840 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867848 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14573568 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867840 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867848 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14573568 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867856 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867856 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867864 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14581760 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867856 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867864 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14581760 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867872 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867872 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867880 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14589952 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867872 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867880 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14589952 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867888 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867888 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867896 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14598144 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867888 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867896 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14598144 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14867904 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp201) * +(HEAPF32[dsp + 14867904 + (1 << 2) >> 2]))) + +(+(fTemp202) * +(HEAPF32[dsp + 14867912 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14606336 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp200) + +(0.5 * +(HEAPF32[dsp + 14867904 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867912 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14606336 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			fTemp203 = +(+(+(+(+(+(+(+(HEAPF32[dsp + 14867800 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14867816 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867832 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867848 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867864 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867880 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867896 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14867912 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14819328 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(fTemp203) + +(0.5 * +(HEAPF32[dsp + 14867920 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867920 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14819328 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec159 = +(0. - +(+(fTemp203) - +(HEAPF32[dsp + 14867920 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14843904 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec159) + +(0.5 * +(HEAPF32[dsp + 14867928 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867928 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14843904 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec157 = +(+(HEAPF32[dsp + 14867928 + (1 << 2) >> 2]) - +(fRec159));
			HEAPF32[dsp + 14845952 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec157) + +(0.5 * +(HEAPF32[dsp + 14867936 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867936 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14845952 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec155 = +(+(HEAPF32[dsp + 14867936 + (1 << 2) >> 2]) - +(fRec157));
			HEAPF32[dsp + 14862336 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(fRec155) + +(0.5 * +(HEAPF32[dsp + 14867944 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14867944 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14862336 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec153 = +(+(HEAPF32[dsp + 14867944 + (1 << 2) >> 2]) - +(fRec155));
			fTemp204 = +(+(2. * +(+(HEAPF32[dsp + 14867768 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14867776 + (0 << 2) >> 2])))) + +(+(HEAPF32[dsp + 14867776 + (0 << 2) >> 2]) * +(fRec153)));
			fTemp205 = +(1. + +(1.38629 * +(0. - +(+(fTemp143) - 1.))));
			fTemp206 = +(+(+(faustpower2_f(+(fTemp140))) * +((iTemp141 | 0))) + +((iTemp142 | 0)));
			fTemp207 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (0 << 2) >> 2] | 0))));
			fSel12 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel12 = +(40. + +(20. * +(fTemp207)));
				
			} else {
				fSel12 = +(HEAPF32[dsp + 14867952 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867952 + (0 << 2) >> 2] = +(fSel12);
			HEAPF32[dsp + 14867960 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867960 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14867952 + (0 << 2) >> 2]) - 69.))))));
			fTemp208 = +(+(HEAPF32[dsp + 14867968 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14867960 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14867968 + (0 << 2) >> 2] = +(+(fTemp208) - +(floorf(+(fTemp208))));
			fSel13 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel13 = +(0.5 * +(fTemp207));
				
			} else {
				fSel13 = +(HEAPF32[dsp + 14867976 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14867976 + (0 << 2) >> 2] = +(fSel13);
			HEAPF32[dsp + 14867984 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14867984 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14867976 + (0 << 2) >> 2]) < +(fSlow52)) | 0))));
			fTemp209 = +(+(+(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14867968 + (0 << 2) >> 2]))) << 2) >> 2]) * +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 14867984 + (0 << 2) >> 2]));
			HEAPF32[dsp + 13631488 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp209);
			HEAPF32[dsp + 14867992 + (0 << 2) >> 2] = +(+(fSlow53) + +(0.999 * +(HEAPF32[dsp + 14867992 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868000 + (0 << 2) >> 2] = +(+(fSlow54) + +(0.99 * +(HEAPF32[dsp + 14868000 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868008 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14868008 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14868000 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp210 = ~~(+(HEAPF32[dsp + 14868008 + (0 << 2) >> 2]));
			iTemp211 = ((1 + (iTemp210 | 0)) | 0);
			fTemp212 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14868008 + (0 << 2) >> 2])), 1.));
			fTemp213 = +(256. + +(HEAPF32[dsp + 14868008 + (0 << 2) >> 2]));
			iTemp214 = ~~(+(fTemp213));
			fTemp215 = +(+(+(fTemp209) * +(1. - +(HEAPF32[dsp + 14867992 + (0 << 2) >> 2]))) + +(+(+(+(+(+(HEAPF32[dsp + 13631488 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp210 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp211 | 0)) - +(HEAPF32[dsp + 14868008 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13631488 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp211 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+(HEAPF32[dsp + 14868008 + (0 << 2) >> 2]) - +((iTemp210 | 0))))) * +(fTemp212)) + +(+(+(+(HEAPF32[dsp + 13631488 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp214 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp214 | 0)) - +(255. + +(HEAPF32[dsp + 14868008 + (0 << 2) >> 2])))) + +(+(+(fTemp213) - +((iTemp214 | 0))) * +(HEAPF32[dsp + 13631488 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp214 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp212)))) * +(HEAPF32[dsp + 14867992 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868016 + (0 << 2) >> 2] = +(+(fSlow55) + +(0.999 * +(HEAPF32[dsp + 14868016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868024 + (0 << 2) >> 2] = +(+(fSlow56) + +(0.99 * +(HEAPF32[dsp + 14868024 + (1 << 2) >> 2])));
			fTemp216 = +(max(-1., +(min(1., +(+(fTemp215) * +(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14868024 + (0 << 2) >> 2]) - 80.)))))))));
			fTemp217 = +(+(+(fTemp215) * +(1. - +(HEAPF32[dsp + 14868016 + (0 << 2) >> 2]))) + +(+(+(fTemp216) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp216)))))) * +(HEAPF32[dsp + 14868016 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868032 + (0 << 2) >> 2] = +(+(fSlow57) + +(0.999 * +(HEAPF32[dsp + 14868032 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868040 + (0 << 2) >> 2] = +(+(fSlow58) + +(0.99 * +(HEAPF32[dsp + 14868040 + (1 << 2) >> 2])));
			fTemp218 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14868040 + (0 << 2) >> 2]) - 80.))));
			fTemp219 = +(1. - +(fTemp218));
			HEAPF32[dsp + 14868048 + (0 << 2) >> 2] = +(+(+(fTemp217) + +(+(fTemp219) * +(HEAPF32[dsp + 14868048 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14868080 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868056 + (0 << 2) >> 2] = +(+(+(fTemp219) * +(HEAPF32[dsp + 14868056 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 14868048 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868064 + (0 << 2) >> 2] = +(+(+(fTemp219) * +(HEAPF32[dsp + 14868064 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 14868056 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868072 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 14868072 + (1 << 2) >> 2]) * +(fTemp219)) + +(HEAPF32[dsp + 14868064 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868080 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868072 + (0 << 2) >> 2]) * +(powf(+(fTemp218), 4.)));
			fTemp220 = +(+(+(fTemp217) * +(1. - +(HEAPF32[dsp + 14868032 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 14868080 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14868032 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868088 + (0 << 2) >> 2] = +(+(fSlow59) + +(0.99 * +(HEAPF32[dsp + 14868088 + (1 << 2) >> 2])));
			fTemp221 = +(+(HEAPF32[dsp + 14868088 + (0 << 2) >> 2]) - 80.);
			fTemp222 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp221))))));
			fTemp223 = +(1. / +(fTemp222));
			fTemp224 = +(1. + +(+(0.00333333 + +(fTemp223)) / +(fTemp222)));
			HEAPF32[dsp + 14866600 + (0 << 2) >> 2] = +(+(fTemp220) - +(+(+(+(HEAPF32[dsp + 14866600 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp223) - 0.00333333) / +(fTemp222)))) + +(2. * +(+(HEAPF32[dsp + 14866600 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp222)))))))) / +(fTemp224)));
			fTemp225 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp221))))));
			fTemp226 = +(1. / +(fTemp225));
			fTemp227 = +(1. + +(+(0.00333333 + +(fTemp226)) / +(fTemp225)));
			HEAPF32[dsp + 14866612 + (0 << 2) >> 2] = +(+(fTemp220) - +(+(+(+(HEAPF32[dsp + 14866612 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp226) - 0.00333333) / +(fTemp225)))) + +(2. * +(+(HEAPF32[dsp + 14866612 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp225)))))))) / +(fTemp227)));
			fTemp228 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp221))))));
			fTemp229 = +(1. / +(fTemp228));
			fTemp230 = +(1. + +(+(0.00333333 + +(fTemp229)) / +(fTemp228)));
			HEAPF32[dsp + 14866624 + (0 << 2) >> 2] = +(+(fTemp220) - +(+(+(+(HEAPF32[dsp + 14866624 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp229) - 0.00333333) / +(fTemp228)))) + +(2. * +(+(HEAPF32[dsp + 14866624 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp228)))))))) / +(fTemp230)));
			fTemp231 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp221))))));
			fTemp232 = +(1. / +(fTemp231));
			fTemp233 = +(1. + +(+(0.00333333 + +(fTemp232)) / +(fTemp231)));
			HEAPF32[dsp + 14866636 + (0 << 2) >> 2] = +(+(fTemp220) - +(+(+(+(HEAPF32[dsp + 14866636 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp232) - 0.00333333) / +(fTemp231)))) + +(2. * +(+(HEAPF32[dsp + 14866636 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp231)))))))) / +(fTemp233)));
			HEAPF32[dsp + 14868096 + (0 << 2) >> 2] = +(+(fSlow60) + +(0.999 * +(HEAPF32[dsp + 14868096 + (1 << 2) >> 2])));
			fTemp234 = +(+(+(+(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 14866600 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 14866600 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866600 + (2 << 2) >> 2]))) / +(fTemp224)) + +(+(+(+(HEAPF32[dsp + 14866612 + (1 << 2) >> 2]) + +(0.5 * +(HEAPF32[dsp + 14866612 + (0 << 2) >> 2]))) + +(0.5 * +(HEAPF32[dsp + 14866612 + (2 << 2) >> 2]))) / +(fTemp227))) + +(+(+(+(0.8 * +(HEAPF32[dsp + 14866624 + (1 << 2) >> 2])) + +(0.4 * +(HEAPF32[dsp + 14866624 + (0 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866624 + (2 << 2) >> 2]))) / +(fTemp230))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 14866636 + (1 << 2) >> 2])) + +(0.3 * +(HEAPF32[dsp + 14866636 + (0 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866636 + (2 << 2) >> 2]))) / +(fTemp233))) * +(HEAPF32[dsp + 14868096 + (0 << 2) >> 2])) + +(+(fSlow61) * +(HEAPF32[dsp + 14868136 + (1 << 2) >> 2]))) + +(+(1. - +(HEAPF32[dsp + 14868096 + (0 << 2) >> 2])) * +(fTemp220)));
			HEAPF32[dsp + 6553600 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp234);
			fSel14 = 0.;
			if ((((((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow62) != +(HEAPF32[dsp + 14868120 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel14 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel14 = +(((((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow62) != +(HEAPF32[dsp + 14868128 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel15 = 0.;
			if ((((+(HEAPF32[dsp + 14868104 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel15 = +(((((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14868104 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel15 = +(fSel14);
				
			}
			HEAPF32[dsp + 14868104 + (0 << 2) >> 2] = +(fSel15);
			HEAPF32[dsp + 14868112 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) + +(fSel15))))));
			HEAPF32[dsp + 14868120 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14868128 + (1 << 2) >> 2]) != +(fSlow62)) | 0)) | 0)?+(fSlow62):+(HEAPF32[dsp + 14868120 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868128 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868112 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14868120 + (1 << 2) >> 2]) != +(fSlow62)) | 0)) | 0)?+(fSlow62):+(HEAPF32[dsp + 14868128 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868136 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 6553600 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868120 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14868112 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 6553600 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868128 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 14868112 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868144 + (0 << 2) >> 2] = +(+(fSlow63) + +(0.999 * +(HEAPF32[dsp + 14868144 + (1 << 2) >> 2])));
			fTemp235 = +(2. * +(HEAPF32[dsp + 14868136 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868152 + (0 << 2) >> 2] = +(+(fSlow64) + +(0.99 * +(HEAPF32[dsp + 14868152 + (1 << 2) >> 2])));
			fTemp236 = +(+(HEAPF32[dsp + 14868152 + (0 << 2) >> 2]) - 80.);
			fTemp237 = +(1. - +(0.00833333 * +(fTemp236)));
			HEAPF32[dsp + 14868160 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868160 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(HEAPF32[dsp + 14868168 + (1 << 2) >> 2]) * +(fTemp237)));
			HEAPF32[dsp + 14614528 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868160 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868168 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14614528 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868176 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868176 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868184 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14622720 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868176 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868184 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14622720 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868192 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868192 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868200 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14630912 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868192 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868200 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14630912 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868208 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868208 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868216 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14639104 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868208 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868216 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14639104 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868224 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868224 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868232 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14647296 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868224 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868232 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14647296 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868240 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868240 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868248 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14655488 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868240 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868248 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14655488 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868256 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868256 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868264 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14663680 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868256 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868264 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14663680 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868272 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868272 + (1 << 2) >> 2]) * +(fTemp236))) + +(+(fTemp237) * +(HEAPF32[dsp + 14868280 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14671872 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp235) + +(0.5 * +(HEAPF32[dsp + 14868272 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868280 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14671872 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14823424 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 14868288 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 14868168 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868184 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868200 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868216 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868232 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868248 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868264 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868280 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868288 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14823424 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec213 = +(0. - +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 14868168 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14868184 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868200 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868216 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868232 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868248 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868264 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868280 + (0 << 2) >> 2])) - +(HEAPF32[dsp + 14868288 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14848000 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14868296 + (1 << 2) >> 2])) + +(fRec213));
			HEAPF32[dsp + 14868296 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14848000 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec211 = +(+(HEAPF32[dsp + 14868296 + (1 << 2) >> 2]) - +(fRec213));
			HEAPF32[dsp + 14850048 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14868304 + (1 << 2) >> 2])) + +(fRec211));
			HEAPF32[dsp + 14868304 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14850048 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec209 = +(+(HEAPF32[dsp + 14868304 + (1 << 2) >> 2]) - +(fRec211));
			HEAPF32[dsp + 14863360 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14868312 + (1 << 2) >> 2])) + +(fRec209));
			HEAPF32[dsp + 14868312 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14863360 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec207 = +(+(HEAPF32[dsp + 14868312 + (1 << 2) >> 2]) - +(fRec209));
			HEAPF32[dsp + 14868320 + (0 << 2) >> 2] = +(+(fSlow65) + +(0.999 * +(HEAPF32[dsp + 14868320 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868328 + (0 << 2) >> 2] = +(+(fSlow66) + +(0.999 * +(HEAPF32[dsp + 14868328 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868336 + (0 << 2) >> 2] = +(+(fSlow67) + +(0.999 * +(HEAPF32[dsp + 14868336 + (1 << 2) >> 2])));
			fTemp238 = +(0. - +(HEAPF32[dsp + 14868336 + (0 << 2) >> 2]));
			fTemp239 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 14868328 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp238)))), 0.5));
			iTemp240 = ((+(fTemp239) > 1.) | 0);
			iTemp241 = ((+(fTemp239) < 1.) | 0);
			fTemp242 = +(+((iTemp240 | 0)) + +(+(fTemp239) * +((iTemp241 | 0))));
			fTemp243 = +(+(+(+(2. * +(+(HEAPF32[dsp + 14868136 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14868144 + (0 << 2) >> 2])))) + +(+(HEAPF32[dsp + 14868144 + (0 << 2) >> 2]) * +(fRec207))) * +(HEAPF32[dsp + 14868320 + (0 << 2) >> 2])) * +(1. + +(1.38629 * +(0. - +(+(fTemp242) - 1.)))));
			fTemp244 = +(2. * +(fTemp242));
			fTemp245 = +(+(2. * +(+(+(fTemp242) * +(((+(fTemp244) > 0.) | 0))) * +(((+(fTemp244) <= 1.) | 0)))) + +(((+(fTemp244) > 1.) | 0)));
			fTemp246 = +(atan2f(+(fTemp238), +(HEAPF32[dsp + 14868328 + (0 << 2) >> 2])));
			fTemp247 = +(+(fTemp245) * +(cosf(+(fTemp246))));
			fTemp248 = +(0.285714 * +(fTemp247));
			fTemp249 = +(1.38629 * +(fTemp242));
			fTemp250 = +(+(fTemp249) - 0.693147);
			fTemp251 = +(2.4663 * +(fTemp250));
			fTemp252 = +(+(2.4663 * +(+(+(fTemp250) * +(((+(fTemp251) > 0.) | 0))) * +(((+(fTemp251) <= 1.) | 0)))) + +(((+(fTemp251) > 1.) | 0)));
			fTemp253 = +(2. * +(fTemp246));
			fTemp254 = +(+(fTemp252) * +(cosf(+(fTemp253))));
			fTemp255 = +(0.285714 * +(fTemp254));
			fTemp256 = +(+(fTemp249) - 1.09861);
			fTemp257 = +(3.47606 * +(fTemp256));
			fTemp258 = +(+(3.47606 * +(+(+(fTemp256) * +(((+(fTemp257) > 0.) | 0))) * +(((+(fTemp257) <= 1.) | 0)))) + +(((+(fTemp257) > 1.) | 0)));
			fTemp259 = +(3. * +(fTemp246));
			fTemp260 = +(+(fTemp258) * +(cosf(+(fTemp259))));
			fTemp261 = +(0.285714 * +(fTemp260));
			fTemp262 = +(0.707107 * +(+(+(0.142857 + +(fTemp248)) + +(fTemp255)) + +(fTemp261)));
			fTemp263 = +(+(sinf(+(fTemp246))) * +(fTemp245));
			fTemp264 = +(0.202031 * +(fTemp263));
			fTemp265 = +(+(sinf(+(fTemp253))) * +(fTemp252));
			fTemp266 = +(0.285714 * +(fTemp265));
			fTemp267 = +(+(sinf(+(fTemp259))) * +(fTemp258));
			fTemp268 = +(0.202031 * +(fTemp260));
			fTemp269 = +(0.285714 * +(fTemp263));
			fTemp270 = +(0.285714 * +(fTemp267));
			fTemp271 = +(0.202031 * +(fTemp247));
			fTemp272 = +(+(+(faustpower2_f(+(fTemp239))) * +((iTemp240 | 0))) + +((iTemp241 | 0)));
			HEAPF32[dsp + 14868344 + (0 << 2) >> 2] = +(+(fSlow69) + +(0.999 * +(HEAPF32[dsp + 14868344 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868352 + (0 << 2) >> 2] = +(+(fSlow70) + +(0.999 * +(HEAPF32[dsp + 14868352 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868360 + (0 << 2) >> 2] = +(+(fSlow71) + +(0.999 * +(HEAPF32[dsp + 14868360 + (1 << 2) >> 2])));
			fTemp273 = +(0. - +(HEAPF32[dsp + 14868360 + (0 << 2) >> 2]));
			fTemp274 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 14868352 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp273)))), 0.5));
			iTemp275 = ((+(fTemp274) > 1.) | 0);
			iTemp276 = ((+(fTemp274) < 1.) | 0);
			fTemp277 = +(+((iTemp275 | 0)) + +(+(fTemp274) * +((iTemp276 | 0))));
			fTemp278 = +(2. * +(fTemp277));
			fTemp279 = +(+(2. * +(+((imul(((+(fTemp278) > 0.) | 0), ((+(fTemp278) <= 1.) | 0)) | 0)) * +(fTemp277))) + +(((+(fTemp278) > 1.) | 0)));
			fTemp280 = +(atan2f(+(fTemp273), +(HEAPF32[dsp + 14868352 + (0 << 2) >> 2])));
			fTemp281 = +(+(fTemp279) * +(sinf(+(fTemp280))));
			fTemp282 = +(0.202031 * +(fTemp281));
			fTemp283 = +(+(fTemp279) * +(cosf(+(fTemp280))));
			fTemp284 = +(2. * +(fTemp280));
			fTemp285 = +(1.38629 * +(fTemp277));
			fTemp286 = +(+(fTemp285) - 0.693147);
			fTemp287 = +(2.4663 * +(fTemp286));
			fTemp288 = +(+(2.4663 * +(+(+(fTemp286) * +(((+(fTemp287) > 0.) | 0))) * +(((+(fTemp287) <= 1.) | 0)))) + +(((+(fTemp287) > 1.) | 0)));
			fTemp289 = +(+(sinf(+(fTemp284))) * +(fTemp288));
			fTemp290 = +(0.285714 * +(fTemp289));
			fTemp291 = +(+(cosf(+(fTemp284))) * +(fTemp288));
			fTemp292 = +(3. * +(fTemp280));
			fTemp293 = +(+(fTemp285) - 1.09861);
			fTemp294 = +(3.47606 * +(fTemp293));
			fTemp295 = +(+(3.47606 * +(+(+(fTemp293) * +(((+(fTemp294) > 0.) | 0))) * +(((+(fTemp294) <= 1.) | 0)))) + +(((+(fTemp294) > 1.) | 0)));
			fTemp296 = +(+(sinf(+(fTemp292))) * +(fTemp295));
			fTemp297 = +(+(fTemp295) * +(cosf(+(fTemp292))));
			fTemp298 = +(0.202031 * +(fTemp297));
			fTemp299 = +(0.285714 * +(fTemp291));
			fTemp300 = +(0.285714 * +(fTemp283));
			fTemp301 = +(0.285714 * +(fTemp297));
			fTemp302 = +(0.707107 * +(+(+(fTemp299) + +(0.142857 + +(fTemp300))) + +(fTemp301)));
			fTemp303 = +(0.285714 * +(fTemp281));
			fTemp304 = +(0.285714 * +(fTemp296));
			fTemp305 = +(0.202031 * +(fTemp283));
			fSel16 = 0.;
			if ((((((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow72) != +(HEAPF32[dsp + 14868384 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel16 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel16 = +(((((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow72) != +(HEAPF32[dsp + 14868392 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel17 = 0.;
			if ((((+(HEAPF32[dsp + 14868368 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel17 = +(((((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14868368 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel17 = +(fSel16);
				
			}
			HEAPF32[dsp + 14868368 + (0 << 2) >> 2] = +(fSel17);
			HEAPF32[dsp + 14868376 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) + +(fSel17))))));
			HEAPF32[dsp + 14868384 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14868392 + (1 << 2) >> 2]) != +(fSlow72)) | 0)) | 0)?+(fSlow72):+(HEAPF32[dsp + 14868384 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868392 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868376 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14868384 + (1 << 2) >> 2]) != +(fSlow72)) | 0)) | 0)?+(fSlow72):+(HEAPF32[dsp + 14868392 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868400 + (0 << 2) >> 2] = +(+(fSlow73) + +(0.999 * +(HEAPF32[dsp + 14868400 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868408 + (0 << 2) >> 2] = +(+(fSlow74) + +(0.999 * +(HEAPF32[dsp + 14868408 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868416 + (0 << 2) >> 2] = +(+(fSlow75) + +(0.999 * +(HEAPF32[dsp + 14868416 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868424 + (0 << 2) >> 2] = +(+(fSlow76) + +(0.999 * +(HEAPF32[dsp + 14868424 + (1 << 2) >> 2])));
			fTemp306 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (5 << 2) >> 2] | 0))));
			fSel18 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel18 = +(0.5 * +(fTemp306));
				
			} else {
				fSel18 = +(HEAPF32[dsp + 14868432 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14868432 + (0 << 2) >> 2] = +(fSel18);
			HEAPF32[dsp + 14868440 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14868440 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14868432 + (0 << 2) >> 2]) < +(fSlow77)) | 0))));
			fSel19 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel19 = +(40. + +(20. * +(fTemp306)));
				
			} else {
				fSel19 = +(HEAPF32[dsp + 14868448 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14868448 + (0 << 2) >> 2] = +(fSel19);
			HEAPF32[dsp + 14868456 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14868456 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14868448 + (0 << 2) >> 2]) - 69.))))));
			fTemp307 = +(+(HEAPF32[dsp + 14868464 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14868456 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868464 + (0 << 2) >> 2] = +(+(fTemp307) - +(floorf(+(fTemp307))));
			fTemp308 = +(+(+(HEAPF32[dsp + 14866856 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14868440 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14868464 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 13893632 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp308);
			HEAPF32[dsp + 14868472 + (0 << 2) >> 2] = +(+(fSlow78) + +(0.99 * +(HEAPF32[dsp + 14868472 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868480 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14868480 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14868472 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp309 = ~~(+(HEAPF32[dsp + 14868480 + (0 << 2) >> 2]));
			iTemp310 = ((1 + (iTemp309 | 0)) | 0);
			fTemp311 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14868480 + (0 << 2) >> 2])), 1.));
			fTemp312 = +(256. + +(HEAPF32[dsp + 14868480 + (0 << 2) >> 2]));
			iTemp313 = ~~(+(fTemp312));
			fTemp314 = +(+(+(+(+(1. - +(HEAPF32[dsp + 14868424 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 14868440 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14868464 + (0 << 2) >> 2]))) << 2) >> 2])) + +(+(HEAPF32[dsp + 14868424 + (0 << 2) >> 2]) * +(+(+(+(+(HEAPF32[dsp + 13893632 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp309 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp310 | 0)) - +(HEAPF32[dsp + 14868480 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 14868480 + (0 << 2) >> 2]) - +((iTemp309 | 0))) * +(HEAPF32[dsp + 13893632 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp310 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp311)) + +(+(+(+(HEAPF32[dsp + 13893632 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp313 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp313 | 0)) - +(255. + +(HEAPF32[dsp + 14868480 + (0 << 2) >> 2])))) + +(+(+(fTemp312) - +((iTemp313 | 0))) * +(HEAPF32[dsp + 13893632 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp313 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp311))))));
			HEAPF32[dsp + 14868488 + (0 << 2) >> 2] = +(+(fSlow79) + +(0.99 * +(HEAPF32[dsp + 14868488 + (1 << 2) >> 2])));
			fTemp315 = +(max(-1., +(min(1., +(+(fTemp314) * +(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14868488 + (0 << 2) >> 2]) - 80.)))))))));
			fTemp316 = +(+(+(1. - +(HEAPF32[dsp + 14868416 + (0 << 2) >> 2])) * +(fTemp314)) + +(+(+(HEAPF32[dsp + 14868416 + (0 << 2) >> 2]) * +(fTemp315)) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp315)))))));
			HEAPF32[dsp + 14868496 + (0 << 2) >> 2] = +(+(fSlow80) + +(0.99 * +(HEAPF32[dsp + 14868496 + (1 << 2) >> 2])));
			fTemp317 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14868496 + (0 << 2) >> 2]) - 80.))));
			fTemp318 = +(1. - +(fTemp317));
			HEAPF32[dsp + 14868504 + (0 << 2) >> 2] = +(+(+(fTemp316) + +(+(fTemp318) * +(HEAPF32[dsp + 14868504 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14868536 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868512 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868504 + (0 << 2) >> 2]) + +(+(fTemp318) * +(HEAPF32[dsp + 14868512 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868520 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868512 + (0 << 2) >> 2]) + +(+(fTemp318) * +(HEAPF32[dsp + 14868520 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868528 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868520 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 14868528 + (1 << 2) >> 2]) * +(fTemp318)));
			HEAPF32[dsp + 14868536 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868528 + (0 << 2) >> 2]) * +(powf(+(fTemp317), 4.)));
			fTemp319 = +(+(+(1. - +(HEAPF32[dsp + 14868408 + (0 << 2) >> 2])) * +(fTemp316)) + +(+(HEAPF32[dsp + 14868408 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14868536 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868544 + (0 << 2) >> 2] = +(+(fSlow81) + +(0.99 * +(HEAPF32[dsp + 14868544 + (1 << 2) >> 2])));
			fTemp320 = +(+(HEAPF32[dsp + 14868544 + (0 << 2) >> 2]) - 80.);
			fTemp321 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp320))))));
			fTemp322 = +(1. / +(fTemp321));
			fTemp323 = +(1. + +(+(0.00333333 + +(fTemp322)) / +(fTemp321)));
			HEAPF32[dsp + 14866648 + (0 << 2) >> 2] = +(+(fTemp319) - +(+(+(+(HEAPF32[dsp + 14866648 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp322) - 0.00333333) / +(fTemp321)))) + +(2. * +(+(HEAPF32[dsp + 14866648 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp321)))))))) / +(fTemp323)));
			fTemp324 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp320))))));
			fTemp325 = +(1. / +(fTemp324));
			fTemp326 = +(1. + +(+(0.00333333 + +(fTemp325)) / +(fTemp324)));
			HEAPF32[dsp + 14866660 + (0 << 2) >> 2] = +(+(fTemp319) - +(+(+(+(HEAPF32[dsp + 14866660 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp325) - 0.00333333) / +(fTemp324)))) + +(2. * +(+(HEAPF32[dsp + 14866660 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp324)))))))) / +(fTemp326)));
			fTemp327 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp320))))));
			fTemp328 = +(1. / +(fTemp327));
			fTemp329 = +(1. + +(+(0.00333333 + +(fTemp328)) / +(fTemp327)));
			HEAPF32[dsp + 14866672 + (0 << 2) >> 2] = +(+(fTemp319) - +(+(+(+(HEAPF32[dsp + 14866672 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp328) - 0.00333333) / +(fTemp327)))) + +(2. * +(+(HEAPF32[dsp + 14866672 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp327)))))))) / +(fTemp329)));
			fTemp330 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp320))))));
			fTemp331 = +(1. / +(fTemp330));
			fTemp332 = +(1. + +(+(0.00333333 + +(fTemp331)) / +(fTemp330)));
			HEAPF32[dsp + 14866684 + (0 << 2) >> 2] = +(+(fTemp319) - +(+(+(+(HEAPF32[dsp + 14866684 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp331) - 0.00333333) / +(fTemp330)))) + +(2. * +(+(HEAPF32[dsp + 14866684 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp330)))))))) / +(fTemp332)));
			fTemp333 = +(+(+(HEAPF32[dsp + 14868400 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 14866648 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 14866648 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866648 + (2 << 2) >> 2]))) / +(fTemp323)) + +(+(+(+(HEAPF32[dsp + 14866660 + (1 << 2) >> 2]) + +(0.5 * +(HEAPF32[dsp + 14866660 + (0 << 2) >> 2]))) + +(0.5 * +(HEAPF32[dsp + 14866660 + (2 << 2) >> 2]))) / +(fTemp326))) + +(+(+(+(0.4 * +(HEAPF32[dsp + 14866672 + (0 << 2) >> 2])) + +(0.8 * +(HEAPF32[dsp + 14866672 + (1 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866672 + (2 << 2) >> 2]))) / +(fTemp329))) + +(+(+(+(0.3 * +(HEAPF32[dsp + 14866684 + (0 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 14866684 + (1 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866684 + (2 << 2) >> 2]))) / +(fTemp332)))) + +(+(+(fSlow82) * +(HEAPF32[dsp + 14868552 + (1 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 14868400 + (0 << 2) >> 2])) * +(fTemp319))));
			HEAPF32[dsp + 8650752 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp333);
			HEAPF32[dsp + 14868552 + (0 << 2) >> 2] = +(+(+(1. - +(HEAPF32[dsp + 14868376 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 8650752 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868384 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 14868376 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 8650752 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868392 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])));
			HEAPF32[dsp + 14868560 + (0 << 2) >> 2] = +(+(fSlow83) + +(0.999 * +(HEAPF32[dsp + 14868560 + (1 << 2) >> 2])));
			fTemp334 = +(2. * +(HEAPF32[dsp + 14868552 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868568 + (0 << 2) >> 2] = +(+(fSlow84) + +(0.99 * +(HEAPF32[dsp + 14868568 + (1 << 2) >> 2])));
			fTemp335 = +(+(HEAPF32[dsp + 14868568 + (0 << 2) >> 2]) - 80.);
			fTemp336 = +(1. - +(0.00833333 * +(fTemp335)));
			HEAPF32[dsp + 14868576 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868576 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 14868584 + (1 << 2) >> 2]) * +(fTemp336)));
			HEAPF32[dsp + 14680064 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868576 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868584 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14680064 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868592 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868592 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868600 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14688256 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868592 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868600 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14688256 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868608 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868608 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868616 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14696448 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868608 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868616 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14696448 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868624 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868624 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868632 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14704640 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868624 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868632 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14704640 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868640 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868640 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868648 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14712832 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868640 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868648 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14712832 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868656 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868656 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868664 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14721024 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868656 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868664 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14721024 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868672 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868672 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868680 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14729216 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868672 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868680 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14729216 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868688 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(fTemp335) * +(HEAPF32[dsp + 14868688 + (1 << 2) >> 2]))) + +(+(fTemp336) * +(HEAPF32[dsp + 14868696 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14737408 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp334) + +(0.5 * +(HEAPF32[dsp + 14868688 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868696 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14737408 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			fTemp337 = +(+(+(+(+(+(+(+(HEAPF32[dsp + 14868584 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14868600 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868616 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868632 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868648 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868664 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868680 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868696 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14827520 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(fTemp337) + +(0.5 * +(HEAPF32[dsp + 14868704 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868704 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14827520 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec273 = +(0. - +(+(fTemp337) - +(HEAPF32[dsp + 14868704 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14852096 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec273) + +(0.5 * +(HEAPF32[dsp + 14868712 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868712 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14852096 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec271 = +(+(HEAPF32[dsp + 14868712 + (1 << 2) >> 2]) - +(fRec273));
			HEAPF32[dsp + 14854144 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec271) + +(0.5 * +(HEAPF32[dsp + 14868720 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868720 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14854144 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec269 = +(+(HEAPF32[dsp + 14868720 + (1 << 2) >> 2]) - +(fRec271));
			HEAPF32[dsp + 14864384 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(fRec269) + +(0.5 * +(HEAPF32[dsp + 14868728 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868728 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14864384 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec267 = +(+(HEAPF32[dsp + 14868728 + (1 << 2) >> 2]) - +(fRec269));
			fTemp338 = +(+(2. * +(+(HEAPF32[dsp + 14868552 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14868560 + (0 << 2) >> 2])))) + +(+(HEAPF32[dsp + 14868560 + (0 << 2) >> 2]) * +(fRec267)));
			fTemp339 = +(1. + +(1.38629 * +(0. - +(+(fTemp277) - 1.))));
			fTemp340 = +(+(+(faustpower2_f(+(fTemp274))) * +((iTemp275 | 0))) + +((iTemp276 | 0)));
			fSel20 = 0.;
			if ((((((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow85) != +(HEAPF32[dsp + 14868752 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel20 = +(HEAPF32[dsp + 14869156 >> 2]);
				
			} else {
				fSel20 = +(((((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow85) != +(HEAPF32[dsp + 14868760 + (1 << 2) >> 2])) | 0)) | 0)?+(HEAPF32[dsp + 14869160 >> 2]):0.);
				
			}
			fSel21 = 0.;
			if ((((+(HEAPF32[dsp + 14868736 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel21 = +(((((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 14868736 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel21 = +(fSel20);
				
			}
			HEAPF32[dsp + 14868736 + (0 << 2) >> 2] = +(fSel21);
			HEAPF32[dsp + 14868744 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) + +(fSel21))))));
			HEAPF32[dsp + 14868752 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 14868760 + (1 << 2) >> 2]) != +(fSlow85)) | 0)) | 0)?+(fSlow85):+(HEAPF32[dsp + 14868752 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868760 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 14868744 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 14868752 + (1 << 2) >> 2]) != +(fSlow85)) | 0)) | 0)?+(fSlow85):+(HEAPF32[dsp + 14868760 + (1 << 2) >> 2]));
			HEAPF32[dsp + 14868768 + (0 << 2) >> 2] = +(+(fSlow86) + +(0.999 * +(HEAPF32[dsp + 14868768 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868776 + (0 << 2) >> 2] = +(+(fSlow87) + +(0.999 * +(HEAPF32[dsp + 14868776 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868784 + (0 << 2) >> 2] = +(+(fSlow88) + +(0.999 * +(HEAPF32[dsp + 14868784 + (1 << 2) >> 2])));
			fTemp341 = +(1. + +(4.65661e-10 * +((HEAP32[dsp + 14866432 + (4 << 2) >> 2] | 0))));
			fSel22 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel22 = +(0.5 * +(fTemp341));
				
			} else {
				fSel22 = +(HEAPF32[dsp + 14868792 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14868792 + (0 << 2) >> 2] = +(fSel22);
			HEAPF32[dsp + 14868800 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14868800 + (1 << 2) >> 2])) + +(0.01 * +(((+(HEAPF32[dsp + 14868792 + (0 << 2) >> 2]) < +(fSlow90)) | 0))));
			fTemp342 = +(+(HEAPF32[dsp + 14866856 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14868800 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868808 + (0 << 2) >> 2] = +(+(fSlow91) + +(0.999 * +(HEAPF32[dsp + 14868808 + (1 << 2) >> 2])));
			fSel23 = 0.;
			if (((iTemp0 | 0) != 0) | 0) {
				fSel23 = +(40. + +(20. * +(fTemp341)));
				
			} else {
				fSel23 = +(HEAPF32[dsp + 14868816 + (1 << 2) >> 2]);
				
			}
			HEAPF32[dsp + 14868816 + (0 << 2) >> 2] = +(fSel23);
			HEAPF32[dsp + 14868824 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 14868824 + (1 << 2) >> 2])) + +(4.4 * +(powf(2., +(0.0833333 * +(+(HEAPF32[dsp + 14868816 + (0 << 2) >> 2]) - 69.))))));
			fTemp343 = +(+(HEAPF32[dsp + 14868832 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 14869196 >> 2]) * +(HEAPF32[dsp + 14868824 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868832 + (0 << 2) >> 2] = +(+(fTemp343) - +(floorf(+(fTemp343))));
			HEAPF32[dsp + 14868840 + (0 << 2) >> 2] = +(+(fSlow92) + +(0.99 * +(HEAPF32[dsp + 14868840 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868848 + (0 << 2) >> 2] = +(fmodf(+(+(257. + +(HEAPF32[dsp + 14868848 + (1 << 2) >> 2])) - +(powf(2., +(0.0833333 * +(0. - +(0.0641026 * +(+(HEAPF32[dsp + 14868840 + (0 << 2) >> 2]) - 80.))))))), 256.));
			iTemp344 = ~~(+(HEAPF32[dsp + 14868848 + (0 << 2) >> 2]));
			iTemp345 = ((1 + (iTemp344 | 0)) | 0);
			fTemp346 = +(+(fTemp342) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14868832 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 14155776 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(fTemp346);
			fTemp347 = +(min(+(0.00390625 * +(HEAPF32[dsp + 14868848 + (0 << 2) >> 2])), 1.));
			fTemp348 = +(256. + +(HEAPF32[dsp + 14868848 + (0 << 2) >> 2]));
			iTemp349 = ~~(+(fTemp348));
			fTemp350 = +(+(+(+(fTemp342) * +(1. - +(HEAPF32[dsp + 14868808 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 14868832 + (0 << 2) >> 2]))) << 2) >> 2])) + +(+(HEAPF32[dsp + 14868808 + (0 << 2) >> 2]) * +(+(+(+(+(+((iTemp345 | 0)) - +(HEAPF32[dsp + 14868848 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 14155776 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp344 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2])) + +(+(+(HEAPF32[dsp + 14868848 + (0 << 2) >> 2]) - +((iTemp344 | 0))) * +(HEAPF32[dsp + 14155776 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp345 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(fTemp347)) + +(+(+(+(HEAPF32[dsp + 14155776 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - (((iTemp349 | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]) * +(+((iTemp349 | 0)) - +(255. + +(HEAPF32[dsp + 14868848 + (0 << 2) >> 2])))) + +(+(+(fTemp348) - +((iTemp349 | 0))) * +(HEAPF32[dsp + 14155776 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((((1 + (iTemp349 | 0)) | 0) & 65535) | 0)) | 0) & 65535) | 0) << 2) >> 2]))) * +(1. - +(fTemp347))))));
			HEAPF32[dsp + 14868856 + (0 << 2) >> 2] = +(+(fSlow93) + +(0.99 * +(HEAPF32[dsp + 14868856 + (1 << 2) >> 2])));
			fTemp351 = +(max(-1., +(min(1., +(+(powf(10., +(0.0166667 * +(+(HEAPF32[dsp + 14868856 + (0 << 2) >> 2]) - 80.)))) * +(fTemp350))))));
			fTemp352 = +(+(+(1. - +(HEAPF32[dsp + 14868784 + (0 << 2) >> 2])) * +(fTemp350)) + +(+(+(HEAPF32[dsp + 14868784 + (0 << 2) >> 2]) * +(fTemp351)) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp351)))))));
			HEAPF32[dsp + 14868864 + (0 << 2) >> 2] = +(+(fSlow94) + +(0.99 * +(HEAPF32[dsp + 14868864 + (1 << 2) >> 2])));
			fTemp353 = +(+(HEAPF32[dsp + 14869212 >> 2]) * +(30. + +(6. * +(+(HEAPF32[dsp + 14868864 + (0 << 2) >> 2]) - 80.))));
			fTemp354 = +(1. - +(fTemp353));
			HEAPF32[dsp + 14868872 + (0 << 2) >> 2] = +(+(+(fTemp352) + +(+(fTemp354) * +(HEAPF32[dsp + 14868872 + (1 << 2) >> 2]))) - +(3.96 * +(HEAPF32[dsp + 14868904 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868880 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868872 + (0 << 2) >> 2]) + +(+(fTemp354) * +(HEAPF32[dsp + 14868880 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868888 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868880 + (0 << 2) >> 2]) + +(+(fTemp354) * +(HEAPF32[dsp + 14868888 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14868896 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868888 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 14868896 + (1 << 2) >> 2]) * +(fTemp354)));
			HEAPF32[dsp + 14868904 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 14868896 + (0 << 2) >> 2]) * +(powf(+(fTemp353), 4.)));
			fTemp355 = +(+(+(1. - +(HEAPF32[dsp + 14868776 + (0 << 2) >> 2])) * +(fTemp352)) + +(+(HEAPF32[dsp + 14868776 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 14868904 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868912 + (0 << 2) >> 2] = +(+(fSlow95) + +(0.99 * +(HEAPF32[dsp + 14868912 + (1 << 2) >> 2])));
			fTemp356 = +(+(HEAPF32[dsp + 14868912 + (0 << 2) >> 2]) - 80.);
			fTemp357 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(3. * +(fTemp356))))));
			fTemp358 = +(1. / +(fTemp357));
			fTemp359 = +(1. + +(+(0.00333333 + +(fTemp358)) / +(fTemp357)));
			HEAPF32[dsp + 14866696 + (0 << 2) >> 2] = +(+(fTemp355) - +(+(+(+(1. + +(+(+(fTemp358) - 0.00333333) / +(fTemp357))) * +(HEAPF32[dsp + 14866696 + (2 << 2) >> 2])) + +(2. * +(+(HEAPF32[dsp + 14866696 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp357)))))))) / +(fTemp359)));
			fTemp360 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(4. * +(fTemp356))))));
			fTemp361 = +(1. / +(fTemp360));
			fTemp362 = +(1. + +(+(0.00333333 + +(fTemp361)) / +(fTemp360)));
			HEAPF32[dsp + 14866708 + (0 << 2) >> 2] = +(+(fTemp355) - +(+(+(+(HEAPF32[dsp + 14866708 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp361) - 0.00333333) / +(fTemp360)))) + +(2. * +(+(HEAPF32[dsp + 14866708 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp360)))))))) / +(fTemp362)));
			fTemp363 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(5. * +(fTemp356))))));
			fTemp364 = +(1. / +(fTemp363));
			fTemp365 = +(1. + +(+(0.00333333 + +(fTemp364)) / +(fTemp363)));
			HEAPF32[dsp + 14866720 + (0 << 2) >> 2] = +(+(fTemp355) - +(+(+(+(HEAPF32[dsp + 14866720 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp364) - 0.00333333) / +(fTemp363)))) + +(2. * +(+(HEAPF32[dsp + 14866720 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp363)))))))) / +(fTemp365)));
			fTemp366 = +(tanf(+(+(HEAPF32[dsp + 14869220 >> 2]) * +(200. + +(2. * +(fTemp356))))));
			fTemp367 = +(1. / +(fTemp366));
			fTemp368 = +(1. + +(+(0.00333333 + +(fTemp367)) / +(fTemp366)));
			HEAPF32[dsp + 14866732 + (0 << 2) >> 2] = +(+(fTemp355) - +(+(+(+(HEAPF32[dsp + 14866732 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp367) - 0.00333333) / +(fTemp366)))) + +(2. * +(+(HEAPF32[dsp + 14866732 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp366)))))))) / +(fTemp368)));
			fTemp369 = +(+(+(+(HEAPF32[dsp + 14868768 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 14866696 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14866696 + (1 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 14866696 + (2 << 2) >> 2]))) / +(fTemp359)) + +(+(+(+(0.4 * +(HEAPF32[dsp + 14866708 + (0 << 2) >> 2])) + +(0.8 * +(HEAPF32[dsp + 14866708 + (1 << 2) >> 2]))) + +(0.4 * +(HEAPF32[dsp + 14866708 + (2 << 2) >> 2]))) / +(fTemp362))) + +(+(+(+(0.3 * +(HEAPF32[dsp + 14866720 + (0 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 14866720 + (1 << 2) >> 2]))) + +(0.3 * +(HEAPF32[dsp + 14866720 + (2 << 2) >> 2]))) / +(fTemp365))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 14866732 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 14866732 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 14866732 + (2 << 2) >> 2]))) / +(fTemp368)))) + +(+(fSlow96) * +(HEAPF32[dsp + 14868920 + (1 << 2) >> 2]))) + +(+(1. - +(HEAPF32[dsp + 14868768 + (0 << 2) >> 2])) * +(fTemp355)));
			HEAPF32[dsp + 10747904 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 524287) | 0) << 2) >> 2] = +(fTemp369);
			HEAPF32[dsp + 14868920 + (0 << 2) >> 2] = +(+(+(1. - +(HEAPF32[dsp + 14868744 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 10747904 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868752 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 14868744 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 10747904 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - ((~~(+(HEAPF32[dsp + 14868760 + (0 << 2) >> 2])) & 524287) | 0)) | 0) & 524287) | 0) << 2) >> 2])));
			HEAPF32[dsp + 14868928 + (0 << 2) >> 2] = +(+(fSlow97) + +(0.999 * +(HEAPF32[dsp + 14868928 + (1 << 2) >> 2])));
			fTemp370 = +(2. * +(HEAPF32[dsp + 14868920 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14868936 + (0 << 2) >> 2] = +(+(fSlow98) + +(0.99 * +(HEAPF32[dsp + 14868936 + (1 << 2) >> 2])));
			fTemp371 = +(+(HEAPF32[dsp + 14868936 + (0 << 2) >> 2]) - 80.);
			fTemp372 = +(1. - +(0.00833333 * +(fTemp371)));
			HEAPF32[dsp + 14868944 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868944 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(HEAPF32[dsp + 14868952 + (1 << 2) >> 2]) * +(fTemp372)));
			HEAPF32[dsp + 14745600 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14868944 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868952 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14745600 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868960 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868960 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14868968 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14753792 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14868960 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868968 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14753792 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868976 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868976 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14868984 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14761984 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14868976 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14868984 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14761984 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14868992 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14868992 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14869000 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14770176 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14868992 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14869000 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14770176 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14869008 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14869008 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14869016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14778368 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14869008 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14869016 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14778368 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14869024 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14869024 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14869032 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14786560 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14869024 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14869032 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14786560 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14869040 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14869040 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14869048 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14794752 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14869040 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14869048 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14794752 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14869056 + (0 << 2) >> 2] = +(+(0.00833333 * +(+(HEAPF32[dsp + 14869056 + (1 << 2) >> 2]) * +(fTemp371))) + +(+(fTemp372) * +(HEAPF32[dsp + 14869064 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14802944 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp370) + +(0.5 * +(HEAPF32[dsp + 14869056 + (0 << 2) >> 2])));
			HEAPF32[dsp + 14869064 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14802944 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 14831616 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 14869072 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 14868952 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868968 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868984 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869000 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869016 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869032 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869048 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869064 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14869072 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14831616 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec327 = +(0. - +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 14868952 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 14868968 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14868984 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869000 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869016 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869032 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869048 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 14869064 + (0 << 2) >> 2])) - +(HEAPF32[dsp + 14869072 + (1 << 2) >> 2])));
			HEAPF32[dsp + 14856192 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14869080 + (1 << 2) >> 2])) + +(fRec327));
			HEAPF32[dsp + 14869080 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14856192 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec325 = +(+(HEAPF32[dsp + 14869080 + (1 << 2) >> 2]) - +(fRec327));
			HEAPF32[dsp + 14858240 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14869088 + (1 << 2) >> 2])) + +(fRec325));
			HEAPF32[dsp + 14869088 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14858240 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec323 = +(+(HEAPF32[dsp + 14869088 + (1 << 2) >> 2]) - +(fRec325));
			HEAPF32[dsp + 14865408 + ((((HEAP32[dsp + 14869200 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(0.5 * +(HEAPF32[dsp + 14869096 + (1 << 2) >> 2])) + +(fRec323));
			HEAPF32[dsp + 14869096 + (0 << 2) >> 2] = +(HEAPF32[dsp + 14865408 + ((((((HEAP32[dsp + 14869200 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec321 = +(+(HEAPF32[dsp + 14869096 + (1 << 2) >> 2]) - +(fRec323));
			fTemp373 = +(+(2. * +(+(HEAPF32[dsp + 14868920 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 14868928 + (0 << 2) >> 2])))) + +(+(HEAPF32[dsp + 14868928 + (0 << 2) >> 2]) * +(fRec321)));
			HEAPF32[dsp + 14869104 + (0 << 2) >> 2] = +(+(fSlow99) + +(0.999 * +(HEAPF32[dsp + 14869104 + (1 << 2) >> 2])));
			fTemp374 = +(0. - +(HEAPF32[dsp + 14869104 + (0 << 2) >> 2]));
			HEAPF32[dsp + 14869112 + (0 << 2) >> 2] = +(+(fSlow100) + +(0.999 * +(HEAPF32[dsp + 14869112 + (1 << 2) >> 2])));
			fTemp375 = +(powf(+(+(faustpower2_f(+(fTemp374))) + +(faustpower2_f(+(HEAPF32[dsp + 14869112 + (0 << 2) >> 2])))), 0.5));
			iTemp376 = ((+(fTemp375) > 1.) | 0);
			iTemp377 = ((+(fTemp375) < 1.) | 0);
			fTemp378 = +(+((iTemp376 | 0)) + +(+(fTemp375) * +((iTemp377 | 0))));
			fTemp379 = +(1. + +(1.38629 * +(0. - +(+(fTemp378) - 1.))));
			HEAPF32[dsp + 14869120 + (0 << 2) >> 2] = +(+(fSlow101) + +(0.999 * +(HEAPF32[dsp + 14869120 + (1 << 2) >> 2])));
			fTemp380 = +(2. * +(fTemp378));
			fTemp381 = +(+(2. * +(+(+(fTemp378) * +(((+(fTemp380) > 0.) | 0))) * +(((+(fTemp380) <= 1.) | 0)))) + +(((+(fTemp380) > 1.) | 0)));
			fTemp382 = +(atan2f(+(fTemp374), +(HEAPF32[dsp + 14869112 + (0 << 2) >> 2])));
			fTemp383 = +(+(fTemp381) * +(cosf(+(fTemp382))));
			fTemp384 = +(0.285714 * +(fTemp383));
			fTemp385 = +(1.38629 * +(fTemp378));
			fTemp386 = +(+(fTemp385) - 0.693147);
			fTemp387 = +(2.4663 * +(fTemp386));
			fTemp388 = +(+(2.4663 * +(+(+(fTemp386) * +(((+(fTemp387) > 0.) | 0))) * +(((+(fTemp387) <= 1.) | 0)))) + +(((+(fTemp387) > 1.) | 0)));
			fTemp389 = +(2. * +(fTemp382));
			fTemp390 = +(+(fTemp388) * +(cosf(+(fTemp389))));
			fTemp391 = +(0.285714 * +(fTemp390));
			fTemp392 = +(+(fTemp385) - 1.09861);
			fTemp393 = +(3.47606 * +(fTemp392));
			fTemp394 = +(+(3.47606 * +(+(+(fTemp392) * +(((+(fTemp393) > 0.) | 0))) * +(((+(fTemp393) <= 1.) | 0)))) + +(((+(fTemp393) > 1.) | 0)));
			fTemp395 = +(3. * +(fTemp382));
			fTemp396 = +(+(fTemp394) * +(cosf(+(fTemp395))));
			fTemp397 = +(0.285714 * +(fTemp396));
			fTemp398 = +(0.707107 * +(+(+(0.142857 + +(fTemp384)) + +(fTemp391)) + +(fTemp397)));
			fTemp399 = +(+(sinf(+(fTemp382))) * +(fTemp381));
			fTemp400 = +(0.202031 * +(fTemp399));
			fTemp401 = +(+(sinf(+(fTemp389))) * +(fTemp388));
			fTemp402 = +(0.285714 * +(fTemp401));
			fTemp403 = +(+(sinf(+(fTemp395))) * +(fTemp394));
			fTemp404 = +(0.202031 * +(fTemp396));
			fTemp405 = +(0.285714 * +(fTemp399));
			fTemp406 = +(0.285714 * +(fTemp403));
			fTemp407 = +(0.202031 * +(fTemp383));
			fTemp408 = +(+(+(faustpower2_f(+(fTemp375))) * +((iTemp376 | 0))) + +((iTemp377 | 0)));
			HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(fTemp41) * +(+(+(+(+(fTemp60) + +(0.987688 * +(+(+(+(+(+(0.142857 + +(fTemp62)) + +(0.202031 * +(fTemp45))) + +(fTemp64)) + +(1.7495e-17 * +(fTemp52))) + +(0.202031 * +(fTemp65))) - +(fTemp66)))) + +(0.809017 * +(+(+(+(+(+(0.142857 + +(fTemp67)) + +(1.7495e-17 * +(fTemp45))) + +(3.49899e-17 * +(fTemp63))) - +(fTemp53)) - +(fTemp68)) - +(5.24849e-17 * +(fTemp58))))) + +(0.45399 * +(+(0.202031 * +(fTemp58)) + +(+(+(+(+(0.142857 + +(0.202031 * +(fTemp61))) - +(fTemp69)) - +(fTemp64)) - +(5.24849e-17 * +(fTemp52))) + +(0.202031 * +(fTemp65)))))) + +(1.22465e-16 * +(+(+(1.0497e-16 * +(fTemp65)) + +(+(fTemp53) + +(+(+(0.142857 + +(3.49899e-17 * +(fTemp61))) - +(fTemp46)) - +(6.99798e-17 * +(fTemp63))))) - +(fTemp59))))) / +(fTemp70)) + +(+(+(+(fTemp108) * +(+(+(+(+(fTemp127) + +(0.987688 * +(+(+(+(+(+(+(fTemp129) + 0.142857) + +(0.202031 * +(fTemp112))) + +(fTemp131)) + +(1.7495e-17 * +(fTemp119))) + +(0.202031 * +(fTemp132))) - +(fTemp133)))) + +(0.809017 * +(+(+(+(+(+(+(fTemp134) + 0.142857) + +(1.7495e-17 * +(fTemp112))) + +(3.49899e-17 * +(fTemp130))) - +(fTemp120)) - +(fTemp135)) - +(5.24849e-17 * +(fTemp125))))) + +(0.45399 * +(+(+(+(+(+(0.142857 + +(0.202031 * +(fTemp128))) - +(fTemp136)) - +(fTemp131)) - +(5.24849e-17 * +(fTemp119))) + +(0.202031 * +(fTemp132))) + +(0.202031 * +(fTemp125))))) + +(1.22465e-16 * +(+(+(+(fTemp120) + +(+(+(0.142857 + +(3.49899e-17 * +(fTemp128))) - +(fTemp113)) - +(6.99798e-17 * +(fTemp130)))) + +(1.0497e-16 * +(fTemp132))) - +(fTemp126))))) / +(fTemp137)) + +(+(+(+(+(+(HEAPF32[dsp + 14867560 + (0 << 2) >> 2]) * +(+(1.22465e-16 * +(+(+(+(+(+(0.142857 + +(3.49899e-17 * +(fTemp146))) - +(fTemp148)) - +(6.99798e-17 * +(fTemp154))) + +(fTemp156)) + +(1.0497e-16 * +(fTemp161))) - +(fTemp163))) + +(+(+(+(fTemp164) + +(0.987688 * +(+(+(+(+(+(0.142857 + +(fTemp165)) + +(0.202031 * +(fTemp147))) + +(fTemp166)) + +(1.7495e-17 * +(fTemp155))) + +(0.202031 * +(fTemp161))) - +(fTemp167)))) + +(0.809017 * +(+(+(+(+(+(0.142857 + +(fTemp168)) + +(1.7495e-17 * +(fTemp147))) + +(3.49899e-17 * +(fTemp154))) - +(fTemp156)) - +(fTemp169)) - +(5.24849e-17 * +(fTemp162))))) + +(0.45399 * +(+(0.202031 * +(fTemp162)) + +(+(+(+(+(0.142857 + +(0.202031 * +(fTemp146))) - +(fTemp170)) - +(fTemp166)) - +(5.24849e-17 * +(fTemp155))) + +(0.202031 * +(fTemp161)))))))) * +(fTemp204)) * +(fTemp205)) / +(fTemp206)) + +(+(+(fTemp243) * +(+(+(+(+(fTemp262) + +(0.987688 * +(+(+(+(1.7495e-17 * +(fTemp254)) + +(+(+(0.142857 + +(fTemp264)) + +(0.202031 * +(fTemp247))) + +(fTemp266))) + +(0.202031 * +(fTemp267))) - +(fTemp268)))) + +(0.809017 * +(+(+(+(+(3.49899e-17 * +(fTemp265)) + +(+(0.142857 + +(fTemp269)) + +(1.7495e-17 * +(fTemp247)))) - +(fTemp255)) - +(fTemp270)) - +(5.24849e-17 * +(fTemp260))))) + +(0.45399 * +(+(0.202031 * +(fTemp260)) + +(+(+(+(+(0.142857 + +(0.202031 * +(fTemp263))) - +(fTemp271)) - +(fTemp266)) - +(5.24849e-17 * +(fTemp254))) + +(0.202031 * +(fTemp267)))))) + +(1.22465e-16 * +(+(+(+(fTemp255) + +(+(+(0.142857 + +(3.49899e-17 * +(fTemp263))) - +(fTemp248)) - +(6.99798e-17 * +(fTemp265)))) + +(1.0497e-16 * +(fTemp267))) - +(fTemp261))))) / +(fTemp272))))) + +(+(+(+(+(HEAPF32[dsp + 14868344 + (0 << 2) >> 2]) * +(+(+(+(+(0.987688 * +(+(+(+(+(+(0.142857 + +(fTemp282)) + +(0.202031 * +(fTemp283))) + +(fTemp290)) + +(1.7495e-17 * +(fTemp291))) + +(0.202031 * +(fTemp296))) - +(fTemp298))) + +(fTemp302)) + +(0.809017 * +(+(+(+(+(+(1.7495e-17 * +(fTemp283)) + +(0.142857 + +(fTemp303))) + +(3.49899e-17 * +(fTemp289))) - +(fTemp299)) - +(fTemp304)) - +(5.24849e-17 * +(fTemp297))))) + +(0.45399 * +(+(+(+(+(+(0.142857 + +(0.202031 * +(fTemp281))) - +(fTemp305)) - +(fTemp290)) - +(5.24849e-17 * +(fTemp291))) + +(0.202031 * +(fTemp296))) + +(0.202031 * +(fTemp297))))) + +(1.22465e-16 * +(+(+(+(fTemp299) + +(+(+(0.142857 + +(3.49899e-17 * +(fTemp281))) - +(fTemp300)) - +(6.99798e-17 * +(fTemp289)))) + +(1.0497e-16 * +(fTemp296))) - +(fTemp301))))) * +(fTemp338)) * +(fTemp339)) / +(fTemp340))) + +(+(+(+(+(fTemp373) * +(fTemp379)) * +(HEAPF32[dsp + 14869120 + (0 << 2) >> 2])) * +(+(+(+(+(fTemp398) + +(0.987688 * +(+(+(+(+(+(0.142857 + +(fTemp400)) + +(0.202031 * +(fTemp383))) + +(fTemp402)) + +(1.7495e-17 * +(fTemp390))) + +(0.202031 * +(fTemp403))) - +(fTemp404)))) + +(0.809017 * +(+(+(+(+(+(0.142857 + +(fTemp405)) + +(1.7495e-17 * +(fTemp383))) + +(3.49899e-17 * +(fTemp401))) - +(fTemp391)) - +(fTemp406)) - +(5.24849e-17 * +(fTemp396))))) + +(0.45399 * +(+(+(+(+(+(0.142857 + +(0.202031 * +(fTemp399))) - +(fTemp407)) - +(fTemp402)) - +(5.24849e-17 * +(fTemp390))) + +(0.202031 * +(fTemp403))) + +(0.202031 * +(fTemp396))))) + +(1.22465e-16 * +(+(+(+(fTemp391) + +(+(+(0.142857 + +(3.49899e-17 * +(fTemp399))) - +(fTemp384)) - +(6.99798e-17 * +(fTemp401)))) + +(1.0497e-16 * +(fTemp403))) - +(fTemp397))))) / +(fTemp408))));
			HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(+(+(+(+(0.45399 * +(+(+(+(+(+(0.142857 - +(fTemp165)) - +(0.202031 * +(fTemp147))) + +(fTemp166)) + +(8.74748e-17 * +(fTemp155))) - +(0.202031 * +(fTemp161))) + +(0.202031 * +(fTemp162)))) + +(fTemp164)) + +(0.809017 * +(+(+(fTemp169) + +(+(+(+(0.142857 - +(fTemp168)) - +(5.24849e-17 * +(fTemp147))) + +(1.0497e-16 * +(fTemp154))) - +(fTemp156))) + +(1.57455e-16 * +(fTemp162))))) + +(0.987688 * +(+(+(+(+(+(fTemp170) + +(0.142857 - +(0.202031 * +(fTemp146)))) - +(fTemp166)) - +(1.22465e-16 * +(fTemp155))) - +(0.202031 * +(fTemp161))) - +(fTemp167)))) * +(HEAPF32[dsp + 14867560 + (0 << 2) >> 2])) * +(fTemp204)) * +(fTemp205)) / +(fTemp206)) + +(+(+(+(+(+(+(+(0.45399 * +(+(0.202031 * +(fTemp396)) + +(+(+(+(fTemp402) + +(+(0.142857 - +(fTemp400)) - +(0.202031 * +(fTemp383)))) + +(8.74748e-17 * +(fTemp390))) - +(0.202031 * +(fTemp403))))) + +(fTemp398)) + +(0.809017 * +(+(+(fTemp406) + +(+(+(+(0.142857 - +(fTemp405)) - +(5.24849e-17 * +(fTemp383))) + +(1.0497e-16 * +(fTemp401))) - +(fTemp391))) + +(1.57455e-16 * +(fTemp396))))) + +(0.987688 * +(+(+(+(+(+(fTemp407) + +(0.142857 - +(0.202031 * +(fTemp399)))) - +(fTemp402)) - +(1.22465e-16 * +(fTemp390))) - +(0.202031 * +(fTemp403))) - +(fTemp404)))) * +(fTemp373)) * +(fTemp379)) * +(HEAPF32[dsp + 14869120 + (0 << 2) >> 2])) / +(fTemp408))) + +(+(+(+(+(+(+(+(0.45399 * +(+(+(+(+(fTemp290) + +(+(0.142857 - +(fTemp282)) - +(0.202031 * +(fTemp283)))) + +(8.74748e-17 * +(fTemp291))) - +(0.202031 * +(fTemp296))) + +(0.202031 * +(fTemp297)))) + +(fTemp302)) + +(0.809017 * +(+(1.57455e-16 * +(fTemp297)) + +(+(fTemp304) + +(+(+(+(0.142857 - +(fTemp303)) - +(5.24849e-17 * +(fTemp283))) + +(1.0497e-16 * +(fTemp289))) - +(fTemp299)))))) + +(0.987688 * +(+(+(+(+(+(fTemp305) + +(0.142857 - +(0.202031 * +(fTemp281)))) - +(fTemp290)) - +(1.22465e-16 * +(fTemp291))) - +(0.202031 * +(fTemp296))) - +(fTemp298)))) * +(HEAPF32[dsp + 14868344 + (0 << 2) >> 2])) * +(fTemp338)) * +(fTemp339)) / +(fTemp340))) + +(+(+(fTemp243) * +(+(+(+(fTemp262) + +(0.45399 * +(+(+(+(+(fTemp266) + +(+(0.142857 - +(fTemp264)) - +(0.202031 * +(fTemp247)))) + +(8.74748e-17 * +(fTemp254))) - +(0.202031 * +(fTemp267))) + +(0.202031 * +(fTemp260))))) + +(0.809017 * +(+(+(+(+(1.0497e-16 * +(fTemp265)) + +(+(0.142857 - +(fTemp269)) - +(5.24849e-17 * +(fTemp247)))) - +(fTemp255)) + +(fTemp270)) + +(1.57455e-16 * +(fTemp260))))) + +(0.987688 * +(+(+(+(+(+(0.142857 - +(0.202031 * +(fTemp263))) + +(fTemp271)) - +(fTemp266)) - +(1.22465e-16 * +(fTemp254))) - +(0.202031 * +(fTemp267))) - +(fTemp268))))) / +(fTemp272))) + +(+(+(fTemp108) * +(+(+(+(fTemp127) + +(0.45399 * +(+(+(+(+(fTemp131) + +(+(0.142857 - +(fTemp129)) - +(0.202031 * +(fTemp112)))) + +(8.74748e-17 * +(fTemp119))) - +(0.202031 * +(fTemp132))) + +(0.202031 * +(fTemp125))))) + +(0.809017 * +(+(+(fTemp135) + +(+(+(1.0497e-16 * +(fTemp130)) + +(+(0.142857 - +(fTemp134)) - +(5.24849e-17 * +(fTemp112)))) - +(fTemp120))) + +(1.57455e-16 * +(fTemp125))))) + +(0.987688 * +(+(+(+(+(+(fTemp136) + +(0.142857 - +(0.202031 * +(fTemp128)))) - +(fTemp131)) - +(1.22465e-16 * +(fTemp119))) - +(0.202031 * +(fTemp132))) - +(fTemp133))))) / +(fTemp137))) + +(+(+(fTemp41) * +(+(0.987688 * +(+(+(+(+(+(fTemp69) + +(0.142857 - +(0.202031 * +(fTemp61)))) - +(fTemp64)) - +(1.22465e-16 * +(fTemp52))) - +(0.202031 * +(fTemp65))) - +(fTemp66))) + +(+(0.809017 * +(+(+(fTemp68) + +(+(+(+(0.142857 - +(fTemp67)) - +(5.24849e-17 * +(fTemp45))) + +(1.0497e-16 * +(fTemp63))) - +(fTemp53))) + +(1.57455e-16 * +(fTemp58)))) + +(+(fTemp60) + +(0.45399 * +(+(+(+(+(fTemp64) + +(+(0.142857 - +(fTemp62)) - +(0.202031 * +(fTemp45)))) + +(8.74748e-17 * +(fTemp52))) - +(0.202031 * +(fTemp65))) + +(0.202031 * +(fTemp58)))))))) / +(fTemp70))));
			HEAPF32[dsp + 14866744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866808 + (0 << 2) >> 2]);
			for (j0 = 5; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAP32[dsp + 14866432 + ((j0 | 0) << 2) >> 2] = (HEAP32[dsp + 14866432 + ((((j0 | 0) - 1) | 0) << 2) >> 2] | 0);
				
			}
			HEAPF32[dsp + 14866816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866832 + (0 << 2) >> 2]);
			HEAP32[dsp + 14866840 + (1 << 2) >> 2] = (HEAP32[dsp + 14866840 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 14866848 + (1 << 2) >> 2] = (HEAP32[dsp + 14866848 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 14866856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866880 + (0 << 2) >> 2]);
			HEAP32[dsp + 14869200 >> 2] = (((HEAP32[dsp + 14869200 >> 2] | 0) + 1) | 0);
			HEAPF32[dsp + 14866888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866456 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866456 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866468 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866468 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866468 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866468 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866480 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866480 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866492 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866492 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866492 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866492 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866968 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866992 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867248 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867256 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867256 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866504 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866504 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866516 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866516 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866516 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866516 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866528 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866528 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866540 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866540 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866540 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866540 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867512 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867592 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867656 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866552 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866552 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866564 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866564 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866564 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866564 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866576 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866576 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866588 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866588 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866588 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866588 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867848 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867968 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14867992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14867992 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866600 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866600 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866612 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866612 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866612 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866612 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866624 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866624 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866636 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866636 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866636 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866636 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868248 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868256 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868256 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868512 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866648 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866648 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866660 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866660 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866660 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866660 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866672 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866672 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866684 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866684 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866684 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866684 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868592 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868656 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868848 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866696 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866696 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866708 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866708 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866708 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866708 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866720 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866720 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14866732 + (2 << 2) >> 2] = +(HEAPF32[dsp + 14866732 + (1 << 2) >> 2]);
			HEAPF32[dsp + 14866732 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14866732 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868968 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14868992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14868992 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 14869120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 14869120 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };
}

function getSizelooper() {
	return 14869548;
}

function getPathTablelooper() {
	var pathTable = [];
	pathTable["/0x00/Vol2"] = 14869136;
	pathTable["/0x00/DelMov2"] = 14869152;
	pathTable["/0x00/DelVol2"] = 14869228;
	pathTable["/0x00/RevVol2"] = 14869232;
	pathTable["/0x00/RevMov2"] = 14869236;
	pathTable["/0x00/MovY2"] = 14869240;
	pathTable["/0x00/MovX2"] = 14869244;
	pathTable["/0x00/FilVol1"] = 14869248;
	pathTable["/0x00/FilMov1"] = 14869252;
	pathTable["/0x00/SatVol1"] = 14869256;
	pathTable["/0x00/Vol1"] = 14869260;
	pathTable["/0x00/OctVol1"] = 14869264;
	pathTable["/0x00/ResVol2"] = 14869164;
	pathTable["/0x00/OctMov1"] = 14869268;
	pathTable["/0x00/SatMov1"] = 14869272;
	pathTable["/0x00/ResVol1"] = 14869276;
	pathTable["/0x00/ResMov1"] = 14869280;
	pathTable["/0x00/DelVol1"] = 14869284;
	pathTable["/0x00/DelMov1"] = 14869288;
	pathTable["/0x00/RevVol1"] = 14869292;
	pathTable["/0x00/RevMov1"] = 14869296;
	pathTable["/0x00/MovX1"] = 14869300;
	pathTable["/0x00/MovY1"] = 14869304;
	pathTable["/0x00/FilVol2"] = 14869168;
	pathTable["/0x00/Vol3"] = 14869308;
	pathTable["/0x00/MovX3"] = 14869312;
	pathTable["/0x00/MovY3"] = 14869316;
	pathTable["/0x00/DelMov3"] = 14869320;
	pathTable["/0x00/ResVol3"] = 14869324;
	pathTable["/0x00/SatVol3"] = 14869328;
	pathTable["/0x00/OctVol3"] = 14869332;
	pathTable["/0x00/OctMov3"] = 14869336;
	pathTable["/0x00/SatMov3"] = 14869340;
	pathTable["/0x00/FilMov3"] = 14869344;
	pathTable["/0x00/SatVol2"] = 14869172;
	pathTable["/0x00/FilVol3"] = 14869348;
	pathTable["/0x00/ResMov3"] = 14869352;
	pathTable["/0x00/DelVol3"] = 14869356;
	pathTable["/0x00/RevVol3"] = 14869360;
	pathTable["/0x00/RevMov3"] = 14869364;
	pathTable["/0x00/Vol0"] = 14869368;
	pathTable["/0x00/OctVol0"] = 14869372;
	pathTable["/0x00/OctMov0"] = 14869376;
	pathTable["/0x00/SatVol0"] = 14869380;
	pathTable["/0x00/SatMov0"] = 14869384;
	pathTable["/0x00/OctVol2"] = 14869180;
	pathTable["/0x00/FilVol0"] = 14869388;
	pathTable["/0x00/FilMov0"] = 14869392;
	pathTable["/0x00/ResMov0"] = 14869396;
	pathTable["/0x00/ResVol0"] = 14869400;
	pathTable["/0x00/DelVol0"] = 14869404;
	pathTable["/0x00/DelMov0"] = 14869408;
	pathTable["/0x00/RevVol0"] = 14869412;
	pathTable["/0x00/RevMov0"] = 14869416;
	pathTable["/0x00/MovY0"] = 14869420;
	pathTable["/0x00/MovX0"] = 14869424;
	pathTable["/0x00/OctMov2"] = 14869204;
	pathTable["/0x00/Vol5"] = 14869428;
	pathTable["/0x00/MovY5"] = 14869432;
	pathTable["/0x00/MovX5"] = 14869436;
	pathTable["/0x00/DelMov5"] = 14869440;
	pathTable["/0x00/ResVol5"] = 14869444;
	pathTable["/0x00/FilVol5"] = 14869448;
	pathTable["/0x00/SatVol5"] = 14869452;
	pathTable["/0x00/OctVol5"] = 14869456;
	pathTable["/0x00/OctMov5"] = 14869460;
	pathTable["/0x00/SatMov5"] = 14869464;
	pathTable["/0x00/SatMov2"] = 14869208;
	pathTable["/0x00/FilMov5"] = 14869468;
	pathTable["/0x00/ResMov5"] = 14869472;
	pathTable["/0x00/DelVol5"] = 14869476;
	pathTable["/0x00/RevVol5"] = 14869480;
	pathTable["/0x00/RevMov5"] = 14869484;
	pathTable["/0x00/DelMov4"] = 14869488;
	pathTable["/0x00/ResVol4"] = 14869492;
	pathTable["/0x00/FilVol4"] = 14869496;
	pathTable["/0x00/SatVol4"] = 14869500;
	pathTable["/0x00/Vol4"] = 14869504;
	pathTable["/0x00/FilMov2"] = 14869216;
	pathTable["/0x00/OctVol4"] = 14869508;
	pathTable["/0x00/OctMov4"] = 14869512;
	pathTable["/0x00/SatMov4"] = 14869516;
	pathTable["/0x00/FilMov4"] = 14869520;
	pathTable["/0x00/ResMov4"] = 14869524;
	pathTable["/0x00/DelVol4"] = 14869528;
	pathTable["/0x00/RevVol4"] = 14869532;
	pathTable["/0x00/RevMov4"] = 14869536;
	pathTable["/0x00/MovX4"] = 14869540;
	pathTable["/0x00/MovY4"] = 14869544;
	pathTable["/0x00/ResMov2"] = 14869224;
	return pathTable;
}

function getJSONlooper() {
	return "{  \"name\": \"\",  \"outputs\": \"2\",  \"meta\": [    { \"effect.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"effect.lib/copyright\": \"Julius O. Smith III\" },   { \"effect.lib/exciter_author\": \"Priyanka Shekar (pshekar@ccrma.stanford.edu)\" },   { \"effect.lib/exciter_copyright\": \"Copyright (c) 2013 Priyanka Shekar\" },   { \"effect.lib/exciter_license\": \"MIT License (MIT)\" },   { \"effect.lib/exciter_name\": \"Harmonic Exciter\" },   { \"effect.lib/exciter_version\": \"1.0\" },   { \"effect.lib/license\": \"STK-4.3\" },   { \"effect.lib/name\": \"Faust Audio Effect Library\" },   { \"effect.lib/version\": \"1.33\" },   { \"filter.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"filter.lib/copyright\": \"Julius O. Smith III\" },   { \"filter.lib/license\": \"STK-4.3\" },   { \"filter.lib/name\": \"Faust Filter Library\" },   { \"filter.lib/reference\": \"https://ccrma.stanford.edu/~jos/filters/\" },   { \"filter.lib/version\": \"1.29\" },   { \"hoa.lib/author\": \"Pierre Guillot\" },   { \"hoa.lib/copyright\": \"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\" },   { \"hoa.lib/name\": \"HOA\" },   { \"hoa.lib/title\": \"High Order Ambisonics library\" },   { \"instrument.lib/author\": \"Romain Michon (rmichon@ccrma.stanford.edu)\" },   { \"instrument.lib/copyright\": \"Romain Michon\" },   { \"instrument.lib/licence\": \"STK-4.3\" },   { \"instrument.lib/name\": \"Faust-STK Tools Library\" },   { \"instrument.lib/version\": \"1.0\" },   { \"math.lib/author\": \"GRAME\" },   { \"math.lib/copyright\": \"GRAME\" },   { \"math.lib/license\": \"LGPL with exception\" },   { \"math.lib/name\": \"Math Library\" },   { \"math.lib/version\": \"1.0\" },   { \"music.lib/author\": \"GRAME\" },   { \"music.lib/copyright\": \"GRAME\" },   { \"music.lib/license\": \"LGPL with exception\" },   { \"music.lib/name\": \"Music Library\" },   { \"music.lib/version\": \"1.0\" }  ],  \"ui\": [    {    \"type\": \"vgroup\",    \"label\": \"0x00\",    \"items\": [      {      \"type\": \"hslider\",      \"label\": \"DelMov0\",      \"address\": \"/0x00/DelMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelMov1\",      \"address\": \"/0x00/DelMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelMov2\",      \"address\": \"/0x00/DelMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelMov3\",      \"address\": \"/0x00/DelMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelMov4\",      \"address\": \"/0x00/DelMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelMov5\",      \"address\": \"/0x00/DelMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol0\",      \"address\": \"/0x00/DelVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol1\",      \"address\": \"/0x00/DelVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol2\",      \"address\": \"/0x00/DelVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol3\",      \"address\": \"/0x00/DelVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol4\",      \"address\": \"/0x00/DelVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelVol5\",      \"address\": \"/0x00/DelVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov0\",      \"address\": \"/0x00/FilMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov1\",      \"address\": \"/0x00/FilMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov2\",      \"address\": \"/0x00/FilMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov3\",      \"address\": \"/0x00/FilMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov4\",      \"address\": \"/0x00/FilMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilMov5\",      \"address\": \"/0x00/FilMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol0\",      \"address\": \"/0x00/FilVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol1\",      \"address\": \"/0x00/FilVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol2\",      \"address\": \"/0x00/FilVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol3\",      \"address\": \"/0x00/FilVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol4\",      \"address\": \"/0x00/FilVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilVol5\",      \"address\": \"/0x00/FilVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX0\",      \"address\": \"/0x00/MovX0\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX1\",      \"address\": \"/0x00/MovX1\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX2\",      \"address\": \"/0x00/MovX2\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX3\",      \"address\": \"/0x00/MovX3\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX4\",      \"address\": \"/0x00/MovX4\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX5\",      \"address\": \"/0x00/MovX5\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY0\",      \"address\": \"/0x00/MovY0\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY1\",      \"address\": \"/0x00/MovY1\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY2\",      \"address\": \"/0x00/MovY2\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY3\",      \"address\": \"/0x00/MovY3\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY4\",      \"address\": \"/0x00/MovY4\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY5\",      \"address\": \"/0x00/MovY5\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov0\",      \"address\": \"/0x00/OctMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov1\",      \"address\": \"/0x00/OctMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov2\",      \"address\": \"/0x00/OctMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov3\",      \"address\": \"/0x00/OctMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov4\",      \"address\": \"/0x00/OctMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctMov5\",      \"address\": \"/0x00/OctMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol0\",      \"address\": \"/0x00/OctVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol1\",      \"address\": \"/0x00/OctVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol2\",      \"address\": \"/0x00/OctVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol3\",      \"address\": \"/0x00/OctVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol4\",      \"address\": \"/0x00/OctVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"OctVol5\",      \"address\": \"/0x00/OctVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov0\",      \"address\": \"/0x00/ResMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov1\",      \"address\": \"/0x00/ResMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov2\",      \"address\": \"/0x00/ResMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov3\",      \"address\": \"/0x00/ResMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov4\",      \"address\": \"/0x00/ResMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResMov5\",      \"address\": \"/0x00/ResMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol0\",      \"address\": \"/0x00/ResVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol1\",      \"address\": \"/0x00/ResVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol2\",      \"address\": \"/0x00/ResVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol3\",      \"address\": \"/0x00/ResVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol4\",      \"address\": \"/0x00/ResVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResVol5\",      \"address\": \"/0x00/ResVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov0\",      \"address\": \"/0x00/RevMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov1\",      \"address\": \"/0x00/RevMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov2\",      \"address\": \"/0x00/RevMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov3\",      \"address\": \"/0x00/RevMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov4\",      \"address\": \"/0x00/RevMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevMov5\",      \"address\": \"/0x00/RevMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol0\",      \"address\": \"/0x00/RevVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol1\",      \"address\": \"/0x00/RevVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol2\",      \"address\": \"/0x00/RevVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol3\",      \"address\": \"/0x00/RevVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol4\",      \"address\": \"/0x00/RevVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevVol5\",      \"address\": \"/0x00/RevVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov0\",      \"address\": \"/0x00/SatMov0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov1\",      \"address\": \"/0x00/SatMov1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov2\",      \"address\": \"/0x00/SatMov2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov3\",      \"address\": \"/0x00/SatMov3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov4\",      \"address\": \"/0x00/SatMov4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatMov5\",      \"address\": \"/0x00/SatMov5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol0\",      \"address\": \"/0x00/SatVol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol1\",      \"address\": \"/0x00/SatVol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol2\",      \"address\": \"/0x00/SatVol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol3\",      \"address\": \"/0x00/SatVol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol4\",      \"address\": \"/0x00/SatVol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatVol5\",      \"address\": \"/0x00/SatVol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol0\",      \"address\": \"/0x00/Vol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol1\",      \"address\": \"/0x00/Vol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol2\",      \"address\": \"/0x00/Vol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol3\",      \"address\": \"/0x00/Vol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol4\",      \"address\": \"/0x00/Vol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol5\",      \"address\": \"/0x00/Vol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     }    ]   }  ] } ";
}

function metadatalooper(m) {
	m.declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("effect.lib/copyright", "Julius O. Smith III");
	m.declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
	m.declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("effect.lib/exciter_license", "MIT License (MIT)");
	m.declare("effect.lib/exciter_name", "Harmonic Exciter");
	m.declare("effect.lib/exciter_version", "1.0");
	m.declare("effect.lib/license", "STK-4.3");
	m.declare("effect.lib/name", "Faust Audio Effect Library");
	m.declare("effect.lib/version", "1.33");
	m.declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("filter.lib/copyright", "Julius O. Smith III");
	m.declare("filter.lib/license", "STK-4.3");
	m.declare("filter.lib/name", "Faust Filter Library");
	m.declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
	m.declare("filter.lib/version", "1.29");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "HOA");
	m.declare("hoa.lib/title", "High Order Ambisonics library");
	m.declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
	m.declare("instrument.lib/copyright", "Romain Michon");
	m.declare("instrument.lib/licence", "STK-4.3");
	m.declare("instrument.lib/name", "Faust-STK Tools Library");
	m.declare("instrument.lib/version", "1.0");
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
}


// Standard Faust DSP

faust.looper = function (context, buffer_size) {

    var handler = null;
    var ins, outs;
    var numIn, numOut;
    
    var scriptProcessor;
    
    var dspInChannnels = [];
    var dspOutChannnels = [];
   
    // Keep JSON parsed object
    var jon_object = JSON.parse(getJSONlooper());
    
    function getNumInputsAux () 
    {
        return (jon_object.inputs !== undefined) ? parseInt(jon_object.inputs) : 0;
    }
    
    function getNumOutputsAux () 
    {
        return (jon_object.outputs !== undefined) ? parseInt(jon_object.outputs) : 0;
    }
     
    // Memory allocator
    var ptr_size = 4; 
    var sample_size = 4;
    
    function pow2limit (x)
    {
        var n = 2;
        while (n < x) { n = 2 * n; }
        return (n < 65536) ? 65536 : n; // Minimum = 64 kB
    }
     
    var memory_size = pow2limit(getSizelooper() + (getNumInputsAux() + getNumOutputsAux()) * (ptr_size + (buffer_size * sample_size)));
   
    var HEAP = new ArrayBuffer(memory_size);
    var HEAP32 = new Int32Array(HEAP);
    var HEAPF32 = new Float32Array(HEAP);
     
    console.log(HEAP);
    console.log(HEAP32);
    console.log(HEAPF32);
 
    // bargraph
    var ouputs_timer = 5;
    var ouputs_items = [];
     
    // input items
    var inputs_items = [];
     
    // Start of HEAP index
    var audio_heap_ptr = 0;
     
    // Setup pointers offset
    var audio_heap_ptr_inputs = audio_heap_ptr; 
    var audio_heap_ptr_outputs = audio_heap_ptr_inputs + (getNumInputsAux() * ptr_size);
     
    // Setup buffer offset
    var audio_heap_inputs = audio_heap_ptr_outputs + (getNumOutputsAux() * ptr_size);
    var audio_heap_outputs = audio_heap_inputs + (getNumInputsAux() * buffer_size * sample_size);
    
    // Setup DSP offset
    var dsp_start = audio_heap_outputs + (getNumOutputsAux() * buffer_size * sample_size);
     
    // Start of DSP memory
    var dsp = dsp_start;
 
    // ASM module
    var factory = looperModule(window, null, HEAP);
    console.log(factory);
 
    var pathTable = getPathTablelooper();
    
    // Allocate table for 'setValue'
    var value_table = [];
        
    function update_outputs () 
    {
        if (ouputs_items.length > 0 && handler && ouputs_timer-- === 0) {
            ouputs_timer = 5;
            for (var i = 0; i < ouputs_items.length; i++) {
                handler(ouputs_items[i], factory.getValue(dsp, pathTable[ouputs_items[i]]));
            }
        }
    }
    
    function compute (e) 
    {
        var i, j;
        
        // Read inputs
        for (i = 0; i < numIn; i++) {
            var input = e.inputBuffer.getChannelData(i);
            var dspInput = dspInChannnels[i];
            for (j = 0; j < input.length; j++) {
                dspInput[j] = input[j];
            }
        }
        
        // Update control state
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = value_table[path];
            factory.setValue(dsp, pathTable[path], values[0]);
            values[0] = values[1];
        }
        
        // Compute
        factory.compute(dsp, buffer_size, ins, outs);
       
        // Update bargraph
        update_outputs();
        
        // Write outputs
        for (i = 0; i < numOut; i++) {
            var output = e.outputBuffer.getChannelData(i);
            var dspOutput = dspOutChannnels[i];
            for (j = 0; j < output.length; j++) {
                output[j] = dspOutput[j];
            }
        }
    };
         
    // JSON parsing
    function parse_ui (ui) 
    {
        for (var i = 0; i < ui.length; i++) {
            console.log(ui[i]);
            parse_group(ui[i]);
        }
    }
    
    function parse_group (group) 
    {
        if (group.items) {
            parse_items(group.items);
        }
    }
    
    function parse_items (items) 
    {
        var i;
        for (i = 0; i < items.length; i++) {
            parse_item(items[i]);
        }
    }
    
    function parse_item (item) 
    {
        if (item.type === "vgroup" || item.type === "hgroup" || item.type === "tgroup") {
            parse_items(item.items);
        } else if (item.type === "hbargraph" || item.type === "vbargraph") {
            // Keep bargraph adresses
            ouputs_items.push(item.address);
        } else if (item.type === "vslider" || item.type === "hslider" || item.type === "button" || item.type === "checkbox" || item.type === "nentry") {
            // Keep inputs adresses
            inputs_items.push(item.address);
        }
    }
      
    function init ()
    {
        var i;
        
        // Get input / output counts
        numIn = getNumInputsAux();
        numOut = getNumOutputsAux();
         
        // Setup web audio context
        console.log("buffer_size %d", buffer_size);
        scriptProcessor = context.createScriptProcessor(buffer_size, numIn, numOut);
        scriptProcessor.onaudioprocess = compute;
        
        if (numIn > 0) {
            ins = audio_heap_ptr_inputs; 
            for (i = 0; i < numIn; i++) { 
                HEAP32[(ins >> 2) + i] = audio_heap_inputs + ((buffer_size * sample_size) * i);
            }
     
            var dspInChans = HEAP32.subarray(ins >> 2, (ins + numIn * ptr_size) >> 2);
            for (i = 0; i < numIn; i++) {
                dspInChannnels[i] = HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + buffer_size * sample_size) >> 2);
            }
        }
        
        if (numOut > 0) {
            outs = audio_heap_ptr_outputs; 
            for (i = 0; i < numOut; i++) { 
                HEAP32[(outs >> 2) + i] = audio_heap_outputs + ((buffer_size * sample_size) * i);
            }
          
            var dspOutChans = HEAP32.subarray(outs >> 2, (outs + numOut * ptr_size) >> 2);
            for (i = 0; i < numOut; i++) {
                dspOutChannnels[i] = HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + buffer_size * sample_size) >> 2);
            }
        }
                                
        // bargraph
        parse_ui(jon_object.ui);
        
        // Init DSP
        factory.init(dsp, context.sampleRate);
        
        // Init 'value' table
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = new Float32Array(2);
            values[0] = values[1] = factory.getValue(dsp, pathTable[path]);
            value_table[path] = values;
        }
    }
    
    init();
    
    // External API
    return {
    
        getNumInputs : function () 
        {
            return getNumInputsAux();
        },
        
        getNumOutputs : function() 
        {
            return getNumOutputsAux();
        },
    
        destroy : function  ()
        {
            // Nothing to do
        },
        
        // Connect/disconnect to another node
        connect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.connect(node.getProcessor());
            } else {
                scriptProcessor.connect(node);
            }
        },

        disconnect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.disconnect(node.getProcessor());
            } else {
                scriptProcessor.disconnect(node);
            }
        },
        
        setHandler : function (hd)
        {
            handler = hd;
        },
        
        start : function () 
        {
            scriptProcessor.connect(context.destination);
        },

        stop : function () 
        {
            scriptProcessor.disconnect(context.destination);
        },

        setValue : function (path, val) 
        {
            var values = value_table[path];
            if (values) {
                if (factory.getValue(dsp, pathTable[path]) == values[0]) {
                    values[0] = val;
                } 
                values[1] = val;
            }
        },

        getValue : function (path) 
        {
            return factory.getValue(dsp, pathTable[path]);
        },
        
        controls : function()
        {
            return inputs_items;
        },
        
        json : function ()
        {
            return getJSONlooper();
        },
        
        getProcessor : function ()
        {
            return scriptProcessor;
        }
    };
};

