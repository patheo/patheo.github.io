/* ------------------------------------------------------------
Code generated with Faust 2.0.a41 (http://faust.grame.fr)
------------------------------------------------------------ */
/*
 faust2webaudio
 
 Primarily written by Myles Borins
 During the Spring 2013 offering of Music 420b with Julius Smith
 A bit during the Summer of 2013 with the help of Joshua Kit Clayton
 And finally a sprint during the late fall of 2013 to get everything working
 A Special thanks to Yann Orlarey and StÃ©phane Letz
 
 faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
 Choose the license that best suits your project. The text of the MIT and GPL
 licenses are at the root directory.
 
 Additional code : GRAME 2014
 
 */
 
'use strict';

var faust = faust || {};



function effetFaustModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF32 = new global.Float32Array(buffer);
	
	var imul = global.Math.imul;
	var log = global.Math.log;
	
	var atan2f = global.Math.atan2;
	var cosf = global.Math.cos;
	var fabsf = global.Math.abs;
	var floorf = global.Math.floor;
	var max = global.Math.max;
	var min = global.Math.min;
	var powf = global.Math.pow;
	var sinf = global.Math.sin;
	var sqrtf = global.Math.sqrt;
	var tanf = global.Math.tan;
	function faustpower2_f(value) {
		value = +(value);
		return +((value * value));
		
	}
	
	function faustpower2_i(value) {
		value = (value | 0);
		return (((value * value)) | 0);
		
	}
	
	function faustpower3_f(value) {
		value = +(value);
		return +(((value * value) * value));
		
	}
	
	function faustpower4_f(value) {
		value = +(value);
		return +((((value * value) * value) * value));
		
	}
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }

	function getNumInputseffetFaustSIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffetFaustSIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffetFaustSIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function filleffetFaustSIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[output + ((i | 0) << 2) >> 2] = 0.;
			
		}
		
	}

	function getNumInputseffetFaustSIG1(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffetFaustSIG1(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffetFaustSIG1(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i397 = 0;
		for (i397 = 0; (((i397 | 0) < 2) | 0); i397 = (((i397 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930632 + ((i397 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function filleffetFaustSIG1(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 20930632 + (0 << 2) >> 2] = ((1 + (HEAP32[dsp + 20930632 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF32[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738e-05 * +((((HEAP32[dsp + 20930632 + (0 << 2) >> 2] | 0) - 1) | 0)))));
			HEAP32[dsp + 20930632 + (1 << 2) >> 2] = (HEAP32[dsp + 20930632 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceIniteffetFaustSIG1(dsp, (samplingFreq | 0));
		filleffetFaustSIG1(dsp, 65536, (dsp + 0 | 0));
		
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var i3 = 0;
		var i4 = 0;
		var i5 = 0;
		var i6 = 0;
		var i7 = 0;
		var i8 = 0;
		var i9 = 0;
		var i10 = 0;
		var i11 = 0;
		var i12 = 0;
		var i13 = 0;
		var i14 = 0;
		var i15 = 0;
		var i16 = 0;
		var i17 = 0;
		var i18 = 0;
		var i19 = 0;
		var i20 = 0;
		var i21 = 0;
		var i22 = 0;
		var i23 = 0;
		var i24 = 0;
		var i25 = 0;
		var i26 = 0;
		var i27 = 0;
		var i28 = 0;
		var i29 = 0;
		var i30 = 0;
		var i31 = 0;
		var i32 = 0;
		var i33 = 0;
		var i34 = 0;
		var i35 = 0;
		var i36 = 0;
		var i37 = 0;
		var i38 = 0;
		var i39 = 0;
		var i40 = 0;
		var i41 = 0;
		var i42 = 0;
		var i43 = 0;
		var i44 = 0;
		var i45 = 0;
		var i46 = 0;
		var i47 = 0;
		var i48 = 0;
		var i49 = 0;
		var i50 = 0;
		var i51 = 0;
		var i52 = 0;
		var i53 = 0;
		var i54 = 0;
		var i55 = 0;
		var i56 = 0;
		var i57 = 0;
		var i58 = 0;
		var i59 = 0;
		var i60 = 0;
		var i61 = 0;
		var i62 = 0;
		var i63 = 0;
		var i64 = 0;
		var i65 = 0;
		var i66 = 0;
		var i67 = 0;
		var i68 = 0;
		var i69 = 0;
		var i70 = 0;
		var i71 = 0;
		var i72 = 0;
		var i73 = 0;
		var i74 = 0;
		var i75 = 0;
		var i76 = 0;
		var i77 = 0;
		var i78 = 0;
		var i79 = 0;
		var i80 = 0;
		var i81 = 0;
		var i82 = 0;
		var i83 = 0;
		var i84 = 0;
		var i85 = 0;
		var i86 = 0;
		var i87 = 0;
		var i88 = 0;
		var i89 = 0;
		var i90 = 0;
		var i91 = 0;
		var i92 = 0;
		var i93 = 0;
		var i94 = 0;
		var i95 = 0;
		var i96 = 0;
		var i97 = 0;
		var i98 = 0;
		var i99 = 0;
		var i100 = 0;
		var i101 = 0;
		var i102 = 0;
		var i103 = 0;
		var i104 = 0;
		var i105 = 0;
		var i106 = 0;
		var i107 = 0;
		var i108 = 0;
		var i109 = 0;
		var i110 = 0;
		var i111 = 0;
		var i112 = 0;
		var i113 = 0;
		var i114 = 0;
		var i115 = 0;
		var i116 = 0;
		var i117 = 0;
		var i118 = 0;
		var i119 = 0;
		var i120 = 0;
		var i121 = 0;
		var i122 = 0;
		var i123 = 0;
		var i124 = 0;
		var i125 = 0;
		var i126 = 0;
		var i127 = 0;
		var i128 = 0;
		var i129 = 0;
		var i130 = 0;
		var i131 = 0;
		var i132 = 0;
		var i133 = 0;
		var i134 = 0;
		var i135 = 0;
		var i136 = 0;
		var i137 = 0;
		var i138 = 0;
		var i139 = 0;
		var i140 = 0;
		var i141 = 0;
		var i142 = 0;
		var i143 = 0;
		var i144 = 0;
		var i145 = 0;
		var i146 = 0;
		var i147 = 0;
		var i148 = 0;
		var i149 = 0;
		var i150 = 0;
		var i151 = 0;
		var i152 = 0;
		var i153 = 0;
		var i154 = 0;
		var i155 = 0;
		var i156 = 0;
		var i157 = 0;
		var i158 = 0;
		var i159 = 0;
		var i160 = 0;
		var i161 = 0;
		var i162 = 0;
		var i163 = 0;
		var i164 = 0;
		var i165 = 0;
		var i166 = 0;
		var i167 = 0;
		var i168 = 0;
		var i169 = 0;
		var i170 = 0;
		var i171 = 0;
		var i172 = 0;
		var i173 = 0;
		var i174 = 0;
		var i175 = 0;
		var i176 = 0;
		var i177 = 0;
		var i178 = 0;
		var i179 = 0;
		var i180 = 0;
		var i181 = 0;
		var i182 = 0;
		var i183 = 0;
		var i184 = 0;
		var i185 = 0;
		var i186 = 0;
		var i187 = 0;
		var i188 = 0;
		var i189 = 0;
		var i190 = 0;
		var i191 = 0;
		var i192 = 0;
		var i193 = 0;
		var i194 = 0;
		var i195 = 0;
		var i196 = 0;
		var i197 = 0;
		var i198 = 0;
		var i199 = 0;
		var i200 = 0;
		var i201 = 0;
		var i202 = 0;
		var i203 = 0;
		var i204 = 0;
		var i205 = 0;
		var i206 = 0;
		var i207 = 0;
		var i208 = 0;
		var i209 = 0;
		var i210 = 0;
		var i211 = 0;
		var i212 = 0;
		var i213 = 0;
		var i214 = 0;
		var i215 = 0;
		var i216 = 0;
		var i217 = 0;
		var i218 = 0;
		var i219 = 0;
		var i220 = 0;
		var i221 = 0;
		var i222 = 0;
		var i223 = 0;
		var i224 = 0;
		var i225 = 0;
		var i226 = 0;
		var i227 = 0;
		var i228 = 0;
		var i229 = 0;
		var i230 = 0;
		var i231 = 0;
		var i232 = 0;
		var i233 = 0;
		var i234 = 0;
		var i235 = 0;
		var i236 = 0;
		var i237 = 0;
		var i238 = 0;
		var i239 = 0;
		var i240 = 0;
		var i241 = 0;
		var i242 = 0;
		var i243 = 0;
		var i244 = 0;
		var i245 = 0;
		var i246 = 0;
		var i247 = 0;
		var i248 = 0;
		var i249 = 0;
		var i250 = 0;
		var i251 = 0;
		var i252 = 0;
		var i253 = 0;
		var i254 = 0;
		var i255 = 0;
		var i256 = 0;
		var i257 = 0;
		var i258 = 0;
		var i259 = 0;
		var i260 = 0;
		var i261 = 0;
		var i262 = 0;
		var i263 = 0;
		var i264 = 0;
		var i265 = 0;
		var i266 = 0;
		var i267 = 0;
		var i268 = 0;
		var i269 = 0;
		var i270 = 0;
		var i271 = 0;
		var i272 = 0;
		var i273 = 0;
		var i274 = 0;
		var i275 = 0;
		var i276 = 0;
		var i277 = 0;
		var i278 = 0;
		var i279 = 0;
		var i280 = 0;
		var i281 = 0;
		var i282 = 0;
		var i283 = 0;
		var i284 = 0;
		var i285 = 0;
		var i286 = 0;
		var i287 = 0;
		var i288 = 0;
		var i289 = 0;
		var i290 = 0;
		var i291 = 0;
		var i292 = 0;
		var i293 = 0;
		var i294 = 0;
		var i295 = 0;
		var i296 = 0;
		var i297 = 0;
		var i298 = 0;
		var i299 = 0;
		var i300 = 0;
		var i301 = 0;
		var i302 = 0;
		var i303 = 0;
		var i304 = 0;
		var i305 = 0;
		var i306 = 0;
		var i307 = 0;
		var i308 = 0;
		var i309 = 0;
		var i310 = 0;
		var i311 = 0;
		var i312 = 0;
		var i313 = 0;
		var i314 = 0;
		var i315 = 0;
		var i316 = 0;
		var i317 = 0;
		var i318 = 0;
		var i319 = 0;
		var i320 = 0;
		var i321 = 0;
		var i322 = 0;
		var i323 = 0;
		var i324 = 0;
		var i325 = 0;
		var i326 = 0;
		var i327 = 0;
		var i328 = 0;
		var i329 = 0;
		var i330 = 0;
		var i331 = 0;
		var i332 = 0;
		var i333 = 0;
		var i334 = 0;
		var i335 = 0;
		var i336 = 0;
		var i337 = 0;
		var i338 = 0;
		var i339 = 0;
		var i340 = 0;
		var i341 = 0;
		var i342 = 0;
		var i343 = 0;
		var i344 = 0;
		var i345 = 0;
		var i346 = 0;
		var i347 = 0;
		var i348 = 0;
		var i349 = 0;
		var i350 = 0;
		var i351 = 0;
		var i352 = 0;
		var i353 = 0;
		var i354 = 0;
		var i355 = 0;
		var i356 = 0;
		var i357 = 0;
		var i358 = 0;
		var i359 = 0;
		var i360 = 0;
		var i361 = 0;
		var i362 = 0;
		var i363 = 0;
		var i364 = 0;
		var i365 = 0;
		var i366 = 0;
		var i367 = 0;
		var i368 = 0;
		var i369 = 0;
		var i370 = 0;
		var i371 = 0;
		var i372 = 0;
		var i373 = 0;
		var i374 = 0;
		var i375 = 0;
		var i376 = 0;
		var i377 = 0;
		var i378 = 0;
		var i379 = 0;
		var i380 = 0;
		var i381 = 0;
		var i382 = 0;
		var i383 = 0;
		var i384 = 0;
		var i385 = 0;
		var i386 = 0;
		var i387 = 0;
		var i388 = 0;
		var i389 = 0;
		var i390 = 0;
		var i391 = 0;
		var i392 = 0;
		var i393 = 0;
		var i394 = 0;
		var i395 = 0;
		var i396 = 0;
		var i398 = 0;
		var i399 = 0;
		HEAP32[dsp + 20930644 >> 2] = (samplingFreq | 0);
		HEAPF32[dsp + 20930640 >> 2] = +(0.);
		for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928160 + ((i0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930648 >> 2] = ((min(192000, ((max(1, (HEAP32[dsp + 20930644 >> 2] | 0))) | 0))) | 0);
		HEAPF32[dsp + 20930652 >> 2] = +((HEAP32[dsp + 20930648 >> 2] | 0));
		HEAPF32[dsp + 20930656 >> 2] = +(1. / +(HEAPF32[dsp + 20930652 >> 2]));
		HEAPF32[dsp + 20930660 >> 2] = +(faustpower2_f(+(HEAPF32[dsp + 20930656 >> 2])));
		HEAPF32[dsp + 20930664 >> 2] = +(4. * +(((faustpower2_i((HEAP32[dsp + 20930648 >> 2] | 0))) | 0)));
		HEAPF32[dsp + 20930668 >> 2] = +(3.14159 / +((HEAP32[dsp + 20930648 >> 2] | 0)));
		HEAPF32[dsp + 20930672 >> 2] = +(0.);
		HEAPF32[dsp + 20930676 >> 2] = +(1.64489 / +(HEAPF32[dsp + 20930652 >> 2]));
		HEAPF32[dsp + 20930680 >> 2] = +(2. * +((HEAP32[dsp + 20930648 >> 2] | 0)));
		HEAPF32[dsp + 20930684 >> 2] = +(0.5 / +((HEAP32[dsp + 20930648 >> 2] | 0)));
		HEAPF32[dsp + 20930688 >> 2] = +(2. / +(HEAPF32[dsp + 20930652 >> 2]));
		HEAPF32[dsp + 20930692 >> 2] = +(6.42109 / +(HEAPF32[dsp + 20930652 >> 2]));
		HEAPF32[dsp + 20930696 >> 2] = +(0.);
		for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928168 + ((i1 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930700 >> 2] = +(0.);
		for (i2 = 0; (((i2 | 0) < 2) | 0); i2 = (((i2 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928176 + ((i2 | 0) << 2) >> 2] = 0.;
			
		}
		for (i3 = 0; (((i3 | 0) < 2) | 0); i3 = (((i3 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928184 + ((i3 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 262144 | 0));
		for (i4 = 0; (((i4 | 0) < 2) | 0); i4 = (((i4 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928192 + ((i4 | 0) << 2) >> 2] = 0;
			
		}
		for (i5 = 0; (((i5 | 0) < 2) | 0); i5 = (((i5 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928200 + ((i5 | 0) << 2) >> 2] = 0;
			
		}
		for (i6 = 0; (((i6 | 0) < 2) | 0); i6 = (((i6 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928208 + ((i6 | 0) << 2) >> 2] = 0;
			
		}
		for (i7 = 0; (((i7 | 0) < 2) | 0); i7 = (((i7 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928216 + ((i7 | 0) << 2) >> 2] = 0;
			
		}
		for (i8 = 0; (((i8 | 0) < 2) | 0); i8 = (((i8 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928224 + ((i8 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20930704 >> 2] = +(0.);
		for (i9 = 0; (((i9 | 0) < 2) | 0); i9 = (((i9 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928232 + ((i9 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930708 >> 2] = +(faustpower3_f(+(HEAPF32[dsp + 20930656 >> 2])));
		HEAPF32[dsp + 20930712 >> 2] = +(4. * +(HEAPF32[dsp + 20930656 >> 2]));
		HEAPF32[dsp + 20930716 >> 2] = +(12.8422 / +(HEAPF32[dsp + 20930652 >> 2]));
		HEAPF32[dsp + 20930720 >> 2] = +(6. * +(HEAPF32[dsp + 20930660 >> 2]));
		for (i10 = 0; (((i10 | 0) < 5) | 0); i10 = (((i10 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20927968 + ((i10 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930724 >> 2] = +(0.0792366 * +(faustpower4_f(+(HEAPF32[dsp + 20930656 >> 2]))));
		HEAPF32[dsp + 20930728 >> 2] = +(0.118855 * +(HEAPF32[dsp + 20930660 >> 2]));
		HEAPF32[dsp + 20930732 >> 2] = +(0.0198091 * +(HEAPF32[dsp + 20930660 >> 2]));
		HEAPF32[dsp + 20930736 >> 2] = +(2. * +(HEAPF32[dsp + 20930660 >> 2]));
		for (i11 = 0; (((i11 | 0) < 3) | 0); i11 = (((i11 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928088 + ((i11 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930740 >> 2] = +(0.);
		for (i12 = 0; (((i12 | 0) < 2) | 0); i12 = (((i12 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928240 + ((i12 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930744 >> 2] = +(0.);
		for (i13 = 0; (((i13 | 0) < 2) | 0); i13 = (((i13 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928248 + ((i13 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17137600 | 0));
		for (i14 = 0; (((i14 | 0) < 2) | 0); i14 = (((i14 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928256 + ((i14 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20930748 >> 2] = +(0.);
		HEAPF32[dsp + 20930752 >> 2] = +(0.);
		for (i15 = 0; (((i15 | 0) < 2) | 0); i15 = (((i15 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928264 + ((i15 | 0) << 2) >> 2] = 0.;
			
		}
		for (i16 = 0; (((i16 | 0) < 2) | 0); i16 = (((i16 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928272 + ((i16 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930756 >> 2] = +(0.);
		for (i17 = 0; (((i17 | 0) < 2) | 0); i17 = (((i17 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928280 + ((i17 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930760 >> 2] = +(0.);
		for (i18 = 0; (((i18 | 0) < 2) | 0); i18 = (((i18 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928288 + ((i18 | 0) << 2) >> 2] = 0.;
			
		}
		for (i19 = 0; (((i19 | 0) < 2) | 0); i19 = (((i19 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928296 + ((i19 | 0) << 2) >> 2] = 0.;
			
		}
		for (i20 = 0; (((i20 | 0) < 2) | 0); i20 = (((i20 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928304 + ((i20 | 0) << 2) >> 2] = 0.;
			
		}
		for (i21 = 0; (((i21 | 0) < 2) | 0); i21 = (((i21 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928312 + ((i21 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930764 >> 2] = +(0.);
		for (i22 = 0; (((i22 | 0) < 2) | 0); i22 = (((i22 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928320 + ((i22 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930768 >> 2] = 0;
		for (i23 = 0; (((i23 | 0) < 262144) | 0); i23 = (((i23 | 0) + 1) | 0)) {
			HEAPF32[dsp + 10846144 + ((i23 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930772 >> 2] = +(0.);
		for (i24 = 0; (((i24 | 0) < 2) | 0); i24 = (((i24 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928328 + ((i24 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930776 >> 2] = +(6.28319 / +((HEAP32[dsp + 20930648 >> 2] | 0)));
		HEAPF32[dsp + 20930780 >> 2] = +(0.);
		for (i25 = 0; (((i25 | 0) < 2) | 0); i25 = (((i25 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928336 + ((i25 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930784 >> 2] = +(0.);
		for (i26 = 0; (((i26 | 0) < 2) | 0); i26 = (((i26 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928344 + ((i26 | 0) << 2) >> 2] = 0.;
			
		}
		for (i27 = 0; (((i27 | 0) < 2) | 0); i27 = (((i27 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928352 + ((i27 | 0) << 2) >> 2] = 0.;
			
		}
		for (i28 = 0; (((i28 | 0) < 2) | 0); i28 = (((i28 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928360 + ((i28 | 0) << 2) >> 2] = 0.;
			
		}
		for (i29 = 0; (((i29 | 0) < 2) | 0); i29 = (((i29 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928368 + ((i29 | 0) << 2) >> 2] = 0.;
			
		}
		for (i30 = 0; (((i30 | 0) < 2) | 0); i30 = (((i30 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928376 + ((i30 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930788 >> 2] = +(0.);
		for (i31 = 0; (((i31 | 0) < 2) | 0); i31 = (((i31 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928384 + ((i31 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930792 >> 2] = +(0.);
		for (i32 = 0; (((i32 | 0) < 2) | 0); i32 = (((i32 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928392 + ((i32 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930796 >> 2] = +(0.);
		for (i33 = 0; (((i33 | 0) < 2) | 0); i33 = (((i33 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928400 + ((i33 | 0) << 2) >> 2] = 0.;
			
		}
		for (i34 = 0; (((i34 | 0) < 8192) | 0); i34 = (((i34 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19256800 + ((i34 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930800 >> 2] = ~~(+(0.5 + +(~~(+(0.0253061 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i35 = 0; (((i35 | 0) < 2) | 0); i35 = (((i35 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928408 + ((i35 | 0) << 2) >> 2] = 0.;
			
		}
		for (i36 = 0; (((i36 | 0) < 2) | 0); i36 = (((i36 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928416 + ((i36 | 0) << 2) >> 2] = 0.;
			
		}
		for (i37 = 0; (((i37 | 0) < 8192) | 0); i37 = (((i37 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19289568 + ((i37 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930804 >> 2] = ~~(+(0.5 + +(~~(+(0.0269388 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i38 = 0; (((i38 | 0) < 2) | 0); i38 = (((i38 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928424 + ((i38 | 0) << 2) >> 2] = 0.;
			
		}
		for (i39 = 0; (((i39 | 0) < 2) | 0); i39 = (((i39 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928432 + ((i39 | 0) << 2) >> 2] = 0.;
			
		}
		for (i40 = 0; (((i40 | 0) < 8192) | 0); i40 = (((i40 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19322336 + ((i40 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930808 >> 2] = ~~(+(0.5 + +(~~(+(0.0289569 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i41 = 0; (((i41 | 0) < 2) | 0); i41 = (((i41 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928440 + ((i41 | 0) << 2) >> 2] = 0.;
			
		}
		for (i42 = 0; (((i42 | 0) < 2) | 0); i42 = (((i42 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928448 + ((i42 | 0) << 2) >> 2] = 0.;
			
		}
		for (i43 = 0; (((i43 | 0) < 8192) | 0); i43 = (((i43 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19355104 + ((i43 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930812 >> 2] = ~~(+(0.5 + +(~~(+(0.0307483 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i44 = 0; (((i44 | 0) < 2) | 0); i44 = (((i44 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928456 + ((i44 | 0) << 2) >> 2] = 0.;
			
		}
		for (i45 = 0; (((i45 | 0) < 2) | 0); i45 = (((i45 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928464 + ((i45 | 0) << 2) >> 2] = 0.;
			
		}
		for (i46 = 0; (((i46 | 0) < 8192) | 0); i46 = (((i46 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19387872 + ((i46 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930816 >> 2] = ~~(+(0.5 + +(~~(+(0.0322449 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i47 = 0; (((i47 | 0) < 2) | 0); i47 = (((i47 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928472 + ((i47 | 0) << 2) >> 2] = 0.;
			
		}
		for (i48 = 0; (((i48 | 0) < 2) | 0); i48 = (((i48 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928480 + ((i48 | 0) << 2) >> 2] = 0.;
			
		}
		for (i49 = 0; (((i49 | 0) < 8192) | 0); i49 = (((i49 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19420640 + ((i49 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930820 >> 2] = ~~(+(0.5 + +(~~(+(0.0338095 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i50 = 0; (((i50 | 0) < 2) | 0); i50 = (((i50 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928488 + ((i50 | 0) << 2) >> 2] = 0.;
			
		}
		for (i51 = 0; (((i51 | 0) < 2) | 0); i51 = (((i51 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928496 + ((i51 | 0) << 2) >> 2] = 0.;
			
		}
		for (i52 = 0; (((i52 | 0) < 8192) | 0); i52 = (((i52 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19453408 + ((i52 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930824 >> 2] = ~~(+(0.5 + +(~~(+(0.0353061 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i53 = 0; (((i53 | 0) < 2) | 0); i53 = (((i53 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928504 + ((i53 | 0) << 2) >> 2] = 0.;
			
		}
		for (i54 = 0; (((i54 | 0) < 2) | 0); i54 = (((i54 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928512 + ((i54 | 0) << 2) >> 2] = 0.;
			
		}
		for (i55 = 0; (((i55 | 0) < 8192) | 0); i55 = (((i55 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19486176 + ((i55 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930828 >> 2] = ~~(+(0.5 + +(~~(+(0.0366667 * +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i56 = 0; (((i56 | 0) < 2) | 0); i56 = (((i56 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928520 + ((i56 | 0) << 2) >> 2] = 0.;
			
		}
		for (i57 = 0; (((i57 | 0) < 1024) | 0); i57 = (((i57 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20829664 + ((i57 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930832 >> 2] = ((~~(+(+(~~(+(0.0126077 * +((HEAP32[dsp + 20930648 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i58 = 0; (((i58 | 0) < 2) | 0); i58 = (((i58 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928528 + ((i58 | 0) << 2) >> 2] = 0.;
			
		}
		for (i59 = 0; (((i59 | 0) < 1024) | 0); i59 = (((i59 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20833760 + ((i59 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930836 >> 2] = ((~~(+(+(~~(+(0.01 * +((HEAP32[dsp + 20930648 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i60 = 0; (((i60 | 0) < 2) | 0); i60 = (((i60 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928536 + ((i60 | 0) << 2) >> 2] = 0.;
			
		}
		for (i61 = 0; (((i61 | 0) < 1024) | 0); i61 = (((i61 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20837856 + ((i61 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930840 >> 2] = ((~~(+(+(~~(+(0.00773243 * +((HEAP32[dsp + 20930648 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i62 = 0; (((i62 | 0) < 2) | 0); i62 = (((i62 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928544 + ((i62 | 0) << 2) >> 2] = 0.;
			
		}
		for (i63 = 0; (((i63 | 0) < 1024) | 0); i63 = (((i63 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20841952 + ((i63 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20930844 >> 2] = ((~~(+(+(~~(+(0.00510204 * +((HEAP32[dsp + 20930648 >> 2] | 0))))) - 0.5)) & 1023) | 0);
		for (i64 = 0; (((i64 | 0) < 2) | 0); i64 = (((i64 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928552 + ((i64 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930848 >> 2] = +(0.);
		for (i65 = 0; (((i65 | 0) < 2) | 0); i65 = (((i65 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928560 + ((i65 | 0) << 2) >> 2] = 0.;
			
		}
		for (i66 = 0; (((i66 | 0) < 2) | 0); i66 = (((i66 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928568 + ((i66 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930856 >> 2] = +(0.);
		for (i67 = 0; (((i67 | 0) < 2) | 0); i67 = (((i67 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928576 + ((i67 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930860 >> 2] = +(5.);
		for (i68 = 0; (((i68 | 0) < 2) | 0); i68 = (((i68 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928584 + ((i68 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 2026144 | 0));
		HEAPF32[dsp + 20930864 >> 2] = +(0.);
		for (i69 = 0; (((i69 | 0) < 2) | 0); i69 = (((i69 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928592 + ((i69 | 0) << 2) >> 2] = 0.;
			
		}
		for (i70 = 0; (((i70 | 0) < 2) | 0); i70 = (((i70 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928600 + ((i70 | 0) << 2) >> 2] = 0;
			
		}
		for (i71 = 0; (((i71 | 0) < 2) | 0); i71 = (((i71 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928608 + ((i71 | 0) << 2) >> 2] = 0;
			
		}
		for (i72 = 0; (((i72 | 0) < 2) | 0); i72 = (((i72 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928616 + ((i72 | 0) << 2) >> 2] = 0;
			
		}
		for (i73 = 0; (((i73 | 0) < 2) | 0); i73 = (((i73 | 0) + 1) | 0)) {
			HEAP32[dsp + 20928624 + ((i73 | 0) << 2) >> 2] = 0;
			
		}
		for (i74 = 0; (((i74 | 0) < 2) | 0); i74 = (((i74 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928632 + ((i74 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930868 >> 2] = +(0.);
		for (i75 = 0; (((i75 | 0) < 2) | 0); i75 = (((i75 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928640 + ((i75 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930872 >> 2] = +(0.);
		HEAPF32[dsp + 20930876 >> 2] = +(0.);
		for (i76 = 0; (((i76 | 0) < 2) | 0); i76 = (((i76 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928648 + ((i76 | 0) << 2) >> 2] = 0.;
			
		}
		for (i77 = 0; (((i77 | 0) < 5) | 0); i77 = (((i77 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20927988 + ((i77 | 0) << 2) >> 2] = 0.;
			
		}
		for (i78 = 0; (((i78 | 0) < 3) | 0); i78 = (((i78 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928100 + ((i78 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930880 >> 2] = +(0.);
		for (i79 = 0; (((i79 | 0) < 2) | 0); i79 = (((i79 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928656 + ((i79 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17490800 | 0));
		HEAPF32[dsp + 20930884 >> 2] = +(0.);
		HEAPF32[dsp + 20930888 >> 2] = +(0.);
		for (i80 = 0; (((i80 | 0) < 2) | 0); i80 = (((i80 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928664 + ((i80 | 0) << 2) >> 2] = 0.;
			
		}
		for (i81 = 0; (((i81 | 0) < 2) | 0); i81 = (((i81 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928672 + ((i81 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930892 >> 2] = +(0.);
		for (i82 = 0; (((i82 | 0) < 2) | 0); i82 = (((i82 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928680 + ((i82 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930896 >> 2] = +(0.);
		for (i83 = 0; (((i83 | 0) < 2) | 0); i83 = (((i83 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928688 + ((i83 | 0) << 2) >> 2] = 0.;
			
		}
		for (i84 = 0; (((i84 | 0) < 2) | 0); i84 = (((i84 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928696 + ((i84 | 0) << 2) >> 2] = 0.;
			
		}
		for (i85 = 0; (((i85 | 0) < 2) | 0); i85 = (((i85 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928704 + ((i85 | 0) << 2) >> 2] = 0.;
			
		}
		for (i86 = 0; (((i86 | 0) < 2) | 0); i86 = (((i86 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928712 + ((i86 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930900 >> 2] = +(0.);
		for (i87 = 0; (((i87 | 0) < 2) | 0); i87 = (((i87 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928720 + ((i87 | 0) << 2) >> 2] = 0.;
			
		}
		for (i88 = 0; (((i88 | 0) < 262144) | 0); i88 = (((i88 | 0) + 1) | 0)) {
			HEAPF32[dsp + 11894720 + ((i88 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930904 >> 2] = +(0.);
		for (i89 = 0; (((i89 | 0) < 2) | 0); i89 = (((i89 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928728 + ((i89 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930908 >> 2] = +(0.);
		for (i90 = 0; (((i90 | 0) < 2) | 0); i90 = (((i90 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928736 + ((i90 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930912 >> 2] = +(0.);
		for (i91 = 0; (((i91 | 0) < 2) | 0); i91 = (((i91 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928744 + ((i91 | 0) << 2) >> 2] = 0.;
			
		}
		for (i92 = 0; (((i92 | 0) < 2) | 0); i92 = (((i92 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928752 + ((i92 | 0) << 2) >> 2] = 0.;
			
		}
		for (i93 = 0; (((i93 | 0) < 2) | 0); i93 = (((i93 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928760 + ((i93 | 0) << 2) >> 2] = 0.;
			
		}
		for (i94 = 0; (((i94 | 0) < 2) | 0); i94 = (((i94 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928768 + ((i94 | 0) << 2) >> 2] = 0.;
			
		}
		for (i95 = 0; (((i95 | 0) < 2) | 0); i95 = (((i95 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928776 + ((i95 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930916 >> 2] = +(0.);
		for (i96 = 0; (((i96 | 0) < 2) | 0); i96 = (((i96 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928784 + ((i96 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930920 >> 2] = +(0.);
		for (i97 = 0; (((i97 | 0) < 2) | 0); i97 = (((i97 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928792 + ((i97 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930924 >> 2] = +(0.);
		for (i98 = 0; (((i98 | 0) < 2) | 0); i98 = (((i98 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928800 + ((i98 | 0) << 2) >> 2] = 0.;
			
		}
		for (i99 = 0; (((i99 | 0) < 8192) | 0); i99 = (((i99 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19518944 + ((i99 | 0) << 2) >> 2] = 0.;
			
		}
		for (i100 = 0; (((i100 | 0) < 2) | 0); i100 = (((i100 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928808 + ((i100 | 0) << 2) >> 2] = 0.;
			
		}
		for (i101 = 0; (((i101 | 0) < 2) | 0); i101 = (((i101 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928816 + ((i101 | 0) << 2) >> 2] = 0.;
			
		}
		for (i102 = 0; (((i102 | 0) < 8192) | 0); i102 = (((i102 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19551712 + ((i102 | 0) << 2) >> 2] = 0.;
			
		}
		for (i103 = 0; (((i103 | 0) < 2) | 0); i103 = (((i103 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928824 + ((i103 | 0) << 2) >> 2] = 0.;
			
		}
		for (i104 = 0; (((i104 | 0) < 2) | 0); i104 = (((i104 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928832 + ((i104 | 0) << 2) >> 2] = 0.;
			
		}
		for (i105 = 0; (((i105 | 0) < 8192) | 0); i105 = (((i105 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19584480 + ((i105 | 0) << 2) >> 2] = 0.;
			
		}
		for (i106 = 0; (((i106 | 0) < 2) | 0); i106 = (((i106 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928840 + ((i106 | 0) << 2) >> 2] = 0.;
			
		}
		for (i107 = 0; (((i107 | 0) < 2) | 0); i107 = (((i107 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928848 + ((i107 | 0) << 2) >> 2] = 0.;
			
		}
		for (i108 = 0; (((i108 | 0) < 8192) | 0); i108 = (((i108 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19617248 + ((i108 | 0) << 2) >> 2] = 0.;
			
		}
		for (i109 = 0; (((i109 | 0) < 2) | 0); i109 = (((i109 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928856 + ((i109 | 0) << 2) >> 2] = 0.;
			
		}
		for (i110 = 0; (((i110 | 0) < 2) | 0); i110 = (((i110 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928864 + ((i110 | 0) << 2) >> 2] = 0.;
			
		}
		for (i111 = 0; (((i111 | 0) < 8192) | 0); i111 = (((i111 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19650016 + ((i111 | 0) << 2) >> 2] = 0.;
			
		}
		for (i112 = 0; (((i112 | 0) < 2) | 0); i112 = (((i112 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928872 + ((i112 | 0) << 2) >> 2] = 0.;
			
		}
		for (i113 = 0; (((i113 | 0) < 2) | 0); i113 = (((i113 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928880 + ((i113 | 0) << 2) >> 2] = 0.;
			
		}
		for (i114 = 0; (((i114 | 0) < 8192) | 0); i114 = (((i114 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19682784 + ((i114 | 0) << 2) >> 2] = 0.;
			
		}
		for (i115 = 0; (((i115 | 0) < 2) | 0); i115 = (((i115 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928888 + ((i115 | 0) << 2) >> 2] = 0.;
			
		}
		for (i116 = 0; (((i116 | 0) < 2) | 0); i116 = (((i116 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928896 + ((i116 | 0) << 2) >> 2] = 0.;
			
		}
		for (i117 = 0; (((i117 | 0) < 8192) | 0); i117 = (((i117 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19715552 + ((i117 | 0) << 2) >> 2] = 0.;
			
		}
		for (i118 = 0; (((i118 | 0) < 2) | 0); i118 = (((i118 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928904 + ((i118 | 0) << 2) >> 2] = 0.;
			
		}
		for (i119 = 0; (((i119 | 0) < 2) | 0); i119 = (((i119 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928912 + ((i119 | 0) << 2) >> 2] = 0.;
			
		}
		for (i120 = 0; (((i120 | 0) < 8192) | 0); i120 = (((i120 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19748320 + ((i120 | 0) << 2) >> 2] = 0.;
			
		}
		for (i121 = 0; (((i121 | 0) < 2) | 0); i121 = (((i121 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928920 + ((i121 | 0) << 2) >> 2] = 0.;
			
		}
		for (i122 = 0; (((i122 | 0) < 1024) | 0); i122 = (((i122 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20846048 + ((i122 | 0) << 2) >> 2] = 0.;
			
		}
		for (i123 = 0; (((i123 | 0) < 2) | 0); i123 = (((i123 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928928 + ((i123 | 0) << 2) >> 2] = 0.;
			
		}
		for (i124 = 0; (((i124 | 0) < 1024) | 0); i124 = (((i124 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20850144 + ((i124 | 0) << 2) >> 2] = 0.;
			
		}
		for (i125 = 0; (((i125 | 0) < 2) | 0); i125 = (((i125 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928936 + ((i125 | 0) << 2) >> 2] = 0.;
			
		}
		for (i126 = 0; (((i126 | 0) < 1024) | 0); i126 = (((i126 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20854240 + ((i126 | 0) << 2) >> 2] = 0.;
			
		}
		for (i127 = 0; (((i127 | 0) < 2) | 0); i127 = (((i127 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928944 + ((i127 | 0) << 2) >> 2] = 0.;
			
		}
		for (i128 = 0; (((i128 | 0) < 1024) | 0); i128 = (((i128 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20858336 + ((i128 | 0) << 2) >> 2] = 0.;
			
		}
		for (i129 = 0; (((i129 | 0) < 2) | 0); i129 = (((i129 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928952 + ((i129 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930928 >> 2] = +(0.);
		for (i130 = 0; (((i130 | 0) < 2) | 0); i130 = (((i130 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928960 + ((i130 | 0) << 2) >> 2] = 0.;
			
		}
		for (i131 = 0; (((i131 | 0) < 2) | 0); i131 = (((i131 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928968 + ((i131 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930936 >> 2] = +(0.);
		for (i132 = 0; (((i132 | 0) < 2) | 0); i132 = (((i132 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928976 + ((i132 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930940 >> 2] = +(5.);
		for (i133 = 0; (((i133 | 0) < 2) | 0); i133 = (((i133 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928984 + ((i133 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 3790144 | 0));
		HEAPF32[dsp + 20930944 >> 2] = +(0.);
		for (i134 = 0; (((i134 | 0) < 2) | 0); i134 = (((i134 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928992 + ((i134 | 0) << 2) >> 2] = 0.;
			
		}
		for (i135 = 0; (((i135 | 0) < 2) | 0); i135 = (((i135 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929000 + ((i135 | 0) << 2) >> 2] = 0;
			
		}
		for (i136 = 0; (((i136 | 0) < 2) | 0); i136 = (((i136 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929008 + ((i136 | 0) << 2) >> 2] = 0;
			
		}
		for (i137 = 0; (((i137 | 0) < 2) | 0); i137 = (((i137 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929016 + ((i137 | 0) << 2) >> 2] = 0;
			
		}
		for (i138 = 0; (((i138 | 0) < 2) | 0); i138 = (((i138 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929024 + ((i138 | 0) << 2) >> 2] = 0;
			
		}
		for (i139 = 0; (((i139 | 0) < 2) | 0); i139 = (((i139 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929032 + ((i139 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930948 >> 2] = +(0.);
		for (i140 = 0; (((i140 | 0) < 2) | 0); i140 = (((i140 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929040 + ((i140 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930952 >> 2] = +(0.);
		HEAPF32[dsp + 20930956 >> 2] = +(0.);
		for (i141 = 0; (((i141 | 0) < 2) | 0); i141 = (((i141 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929048 + ((i141 | 0) << 2) >> 2] = 0.;
			
		}
		for (i142 = 0; (((i142 | 0) < 5) | 0); i142 = (((i142 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928008 + ((i142 | 0) << 2) >> 2] = 0.;
			
		}
		for (i143 = 0; (((i143 | 0) < 3) | 0); i143 = (((i143 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928112 + ((i143 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930960 >> 2] = +(0.);
		for (i144 = 0; (((i144 | 0) < 2) | 0); i144 = (((i144 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929056 + ((i144 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 17844000 | 0));
		HEAPF32[dsp + 20930964 >> 2] = +(0.);
		HEAPF32[dsp + 20930968 >> 2] = +(0.);
		for (i145 = 0; (((i145 | 0) < 2) | 0); i145 = (((i145 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929064 + ((i145 | 0) << 2) >> 2] = 0.;
			
		}
		for (i146 = 0; (((i146 | 0) < 2) | 0); i146 = (((i146 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929072 + ((i146 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930972 >> 2] = +(0.);
		for (i147 = 0; (((i147 | 0) < 2) | 0); i147 = (((i147 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929080 + ((i147 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930976 >> 2] = +(0.);
		for (i148 = 0; (((i148 | 0) < 2) | 0); i148 = (((i148 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929088 + ((i148 | 0) << 2) >> 2] = 0.;
			
		}
		for (i149 = 0; (((i149 | 0) < 2) | 0); i149 = (((i149 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929096 + ((i149 | 0) << 2) >> 2] = 0.;
			
		}
		for (i150 = 0; (((i150 | 0) < 2) | 0); i150 = (((i150 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929104 + ((i150 | 0) << 2) >> 2] = 0.;
			
		}
		for (i151 = 0; (((i151 | 0) < 2) | 0); i151 = (((i151 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929112 + ((i151 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930980 >> 2] = +(0.);
		for (i152 = 0; (((i152 | 0) < 2) | 0); i152 = (((i152 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929120 + ((i152 | 0) << 2) >> 2] = 0.;
			
		}
		for (i153 = 0; (((i153 | 0) < 262144) | 0); i153 = (((i153 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12943296 + ((i153 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930984 >> 2] = +(0.);
		for (i154 = 0; (((i154 | 0) < 2) | 0); i154 = (((i154 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929128 + ((i154 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930988 >> 2] = +(0.);
		for (i155 = 0; (((i155 | 0) < 2) | 0); i155 = (((i155 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929136 + ((i155 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930992 >> 2] = +(0.);
		for (i156 = 0; (((i156 | 0) < 2) | 0); i156 = (((i156 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929144 + ((i156 | 0) << 2) >> 2] = 0.;
			
		}
		for (i157 = 0; (((i157 | 0) < 2) | 0); i157 = (((i157 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929152 + ((i157 | 0) << 2) >> 2] = 0.;
			
		}
		for (i158 = 0; (((i158 | 0) < 2) | 0); i158 = (((i158 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929160 + ((i158 | 0) << 2) >> 2] = 0.;
			
		}
		for (i159 = 0; (((i159 | 0) < 2) | 0); i159 = (((i159 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929168 + ((i159 | 0) << 2) >> 2] = 0.;
			
		}
		for (i160 = 0; (((i160 | 0) < 2) | 0); i160 = (((i160 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929176 + ((i160 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20930996 >> 2] = +(0.);
		for (i161 = 0; (((i161 | 0) < 2) | 0); i161 = (((i161 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929184 + ((i161 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931000 >> 2] = +(0.);
		for (i162 = 0; (((i162 | 0) < 2) | 0); i162 = (((i162 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929192 + ((i162 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931004 >> 2] = +(0.);
		for (i163 = 0; (((i163 | 0) < 2) | 0); i163 = (((i163 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929200 + ((i163 | 0) << 2) >> 2] = 0.;
			
		}
		for (i164 = 0; (((i164 | 0) < 8192) | 0); i164 = (((i164 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19781088 + ((i164 | 0) << 2) >> 2] = 0.;
			
		}
		for (i165 = 0; (((i165 | 0) < 2) | 0); i165 = (((i165 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929208 + ((i165 | 0) << 2) >> 2] = 0.;
			
		}
		for (i166 = 0; (((i166 | 0) < 2) | 0); i166 = (((i166 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929216 + ((i166 | 0) << 2) >> 2] = 0.;
			
		}
		for (i167 = 0; (((i167 | 0) < 8192) | 0); i167 = (((i167 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19813856 + ((i167 | 0) << 2) >> 2] = 0.;
			
		}
		for (i168 = 0; (((i168 | 0) < 2) | 0); i168 = (((i168 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929224 + ((i168 | 0) << 2) >> 2] = 0.;
			
		}
		for (i169 = 0; (((i169 | 0) < 2) | 0); i169 = (((i169 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929232 + ((i169 | 0) << 2) >> 2] = 0.;
			
		}
		for (i170 = 0; (((i170 | 0) < 8192) | 0); i170 = (((i170 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19846624 + ((i170 | 0) << 2) >> 2] = 0.;
			
		}
		for (i171 = 0; (((i171 | 0) < 2) | 0); i171 = (((i171 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929240 + ((i171 | 0) << 2) >> 2] = 0.;
			
		}
		for (i172 = 0; (((i172 | 0) < 2) | 0); i172 = (((i172 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929248 + ((i172 | 0) << 2) >> 2] = 0.;
			
		}
		for (i173 = 0; (((i173 | 0) < 8192) | 0); i173 = (((i173 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19879392 + ((i173 | 0) << 2) >> 2] = 0.;
			
		}
		for (i174 = 0; (((i174 | 0) < 2) | 0); i174 = (((i174 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929256 + ((i174 | 0) << 2) >> 2] = 0.;
			
		}
		for (i175 = 0; (((i175 | 0) < 2) | 0); i175 = (((i175 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929264 + ((i175 | 0) << 2) >> 2] = 0.;
			
		}
		for (i176 = 0; (((i176 | 0) < 8192) | 0); i176 = (((i176 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19912160 + ((i176 | 0) << 2) >> 2] = 0.;
			
		}
		for (i177 = 0; (((i177 | 0) < 2) | 0); i177 = (((i177 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929272 + ((i177 | 0) << 2) >> 2] = 0.;
			
		}
		for (i178 = 0; (((i178 | 0) < 2) | 0); i178 = (((i178 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929280 + ((i178 | 0) << 2) >> 2] = 0.;
			
		}
		for (i179 = 0; (((i179 | 0) < 8192) | 0); i179 = (((i179 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19944928 + ((i179 | 0) << 2) >> 2] = 0.;
			
		}
		for (i180 = 0; (((i180 | 0) < 2) | 0); i180 = (((i180 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929288 + ((i180 | 0) << 2) >> 2] = 0.;
			
		}
		for (i181 = 0; (((i181 | 0) < 2) | 0); i181 = (((i181 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929296 + ((i181 | 0) << 2) >> 2] = 0.;
			
		}
		for (i182 = 0; (((i182 | 0) < 8192) | 0); i182 = (((i182 | 0) + 1) | 0)) {
			HEAPF32[dsp + 19977696 + ((i182 | 0) << 2) >> 2] = 0.;
			
		}
		for (i183 = 0; (((i183 | 0) < 2) | 0); i183 = (((i183 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929304 + ((i183 | 0) << 2) >> 2] = 0.;
			
		}
		for (i184 = 0; (((i184 | 0) < 2) | 0); i184 = (((i184 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929312 + ((i184 | 0) << 2) >> 2] = 0.;
			
		}
		for (i185 = 0; (((i185 | 0) < 8192) | 0); i185 = (((i185 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20010464 + ((i185 | 0) << 2) >> 2] = 0.;
			
		}
		for (i186 = 0; (((i186 | 0) < 2) | 0); i186 = (((i186 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929320 + ((i186 | 0) << 2) >> 2] = 0.;
			
		}
		for (i187 = 0; (((i187 | 0) < 1024) | 0); i187 = (((i187 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20862432 + ((i187 | 0) << 2) >> 2] = 0.;
			
		}
		for (i188 = 0; (((i188 | 0) < 2) | 0); i188 = (((i188 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929328 + ((i188 | 0) << 2) >> 2] = 0.;
			
		}
		for (i189 = 0; (((i189 | 0) < 1024) | 0); i189 = (((i189 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20866528 + ((i189 | 0) << 2) >> 2] = 0.;
			
		}
		for (i190 = 0; (((i190 | 0) < 2) | 0); i190 = (((i190 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929336 + ((i190 | 0) << 2) >> 2] = 0.;
			
		}
		for (i191 = 0; (((i191 | 0) < 1024) | 0); i191 = (((i191 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20870624 + ((i191 | 0) << 2) >> 2] = 0.;
			
		}
		for (i192 = 0; (((i192 | 0) < 2) | 0); i192 = (((i192 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929344 + ((i192 | 0) << 2) >> 2] = 0.;
			
		}
		for (i193 = 0; (((i193 | 0) < 1024) | 0); i193 = (((i193 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20874720 + ((i193 | 0) << 2) >> 2] = 0.;
			
		}
		for (i194 = 0; (((i194 | 0) < 2) | 0); i194 = (((i194 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929352 + ((i194 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931008 >> 2] = +(0.);
		for (i195 = 0; (((i195 | 0) < 2) | 0); i195 = (((i195 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929360 + ((i195 | 0) << 2) >> 2] = 0.;
			
		}
		for (i196 = 0; (((i196 | 0) < 2) | 0); i196 = (((i196 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929368 + ((i196 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931016 >> 2] = +(0.);
		for (i197 = 0; (((i197 | 0) < 2) | 0); i197 = (((i197 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929376 + ((i197 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931020 >> 2] = +(5.);
		for (i198 = 0; (((i198 | 0) < 2) | 0); i198 = (((i198 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929384 + ((i198 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931024 >> 2] = +(0.);
		for (i199 = 0; (((i199 | 0) < 2) | 0); i199 = (((i199 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929392 + ((i199 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 5554144 | 0));
		HEAPF32[dsp + 20931028 >> 2] = +(0.);
		for (i200 = 0; (((i200 | 0) < 2) | 0); i200 = (((i200 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929400 + ((i200 | 0) << 2) >> 2] = 0.;
			
		}
		for (i201 = 0; (((i201 | 0) < 2) | 0); i201 = (((i201 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929408 + ((i201 | 0) << 2) >> 2] = 0;
			
		}
		for (i202 = 0; (((i202 | 0) < 2) | 0); i202 = (((i202 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929416 + ((i202 | 0) << 2) >> 2] = 0;
			
		}
		for (i203 = 0; (((i203 | 0) < 2) | 0); i203 = (((i203 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929424 + ((i203 | 0) << 2) >> 2] = 0;
			
		}
		for (i204 = 0; (((i204 | 0) < 2) | 0); i204 = (((i204 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929432 + ((i204 | 0) << 2) >> 2] = 0;
			
		}
		for (i205 = 0; (((i205 | 0) < 2) | 0); i205 = (((i205 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929440 + ((i205 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931032 >> 2] = +(0.);
		for (i206 = 0; (((i206 | 0) < 2) | 0); i206 = (((i206 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929448 + ((i206 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931036 >> 2] = +(0.);
		HEAPF32[dsp + 20931040 >> 2] = +(0.);
		for (i207 = 0; (((i207 | 0) < 2) | 0); i207 = (((i207 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929456 + ((i207 | 0) << 2) >> 2] = 0.;
			
		}
		for (i208 = 0; (((i208 | 0) < 5) | 0); i208 = (((i208 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928028 + ((i208 | 0) << 2) >> 2] = 0.;
			
		}
		for (i209 = 0; (((i209 | 0) < 3) | 0); i209 = (((i209 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928124 + ((i209 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931044 >> 2] = +(0.);
		for (i210 = 0; (((i210 | 0) < 2) | 0); i210 = (((i210 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929464 + ((i210 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18197200 | 0));
		HEAPF32[dsp + 20931048 >> 2] = +(0.);
		HEAPF32[dsp + 20931052 >> 2] = +(0.);
		for (i211 = 0; (((i211 | 0) < 2) | 0); i211 = (((i211 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929472 + ((i211 | 0) << 2) >> 2] = 0.;
			
		}
		for (i212 = 0; (((i212 | 0) < 2) | 0); i212 = (((i212 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929480 + ((i212 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931056 >> 2] = +(0.);
		for (i213 = 0; (((i213 | 0) < 2) | 0); i213 = (((i213 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929488 + ((i213 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931060 >> 2] = +(0.);
		for (i214 = 0; (((i214 | 0) < 2) | 0); i214 = (((i214 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929496 + ((i214 | 0) << 2) >> 2] = 0.;
			
		}
		for (i215 = 0; (((i215 | 0) < 2) | 0); i215 = (((i215 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929504 + ((i215 | 0) << 2) >> 2] = 0.;
			
		}
		for (i216 = 0; (((i216 | 0) < 2) | 0); i216 = (((i216 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929512 + ((i216 | 0) << 2) >> 2] = 0.;
			
		}
		for (i217 = 0; (((i217 | 0) < 2) | 0); i217 = (((i217 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929520 + ((i217 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931064 >> 2] = +(0.);
		for (i218 = 0; (((i218 | 0) < 2) | 0); i218 = (((i218 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929528 + ((i218 | 0) << 2) >> 2] = 0.;
			
		}
		for (i219 = 0; (((i219 | 0) < 262144) | 0); i219 = (((i219 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13991872 + ((i219 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931068 >> 2] = +(0.);
		for (i220 = 0; (((i220 | 0) < 2) | 0); i220 = (((i220 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929536 + ((i220 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931072 >> 2] = +(0.);
		for (i221 = 0; (((i221 | 0) < 2) | 0); i221 = (((i221 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929544 + ((i221 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931076 >> 2] = +(0.);
		for (i222 = 0; (((i222 | 0) < 2) | 0); i222 = (((i222 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929552 + ((i222 | 0) << 2) >> 2] = 0.;
			
		}
		for (i223 = 0; (((i223 | 0) < 2) | 0); i223 = (((i223 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929560 + ((i223 | 0) << 2) >> 2] = 0.;
			
		}
		for (i224 = 0; (((i224 | 0) < 2) | 0); i224 = (((i224 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929568 + ((i224 | 0) << 2) >> 2] = 0.;
			
		}
		for (i225 = 0; (((i225 | 0) < 2) | 0); i225 = (((i225 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929576 + ((i225 | 0) << 2) >> 2] = 0.;
			
		}
		for (i226 = 0; (((i226 | 0) < 2) | 0); i226 = (((i226 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929584 + ((i226 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931080 >> 2] = +(0.);
		for (i227 = 0; (((i227 | 0) < 2) | 0); i227 = (((i227 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929592 + ((i227 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931084 >> 2] = +(0.);
		for (i228 = 0; (((i228 | 0) < 2) | 0); i228 = (((i228 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929600 + ((i228 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931088 >> 2] = +(0.);
		for (i229 = 0; (((i229 | 0) < 2) | 0); i229 = (((i229 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929608 + ((i229 | 0) << 2) >> 2] = 0.;
			
		}
		for (i230 = 0; (((i230 | 0) < 8192) | 0); i230 = (((i230 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20043232 + ((i230 | 0) << 2) >> 2] = 0.;
			
		}
		for (i231 = 0; (((i231 | 0) < 2) | 0); i231 = (((i231 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929616 + ((i231 | 0) << 2) >> 2] = 0.;
			
		}
		for (i232 = 0; (((i232 | 0) < 2) | 0); i232 = (((i232 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929624 + ((i232 | 0) << 2) >> 2] = 0.;
			
		}
		for (i233 = 0; (((i233 | 0) < 8192) | 0); i233 = (((i233 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20076000 + ((i233 | 0) << 2) >> 2] = 0.;
			
		}
		for (i234 = 0; (((i234 | 0) < 2) | 0); i234 = (((i234 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929632 + ((i234 | 0) << 2) >> 2] = 0.;
			
		}
		for (i235 = 0; (((i235 | 0) < 2) | 0); i235 = (((i235 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929640 + ((i235 | 0) << 2) >> 2] = 0.;
			
		}
		for (i236 = 0; (((i236 | 0) < 8192) | 0); i236 = (((i236 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20108768 + ((i236 | 0) << 2) >> 2] = 0.;
			
		}
		for (i237 = 0; (((i237 | 0) < 2) | 0); i237 = (((i237 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929648 + ((i237 | 0) << 2) >> 2] = 0.;
			
		}
		for (i238 = 0; (((i238 | 0) < 2) | 0); i238 = (((i238 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929656 + ((i238 | 0) << 2) >> 2] = 0.;
			
		}
		for (i239 = 0; (((i239 | 0) < 8192) | 0); i239 = (((i239 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20141536 + ((i239 | 0) << 2) >> 2] = 0.;
			
		}
		for (i240 = 0; (((i240 | 0) < 2) | 0); i240 = (((i240 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929664 + ((i240 | 0) << 2) >> 2] = 0.;
			
		}
		for (i241 = 0; (((i241 | 0) < 2) | 0); i241 = (((i241 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929672 + ((i241 | 0) << 2) >> 2] = 0.;
			
		}
		for (i242 = 0; (((i242 | 0) < 8192) | 0); i242 = (((i242 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20174304 + ((i242 | 0) << 2) >> 2] = 0.;
			
		}
		for (i243 = 0; (((i243 | 0) < 2) | 0); i243 = (((i243 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929680 + ((i243 | 0) << 2) >> 2] = 0.;
			
		}
		for (i244 = 0; (((i244 | 0) < 2) | 0); i244 = (((i244 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929688 + ((i244 | 0) << 2) >> 2] = 0.;
			
		}
		for (i245 = 0; (((i245 | 0) < 8192) | 0); i245 = (((i245 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20207072 + ((i245 | 0) << 2) >> 2] = 0.;
			
		}
		for (i246 = 0; (((i246 | 0) < 2) | 0); i246 = (((i246 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929696 + ((i246 | 0) << 2) >> 2] = 0.;
			
		}
		for (i247 = 0; (((i247 | 0) < 2) | 0); i247 = (((i247 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929704 + ((i247 | 0) << 2) >> 2] = 0.;
			
		}
		for (i248 = 0; (((i248 | 0) < 8192) | 0); i248 = (((i248 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20239840 + ((i248 | 0) << 2) >> 2] = 0.;
			
		}
		for (i249 = 0; (((i249 | 0) < 2) | 0); i249 = (((i249 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929712 + ((i249 | 0) << 2) >> 2] = 0.;
			
		}
		for (i250 = 0; (((i250 | 0) < 2) | 0); i250 = (((i250 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929720 + ((i250 | 0) << 2) >> 2] = 0.;
			
		}
		for (i251 = 0; (((i251 | 0) < 8192) | 0); i251 = (((i251 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20272608 + ((i251 | 0) << 2) >> 2] = 0.;
			
		}
		for (i252 = 0; (((i252 | 0) < 2) | 0); i252 = (((i252 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929728 + ((i252 | 0) << 2) >> 2] = 0.;
			
		}
		for (i253 = 0; (((i253 | 0) < 1024) | 0); i253 = (((i253 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20878816 + ((i253 | 0) << 2) >> 2] = 0.;
			
		}
		for (i254 = 0; (((i254 | 0) < 2) | 0); i254 = (((i254 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929736 + ((i254 | 0) << 2) >> 2] = 0.;
			
		}
		for (i255 = 0; (((i255 | 0) < 1024) | 0); i255 = (((i255 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20882912 + ((i255 | 0) << 2) >> 2] = 0.;
			
		}
		for (i256 = 0; (((i256 | 0) < 2) | 0); i256 = (((i256 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929744 + ((i256 | 0) << 2) >> 2] = 0.;
			
		}
		for (i257 = 0; (((i257 | 0) < 1024) | 0); i257 = (((i257 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20887008 + ((i257 | 0) << 2) >> 2] = 0.;
			
		}
		for (i258 = 0; (((i258 | 0) < 2) | 0); i258 = (((i258 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929752 + ((i258 | 0) << 2) >> 2] = 0.;
			
		}
		for (i259 = 0; (((i259 | 0) < 1024) | 0); i259 = (((i259 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20891104 + ((i259 | 0) << 2) >> 2] = 0.;
			
		}
		for (i260 = 0; (((i260 | 0) < 2) | 0); i260 = (((i260 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929760 + ((i260 | 0) << 2) >> 2] = 0.;
			
		}
		for (i261 = 0; (((i261 | 0) < 2) | 0); i261 = (((i261 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929768 + ((i261 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931096 >> 2] = +(5.);
		for (i262 = 0; (((i262 | 0) < 2) | 0); i262 = (((i262 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929776 + ((i262 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931100 >> 2] = +(0.);
		for (i263 = 0; (((i263 | 0) < 2) | 0); i263 = (((i263 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929784 + ((i263 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931104 >> 2] = +(0.);
		for (i264 = 0; (((i264 | 0) < 2) | 0); i264 = (((i264 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929792 + ((i264 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931108 >> 2] = +(0.);
		for (i265 = 0; (((i265 | 0) < 2) | 0); i265 = (((i265 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929800 + ((i265 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931112 >> 2] = +(0.);
		for (i266 = 0; (((i266 | 0) < 2) | 0); i266 = (((i266 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929808 + ((i266 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931116 >> 2] = +(0.);
		for (i267 = 0; (((i267 | 0) < 2) | 0); i267 = (((i267 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929816 + ((i267 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931120 >> 2] = +(0.);
		for (i268 = 0; (((i268 | 0) < 2) | 0); i268 = (((i268 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929824 + ((i268 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931124 >> 2] = +(0.);
		for (i269 = 0; (((i269 | 0) < 2) | 0); i269 = (((i269 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929832 + ((i269 | 0) << 2) >> 2] = 0.;
			
		}
		for (i270 = 0; (((i270 | 0) < 2) | 0); i270 = (((i270 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929840 + ((i270 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931128 >> 2] = +(0.);
		for (i271 = 0; (((i271 | 0) < 2) | 0); i271 = (((i271 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929848 + ((i271 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 7318144 | 0));
		for (i272 = 0; (((i272 | 0) < 2) | 0); i272 = (((i272 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929856 + ((i272 | 0) << 2) >> 2] = 0;
			
		}
		for (i273 = 0; (((i273 | 0) < 2) | 0); i273 = (((i273 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929864 + ((i273 | 0) << 2) >> 2] = 0;
			
		}
		for (i274 = 0; (((i274 | 0) < 2) | 0); i274 = (((i274 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929872 + ((i274 | 0) << 2) >> 2] = 0;
			
		}
		for (i275 = 0; (((i275 | 0) < 2) | 0); i275 = (((i275 | 0) + 1) | 0)) {
			HEAP32[dsp + 20929880 + ((i275 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20931132 >> 2] = +(0.);
		HEAPF32[dsp + 20931136 >> 2] = +(0.);
		for (i276 = 0; (((i276 | 0) < 2) | 0); i276 = (((i276 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929888 + ((i276 | 0) << 2) >> 2] = 0.;
			
		}
		for (i277 = 0; (((i277 | 0) < 5) | 0); i277 = (((i277 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928048 + ((i277 | 0) << 2) >> 2] = 0.;
			
		}
		for (i278 = 0; (((i278 | 0) < 3) | 0); i278 = (((i278 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928136 + ((i278 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18550400 | 0));
		HEAPF32[dsp + 20931140 >> 2] = +(0.);
		HEAPF32[dsp + 20931144 >> 2] = +(0.);
		for (i279 = 0; (((i279 | 0) < 2) | 0); i279 = (((i279 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929896 + ((i279 | 0) << 2) >> 2] = 0.;
			
		}
		for (i280 = 0; (((i280 | 0) < 2) | 0); i280 = (((i280 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929904 + ((i280 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931148 >> 2] = +(0.);
		for (i281 = 0; (((i281 | 0) < 2) | 0); i281 = (((i281 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929912 + ((i281 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931152 >> 2] = +(0.);
		for (i282 = 0; (((i282 | 0) < 2) | 0); i282 = (((i282 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929920 + ((i282 | 0) << 2) >> 2] = 0.;
			
		}
		for (i283 = 0; (((i283 | 0) < 2) | 0); i283 = (((i283 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929928 + ((i283 | 0) << 2) >> 2] = 0.;
			
		}
		for (i284 = 0; (((i284 | 0) < 2) | 0); i284 = (((i284 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929936 + ((i284 | 0) << 2) >> 2] = 0.;
			
		}
		for (i285 = 0; (((i285 | 0) < 2) | 0); i285 = (((i285 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929944 + ((i285 | 0) << 2) >> 2] = 0.;
			
		}
		for (i286 = 0; (((i286 | 0) < 262144) | 0); i286 = (((i286 | 0) + 1) | 0)) {
			HEAPF32[dsp + 15040448 + ((i286 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931156 >> 2] = +(0.);
		HEAPF32[dsp + 20931160 >> 2] = +(0.);
		for (i287 = 0; (((i287 | 0) < 2) | 0); i287 = (((i287 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929952 + ((i287 | 0) << 2) >> 2] = 0.;
			
		}
		for (i288 = 0; (((i288 | 0) < 2) | 0); i288 = (((i288 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929960 + ((i288 | 0) << 2) >> 2] = 0.;
			
		}
		for (i289 = 0; (((i289 | 0) < 2) | 0); i289 = (((i289 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929968 + ((i289 | 0) << 2) >> 2] = 0.;
			
		}
		for (i290 = 0; (((i290 | 0) < 2) | 0); i290 = (((i290 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929976 + ((i290 | 0) << 2) >> 2] = 0.;
			
		}
		for (i291 = 0; (((i291 | 0) < 2) | 0); i291 = (((i291 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929984 + ((i291 | 0) << 2) >> 2] = 0.;
			
		}
		for (i292 = 0; (((i292 | 0) < 2) | 0); i292 = (((i292 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20929992 + ((i292 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931164 >> 2] = +(0.);
		for (i293 = 0; (((i293 | 0) < 2) | 0); i293 = (((i293 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930000 + ((i293 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931168 >> 2] = +(0.);
		for (i294 = 0; (((i294 | 0) < 2) | 0); i294 = (((i294 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930008 + ((i294 | 0) << 2) >> 2] = 0.;
			
		}
		for (i295 = 0; (((i295 | 0) < 8192) | 0); i295 = (((i295 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20305376 + ((i295 | 0) << 2) >> 2] = 0.;
			
		}
		for (i296 = 0; (((i296 | 0) < 2) | 0); i296 = (((i296 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930016 + ((i296 | 0) << 2) >> 2] = 0.;
			
		}
		for (i297 = 0; (((i297 | 0) < 2) | 0); i297 = (((i297 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930024 + ((i297 | 0) << 2) >> 2] = 0.;
			
		}
		for (i298 = 0; (((i298 | 0) < 8192) | 0); i298 = (((i298 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20338144 + ((i298 | 0) << 2) >> 2] = 0.;
			
		}
		for (i299 = 0; (((i299 | 0) < 2) | 0); i299 = (((i299 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930032 + ((i299 | 0) << 2) >> 2] = 0.;
			
		}
		for (i300 = 0; (((i300 | 0) < 2) | 0); i300 = (((i300 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930040 + ((i300 | 0) << 2) >> 2] = 0.;
			
		}
		for (i301 = 0; (((i301 | 0) < 8192) | 0); i301 = (((i301 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20370912 + ((i301 | 0) << 2) >> 2] = 0.;
			
		}
		for (i302 = 0; (((i302 | 0) < 2) | 0); i302 = (((i302 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930048 + ((i302 | 0) << 2) >> 2] = 0.;
			
		}
		for (i303 = 0; (((i303 | 0) < 2) | 0); i303 = (((i303 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930056 + ((i303 | 0) << 2) >> 2] = 0.;
			
		}
		for (i304 = 0; (((i304 | 0) < 8192) | 0); i304 = (((i304 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20403680 + ((i304 | 0) << 2) >> 2] = 0.;
			
		}
		for (i305 = 0; (((i305 | 0) < 2) | 0); i305 = (((i305 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930064 + ((i305 | 0) << 2) >> 2] = 0.;
			
		}
		for (i306 = 0; (((i306 | 0) < 2) | 0); i306 = (((i306 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930072 + ((i306 | 0) << 2) >> 2] = 0.;
			
		}
		for (i307 = 0; (((i307 | 0) < 8192) | 0); i307 = (((i307 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20436448 + ((i307 | 0) << 2) >> 2] = 0.;
			
		}
		for (i308 = 0; (((i308 | 0) < 2) | 0); i308 = (((i308 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930080 + ((i308 | 0) << 2) >> 2] = 0.;
			
		}
		for (i309 = 0; (((i309 | 0) < 2) | 0); i309 = (((i309 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930088 + ((i309 | 0) << 2) >> 2] = 0.;
			
		}
		for (i310 = 0; (((i310 | 0) < 8192) | 0); i310 = (((i310 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20469216 + ((i310 | 0) << 2) >> 2] = 0.;
			
		}
		for (i311 = 0; (((i311 | 0) < 2) | 0); i311 = (((i311 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930096 + ((i311 | 0) << 2) >> 2] = 0.;
			
		}
		for (i312 = 0; (((i312 | 0) < 2) | 0); i312 = (((i312 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930104 + ((i312 | 0) << 2) >> 2] = 0.;
			
		}
		for (i313 = 0; (((i313 | 0) < 8192) | 0); i313 = (((i313 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20501984 + ((i313 | 0) << 2) >> 2] = 0.;
			
		}
		for (i314 = 0; (((i314 | 0) < 2) | 0); i314 = (((i314 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930112 + ((i314 | 0) << 2) >> 2] = 0.;
			
		}
		for (i315 = 0; (((i315 | 0) < 2) | 0); i315 = (((i315 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930120 + ((i315 | 0) << 2) >> 2] = 0.;
			
		}
		for (i316 = 0; (((i316 | 0) < 8192) | 0); i316 = (((i316 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20534752 + ((i316 | 0) << 2) >> 2] = 0.;
			
		}
		for (i317 = 0; (((i317 | 0) < 2) | 0); i317 = (((i317 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930128 + ((i317 | 0) << 2) >> 2] = 0.;
			
		}
		for (i318 = 0; (((i318 | 0) < 1024) | 0); i318 = (((i318 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20895200 + ((i318 | 0) << 2) >> 2] = 0.;
			
		}
		for (i319 = 0; (((i319 | 0) < 2) | 0); i319 = (((i319 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930136 + ((i319 | 0) << 2) >> 2] = 0.;
			
		}
		for (i320 = 0; (((i320 | 0) < 1024) | 0); i320 = (((i320 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20899296 + ((i320 | 0) << 2) >> 2] = 0.;
			
		}
		for (i321 = 0; (((i321 | 0) < 2) | 0); i321 = (((i321 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930144 + ((i321 | 0) << 2) >> 2] = 0.;
			
		}
		for (i322 = 0; (((i322 | 0) < 1024) | 0); i322 = (((i322 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20903392 + ((i322 | 0) << 2) >> 2] = 0.;
			
		}
		for (i323 = 0; (((i323 | 0) < 2) | 0); i323 = (((i323 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930152 + ((i323 | 0) << 2) >> 2] = 0.;
			
		}
		for (i324 = 0; (((i324 | 0) < 1024) | 0); i324 = (((i324 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20907488 + ((i324 | 0) << 2) >> 2] = 0.;
			
		}
		for (i325 = 0; (((i325 | 0) < 2) | 0); i325 = (((i325 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930160 + ((i325 | 0) << 2) >> 2] = 0.;
			
		}
		for (i326 = 0; (((i326 | 0) < 2) | 0); i326 = (((i326 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930168 + ((i326 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931176 >> 2] = +(5.);
		for (i327 = 0; (((i327 | 0) < 2) | 0); i327 = (((i327 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930176 + ((i327 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931180 >> 2] = +(0.);
		for (i328 = 0; (((i328 | 0) < 2) | 0); i328 = (((i328 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930184 + ((i328 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931184 >> 2] = +(0.);
		for (i329 = 0; (((i329 | 0) < 2) | 0); i329 = (((i329 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930192 + ((i329 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931188 >> 2] = +(0.);
		for (i330 = 0; (((i330 | 0) < 2) | 0); i330 = (((i330 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930200 + ((i330 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931192 >> 2] = +(0.);
		for (i331 = 0; (((i331 | 0) < 2) | 0); i331 = (((i331 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930208 + ((i331 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931196 >> 2] = +(0.);
		for (i332 = 0; (((i332 | 0) < 2) | 0); i332 = (((i332 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930216 + ((i332 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931200 >> 2] = +(0.);
		for (i333 = 0; (((i333 | 0) < 2) | 0); i333 = (((i333 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930224 + ((i333 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931204 >> 2] = +(0.);
		for (i334 = 0; (((i334 | 0) < 2) | 0); i334 = (((i334 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930232 + ((i334 | 0) << 2) >> 2] = 0.;
			
		}
		for (i335 = 0; (((i335 | 0) < 2) | 0); i335 = (((i335 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930240 + ((i335 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931208 >> 2] = +(0.);
		for (i336 = 0; (((i336 | 0) < 2) | 0); i336 = (((i336 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930248 + ((i336 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 441000, (dsp + 9082144 | 0));
		for (i337 = 0; (((i337 | 0) < 2) | 0); i337 = (((i337 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930256 + ((i337 | 0) << 2) >> 2] = 0;
			
		}
		for (i338 = 0; (((i338 | 0) < 2) | 0); i338 = (((i338 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930264 + ((i338 | 0) << 2) >> 2] = 0;
			
		}
		for (i339 = 0; (((i339 | 0) < 2) | 0); i339 = (((i339 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930272 + ((i339 | 0) << 2) >> 2] = 0;
			
		}
		for (i340 = 0; (((i340 | 0) < 2) | 0); i340 = (((i340 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930280 + ((i340 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20931212 >> 2] = +(0.);
		HEAPF32[dsp + 20931216 >> 2] = +(0.);
		for (i341 = 0; (((i341 | 0) < 2) | 0); i341 = (((i341 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930288 + ((i341 | 0) << 2) >> 2] = 0.;
			
		}
		for (i342 = 0; (((i342 | 0) < 5) | 0); i342 = (((i342 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928068 + ((i342 | 0) << 2) >> 2] = 0.;
			
		}
		for (i343 = 0; (((i343 | 0) < 3) | 0); i343 = (((i343 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928148 + ((i343 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffetFaustSIG0(dsp, (samplingFreq | 0));
		filleffetFaustSIG0(dsp, 88300, (dsp + 18903600 | 0));
		HEAPF32[dsp + 20931220 >> 2] = +(0.);
		HEAPF32[dsp + 20931224 >> 2] = +(0.);
		for (i344 = 0; (((i344 | 0) < 2) | 0); i344 = (((i344 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930296 + ((i344 | 0) << 2) >> 2] = 0.;
			
		}
		for (i345 = 0; (((i345 | 0) < 2) | 0); i345 = (((i345 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930304 + ((i345 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931228 >> 2] = +(0.);
		for (i346 = 0; (((i346 | 0) < 2) | 0); i346 = (((i346 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930312 + ((i346 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931232 >> 2] = +(0.);
		for (i347 = 0; (((i347 | 0) < 2) | 0); i347 = (((i347 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930320 + ((i347 | 0) << 2) >> 2] = 0.;
			
		}
		for (i348 = 0; (((i348 | 0) < 2) | 0); i348 = (((i348 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930328 + ((i348 | 0) << 2) >> 2] = 0.;
			
		}
		for (i349 = 0; (((i349 | 0) < 2) | 0); i349 = (((i349 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930336 + ((i349 | 0) << 2) >> 2] = 0.;
			
		}
		for (i350 = 0; (((i350 | 0) < 2) | 0); i350 = (((i350 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930344 + ((i350 | 0) << 2) >> 2] = 0.;
			
		}
		for (i351 = 0; (((i351 | 0) < 262144) | 0); i351 = (((i351 | 0) + 1) | 0)) {
			HEAPF32[dsp + 16089024 + ((i351 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931236 >> 2] = +(0.);
		HEAPF32[dsp + 20931240 >> 2] = +(0.);
		for (i352 = 0; (((i352 | 0) < 2) | 0); i352 = (((i352 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930352 + ((i352 | 0) << 2) >> 2] = 0.;
			
		}
		for (i353 = 0; (((i353 | 0) < 2) | 0); i353 = (((i353 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930360 + ((i353 | 0) << 2) >> 2] = 0.;
			
		}
		for (i354 = 0; (((i354 | 0) < 2) | 0); i354 = (((i354 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930368 + ((i354 | 0) << 2) >> 2] = 0.;
			
		}
		for (i355 = 0; (((i355 | 0) < 2) | 0); i355 = (((i355 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930376 + ((i355 | 0) << 2) >> 2] = 0.;
			
		}
		for (i356 = 0; (((i356 | 0) < 2) | 0); i356 = (((i356 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930384 + ((i356 | 0) << 2) >> 2] = 0.;
			
		}
		for (i357 = 0; (((i357 | 0) < 2) | 0); i357 = (((i357 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930392 + ((i357 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931244 >> 2] = +(0.);
		for (i358 = 0; (((i358 | 0) < 2) | 0); i358 = (((i358 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930400 + ((i358 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931248 >> 2] = +(0.);
		for (i359 = 0; (((i359 | 0) < 2) | 0); i359 = (((i359 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930408 + ((i359 | 0) << 2) >> 2] = 0.;
			
		}
		for (i360 = 0; (((i360 | 0) < 8192) | 0); i360 = (((i360 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20567520 + ((i360 | 0) << 2) >> 2] = 0.;
			
		}
		for (i361 = 0; (((i361 | 0) < 2) | 0); i361 = (((i361 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930416 + ((i361 | 0) << 2) >> 2] = 0.;
			
		}
		for (i362 = 0; (((i362 | 0) < 2) | 0); i362 = (((i362 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930424 + ((i362 | 0) << 2) >> 2] = 0.;
			
		}
		for (i363 = 0; (((i363 | 0) < 8192) | 0); i363 = (((i363 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20600288 + ((i363 | 0) << 2) >> 2] = 0.;
			
		}
		for (i364 = 0; (((i364 | 0) < 2) | 0); i364 = (((i364 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930432 + ((i364 | 0) << 2) >> 2] = 0.;
			
		}
		for (i365 = 0; (((i365 | 0) < 2) | 0); i365 = (((i365 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930440 + ((i365 | 0) << 2) >> 2] = 0.;
			
		}
		for (i366 = 0; (((i366 | 0) < 8192) | 0); i366 = (((i366 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20633056 + ((i366 | 0) << 2) >> 2] = 0.;
			
		}
		for (i367 = 0; (((i367 | 0) < 2) | 0); i367 = (((i367 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930448 + ((i367 | 0) << 2) >> 2] = 0.;
			
		}
		for (i368 = 0; (((i368 | 0) < 2) | 0); i368 = (((i368 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930456 + ((i368 | 0) << 2) >> 2] = 0.;
			
		}
		for (i369 = 0; (((i369 | 0) < 8192) | 0); i369 = (((i369 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20665824 + ((i369 | 0) << 2) >> 2] = 0.;
			
		}
		for (i370 = 0; (((i370 | 0) < 2) | 0); i370 = (((i370 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930464 + ((i370 | 0) << 2) >> 2] = 0.;
			
		}
		for (i371 = 0; (((i371 | 0) < 2) | 0); i371 = (((i371 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930472 + ((i371 | 0) << 2) >> 2] = 0.;
			
		}
		for (i372 = 0; (((i372 | 0) < 8192) | 0); i372 = (((i372 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20698592 + ((i372 | 0) << 2) >> 2] = 0.;
			
		}
		for (i373 = 0; (((i373 | 0) < 2) | 0); i373 = (((i373 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930480 + ((i373 | 0) << 2) >> 2] = 0.;
			
		}
		for (i374 = 0; (((i374 | 0) < 2) | 0); i374 = (((i374 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930488 + ((i374 | 0) << 2) >> 2] = 0.;
			
		}
		for (i375 = 0; (((i375 | 0) < 8192) | 0); i375 = (((i375 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20731360 + ((i375 | 0) << 2) >> 2] = 0.;
			
		}
		for (i376 = 0; (((i376 | 0) < 2) | 0); i376 = (((i376 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930496 + ((i376 | 0) << 2) >> 2] = 0.;
			
		}
		for (i377 = 0; (((i377 | 0) < 2) | 0); i377 = (((i377 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930504 + ((i377 | 0) << 2) >> 2] = 0.;
			
		}
		for (i378 = 0; (((i378 | 0) < 8192) | 0); i378 = (((i378 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20764128 + ((i378 | 0) << 2) >> 2] = 0.;
			
		}
		for (i379 = 0; (((i379 | 0) < 2) | 0); i379 = (((i379 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930512 + ((i379 | 0) << 2) >> 2] = 0.;
			
		}
		for (i380 = 0; (((i380 | 0) < 2) | 0); i380 = (((i380 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930520 + ((i380 | 0) << 2) >> 2] = 0.;
			
		}
		for (i381 = 0; (((i381 | 0) < 8192) | 0); i381 = (((i381 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20796896 + ((i381 | 0) << 2) >> 2] = 0.;
			
		}
		for (i382 = 0; (((i382 | 0) < 2) | 0); i382 = (((i382 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930528 + ((i382 | 0) << 2) >> 2] = 0.;
			
		}
		for (i383 = 0; (((i383 | 0) < 1024) | 0); i383 = (((i383 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20911584 + ((i383 | 0) << 2) >> 2] = 0.;
			
		}
		for (i384 = 0; (((i384 | 0) < 2) | 0); i384 = (((i384 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930536 + ((i384 | 0) << 2) >> 2] = 0.;
			
		}
		for (i385 = 0; (((i385 | 0) < 1024) | 0); i385 = (((i385 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20915680 + ((i385 | 0) << 2) >> 2] = 0.;
			
		}
		for (i386 = 0; (((i386 | 0) < 2) | 0); i386 = (((i386 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930544 + ((i386 | 0) << 2) >> 2] = 0.;
			
		}
		for (i387 = 0; (((i387 | 0) < 1024) | 0); i387 = (((i387 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20919776 + ((i387 | 0) << 2) >> 2] = 0.;
			
		}
		for (i388 = 0; (((i388 | 0) < 2) | 0); i388 = (((i388 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930552 + ((i388 | 0) << 2) >> 2] = 0.;
			
		}
		for (i389 = 0; (((i389 | 0) < 1024) | 0); i389 = (((i389 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20923872 + ((i389 | 0) << 2) >> 2] = 0.;
			
		}
		for (i390 = 0; (((i390 | 0) < 2) | 0); i390 = (((i390 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930560 + ((i390 | 0) << 2) >> 2] = 0.;
			
		}
		for (i391 = 0; (((i391 | 0) < 2) | 0); i391 = (((i391 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930568 + ((i391 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931256 >> 2] = +(5.);
		for (i392 = 0; (((i392 | 0) < 2) | 0); i392 = (((i392 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930576 + ((i392 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931260 >> 2] = +(0.);
		for (i393 = 0; (((i393 | 0) < 2) | 0); i393 = (((i393 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930584 + ((i393 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931264 >> 2] = +(0.);
		for (i394 = 0; (((i394 | 0) < 2) | 0); i394 = (((i394 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930592 + ((i394 | 0) << 2) >> 2] = 0.;
			
		}
		for (i395 = 0; (((i395 | 0) < 2) | 0); i395 = (((i395 | 0) + 1) | 0)) {
			HEAP32[dsp + 20930600 + ((i395 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 20931268 >> 2] = +(9. / +((HEAP32[dsp + 20930648 >> 2] | 0)));
		HEAPF32[dsp + 20931272 >> 2] = +(1. - +(1. / +(powf(90000., +(1.11111 / +((HEAP32[dsp + 20930648 >> 2] | 0)))))));
		for (i396 = 0; (((i396 | 0) < 2) | 0); i396 = (((i396 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930608 + ((i396 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 20931276 >> 2] = +(440. / +(HEAPF32[dsp + 20930652 >> 2]));
		for (i398 = 0; (((i398 | 0) < 2) | 0); i398 = (((i398 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930616 + ((i398 | 0) << 2) >> 2] = 0.;
			
		}
		for (i399 = 0; (((i399 | 0) < 2) | 0); i399 = (((i399 | 0) + 1) | 0)) {
			HEAPF32[dsp + 20930624 + ((i399 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function setValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF32[dsp + offset >> 2] = value;
	}
	
	function getValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +HEAPF32[dsp + offset >> 2];
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var fSlow32 = 0.;
		var fSlow33 = 0.;
		var fSlow34 = 0.;
		var fSlow35 = 0.;
		var fSlow36 = 0.;
		var fSlow37 = 0.;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var fSlow64 = 0.;
		var fSlow65 = 0.;
		var fSlow66 = 0.;
		var fSlow67 = 0.;
		var fSlow68 = 0.;
		var fSlow69 = 0.;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var fSlow85 = 0.;
		var fSlow86 = 0.;
		var fSlow87 = 0.;
		var fSlow88 = 0.;
		var fSlow89 = 0.;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var fSlow92 = 0.;
		var fSlow93 = 0.;
		var fSlow94 = 0.;
		var fSlow95 = 0.;
		var fSlow96 = 0.;
		var fSlow97 = 0.;
		var fSlow98 = 0.;
		var fSlow99 = 0.;
		var fSlow100 = 0.;
		var fSlow101 = 0.;
		var fSlow102 = 0.;
		var fSlow103 = 0.;
		var fSlow104 = 0.;
		var fSlow105 = 0.;
		var fSlow106 = 0.;
		var fSlow107 = 0.;
		var fSlow108 = 0.;
		var fSlow109 = 0.;
		var fSlow110 = 0.;
		var fSlow111 = 0.;
		var fSlow112 = 0.;
		var fSlow113 = 0.;
		var fSlow114 = 0.;
		var fSlow115 = 0.;
		var fSlow116 = 0.;
		var fSlow117 = 0.;
		var fSlow118 = 0.;
		var fSlow119 = 0.;
		var fSlow120 = 0.;
		var fSlow121 = 0.;
		var fSlow122 = 0.;
		var fSlow123 = 0.;
		var fSlow124 = 0.;
		var fSlow125 = 0.;
		var fSlow126 = 0.;
		var fSlow127 = 0.;
		var fSlow128 = 0.;
		var fSlow129 = 0.;
		var fSlow130 = 0.;
		var fSlow131 = 0.;
		var fSlow132 = 0.;
		var fSlow133 = 0.;
		var fSlow134 = 0.;
		var fSlow135 = 0.;
		var fSlow136 = 0.;
		var fSlow137 = 0.;
		var fSlow138 = 0.;
		var fSlow139 = 0.;
		var fSlow140 = 0.;
		var fSlow141 = 0.;
		var fSlow142 = 0.;
		var fSlow143 = 0.;
		var fSlow144 = 0.;
		var fSlow145 = 0.;
		var fSlow146 = 0.;
		var fSlow147 = 0.;
		var fSlow148 = 0.;
		var fSlow149 = 0.;
		var fSlow150 = 0.;
		var fSlow151 = 0.;
		var fSlow152 = 0.;
		var fSlow153 = 0.;
		var fSlow154 = 0.;
		var fSlow155 = 0.;
		var fSlow156 = 0.;
		var fSlow157 = 0.;
		var fSlow158 = 0.;
		var fSlow159 = 0.;
		var fSlow160 = 0.;
		var fSlow161 = 0.;
		var fSlow162 = 0.;
		var fSlow163 = 0.;
		var fSlow164 = 0.;
		var fSlow165 = 0.;
		var fSlow166 = 0.;
		var fSlow167 = 0.;
		var fSlow168 = 0.;
		var fSlow169 = 0.;
		var fSlow170 = 0.;
		var fSlow171 = 0.;
		var fSlow172 = 0.;
		var fSlow173 = 0.;
		var fSlow174 = 0.;
		var fSlow175 = 0.;
		var fSlow176 = 0.;
		var fSlow177 = 0.;
		var fSlow178 = 0.;
		var fSlow179 = 0.;
		var fSlow180 = 0.;
		var fSlow181 = 0.;
		var fSlow182 = 0.;
		var fSlow183 = 0.;
		var fSlow184 = 0.;
		var fSlow185 = 0.;
		var fSlow186 = 0.;
		var fSlow187 = 0.;
		var fSlow188 = 0.;
		var fSlow189 = 0.;
		var fSlow190 = 0.;
		var fSlow191 = 0.;
		var fSlow192 = 0.;
		var fSlow193 = 0.;
		var fSlow194 = 0.;
		var fSlow195 = 0.;
		var fSlow196 = 0.;
		var fSlow197 = 0.;
		var fSlow198 = 0.;
		var fSlow199 = 0.;
		var fSlow200 = 0.;
		var fSlow201 = 0.;
		var fSlow202 = 0.;
		var fSlow203 = 0.;
		var fSlow204 = 0.;
		var fSlow205 = 0.;
		var fSlow206 = 0.;
		var fSlow207 = 0.;
		var fSlow208 = 0.;
		var fSlow209 = 0.;
		var fSlow210 = 0.;
		var fSlow211 = 0.;
		var fSlow212 = 0.;
		var fSlow213 = 0.;
		var fSlow214 = 0.;
		var fSlow215 = 0.;
		var fSlow216 = 0.;
		var fSlow217 = 0.;
		var fSlow218 = 0.;
		var fSlow219 = 0.;
		var fSlow220 = 0.;
		var fSlow221 = 0.;
		var fSlow222 = 0.;
		var fSlow223 = 0.;
		var fSlow224 = 0.;
		var fSlow225 = 0.;
		var fSlow226 = 0.;
		var fSlow227 = 0.;
		var fSlow228 = 0.;
		var fSlow229 = 0.;
		var fSlow230 = 0.;
		var fSlow231 = 0.;
		var fSlow232 = 0.;
		var fSlow233 = 0.;
		var fSlow234 = 0.;
		var fSlow235 = 0.;
		var fSlow236 = 0.;
		var fSlow237 = 0.;
		var fSlow238 = 0.;
		var fSlow239 = 0.;
		var fSlow240 = 0.;
		var fSlow241 = 0.;
		var fSlow242 = 0.;
		var fSlow243 = 0.;
		var fSlow244 = 0.;
		var fSlow245 = 0.;
		var fSlow246 = 0.;
		var fSlow247 = 0.;
		var fSlow248 = 0.;
		var fSlow249 = 0.;
		var fSlow250 = 0.;
		var fSlow251 = 0.;
		var fSlow252 = 0.;
		var fSlow253 = 0.;
		var fSlow254 = 0.;
		var fSlow255 = 0.;
		var fSlow256 = 0.;
		var fSlow257 = 0.;
		var fSlow258 = 0.;
		var fSlow259 = 0.;
		var fSlow260 = 0.;
		var fSlow261 = 0.;
		var fSlow262 = 0.;
		var fSlow263 = 0.;
		var fSlow264 = 0.;
		var fSlow265 = 0.;
		var fSlow266 = 0.;
		var fSlow267 = 0.;
		var fSlow268 = 0.;
		var fSlow269 = 0.;
		var fSlow270 = 0.;
		var fSlow271 = 0.;
		var fSlow272 = 0.;
		var fSlow273 = 0.;
		var fSlow274 = 0.;
		var fSlow275 = 0.;
		var fSlow276 = 0.;
		var fSlow277 = 0.;
		var fSlow278 = 0.;
		var fSlow279 = 0.;
		var fSlow280 = 0.;
		var fSlow281 = 0.;
		var fSlow282 = 0.;
		var fSlow283 = 0.;
		var fSlow284 = 0.;
		var fSlow285 = 0.;
		var fSlow286 = 0.;
		var fSlow287 = 0.;
		var fSlow288 = 0.;
		var fSlow289 = 0.;
		var fSlow290 = 0.;
		var fSlow291 = 0.;
		var fSlow292 = 0.;
		var fSlow293 = 0.;
		var fSlow294 = 0.;
		var fSlow295 = 0.;
		var fSlow296 = 0.;
		var fSlow297 = 0.;
		var fSlow298 = 0.;
		var fSlow299 = 0.;
		var fSlow300 = 0.;
		var fSlow301 = 0.;
		var fSlow302 = 0.;
		var fSlow303 = 0.;
		var fSlow304 = 0.;
		var fSlow305 = 0.;
		var fSlow306 = 0.;
		var fSlow307 = 0.;
		var fSlow308 = 0.;
		var fSlow309 = 0.;
		var fSlow310 = 0.;
		var fSlow311 = 0.;
		var fSlow312 = 0.;
		var fSlow313 = 0.;
		var fSlow314 = 0.;
		var fSlow315 = 0.;
		var fSlow316 = 0.;
		var fSlow317 = 0.;
		var fSlow318 = 0.;
		var fSlow319 = 0.;
		var fSlow320 = 0.;
		var fSlow321 = 0.;
		var fSlow322 = 0.;
		var fSlow323 = 0.;
		var fSlow324 = 0.;
		var fSlow325 = 0.;
		var fSlow326 = 0.;
		var fSlow327 = 0.;
		var fSlow328 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var iTemp1 = 0;
		var fTemp2 = 0.;
		var iTemp3 = 0;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fSel0 = 0.;
		var fSel1 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fRec40 = 0.;
		var fTemp13 = 0.;
		var fRec38 = 0.;
		var fTemp14 = 0.;
		var fRec36 = 0.;
		var fTemp15 = 0.;
		var fRec34 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var iTemp19 = 0;
		var iTemp20 = 0;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var iTemp30 = 0;
		var iTemp31 = 0;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fSel2 = 0.;
		var fSel3 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fRec96 = 0.;
		var fTemp40 = 0.;
		var fRec94 = 0.;
		var fTemp41 = 0.;
		var fRec92 = 0.;
		var fTemp42 = 0.;
		var fRec90 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var fTemp45 = 0.;
		var iTemp46 = 0;
		var iTemp47 = 0;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var iTemp57 = 0;
		var iTemp58 = 0;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fSel4 = 0.;
		var fSel5 = 0.;
		var fTemp62 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fRec152 = 0.;
		var fTemp67 = 0.;
		var fRec150 = 0.;
		var fTemp68 = 0.;
		var fRec148 = 0.;
		var fTemp69 = 0.;
		var fRec146 = 0.;
		var fTemp70 = 0.;
		var fTemp71 = 0.;
		var fTemp72 = 0.;
		var iTemp73 = 0;
		var iTemp74 = 0;
		var fTemp75 = 0.;
		var fTemp76 = 0.;
		var fTemp77 = 0.;
		var fTemp78 = 0.;
		var fTemp79 = 0.;
		var fTemp80 = 0.;
		var fTemp81 = 0.;
		var fTemp82 = 0.;
		var fTemp83 = 0.;
		var iTemp84 = 0;
		var iTemp85 = 0;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fSel6 = 0.;
		var fSel7 = 0.;
		var fTemp89 = 0.;
		var fTemp90 = 0.;
		var fTemp91 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fRec209 = 0.;
		var fTemp94 = 0.;
		var fRec207 = 0.;
		var fTemp95 = 0.;
		var fRec205 = 0.;
		var fTemp96 = 0.;
		var fRec203 = 0.;
		var fTemp97 = 0.;
		var fTemp98 = 0.;
		var fTemp99 = 0.;
		var iTemp100 = 0;
		var iTemp101 = 0;
		var fTemp102 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var fTemp105 = 0.;
		var fTemp106 = 0.;
		var fTemp107 = 0.;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var iTemp111 = 0;
		var iTemp112 = 0;
		var fTemp113 = 0.;
		var fTemp114 = 0.;
		var fTemp115 = 0.;
		var fSel8 = 0.;
		var fSel9 = 0.;
		var fTemp116 = 0.;
		var fTemp117 = 0.;
		var fTemp118 = 0.;
		var fTemp119 = 0.;
		var fTemp120 = 0.;
		var fRec265 = 0.;
		var fTemp121 = 0.;
		var fRec263 = 0.;
		var fTemp122 = 0.;
		var fRec261 = 0.;
		var fTemp123 = 0.;
		var fRec259 = 0.;
		var fTemp124 = 0.;
		var fTemp125 = 0.;
		var fTemp126 = 0.;
		var iTemp127 = 0;
		var iTemp128 = 0;
		var fTemp129 = 0.;
		var fTemp130 = 0.;
		var fTemp131 = 0.;
		var fTemp132 = 0.;
		var fTemp133 = 0.;
		var fTemp134 = 0.;
		var fTemp135 = 0.;
		var fTemp136 = 0.;
		var fTemp137 = 0.;
		var iTemp138 = 0;
		var iTemp139 = 0;
		var fTemp140 = 0.;
		var fTemp141 = 0.;
		var fTemp142 = 0.;
		var fSel10 = 0.;
		var fSel11 = 0.;
		var fTemp143 = 0.;
		var fTemp144 = 0.;
		var fTemp145 = 0.;
		var fTemp146 = 0.;
		var fTemp147 = 0.;
		var fRec321 = 0.;
		var fTemp148 = 0.;
		var fRec319 = 0.;
		var fTemp149 = 0.;
		var fRec317 = 0.;
		var fTemp150 = 0.;
		var fRec315 = 0.;
		var fTemp151 = 0.;
		var fTemp152 = 0.;
		var fTemp153 = 0.;
		var iTemp154 = 0;
		var iTemp155 = 0;
		var fTemp156 = 0.;
		var fTemp157 = 0.;
		var fTemp158 = 0.;
		var fTemp159 = 0.;
		var fTemp160 = 0.;
		var fTemp161 = 0.;
		var fTemp162 = 0.;
		var fTemp163 = 0.;
		var fTemp164 = 0.;
		var fTemp165 = 0.;
		var fTemp166 = 0.;
		var fTemp167 = 0.;
		var fTemp168 = 0.;
		var fTemp169 = 0.;
		var fTemp170 = 0.;
		var fTemp171 = 0.;
		var fTemp172 = 0.;
		var fTemp173 = 0.;
		var fTemp174 = 0.;
		var fTemp175 = 0.;
		var fTemp176 = 0.;
		var fTemp177 = 0.;
		var fTemp178 = 0.;
		var fTemp179 = 0.;
		var fTemp180 = 0.;
		var fTemp181 = 0.;
		var fTemp182 = 0.;
		var fTemp183 = 0.;
		var fTemp184 = 0.;
		var fTemp185 = 0.;
		var fTemp186 = 0.;
		var fTemp187 = 0.;
		var fTemp188 = 0.;
		var fTemp189 = 0.;
		var fTemp190 = 0.;
		var fTemp191 = 0.;
		var fTemp192 = 0.;
		var fTemp193 = 0.;
		var fTemp194 = 0.;
		var fTemp195 = 0.;
		var fTemp196 = 0.;
		var fTemp197 = 0.;
		var fTemp198 = 0.;
		var fTemp199 = 0.;
		var fTemp200 = 0.;
		var fTemp201 = 0.;
		var fTemp202 = 0.;
		var fTemp203 = 0.;
		var fTemp204 = 0.;
		var fTemp205 = 0.;
		var fTemp206 = 0.;
		var fTemp207 = 0.;
		var fTemp208 = 0.;
		var fTemp209 = 0.;
		var fTemp210 = 0.;
		var fTemp211 = 0.;
		var fTemp212 = 0.;
		var iTemp213 = 0;
		var iTemp214 = 0;
		var iTemp215 = 0;
		var fTemp216 = 0.;
		var fTemp217 = 0.;
		var fTemp218 = 0.;
		var j0 = 4;
		var j1 = 4;
		var j2 = 4;
		var j3 = 4;
		var j4 = 4;
		var j5 = 4;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.001 * +(powf(10., +(0.05 * +(+(+(HEAPF32[dsp + 20930640 >> 2])) - 100.)))));
		fSlow1 = +(10.582 * +(+(HEAPF32[dsp + 20930672 >> 2])));
		fSlow2 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow1)), 50.)))));
		fSlow3 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow2) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow1), 50.)))))))));
		fSlow4 = +(faustpower2_f(+(fSlow3)));
		fSlow5 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow4));
		fSlow6 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow2)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow4) / +(fSlow2))));
		fSlow7 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow6));
		fSlow8 = +(1. / +(4. + +(+(fSlow5) + +(fSlow7))));
		fSlow9 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow6));
		fSlow10 = +(0. - +(fSlow9));
		fSlow11 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow6));
		fSlow12 = +(faustpower2_f(+(fSlow6)));
		fSlow13 = +(+(8. * +(fSlow4)) + +(5.64908 * +(fSlow12)));
		fSlow14 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow4));
		fSlow15 = +(1.60527 * +(fSlow6));
		fSlow16 = +(1. / +(16. + +(+(fSlow11) + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow13) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow4) * +(+(fSlow14) + +(fSlow15)))))))));
		fSlow17 = +(+(4.64607 * +(fSlow12)) + +(0.158473 * +(fSlow4)));
		fSlow18 = +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow17)) + 0.316946);
		fSlow19 = +(30. + +(1.5 * +(+(HEAPF32[dsp + 20930696 >> 2]))));
		fSlow20 = +(2.646e+06 / +(fSlow19));
		fSlow21 = +(+(HEAPF32[dsp + 20930700 >> 2]));
		fSlow22 = +(0.01 * +(+(HEAPF32[dsp + 20930704 >> 2])));
		fSlow23 = +(3.21055 * +(fSlow6));
		fSlow24 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow4));
		fSlow25 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow6));
		fSlow26 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow4) * +(+(fSlow23) + +(fSlow24)))) - +(64. + +(fSlow25)));
		fSlow27 = +(faustpower4_f(+(fSlow3)));
		fSlow28 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(11.2982 * +(fSlow12)) + +(16. * +(fSlow4)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow27)))));
		fSlow29 = +(+(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow4) * +(+(fSlow24) - +(fSlow23)))) + +(fSlow25)) - 64.);
		fSlow30 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow4) * +(+(fSlow14) - +(fSlow15)))) + +(fSlow13)))) - +(fSlow11));
		fSlow31 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow27)) - 1.26779);
		fSlow32 = +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow12)) + +(0.316946 * +(fSlow4)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow27)))) + 1.90168);
		fSlow33 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow27));
		fSlow34 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow33) + +(+(fSlow17) + +(fSlow33)))));
		fSlow35 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow4)) - 8.);
		fSlow36 = +(+(4. + +(fSlow5)) - +(fSlow7));
		fSlow37 = +(0.001 * +(+(HEAPF32[dsp + 20930740 >> 2])));
		fSlow38 = +(0.001 * +(((+(+(HEAPF32[dsp + 20930744 >> 2])) > 0.) | 0)));
		fSlow39 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20930748 >> 2]))));
		fSlow40 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20930752 >> 2]))));
		fSlow41 = +(3.14 / +(fSlow39));
		fSlow42 = +(0.001 * +(+(HEAPF32[dsp + 20930756 >> 2])));
		fSlow43 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20930760 >> 2]))));
		fSlow44 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930764 >> 2]))))))));
		fSlow45 = +(0.001 * +(+(HEAPF32[dsp + 20930772 >> 2])));
		fSlow46 = +(0.01 * +(+(HEAPF32[dsp + 20930780 >> 2])));
		fSlow47 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930784 >> 2]))))), 0.999999))))));
		fSlow48 = +(0.001 * +(+(HEAPF32[dsp + 20930788 >> 2])));
		fSlow49 = +(+(HEAPF32[dsp + 20930792 >> 2]));
		fSlow50 = +(5.e-06 * +(fSlow49));
		fSlow51 = +(0.005 * +(+(HEAPF32[dsp + 20930796 >> 2])));
		fSlow52 = +(0.005 * +(fSlow49));
		fSlow53 = +(1. - +(fSlow52));
		fSlow54 = +(1.e-05 * +(+(HEAPF32[dsp + 20930848 >> 2])));
		fSlow55 = +(0.001 * +(+(HEAPF32[dsp + 20930856 >> 2])));
		fSlow56 = +(0.001 * +(+(HEAPF32[dsp + 20930860 >> 2])));
		fSlow57 = +(+(HEAPF32[dsp + 20930864 >> 2]));
		fSlow58 = +(0.001 * +(+(HEAPF32[dsp + 20930868 >> 2])));
		fSlow59 = +(10.582 * +(+(HEAPF32[dsp + 20930872 >> 2])));
		fSlow60 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow59)), 50.)))));
		fSlow61 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow60) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow59), 50.)))))))));
		fSlow62 = +(faustpower2_f(+(fSlow61)));
		fSlow63 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow62));
		fSlow64 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow60)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow62) / +(fSlow60))));
		fSlow65 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow64));
		fSlow66 = +(1. / +(4. + +(+(fSlow63) + +(fSlow65))));
		fSlow67 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow64));
		fSlow68 = +(0. - +(fSlow67));
		fSlow69 = +(faustpower2_f(+(fSlow64)));
		fSlow70 = +(+(5.64908 * +(fSlow69)) + +(8. * +(fSlow62)));
		fSlow71 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow62));
		fSlow72 = +(1.60527 * +(fSlow64));
		fSlow73 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow64));
		fSlow74 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow70) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow62) * +(+(fSlow71) + +(fSlow72)))))) + +(fSlow73))));
		fSlow75 = +(+(0.158473 * +(fSlow62)) + +(4.64607 * +(fSlow69)));
		fSlow76 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow75)));
		fSlow77 = +(0.01 * +(+(HEAPF32[dsp + 20930876 >> 2])));
		fSlow78 = +(3.21055 * +(fSlow64));
		fSlow79 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow62));
		fSlow80 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow64));
		fSlow81 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow62) * +(+(fSlow78) + +(fSlow79)))) - +(64. + +(fSlow80)));
		fSlow82 = +(faustpower4_f(+(fSlow61)));
		fSlow83 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(16. * +(fSlow62)) + +(11.2982 * +(fSlow69)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow82)))));
		fSlow84 = +(+(+(fSlow80) + +(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow62) * +(+(fSlow79) - +(fSlow78))))) - 64.);
		fSlow85 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow70) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow62) * +(+(fSlow71) - +(fSlow72))))))) - +(fSlow73));
		fSlow86 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow82)) - 1.26779);
		fSlow87 = +(1.90168 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow69)) + +(0.316946 * +(fSlow62)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow82)))));
		fSlow88 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow82));
		fSlow89 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow88) + +(+(fSlow75) + +(fSlow88)))));
		fSlow90 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow62)) - 8.);
		fSlow91 = +(+(4. + +(fSlow63)) - +(fSlow65));
		fSlow92 = +(0.001 * +(((+(+(HEAPF32[dsp + 20930880 >> 2])) > 0.) | 0)));
		fSlow93 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20930884 >> 2]))));
		fSlow94 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20930888 >> 2]))));
		fSlow95 = +(3.14 / +(fSlow93));
		fSlow96 = +(0.001 * +(+(HEAPF32[dsp + 20930892 >> 2])));
		fSlow97 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20930896 >> 2]))));
		fSlow98 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930900 >> 2]))))))));
		fSlow99 = +(0.001 * +(+(HEAPF32[dsp + 20930904 >> 2])));
		fSlow100 = +(0.01 * +(+(HEAPF32[dsp + 20930908 >> 2])));
		fSlow101 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930912 >> 2]))))), 0.999999))))));
		fSlow102 = +(0.001 * +(+(HEAPF32[dsp + 20930916 >> 2])));
		fSlow103 = +(+(HEAPF32[dsp + 20930920 >> 2]));
		fSlow104 = +(5.e-06 * +(fSlow103));
		fSlow105 = +(0.005 * +(+(HEAPF32[dsp + 20930924 >> 2])));
		fSlow106 = +(0.005 * +(fSlow103));
		fSlow107 = +(1. - +(fSlow106));
		fSlow108 = +(1.e-05 * +(+(HEAPF32[dsp + 20930928 >> 2])));
		fSlow109 = +(0.001 * +(+(HEAPF32[dsp + 20930936 >> 2])));
		fSlow110 = +(0.001 * +(+(HEAPF32[dsp + 20930940 >> 2])));
		fSlow111 = +(+(HEAPF32[dsp + 20930944 >> 2]));
		fSlow112 = +(0.001 * +(+(HEAPF32[dsp + 20930948 >> 2])));
		fSlow113 = +(10.582 * +(+(HEAPF32[dsp + 20930952 >> 2])));
		fSlow114 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow113)), 50.)))));
		fSlow115 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow114) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow113), 50.)))))))));
		fSlow116 = +(faustpower2_f(+(fSlow115)));
		fSlow117 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow116));
		fSlow118 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow114)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow116) / +(fSlow114))));
		fSlow119 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow118));
		fSlow120 = +(1. / +(4. + +(+(fSlow117) + +(fSlow119))));
		fSlow121 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow118));
		fSlow122 = +(0. - +(fSlow121));
		fSlow123 = +(faustpower2_f(+(fSlow118)));
		fSlow124 = +(+(5.64908 * +(fSlow123)) + +(8. * +(fSlow116)));
		fSlow125 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow116));
		fSlow126 = +(1.60527 * +(fSlow118));
		fSlow127 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow118));
		fSlow128 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow124) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow116) * +(+(fSlow125) + +(fSlow126)))))) + +(fSlow127))));
		fSlow129 = +(+(0.158473 * +(fSlow116)) + +(4.64607 * +(fSlow123)));
		fSlow130 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow129)));
		fSlow131 = +(0.01 * +(+(HEAPF32[dsp + 20930956 >> 2])));
		fSlow132 = +(3.21055 * +(fSlow118));
		fSlow133 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow116));
		fSlow134 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow118));
		fSlow135 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow116) * +(+(fSlow132) + +(fSlow133)))) - +(64. + +(fSlow134)));
		fSlow136 = +(faustpower4_f(+(fSlow115)));
		fSlow137 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(16. * +(fSlow116)) + +(11.2982 * +(fSlow123)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow136)))));
		fSlow138 = +(+(+(fSlow134) + +(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow116) * +(+(fSlow133) - +(fSlow132))))) - 64.);
		fSlow139 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow124) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow116) * +(+(fSlow125) - +(fSlow126))))))) - +(fSlow127));
		fSlow140 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow136)) - 1.26779);
		fSlow141 = +(1.90168 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow123)) + +(0.316946 * +(fSlow116)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow136)))));
		fSlow142 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow136));
		fSlow143 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow142) + +(+(fSlow129) + +(fSlow142)))));
		fSlow144 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow116)) - 8.);
		fSlow145 = +(+(4. + +(fSlow117)) - +(fSlow119));
		fSlow146 = +(0.001 * +(((+(+(HEAPF32[dsp + 20930960 >> 2])) > 0.) | 0)));
		fSlow147 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20930964 >> 2]))));
		fSlow148 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20930968 >> 2]))));
		fSlow149 = +(3.14 / +(fSlow147));
		fSlow150 = +(0.001 * +(+(HEAPF32[dsp + 20930972 >> 2])));
		fSlow151 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20930976 >> 2]))));
		fSlow152 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930980 >> 2]))))))));
		fSlow153 = +(0.001 * +(+(HEAPF32[dsp + 20930984 >> 2])));
		fSlow154 = +(0.01 * +(+(HEAPF32[dsp + 20930988 >> 2])));
		fSlow155 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20930992 >> 2]))))), 0.999999))))));
		fSlow156 = +(0.001 * +(+(HEAPF32[dsp + 20930996 >> 2])));
		fSlow157 = +(+(HEAPF32[dsp + 20931000 >> 2]));
		fSlow158 = +(5.e-06 * +(fSlow157));
		fSlow159 = +(0.005 * +(+(HEAPF32[dsp + 20931004 >> 2])));
		fSlow160 = +(0.005 * +(fSlow157));
		fSlow161 = +(1. - +(fSlow160));
		fSlow162 = +(1.e-05 * +(+(HEAPF32[dsp + 20931008 >> 2])));
		fSlow163 = +(0.001 * +(+(HEAPF32[dsp + 20931016 >> 2])));
		fSlow164 = +(0.001 * +(+(HEAPF32[dsp + 20931020 >> 2])));
		fSlow165 = +(1.e-05 * +(+(HEAPF32[dsp + 20931024 >> 2])));
		fSlow166 = +(+(HEAPF32[dsp + 20931028 >> 2]));
		fSlow167 = +(0.001 * +(+(HEAPF32[dsp + 20931032 >> 2])));
		fSlow168 = +(10.582 * +(+(HEAPF32[dsp + 20931036 >> 2])));
		fSlow169 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow168)), 50.)))));
		fSlow170 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow169) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow168), 50.)))))))));
		fSlow171 = +(faustpower2_f(+(fSlow170)));
		fSlow172 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow171));
		fSlow173 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow169)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow171) / +(fSlow169))));
		fSlow174 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow173));
		fSlow175 = +(1. / +(4. + +(+(fSlow172) + +(fSlow174))));
		fSlow176 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow173));
		fSlow177 = +(0. - +(fSlow176));
		fSlow178 = +(faustpower2_f(+(fSlow173)));
		fSlow179 = +(+(5.64908 * +(fSlow178)) + +(8. * +(fSlow171)));
		fSlow180 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow171));
		fSlow181 = +(1.60527 * +(fSlow173));
		fSlow182 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow173));
		fSlow183 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow179) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow171) * +(+(fSlow180) + +(fSlow181)))))) + +(fSlow182))));
		fSlow184 = +(+(4.64607 * +(fSlow178)) + +(0.158473 * +(fSlow171)));
		fSlow185 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow184)));
		fSlow186 = +(0.01 * +(+(HEAPF32[dsp + 20931040 >> 2])));
		fSlow187 = +(3.21055 * +(fSlow173));
		fSlow188 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow171));
		fSlow189 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow173));
		fSlow190 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow171) * +(+(fSlow187) + +(fSlow188)))) - +(64. + +(fSlow189)));
		fSlow191 = +(faustpower4_f(+(fSlow170)));
		fSlow192 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(16. * +(fSlow171)) + +(11.2982 * +(fSlow178)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow191)))));
		fSlow193 = +(+(+(fSlow189) + +(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow171) * +(+(fSlow188) - +(fSlow187))))) - 64.);
		fSlow194 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow179) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow171) * +(+(fSlow180) - +(fSlow181))))))) - +(fSlow182));
		fSlow195 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow191)) - 1.26779);
		fSlow196 = +(1.90168 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow178)) + +(0.316946 * +(fSlow171)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow191)))));
		fSlow197 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow191));
		fSlow198 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow197) + +(+(fSlow184) + +(fSlow197)))));
		fSlow199 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow171)) - 8.);
		fSlow200 = +(+(4. + +(fSlow172)) - +(fSlow174));
		fSlow201 = +(0.001 * +(((+(+(HEAPF32[dsp + 20931044 >> 2])) > 0.) | 0)));
		fSlow202 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20931048 >> 2]))));
		fSlow203 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20931052 >> 2]))));
		fSlow204 = +(3.14 / +(fSlow202));
		fSlow205 = +(0.001 * +(+(HEAPF32[dsp + 20931056 >> 2])));
		fSlow206 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20931060 >> 2]))));
		fSlow207 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931064 >> 2]))))))));
		fSlow208 = +(0.001 * +(+(HEAPF32[dsp + 20931068 >> 2])));
		fSlow209 = +(0.01 * +(+(HEAPF32[dsp + 20931072 >> 2])));
		fSlow210 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931076 >> 2]))))), 0.999999))))));
		fSlow211 = +(0.001 * +(+(HEAPF32[dsp + 20931080 >> 2])));
		fSlow212 = +(+(HEAPF32[dsp + 20931084 >> 2]));
		fSlow213 = +(5.e-06 * +(fSlow212));
		fSlow214 = +(0.005 * +(+(HEAPF32[dsp + 20931088 >> 2])));
		fSlow215 = +(0.005 * +(fSlow212));
		fSlow216 = +(1. - +(fSlow215));
		fSlow217 = +(0.001 * +(+(HEAPF32[dsp + 20931096 >> 2])));
		fSlow218 = +(0.001 * +(+(HEAPF32[dsp + 20931100 >> 2])));
		fSlow219 = +(1.e-05 * +(+(HEAPF32[dsp + 20931104 >> 2])));
		fSlow220 = +(0.001 * +(+(HEAPF32[dsp + 20931108 >> 2])));
		fSlow221 = +(0.001 * +(+(HEAPF32[dsp + 20931112 >> 2])));
		fSlow222 = +(0.001 * +(+(HEAPF32[dsp + 20931116 >> 2])));
		fSlow223 = +(0.001 * +(((+(+(HEAPF32[dsp + 20931120 >> 2])) > 0.) | 0)));
		fSlow224 = +(+(HEAPF32[dsp + 20931124 >> 2]));
		fSlow225 = +(0.001 * +(+(HEAPF32[dsp + 20931128 >> 2])));
		fSlow226 = +(10.582 * +(+(HEAPF32[dsp + 20931132 >> 2])));
		fSlow227 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow226)), 50.)))));
		fSlow228 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow227) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow226), 50.)))))))));
		fSlow229 = +(faustpower2_f(+(fSlow228)));
		fSlow230 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow229));
		fSlow231 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow227)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow229) / +(fSlow227))));
		fSlow232 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow231));
		fSlow233 = +(1. / +(4. + +(+(fSlow230) + +(fSlow232))));
		fSlow234 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow231));
		fSlow235 = +(0. - +(fSlow234));
		fSlow236 = +(faustpower2_f(+(fSlow231)));
		fSlow237 = +(+(5.64908 * +(fSlow236)) + +(8. * +(fSlow229)));
		fSlow238 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow229));
		fSlow239 = +(1.60527 * +(fSlow231));
		fSlow240 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow231));
		fSlow241 = +(1. / +(16. + +(+(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow237) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow229) * +(+(fSlow238) + +(fSlow239)))))) + +(fSlow240))));
		fSlow242 = +(+(0.158473 * +(fSlow229)) + +(4.64607 * +(fSlow236)));
		fSlow243 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow242)));
		fSlow244 = +(0.01 * +(+(HEAPF32[dsp + 20931136 >> 2])));
		fSlow245 = +(3.21055 * +(fSlow231));
		fSlow246 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow229));
		fSlow247 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow231));
		fSlow248 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow229) * +(+(fSlow245) + +(fSlow246)))) - +(64. + +(fSlow247)));
		fSlow249 = +(faustpower4_f(+(fSlow228)));
		fSlow250 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(16. * +(fSlow229)) + +(11.2982 * +(fSlow236)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow249)))));
		fSlow251 = +(+(+(fSlow247) + +(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow229) * +(+(fSlow246) - +(fSlow245))))) - 64.);
		fSlow252 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow237) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow229) * +(+(fSlow238) - +(fSlow239))))))) - +(fSlow240));
		fSlow253 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow249)) - 1.26779);
		fSlow254 = +(1.90168 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow236)) + +(0.316946 * +(fSlow229)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow249)))));
		fSlow255 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow249));
		fSlow256 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow255) + +(+(fSlow242) + +(fSlow255)))));
		fSlow257 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow229)) - 8.);
		fSlow258 = +(+(4. + +(fSlow230)) - +(fSlow232));
		fSlow259 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20931140 >> 2]))));
		fSlow260 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20931144 >> 2]))));
		fSlow261 = +(3.14 / +(fSlow259));
		fSlow262 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931148 >> 2]))))))));
		fSlow263 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20931152 >> 2]))));
		fSlow264 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931156 >> 2]))))), 0.999999))))));
		fSlow265 = +(0.01 * +(+(HEAPF32[dsp + 20931160 >> 2])));
		fSlow266 = +(+(HEAPF32[dsp + 20931164 >> 2]));
		fSlow267 = +(5.e-06 * +(fSlow266));
		fSlow268 = +(0.005 * +(+(HEAPF32[dsp + 20931168 >> 2])));
		fSlow269 = +(0.005 * +(fSlow266));
		fSlow270 = +(1. - +(fSlow269));
		fSlow271 = +(0.001 * +(+(HEAPF32[dsp + 20931176 >> 2])));
		fSlow272 = +(0.001 * +(+(HEAPF32[dsp + 20931180 >> 2])));
		fSlow273 = +(1.e-05 * +(+(HEAPF32[dsp + 20931184 >> 2])));
		fSlow274 = +(0.001 * +(+(HEAPF32[dsp + 20931188 >> 2])));
		fSlow275 = +(0.001 * +(+(HEAPF32[dsp + 20931192 >> 2])));
		fSlow276 = +(0.001 * +(+(HEAPF32[dsp + 20931196 >> 2])));
		fSlow277 = +(0.001 * +(((+(+(HEAPF32[dsp + 20931200 >> 2])) > 0.) | 0)));
		fSlow278 = +(+(HEAPF32[dsp + 20931204 >> 2]));
		fSlow279 = +(0.001 * +(+(HEAPF32[dsp + 20931208 >> 2])));
		fSlow280 = +(10.582 * +(+(HEAPF32[dsp + 20931212 >> 2])));
		fSlow281 = +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(300. + +(fSlow280)), 50.)))));
		fSlow282 = +(sqrtf(+(+(HEAPF32[dsp + 20930664 >> 2]) * +(+(fSlow281) * +(tanf(+(+(HEAPF32[dsp + 20930668 >> 2]) * +(max(+(fSlow280), 50.)))))))));
		fSlow283 = +(faustpower2_f(+(fSlow282)));
		fSlow284 = +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow283));
		fSlow285 = +(+(+(HEAPF32[dsp + 20930680 >> 2]) * +(fSlow281)) - +(+(HEAPF32[dsp + 20930684 >> 2]) * +(+(fSlow283) / +(fSlow281))));
		fSlow286 = +(+(HEAPF32[dsp + 20930676 >> 2]) * +(fSlow285));
		fSlow287 = +(1. / +(4. + +(+(fSlow284) + +(fSlow286))));
		fSlow288 = +(+(HEAPF32[dsp + 20930688 >> 2]) * +(fSlow285));
		fSlow289 = +(0. - +(fSlow288));
		fSlow290 = +(+(HEAPF32[dsp + 20930692 >> 2]) * +(fSlow285));
		fSlow291 = +(faustpower2_f(+(fSlow285)));
		fSlow292 = +(+(5.64908 * +(fSlow291)) + +(8. * +(fSlow283)));
		fSlow293 = +(+(HEAPF32[dsp + 20930656 >> 2]) * +(fSlow283));
		fSlow294 = +(1.60527 * +(fSlow285));
		fSlow295 = +(1. / +(16. + +(+(fSlow290) + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow292) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow283) * +(+(fSlow293) + +(fSlow294)))))))));
		fSlow296 = +(+(0.158473 * +(fSlow283)) + +(4.64607 * +(fSlow291)));
		fSlow297 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(fSlow296)));
		fSlow298 = +(0.01 * +(+(HEAPF32[dsp + 20931216 >> 2])));
		fSlow299 = +(3.21055 * +(fSlow285));
		fSlow300 = +(+(HEAPF32[dsp + 20930712 >> 2]) * +(fSlow283));
		fSlow301 = +(+(HEAPF32[dsp + 20930716 >> 2]) * +(fSlow285));
		fSlow302 = +(+(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow283) * +(+(fSlow299) + +(fSlow300)))) - +(64. + +(fSlow301)));
		fSlow303 = +(faustpower4_f(+(fSlow282)));
		fSlow304 = +(96. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(16. * +(fSlow283)) + +(11.2982 * +(fSlow291)))) + +(+(HEAPF32[dsp + 20930720 >> 2]) * +(fSlow303)))));
		fSlow305 = +(+(+(fSlow301) + +(+(HEAPF32[dsp + 20930708 >> 2]) * +(+(fSlow283) * +(+(fSlow300) - +(fSlow299))))) - 64.);
		fSlow306 = +(+(16. + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow292) + +(+(HEAPF32[dsp + 20930656 >> 2]) * +(+(fSlow283) * +(+(fSlow293) - +(fSlow294))))))) - +(fSlow290));
		fSlow307 = +(+(+(HEAPF32[dsp + 20930724 >> 2]) * +(fSlow303)) - 1.26779);
		fSlow308 = +(1.90168 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(0. - +(+(9.29213 * +(fSlow291)) + +(0.316946 * +(fSlow283)))) + +(+(HEAPF32[dsp + 20930728 >> 2]) * +(fSlow303)))));
		fSlow309 = +(+(HEAPF32[dsp + 20930732 >> 2]) * +(fSlow303));
		fSlow310 = +(0.316946 + +(+(HEAPF32[dsp + 20930660 >> 2]) * +(+(fSlow309) + +(+(fSlow296) + +(fSlow309)))));
		fSlow311 = +(+(+(HEAPF32[dsp + 20930736 >> 2]) * +(fSlow283)) - 8.);
		fSlow312 = +(+(4. + +(fSlow284)) - +(fSlow286));
		fSlow313 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 20931220 >> 2]))));
		fSlow314 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 20931224 >> 2]))));
		fSlow315 = +(3.14 / +(fSlow313));
		fSlow316 = +(0.01 * +(max(0., +(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931228 >> 2]))))))));
		fSlow317 = +(5000. + +(68.7831 * +(+(HEAPF32[dsp + 20931232 >> 2]))));
		fSlow318 = +(0. - +(4. * +(max(0., +(min(+(min(0.99, +(0.00529101 * +(+(HEAPF32[dsp + 20931236 >> 2]))))), 0.999999))))));
		fSlow319 = +(0.01 * +(+(HEAPF32[dsp + 20931240 >> 2])));
		fSlow320 = +(+(HEAPF32[dsp + 20931244 >> 2]));
		fSlow321 = +(5.e-06 * +(fSlow320));
		fSlow322 = +(0.005 * +(+(HEAPF32[dsp + 20931248 >> 2])));
		fSlow323 = +(0.005 * +(fSlow320));
		fSlow324 = +(1. - +(fSlow323));
		fSlow325 = +(0.001 * +(+(HEAPF32[dsp + 20931256 >> 2])));
		fSlow326 = +(0.001 * +(+(HEAPF32[dsp + 20931260 >> 2])));
		fSlow327 = +(0.001 * +(powf(10., +(0.05 * +(+(+(HEAPF32[dsp + 20931264 >> 2])) - 100.)))));
		fSlow328 = +(1.323e+06 / +(fSlow19));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[dsp + 20928160 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928160 + (1 << 2) >> 2])) + +(fSlow0));
			HEAPF32[dsp + 20928168 + (0 << 2) >> 2] = +(+(1. + +(HEAPF32[dsp + 20928168 + (1 << 2) >> 2])) % +(fSlow20));
			iTemp0 = ((+(HEAPF32[dsp + 20928168 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20928168 + (1 << 2) >> 2])) | 0);
			HEAPF32[dsp + 20928176 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow21):+(HEAPF32[dsp + 20928176 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20928184 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20928184 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20928176 + (0 << 2) >> 2])))));
			iTemp1 = ((+(HEAPF32[dsp + 20928176 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20928192 + (0 << 2) >> 2] = (iTemp1 | 0);
			HEAP32[dsp + 20928200 + (0 << 2) >> 2] = (((imul((iTemp1 | 0), (((iTemp1 | 0) + (HEAP32[dsp + 20928200 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAP32[dsp + 20928208 + (0 << 2) >> 2] = ((12345 + (imul(1103515245, (HEAP32[dsp + 20928208 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			fTemp2 = +(+(+(HEAPF32[input0 + ((i | 0) << 2) >> 2])) + +(4.65661e-13 * +((HEAP32[dsp + 20928208 + (0 << 2) >> 2] | 0))));
			HEAPF32[dsp + 262144 + ((HEAP32[dsp + 20928200 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp3 = ((+(HEAPF32[dsp + 20928176 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20928216 + (0 << 2) >> 2] = (imul((((iTemp1 | 0) + (HEAP32[dsp + 20928216 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp1 | 0) > (HEAP32[dsp + 20928192 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20928224 + (0 << 2) >> 2] = (((imul((iTemp3 | 0), (((iTemp3 | 0) + (HEAP32[dsp + 20928224 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20928216 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20928232 + (0 << 2) >> 2] = +(+(fSlow22) + +(0.99 * +(HEAPF32[dsp + 20928232 + (1 << 2) >> 2])));
			fTemp4 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20928184 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 262144 + (((max(~~((HEAP32[dsp + 20928200 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20928224 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20928232 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20927968 + (0 << 2) >> 2] = +(+(+(fTemp4) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp4)))))) - +(+(fSlow16) * +(+(+(+(+(fSlow26) * +(HEAPF32[dsp + 20927968 + (1 << 2) >> 2])) + +(+(fSlow28) * +(HEAPF32[dsp + 20927968 + (2 << 2) >> 2]))) + +(+(fSlow29) * +(HEAPF32[dsp + 20927968 + (3 << 2) >> 2]))) + +(+(fSlow30) * +(HEAPF32[dsp + 20927968 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928088 + (0 << 2) >> 2] = +(+(+(fSlow16) * +(+(+(+(+(+(fSlow18) * +(HEAPF32[dsp + 20927968 + (0 << 2) >> 2])) + +(+(fSlow31) * +(HEAPF32[dsp + 20927968 + (1 << 2) >> 2]))) + +(+(fSlow32) * +(HEAPF32[dsp + 20927968 + (2 << 2) >> 2]))) + +(+(fSlow31) * +(HEAPF32[dsp + 20927968 + (3 << 2) >> 2]))) + +(+(fSlow34) * +(HEAPF32[dsp + 20927968 + (4 << 2) >> 2])))) - +(+(fSlow8) * +(+(+(fSlow35) * +(HEAPF32[dsp + 20928088 + (1 << 2) >> 2])) + +(+(fSlow36) * +(HEAPF32[dsp + 20928088 + (2 << 2) >> 2])))));
			HEAPF32[dsp + 20928240 + (0 << 2) >> 2] = +(+(fSlow37) + +(0.999 * +(HEAPF32[dsp + 20928240 + (1 << 2) >> 2])));
			fTemp5 = +(+(+(fSlow8) * +(+(+(+(fSlow10) * +(HEAPF32[dsp + 20928088 + (2 << 2) >> 2])) + +(+(fSlow9) * +(HEAPF32[dsp + 20928088 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928240 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20928184 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20928240 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 262144 + (((max(~~((HEAP32[dsp + 20928200 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20928224 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20928248 + (0 << 2) >> 2] = +(+(fSlow38) + +(0.999 * +(HEAPF32[dsp + 20928248 + (1 << 2) >> 2])));
			HEAP32[dsp + 20928256 + (0 << 2) >> 2] = ((1 + (((HEAP32[dsp + 20928256 + (1 << 2) >> 2] | 0) % 88200) | 0)) | 0);
			HEAPF32[dsp + 17137600 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp5);
			HEAPF32[dsp + 20928264 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928264 + (1 << 2) >> 2]) % +(fSlow39)) + +(fSlow40));
			fTemp6 = +(+(30000. * +(1. + +(4.65661e-10 * +((HEAP32[dsp + 20928208 + (0 << 2) >> 2] | 0))))) + +((imul(44100, (((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) < 44100) | 0)) | 0)));
			HEAPF32[dsp + 20928272 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20928264 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20928264 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20928272 + (1 << 2) >> 2]));
			fTemp7 = +(+(+(fTemp5) * +(1. - +(HEAPF32[dsp + 20928248 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 17137600 + (~~(+(+(HEAPF32[dsp + 20928264 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20928272 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow41) * +(HEAPF32[dsp + 20928264 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20928248 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928280 + (0 << 2) >> 2] = +(+(fSlow42) + +(0.999 * +(HEAPF32[dsp + 20928280 + (1 << 2) >> 2])));
			fSel0 = 0.;
			if ((((((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow43) != +(HEAPF32[dsp + 20928304 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel0 = 0.00390625;
				
			} else {
				fSel0 = +(((((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow43) != +(HEAPF32[dsp + 20928312 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel1 = 0.;
			if ((((+(HEAPF32[dsp + 20928288 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel1 = +(((((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20928288 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel1 = +(fSel0);
				
			}
			HEAPF32[dsp + 20928288 + (0 << 2) >> 2] = +(fSel1);
			HEAPF32[dsp + 20928296 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) + +(fSel1))))));
			HEAPF32[dsp + 20928304 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20928312 + (1 << 2) >> 2]) != +(fSlow43)) | 0)) | 0)?+(fSlow43):+(HEAPF32[dsp + 20928304 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20928312 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20928296 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20928304 + (1 << 2) >> 2]) != +(fSlow43)) | 0)) | 0)?+(fSlow43):+(HEAPF32[dsp + 20928312 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20928320 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20928320 + (1 << 2) >> 2])) + +(fSlow44));
			HEAPF32[dsp + 10846144 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp7) + +(+(+(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20928304 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20928296 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20928312 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20928296 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928320 + (0 << 2) >> 2])));
			fTemp8 = +(+(+(fTemp7) * +(1. - +(HEAPF32[dsp + 20928280 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20928280 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 10846144 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20928328 + (0 << 2) >> 2] = +(+(fSlow45) + +(0.999 * +(HEAPF32[dsp + 20928328 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928336 + (0 << 2) >> 2] = +(+(fSlow46) + +(0.99 * +(HEAPF32[dsp + 20928336 + (1 << 2) >> 2])));
			fTemp9 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20928336 + (0 << 2) >> 2]))));
			fTemp10 = +(1. - +(fTemp9));
			HEAPF32[dsp + 20928344 + (0 << 2) >> 2] = +(+(+(fSlow47) * +(HEAPF32[dsp + 20928376 + (1 << 2) >> 2])) + +(+(fTemp8) + +(+(fTemp10) * +(HEAPF32[dsp + 20928344 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20928352 + (0 << 2) >> 2] = +(+(+(fTemp10) * +(HEAPF32[dsp + 20928352 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928344 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928360 + (0 << 2) >> 2] = +(+(+(fTemp10) * +(HEAPF32[dsp + 20928360 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928352 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928368 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928368 + (1 << 2) >> 2]) * +(fTemp10)) + +(HEAPF32[dsp + 20928360 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928376 + (0 << 2) >> 2] = +(+(powf(+(fTemp9), 4.)) * +(HEAPF32[dsp + 20928368 + (0 << 2) >> 2]));
			fTemp11 = +(+(+(fTemp8) * +(1. - +(HEAPF32[dsp + 20928328 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20928328 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20928376 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928384 + (0 << 2) >> 2] = +(+(fSlow48) + +(0.999 * +(HEAPF32[dsp + 20928384 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928392 + (0 << 2) >> 2] = +(+(fSlow50) + +(0.999 * +(HEAPF32[dsp + 20928392 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928400 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928400 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928408 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19256800 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928400 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928408 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19256800 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928416 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928416 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928424 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19289568 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928416 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928424 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19289568 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928432 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928432 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928440 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19322336 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928432 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928440 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19322336 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928448 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928448 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928456 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19355104 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928448 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928456 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19355104 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928464 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928464 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928472 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19387872 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928464 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928472 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19387872 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928480 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928480 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928488 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19420640 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928480 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928488 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19420640 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928496 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928496 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928504 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19453408 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928496 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928504 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19453408 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928512 + (0 << 2) >> 2] = +(+(+(fSlow53) * +(HEAPF32[dsp + 20928512 + (1 << 2) >> 2])) + +(+(fSlow52) * +(HEAPF32[dsp + 20928520 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19486176 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp11) + +(+(fSlow51) * +(HEAPF32[dsp + 20928512 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928520 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19486176 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp12 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 20928528 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928408 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928424 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928440 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928456 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928472 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928488 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928504 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928520 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20829664 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp12);
			HEAPF32[dsp + 20928528 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20829664 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec40 = +(0. - +(0.5 * +(fTemp12)));
			fTemp13 = +(+(+(0.5 * +(HEAPF32[dsp + 20928536 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928528 + (1 << 2) >> 2])) + +(fRec40));
			HEAPF32[dsp + 20833760 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp13);
			HEAPF32[dsp + 20928536 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20833760 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec38 = +(0. - +(0.5 * +(fTemp13)));
			fTemp14 = +(+(+(0.5 * +(HEAPF32[dsp + 20928544 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928536 + (1 << 2) >> 2])) + +(fRec38));
			HEAPF32[dsp + 20837856 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp14);
			HEAPF32[dsp + 20928544 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20837856 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec36 = +(0. - +(0.5 * +(fTemp14)));
			fTemp15 = +(+(+(0.5 * +(HEAPF32[dsp + 20928552 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928544 + (1 << 2) >> 2])) + +(fRec36));
			HEAPF32[dsp + 20841952 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp15);
			HEAPF32[dsp + 20928552 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20841952 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec34 = +(0. - +(0.5 * +(fTemp15)));
			HEAPF32[dsp + 20928560 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928560 + (1 << 2) >> 2])) + +(fSlow54));
			fTemp16 = +(+(+(+(fTemp11) * +(1. - +(HEAPF32[dsp + 20928384 + (0 << 2) >> 2]))) + +(+(+(+(fTemp11) * +(1. - +(HEAPF32[dsp + 20928392 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20928552 + (1 << 2) >> 2]) + +(fRec34)) * +(HEAPF32[dsp + 20928392 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928384 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928560 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928568 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20928568 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp16)))));
			HEAPF32[dsp + 20930852 >> 2] = +(+(HEAPF32[dsp + 20928568 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928576 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928576 + (1 << 2) >> 2])) + +(fSlow55));
			fTemp17 = +(0. - +(HEAPF32[dsp + 20928576 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928584 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928584 + (1 << 2) >> 2])) + +(fSlow56));
			fTemp18 = +(powf(+(+(faustpower2_f(+(fTemp17))) + +(faustpower2_f(+(HEAPF32[dsp + 20928584 + (0 << 2) >> 2])))), 0.5));
			iTemp19 = ((+(fTemp18) > 1.) | 0);
			iTemp20 = ((+(fTemp18) < 1.) | 0);
			fTemp21 = +(+((iTemp19 | 0)) + +(+(fTemp18) * +((iTemp20 | 0))));
			fTemp22 = +(+(fTemp16) * +(1. + +(1.38629 * +(0. - +(+(fTemp21) - 1.)))));
			fTemp23 = +(1.38629 * +(fTemp21));
			fTemp24 = +(+(fTemp23) - 0.693147);
			fTemp25 = +(2.4663 * +(fTemp24));
			fTemp26 = +(+(2.4663 * +(+(+(fTemp24) * +(((+(fTemp25) > 0.) | 0))) * +(((+(fTemp25) <= 1.) | 0)))) + +(((+(fTemp25) > 1.) | 0)));
			fTemp27 = +(atan2f(+(fTemp17), +(HEAPF32[dsp + 20928584 + (0 << 2) >> 2])));
			fTemp28 = +(2. * +(fTemp27));
			fTemp29 = +(+(+(faustpower2_f(+(fTemp18))) * +((iTemp19 | 0))) + +((iTemp20 | 0)));
			HEAPF32[dsp + 20928592 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow57):+(HEAPF32[dsp + 20928592 + (1 << 2) >> 2]));
			iTemp30 = ((+(HEAPF32[dsp + 20928592 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20928600 + (0 << 2) >> 2] = (iTemp30 | 0);
			HEAP32[dsp + 20928608 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20928608 + (1 << 2) >> 2] | 0) + (iTemp30 | 0)) | 0), (iTemp30 | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 2026144 + ((HEAP32[dsp + 20928608 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp31 = ((+(HEAPF32[dsp + 20928592 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20928616 + (0 << 2) >> 2] = (imul((((HEAP32[dsp + 20928616 + (1 << 2) >> 2] | 0) + (iTemp30 | 0)) | 0), ((1 - (((iTemp30 | 0) > (HEAP32[dsp + 20928600 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20928624 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20928624 + (1 << 2) >> 2] | 0) + (iTemp31 | 0)) | 0), (iTemp31 | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20928616 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20928632 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20928632 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20928592 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20928640 + (0 << 2) >> 2] = +(+(fSlow58) + +(0.999 * +(HEAPF32[dsp + 20928640 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928648 + (0 << 2) >> 2] = +(+(fSlow77) + +(0.99 * +(HEAPF32[dsp + 20928648 + (1 << 2) >> 2])));
			fTemp32 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 2026144 + (((max(~~((HEAP32[dsp + 20928608 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20928624 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20928648 + (0 << 2) >> 2]))))))) * +(HEAPF32[dsp + 20928632 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20927988 + (0 << 2) >> 2] = +(+(+(fTemp32) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp32)))))) - +(+(fSlow74) * +(+(+(+(+(fSlow81) * +(HEAPF32[dsp + 20927988 + (1 << 2) >> 2])) + +(+(fSlow83) * +(HEAPF32[dsp + 20927988 + (2 << 2) >> 2]))) + +(+(fSlow84) * +(HEAPF32[dsp + 20927988 + (3 << 2) >> 2]))) + +(+(fSlow85) * +(HEAPF32[dsp + 20927988 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928100 + (0 << 2) >> 2] = +(+(+(fSlow74) * +(+(+(+(+(+(fSlow76) * +(HEAPF32[dsp + 20927988 + (0 << 2) >> 2])) + +(+(fSlow86) * +(HEAPF32[dsp + 20927988 + (1 << 2) >> 2]))) + +(+(fSlow87) * +(HEAPF32[dsp + 20927988 + (2 << 2) >> 2]))) + +(+(fSlow86) * +(HEAPF32[dsp + 20927988 + (3 << 2) >> 2]))) + +(+(fSlow89) * +(HEAPF32[dsp + 20927988 + (4 << 2) >> 2])))) - +(+(fSlow66) * +(+(+(fSlow90) * +(HEAPF32[dsp + 20928100 + (1 << 2) >> 2])) + +(+(fSlow91) * +(HEAPF32[dsp + 20928100 + (2 << 2) >> 2])))));
			fTemp33 = +(+(+(+(HEAPF32[dsp + 2026144 + (((max(~~((HEAP32[dsp + 20928608 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20928624 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20928632 + (0 << 2) >> 2])) * +(1. - +(HEAPF32[dsp + 20928640 + (0 << 2) >> 2]))) + +(+(fSlow66) * +(+(+(+(fSlow68) * +(HEAPF32[dsp + 20928100 + (2 << 2) >> 2])) + +(+(fSlow67) * +(HEAPF32[dsp + 20928100 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928640 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 20928656 + (0 << 2) >> 2] = +(+(fSlow92) + +(0.999 * +(HEAPF32[dsp + 20928656 + (1 << 2) >> 2])));
			HEAPF32[dsp + 17490800 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp33);
			HEAPF32[dsp + 20928664 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928664 + (1 << 2) >> 2]) % +(fSlow93)) + +(fSlow94));
			HEAPF32[dsp + 20928672 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20928664 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20928664 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20928672 + (1 << 2) >> 2]));
			fTemp34 = +(+(+(fTemp33) * +(1. - +(HEAPF32[dsp + 20928656 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 17490800 + (~~(+(+(HEAPF32[dsp + 20928664 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20928672 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow95) * +(HEAPF32[dsp + 20928664 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20928656 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928680 + (0 << 2) >> 2] = +(+(fSlow96) + +(0.999 * +(HEAPF32[dsp + 20928680 + (1 << 2) >> 2])));
			fSel2 = 0.;
			if ((((((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow97) != +(HEAPF32[dsp + 20928704 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel2 = 0.00390625;
				
			} else {
				fSel2 = +(((((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow97) != +(HEAPF32[dsp + 20928712 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel3 = 0.;
			if ((((+(HEAPF32[dsp + 20928688 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel3 = +(((((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20928688 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel3 = +(fSel2);
				
			}
			HEAPF32[dsp + 20928688 + (0 << 2) >> 2] = +(fSel3);
			HEAPF32[dsp + 20928696 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) + +(fSel3))))));
			HEAPF32[dsp + 20928704 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20928712 + (1 << 2) >> 2]) != +(fSlow97)) | 0)) | 0)?+(fSlow97):+(HEAPF32[dsp + 20928704 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20928712 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20928696 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20928704 + (1 << 2) >> 2]) != +(fSlow97)) | 0)) | 0)?+(fSlow97):+(HEAPF32[dsp + 20928712 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20928720 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20928720 + (1 << 2) >> 2])) + +(fSlow98));
			HEAPF32[dsp + 11894720 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp34) + +(+(+(+(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20928704 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20928696 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20928712 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20928696 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928720 + (0 << 2) >> 2])));
			fTemp35 = +(+(+(fTemp34) * +(1. - +(HEAPF32[dsp + 20928680 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20928680 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11894720 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20928728 + (0 << 2) >> 2] = +(+(fSlow99) + +(0.999 * +(HEAPF32[dsp + 20928728 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928736 + (0 << 2) >> 2] = +(+(fSlow100) + +(0.99 * +(HEAPF32[dsp + 20928736 + (1 << 2) >> 2])));
			fTemp36 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20928736 + (0 << 2) >> 2]))));
			fTemp37 = +(1. - +(fTemp36));
			HEAPF32[dsp + 20928744 + (0 << 2) >> 2] = +(+(+(fSlow101) * +(HEAPF32[dsp + 20928776 + (1 << 2) >> 2])) + +(+(fTemp35) + +(+(fTemp37) * +(HEAPF32[dsp + 20928744 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20928752 + (0 << 2) >> 2] = +(+(+(fTemp37) * +(HEAPF32[dsp + 20928752 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928744 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928760 + (0 << 2) >> 2] = +(+(+(fTemp37) * +(HEAPF32[dsp + 20928760 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928752 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928768 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928768 + (1 << 2) >> 2]) * +(fTemp37)) + +(HEAPF32[dsp + 20928760 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928776 + (0 << 2) >> 2] = +(+(powf(+(fTemp36), 4.)) * +(HEAPF32[dsp + 20928768 + (0 << 2) >> 2]));
			fTemp38 = +(+(+(fTemp35) * +(1. - +(HEAPF32[dsp + 20928728 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20928728 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20928776 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928784 + (0 << 2) >> 2] = +(+(fSlow102) + +(0.999 * +(HEAPF32[dsp + 20928784 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928792 + (0 << 2) >> 2] = +(+(fSlow104) + +(0.999 * +(HEAPF32[dsp + 20928792 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20928800 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928800 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928808 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19518944 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928800 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928808 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19518944 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928816 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928816 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928824 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19551712 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928816 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928824 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19551712 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928832 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928832 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928840 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19584480 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928832 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928840 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19584480 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928848 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928848 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928856 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19617248 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928848 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928856 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19617248 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928864 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928864 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928872 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19650016 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928864 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928872 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19650016 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928880 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928880 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928888 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19682784 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928880 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928888 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19682784 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928896 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928896 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928904 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19715552 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928896 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928904 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19715552 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20928912 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 20928912 + (1 << 2) >> 2])) + +(+(fSlow106) * +(HEAPF32[dsp + 20928920 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19748320 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp38) + +(+(fSlow105) * +(HEAPF32[dsp + 20928912 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20928920 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19748320 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp39 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 20928928 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928808 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928824 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928840 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928856 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928872 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928888 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928904 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20928920 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20846048 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp39);
			HEAPF32[dsp + 20928928 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20846048 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec96 = +(0. - +(0.5 * +(fTemp39)));
			fTemp40 = +(+(+(0.5 * +(HEAPF32[dsp + 20928936 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928928 + (1 << 2) >> 2])) + +(fRec96));
			HEAPF32[dsp + 20850144 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp40);
			HEAPF32[dsp + 20928936 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20850144 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec94 = +(0. - +(0.5 * +(fTemp40)));
			fTemp41 = +(+(+(0.5 * +(HEAPF32[dsp + 20928944 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928936 + (1 << 2) >> 2])) + +(fRec94));
			HEAPF32[dsp + 20854240 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp41);
			HEAPF32[dsp + 20928944 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20854240 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec92 = +(0. - +(0.5 * +(fTemp41)));
			fTemp42 = +(+(+(0.5 * +(HEAPF32[dsp + 20928952 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20928944 + (1 << 2) >> 2])) + +(fRec92));
			HEAPF32[dsp + 20858336 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp42);
			HEAPF32[dsp + 20928952 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20858336 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec90 = +(0. - +(0.5 * +(fTemp42)));
			HEAPF32[dsp + 20928960 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928960 + (1 << 2) >> 2])) + +(fSlow108));
			fTemp43 = +(+(+(+(fTemp38) * +(1. - +(HEAPF32[dsp + 20928784 + (0 << 2) >> 2]))) + +(+(+(+(fTemp38) * +(1. - +(HEAPF32[dsp + 20928792 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20928952 + (1 << 2) >> 2]) + +(fRec90)) * +(HEAPF32[dsp + 20928792 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928784 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20928960 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928968 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20928968 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp43)))));
			HEAPF32[dsp + 20930932 >> 2] = +(+(HEAPF32[dsp + 20928968 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928976 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928976 + (1 << 2) >> 2])) + +(fSlow109));
			fTemp44 = +(0. - +(HEAPF32[dsp + 20928976 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20928984 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20928984 + (1 << 2) >> 2])) + +(fSlow110));
			fTemp45 = +(powf(+(+(faustpower2_f(+(fTemp44))) + +(faustpower2_f(+(HEAPF32[dsp + 20928984 + (0 << 2) >> 2])))), 0.5));
			iTemp46 = ((+(fTemp45) > 1.) | 0);
			iTemp47 = ((+(fTemp45) < 1.) | 0);
			fTemp48 = +(+((iTemp46 | 0)) + +(+(fTemp45) * +((iTemp47 | 0))));
			fTemp49 = +(+(fTemp43) * +(1. + +(1.38629 * +(0. - +(+(fTemp48) - 1.)))));
			fTemp50 = +(1.38629 * +(fTemp48));
			fTemp51 = +(+(fTemp50) - 0.693147);
			fTemp52 = +(2.4663 * +(fTemp51));
			fTemp53 = +(+(2.4663 * +(+(+(fTemp51) * +(((+(fTemp52) > 0.) | 0))) * +(((+(fTemp52) <= 1.) | 0)))) + +(((+(fTemp52) > 1.) | 0)));
			fTemp54 = +(atan2f(+(fTemp44), +(HEAPF32[dsp + 20928984 + (0 << 2) >> 2])));
			fTemp55 = +(2. * +(fTemp54));
			fTemp56 = +(+(+(faustpower2_f(+(fTemp45))) * +((iTemp46 | 0))) + +((iTemp47 | 0)));
			HEAPF32[dsp + 20928992 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow111):+(HEAPF32[dsp + 20928992 + (1 << 2) >> 2]));
			iTemp57 = ((+(HEAPF32[dsp + 20928992 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20929000 + (0 << 2) >> 2] = (iTemp57 | 0);
			HEAP32[dsp + 20929008 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20929008 + (1 << 2) >> 2] | 0) + (iTemp57 | 0)) | 0), (iTemp57 | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 3790144 + ((HEAP32[dsp + 20929008 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp58 = ((+(HEAPF32[dsp + 20928992 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20929016 + (0 << 2) >> 2] = (imul((((HEAP32[dsp + 20929016 + (1 << 2) >> 2] | 0) + (iTemp57 | 0)) | 0), ((1 - (((iTemp57 | 0) > (HEAP32[dsp + 20929000 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20929024 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20929024 + (1 << 2) >> 2] | 0) + (iTemp58 | 0)) | 0), (iTemp58 | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20929016 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20929032 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929032 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20928992 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20929040 + (0 << 2) >> 2] = +(+(fSlow112) + +(0.999 * +(HEAPF32[dsp + 20929040 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929048 + (0 << 2) >> 2] = +(+(fSlow131) + +(0.99 * +(HEAPF32[dsp + 20929048 + (1 << 2) >> 2])));
			fTemp59 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 3790144 + (((max(~~((HEAP32[dsp + 20929008 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929024 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20929048 + (0 << 2) >> 2]))))))) * +(HEAPF32[dsp + 20929032 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20928008 + (0 << 2) >> 2] = +(+(+(fTemp59) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp59)))))) - +(+(fSlow128) * +(+(+(+(+(fSlow135) * +(HEAPF32[dsp + 20928008 + (1 << 2) >> 2])) + +(+(fSlow137) * +(HEAPF32[dsp + 20928008 + (2 << 2) >> 2]))) + +(+(fSlow138) * +(HEAPF32[dsp + 20928008 + (3 << 2) >> 2]))) + +(+(fSlow139) * +(HEAPF32[dsp + 20928008 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928112 + (0 << 2) >> 2] = +(+(+(fSlow128) * +(+(+(+(+(+(fSlow130) * +(HEAPF32[dsp + 20928008 + (0 << 2) >> 2])) + +(+(fSlow140) * +(HEAPF32[dsp + 20928008 + (1 << 2) >> 2]))) + +(+(fSlow141) * +(HEAPF32[dsp + 20928008 + (2 << 2) >> 2]))) + +(+(fSlow140) * +(HEAPF32[dsp + 20928008 + (3 << 2) >> 2]))) + +(+(fSlow143) * +(HEAPF32[dsp + 20928008 + (4 << 2) >> 2])))) - +(+(fSlow120) * +(+(+(fSlow144) * +(HEAPF32[dsp + 20928112 + (1 << 2) >> 2])) + +(+(fSlow145) * +(HEAPF32[dsp + 20928112 + (2 << 2) >> 2])))));
			fTemp60 = +(+(+(+(HEAPF32[dsp + 3790144 + (((max(~~((HEAP32[dsp + 20929008 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929024 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20929032 + (0 << 2) >> 2])) * +(1. - +(HEAPF32[dsp + 20929040 + (0 << 2) >> 2]))) + +(+(fSlow120) * +(+(+(+(fSlow122) * +(HEAPF32[dsp + 20928112 + (2 << 2) >> 2])) + +(+(fSlow121) * +(HEAPF32[dsp + 20928112 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929040 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 20929056 + (0 << 2) >> 2] = +(+(fSlow146) + +(0.999 * +(HEAPF32[dsp + 20929056 + (1 << 2) >> 2])));
			HEAPF32[dsp + 17844000 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp60);
			HEAPF32[dsp + 20929064 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20929064 + (1 << 2) >> 2]) % +(fSlow147)) + +(fSlow148));
			HEAPF32[dsp + 20929072 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20929064 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20929064 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20929072 + (1 << 2) >> 2]));
			fTemp61 = +(+(+(fTemp60) * +(1. - +(HEAPF32[dsp + 20929056 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 17844000 + (~~(+(+(HEAPF32[dsp + 20929064 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20929072 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow149) * +(HEAPF32[dsp + 20929064 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20929056 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929080 + (0 << 2) >> 2] = +(+(fSlow150) + +(0.999 * +(HEAPF32[dsp + 20929080 + (1 << 2) >> 2])));
			fSel4 = 0.;
			if ((((((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow151) != +(HEAPF32[dsp + 20929104 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel4 = 0.00390625;
				
			} else {
				fSel4 = +(((((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow151) != +(HEAPF32[dsp + 20929112 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel5 = 0.;
			if ((((+(HEAPF32[dsp + 20929088 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel5 = +(((((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20929088 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel5 = +(fSel4);
				
			}
			HEAPF32[dsp + 20929088 + (0 << 2) >> 2] = +(fSel5);
			HEAPF32[dsp + 20929096 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) + +(fSel5))))));
			HEAPF32[dsp + 20929104 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20929112 + (1 << 2) >> 2]) != +(fSlow151)) | 0)) | 0)?+(fSlow151):+(HEAPF32[dsp + 20929104 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929112 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929096 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20929104 + (1 << 2) >> 2]) != +(fSlow151)) | 0)) | 0)?+(fSlow151):+(HEAPF32[dsp + 20929112 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929120 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929120 + (1 << 2) >> 2])) + +(fSlow152));
			HEAPF32[dsp + 12943296 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp61) + +(+(+(+(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929104 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20929096 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929112 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20929096 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929120 + (0 << 2) >> 2])));
			fTemp62 = +(+(+(fTemp61) * +(1. - +(HEAPF32[dsp + 20929080 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929080 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12943296 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20929128 + (0 << 2) >> 2] = +(+(fSlow153) + +(0.999 * +(HEAPF32[dsp + 20929128 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929136 + (0 << 2) >> 2] = +(+(fSlow154) + +(0.99 * +(HEAPF32[dsp + 20929136 + (1 << 2) >> 2])));
			fTemp63 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20929136 + (0 << 2) >> 2]))));
			fTemp64 = +(1. - +(fTemp63));
			HEAPF32[dsp + 20929144 + (0 << 2) >> 2] = +(+(+(fSlow155) * +(HEAPF32[dsp + 20929176 + (1 << 2) >> 2])) + +(+(fTemp62) + +(+(fTemp64) * +(HEAPF32[dsp + 20929144 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20929152 + (0 << 2) >> 2] = +(+(+(fTemp64) * +(HEAPF32[dsp + 20929152 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929144 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929160 + (0 << 2) >> 2] = +(+(+(fTemp64) * +(HEAPF32[dsp + 20929160 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929152 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929168 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20929168 + (1 << 2) >> 2]) * +(fTemp64)) + +(HEAPF32[dsp + 20929160 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929176 + (0 << 2) >> 2] = +(+(powf(+(fTemp63), 4.)) * +(HEAPF32[dsp + 20929168 + (0 << 2) >> 2]));
			fTemp65 = +(+(+(fTemp62) * +(1. - +(HEAPF32[dsp + 20929128 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929128 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20929176 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929184 + (0 << 2) >> 2] = +(+(fSlow156) + +(0.999 * +(HEAPF32[dsp + 20929184 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929192 + (0 << 2) >> 2] = +(+(fSlow158) + +(0.999 * +(HEAPF32[dsp + 20929192 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929200 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929200 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929208 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19781088 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929200 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929208 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19781088 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929216 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929216 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929224 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19813856 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929216 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929224 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19813856 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929232 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929232 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929240 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19846624 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929232 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929240 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19846624 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929248 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929248 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929256 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19879392 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929248 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929256 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19879392 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929264 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929264 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929272 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19912160 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929264 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929272 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19912160 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929280 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929280 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929288 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19944928 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929280 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929288 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19944928 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929296 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929296 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929304 + (1 << 2) >> 2])));
			HEAPF32[dsp + 19977696 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929296 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929304 + (0 << 2) >> 2] = +(HEAPF32[dsp + 19977696 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929312 + (0 << 2) >> 2] = +(+(+(fSlow161) * +(HEAPF32[dsp + 20929312 + (1 << 2) >> 2])) + +(+(fSlow160) * +(HEAPF32[dsp + 20929320 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20010464 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp65) + +(+(fSlow159) * +(HEAPF32[dsp + 20929312 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929320 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20010464 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp66 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF32[dsp + 20929328 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929208 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929224 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929240 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929256 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929272 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929288 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929304 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20929320 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20862432 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp66);
			HEAPF32[dsp + 20929328 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20862432 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec152 = +(0. - +(0.5 * +(fTemp66)));
			fTemp67 = +(+(+(0.5 * +(HEAPF32[dsp + 20929336 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929328 + (1 << 2) >> 2])) + +(fRec152));
			HEAPF32[dsp + 20866528 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp67);
			HEAPF32[dsp + 20929336 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20866528 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec150 = +(0. - +(0.5 * +(fTemp67)));
			fTemp68 = +(+(+(0.5 * +(HEAPF32[dsp + 20929344 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929336 + (1 << 2) >> 2])) + +(fRec150));
			HEAPF32[dsp + 20870624 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp68);
			HEAPF32[dsp + 20929344 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20870624 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec148 = +(0. - +(0.5 * +(fTemp68)));
			fTemp69 = +(+(+(0.5 * +(HEAPF32[dsp + 20929352 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929344 + (1 << 2) >> 2])) + +(fRec148));
			HEAPF32[dsp + 20874720 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp69);
			HEAPF32[dsp + 20929352 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20874720 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec146 = +(0. - +(0.5 * +(fTemp69)));
			HEAPF32[dsp + 20929360 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929360 + (1 << 2) >> 2])) + +(fSlow162));
			fTemp70 = +(+(+(+(fTemp65) * +(1. - +(HEAPF32[dsp + 20929184 + (0 << 2) >> 2]))) + +(+(+(+(fTemp65) * +(1. - +(HEAPF32[dsp + 20929192 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 20929352 + (1 << 2) >> 2]) + +(fRec146)) * +(HEAPF32[dsp + 20929192 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929184 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929360 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929368 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20929368 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp70)))));
			HEAPF32[dsp + 20931012 >> 2] = +(+(HEAPF32[dsp + 20929368 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929376 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929376 + (1 << 2) >> 2])) + +(fSlow163));
			fTemp71 = +(0. - +(HEAPF32[dsp + 20929376 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929384 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929384 + (1 << 2) >> 2])) + +(fSlow164));
			fTemp72 = +(powf(+(+(faustpower2_f(+(fTemp71))) + +(faustpower2_f(+(HEAPF32[dsp + 20929384 + (0 << 2) >> 2])))), 0.5));
			iTemp73 = ((+(fTemp72) > 1.) | 0);
			iTemp74 = ((+(fTemp72) < 1.) | 0);
			fTemp75 = +(+((iTemp73 | 0)) + +(+(fTemp72) * +((iTemp74 | 0))));
			fTemp76 = +(+(fTemp70) * +(1. + +(1.38629 * +(0. - +(+(fTemp75) - 1.)))));
			fTemp77 = +(1.38629 * +(fTemp75));
			fTemp78 = +(+(fTemp77) - 0.693147);
			fTemp79 = +(2.4663 * +(fTemp78));
			fTemp80 = +(+(2.4663 * +(+(+(fTemp78) * +(((+(fTemp79) > 0.) | 0))) * +(((+(fTemp79) <= 1.) | 0)))) + +(((+(fTemp79) > 1.) | 0)));
			fTemp81 = +(atan2f(+(fTemp71), +(HEAPF32[dsp + 20929384 + (0 << 2) >> 2])));
			fTemp82 = +(2. * +(fTemp81));
			fTemp83 = +(+(+(faustpower2_f(+(fTemp72))) * +((iTemp73 | 0))) + +((iTemp74 | 0)));
			HEAPF32[dsp + 20929392 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929392 + (1 << 2) >> 2])) + +(fSlow165));
			HEAPF32[dsp + 20929400 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow166):+(HEAPF32[dsp + 20929400 + (1 << 2) >> 2]));
			iTemp84 = ((+(HEAPF32[dsp + 20929400 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20929408 + (0 << 2) >> 2] = (iTemp84 | 0);
			HEAP32[dsp + 20929416 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20929416 + (1 << 2) >> 2] | 0) + (iTemp84 | 0)) | 0), (iTemp84 | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 5554144 + ((HEAP32[dsp + 20929416 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp85 = ((+(HEAPF32[dsp + 20929400 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20929424 + (0 << 2) >> 2] = (imul((((HEAP32[dsp + 20929424 + (1 << 2) >> 2] | 0) + (iTemp84 | 0)) | 0), ((1 - (((iTemp84 | 0) > (HEAP32[dsp + 20929408 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20929432 + (0 << 2) >> 2] = (((imul((((HEAP32[dsp + 20929432 + (1 << 2) >> 2] | 0) + (iTemp85 | 0)) | 0), (iTemp85 | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20929424 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20929440 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929440 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20929400 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20929448 + (0 << 2) >> 2] = +(+(fSlow167) + +(0.999 * +(HEAPF32[dsp + 20929448 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929456 + (0 << 2) >> 2] = +(+(fSlow186) + +(0.99 * +(HEAPF32[dsp + 20929456 + (1 << 2) >> 2])));
			fTemp86 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 5554144 + (((max(~~((HEAP32[dsp + 20929416 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929432 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20929456 + (0 << 2) >> 2]))))))) * +(HEAPF32[dsp + 20929440 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20928028 + (0 << 2) >> 2] = +(+(+(fTemp86) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp86)))))) - +(+(fSlow183) * +(+(+(+(+(fSlow190) * +(HEAPF32[dsp + 20928028 + (1 << 2) >> 2])) + +(+(fSlow192) * +(HEAPF32[dsp + 20928028 + (2 << 2) >> 2]))) + +(+(fSlow193) * +(HEAPF32[dsp + 20928028 + (3 << 2) >> 2]))) + +(+(fSlow194) * +(HEAPF32[dsp + 20928028 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928124 + (0 << 2) >> 2] = +(+(+(fSlow183) * +(+(+(+(+(+(fSlow185) * +(HEAPF32[dsp + 20928028 + (0 << 2) >> 2])) + +(+(fSlow195) * +(HEAPF32[dsp + 20928028 + (1 << 2) >> 2]))) + +(+(fSlow196) * +(HEAPF32[dsp + 20928028 + (2 << 2) >> 2]))) + +(+(fSlow195) * +(HEAPF32[dsp + 20928028 + (3 << 2) >> 2]))) + +(+(fSlow198) * +(HEAPF32[dsp + 20928028 + (4 << 2) >> 2])))) - +(+(fSlow175) * +(+(+(fSlow199) * +(HEAPF32[dsp + 20928124 + (1 << 2) >> 2])) + +(+(fSlow200) * +(HEAPF32[dsp + 20928124 + (2 << 2) >> 2])))));
			fTemp87 = +(+(+(+(HEAPF32[dsp + 5554144 + (((max(~~((HEAP32[dsp + 20929416 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929432 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20929440 + (0 << 2) >> 2])) * +(1. - +(HEAPF32[dsp + 20929448 + (0 << 2) >> 2]))) + +(+(fSlow175) * +(+(+(+(fSlow177) * +(HEAPF32[dsp + 20928124 + (2 << 2) >> 2])) + +(+(fSlow176) * +(HEAPF32[dsp + 20928124 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929448 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 20929464 + (0 << 2) >> 2] = +(+(fSlow201) + +(0.999 * +(HEAPF32[dsp + 20929464 + (1 << 2) >> 2])));
			HEAPF32[dsp + 18197200 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp87);
			HEAPF32[dsp + 20929472 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20929472 + (1 << 2) >> 2]) % +(fSlow202)) + +(fSlow203));
			HEAPF32[dsp + 20929480 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20929472 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20929472 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20929480 + (1 << 2) >> 2]));
			fTemp88 = +(+(+(fTemp87) * +(1. - +(HEAPF32[dsp + 20929464 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 18197200 + (~~(+(+(HEAPF32[dsp + 20929472 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20929480 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow204) * +(HEAPF32[dsp + 20929472 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 20929464 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929488 + (0 << 2) >> 2] = +(+(fSlow205) + +(0.999 * +(HEAPF32[dsp + 20929488 + (1 << 2) >> 2])));
			fSel6 = 0.;
			if ((((((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow206) != +(HEAPF32[dsp + 20929512 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel6 = 0.00390625;
				
			} else {
				fSel6 = +(((((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow206) != +(HEAPF32[dsp + 20929520 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel7 = 0.;
			if ((((+(HEAPF32[dsp + 20929496 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel7 = +(((((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20929496 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel7 = +(fSel6);
				
			}
			HEAPF32[dsp + 20929496 + (0 << 2) >> 2] = +(fSel7);
			HEAPF32[dsp + 20929504 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) + +(fSel7))))));
			HEAPF32[dsp + 20929512 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20929520 + (1 << 2) >> 2]) != +(fSlow206)) | 0)) | 0)?+(fSlow206):+(HEAPF32[dsp + 20929512 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929520 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929504 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20929512 + (1 << 2) >> 2]) != +(fSlow206)) | 0)) | 0)?+(fSlow206):+(HEAPF32[dsp + 20929520 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929528 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929528 + (1 << 2) >> 2])) + +(fSlow207));
			HEAPF32[dsp + 13991872 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp88) + +(+(+(+(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929512 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20929504 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929520 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2]) * +(HEAPF32[dsp + 20929504 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 20929528 + (0 << 2) >> 2])));
			fTemp89 = +(+(+(fTemp88) * +(1. - +(HEAPF32[dsp + 20929488 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929488 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13991872 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20929536 + (0 << 2) >> 2] = +(+(fSlow208) + +(0.999 * +(HEAPF32[dsp + 20929536 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929544 + (0 << 2) >> 2] = +(+(fSlow209) + +(0.99 * +(HEAPF32[dsp + 20929544 + (1 << 2) >> 2])));
			fTemp90 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20929544 + (0 << 2) >> 2]))));
			fTemp91 = +(1. - +(fTemp90));
			HEAPF32[dsp + 20929552 + (0 << 2) >> 2] = +(+(+(fSlow210) * +(HEAPF32[dsp + 20929584 + (1 << 2) >> 2])) + +(+(fTemp89) + +(+(fTemp91) * +(HEAPF32[dsp + 20929552 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20929560 + (0 << 2) >> 2] = +(+(+(fTemp91) * +(HEAPF32[dsp + 20929560 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929552 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929568 + (0 << 2) >> 2] = +(+(+(fTemp91) * +(HEAPF32[dsp + 20929568 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929560 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929576 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20929576 + (1 << 2) >> 2]) * +(fTemp91)) + +(HEAPF32[dsp + 20929568 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929584 + (0 << 2) >> 2] = +(+(powf(+(fTemp90), 4.)) * +(HEAPF32[dsp + 20929576 + (0 << 2) >> 2]));
			fTemp92 = +(+(+(fTemp89) * +(1. - +(HEAPF32[dsp + 20929536 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929536 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20929584 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929592 + (0 << 2) >> 2] = +(+(fSlow211) + +(0.999 * +(HEAPF32[dsp + 20929592 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929600 + (0 << 2) >> 2] = +(+(fSlow213) + +(0.999 * +(HEAPF32[dsp + 20929600 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929608 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929608 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929616 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20043232 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929608 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929616 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20043232 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929624 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929624 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929632 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20076000 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929624 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929632 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20076000 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929640 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929640 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929648 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20108768 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929640 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929648 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20108768 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929656 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929656 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929664 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20141536 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929656 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929664 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20141536 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929672 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929672 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929680 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20174304 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929672 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929680 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20174304 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929688 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929688 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929696 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20207072 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929688 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929696 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20207072 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929704 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929704 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929712 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20239840 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929704 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929712 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20239840 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20929720 + (0 << 2) >> 2] = +(+(+(fSlow216) * +(HEAPF32[dsp + 20929720 + (1 << 2) >> 2])) + +(+(fSlow215) * +(HEAPF32[dsp + 20929728 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20272608 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp92) + +(+(fSlow214) * +(HEAPF32[dsp + 20929720 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20929728 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20272608 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp93 = +(+(HEAPF32[dsp + 20929616 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929632 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929648 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929664 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929680 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929696 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929712 + (0 << 2) >> 2]) + +(+(0.5 * +(HEAPF32[dsp + 20929736 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929728 + (0 << 2) >> 2])))))))));
			HEAPF32[dsp + 20878816 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp93);
			HEAPF32[dsp + 20929736 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20878816 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec209 = +(0. - +(0.5 * +(fTemp93)));
			fTemp94 = +(+(fRec209) + +(+(0.5 * +(HEAPF32[dsp + 20929744 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929736 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20882912 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp94);
			HEAPF32[dsp + 20929744 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20882912 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec207 = +(0. - +(0.5 * +(fTemp94)));
			fTemp95 = +(+(fRec207) + +(+(0.5 * +(HEAPF32[dsp + 20929752 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929744 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20887008 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp95);
			HEAPF32[dsp + 20929752 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20887008 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec205 = +(0. - +(0.5 * +(fTemp95)));
			fTemp96 = +(+(fRec205) + +(+(0.5 * +(HEAPF32[dsp + 20929760 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 20929752 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20891104 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp96);
			HEAPF32[dsp + 20929760 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20891104 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec203 = +(0. - +(0.5 * +(fTemp96)));
			fTemp97 = +(+(HEAPF32[dsp + 20929392 + (0 << 2) >> 2]) * +(+(+(fTemp92) * +(1. - +(HEAPF32[dsp + 20929592 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929592 + (0 << 2) >> 2]) * +(+(+(fTemp92) * +(1. - +(HEAPF32[dsp + 20929600 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 20929600 + (0 << 2) >> 2]) * +(+(HEAPF32[dsp + 20929760 + (1 << 2) >> 2]) + +(fRec203)))))));
			HEAPF32[dsp + 20929768 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20929768 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp97)))));
			HEAPF32[dsp + 20931092 >> 2] = +(+(HEAPF32[dsp + 20929768 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20929776 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929776 + (1 << 2) >> 2])) + +(fSlow217));
			HEAPF32[dsp + 20929784 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929784 + (1 << 2) >> 2])) + +(fSlow218));
			fTemp98 = +(0. - +(HEAPF32[dsp + 20929784 + (0 << 2) >> 2]));
			fTemp99 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20929776 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp98)))), 0.5));
			iTemp100 = ((+(fTemp99) > 1.) | 0);
			iTemp101 = ((+(fTemp99) < 1.) | 0);
			fTemp102 = +(+((iTemp100 | 0)) + +(+(fTemp99) * +((iTemp101 | 0))));
			fTemp103 = +(+(fTemp97) * +(1. + +(1.38629 * +(0. - +(+(fTemp102) - 1.)))));
			fTemp104 = +(1.38629 * +(fTemp102));
			fTemp105 = +(+(fTemp104) - 0.693147);
			fTemp106 = +(2.4663 * +(fTemp105));
			fTemp107 = +(+(2.4663 * +(+(+(fTemp105) * +(((+(fTemp106) > 0.) | 0))) * +(((+(fTemp106) <= 1.) | 0)))) + +(((+(fTemp106) > 1.) | 0)));
			fTemp108 = +(atan2f(+(fTemp98), +(HEAPF32[dsp + 20929776 + (0 << 2) >> 2])));
			fTemp109 = +(2. * +(fTemp108));
			fTemp110 = +(+(+(faustpower2_f(+(fTemp99))) * +((iTemp100 | 0))) + +((iTemp101 | 0)));
			HEAPF32[dsp + 20929792 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20929792 + (1 << 2) >> 2])) + +(fSlow219));
			HEAPF32[dsp + 20929800 + (0 << 2) >> 2] = +(+(fSlow220) + +(0.999 * +(HEAPF32[dsp + 20929800 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929808 + (0 << 2) >> 2] = +(+(fSlow221) + +(0.999 * +(HEAPF32[dsp + 20929808 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929816 + (0 << 2) >> 2] = +(+(fSlow222) + +(0.999 * +(HEAPF32[dsp + 20929816 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929824 + (0 << 2) >> 2] = +(+(fSlow223) + +(0.999 * +(HEAPF32[dsp + 20929824 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929832 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow224):+(HEAPF32[dsp + 20929832 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929840 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929840 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20929832 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20929848 + (0 << 2) >> 2] = +(+(fSlow225) + +(0.999 * +(HEAPF32[dsp + 20929848 + (1 << 2) >> 2])));
			iTemp111 = ((+(HEAPF32[dsp + 20929832 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20929856 + (0 << 2) >> 2] = (iTemp111 | 0);
			HEAP32[dsp + 20929864 + (0 << 2) >> 2] = (((imul((iTemp111 | 0), (((iTemp111 | 0) + (HEAP32[dsp + 20929864 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 7318144 + ((HEAP32[dsp + 20929864 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp112 = ((+(HEAPF32[dsp + 20929832 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20929872 + (0 << 2) >> 2] = (imul((((iTemp111 | 0) + (HEAP32[dsp + 20929872 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp111 | 0) > (HEAP32[dsp + 20929856 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20929880 + (0 << 2) >> 2] = (((imul((iTemp112 | 0), (((iTemp112 | 0) + (HEAP32[dsp + 20929880 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20929872 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20929888 + (0 << 2) >> 2] = +(+(fSlow244) + +(0.99 * +(HEAPF32[dsp + 20929888 + (1 << 2) >> 2])));
			fTemp113 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20929840 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 7318144 + (((max(~~((HEAP32[dsp + 20929864 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929880 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20929888 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20928048 + (0 << 2) >> 2] = +(+(+(fTemp113) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp113)))))) - +(+(fSlow241) * +(+(+(+(+(fSlow248) * +(HEAPF32[dsp + 20928048 + (1 << 2) >> 2])) + +(+(fSlow250) * +(HEAPF32[dsp + 20928048 + (2 << 2) >> 2]))) + +(+(fSlow251) * +(HEAPF32[dsp + 20928048 + (3 << 2) >> 2]))) + +(+(fSlow252) * +(HEAPF32[dsp + 20928048 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928136 + (0 << 2) >> 2] = +(+(+(fSlow241) * +(+(+(+(+(+(fSlow243) * +(HEAPF32[dsp + 20928048 + (0 << 2) >> 2])) + +(+(fSlow253) * +(HEAPF32[dsp + 20928048 + (1 << 2) >> 2]))) + +(+(fSlow254) * +(HEAPF32[dsp + 20928048 + (2 << 2) >> 2]))) + +(+(fSlow253) * +(HEAPF32[dsp + 20928048 + (3 << 2) >> 2]))) + +(+(fSlow256) * +(HEAPF32[dsp + 20928048 + (4 << 2) >> 2])))) - +(+(fSlow233) * +(+(+(fSlow257) * +(HEAPF32[dsp + 20928136 + (1 << 2) >> 2])) + +(+(fSlow258) * +(HEAPF32[dsp + 20928136 + (2 << 2) >> 2])))));
			fTemp114 = +(+(+(+(HEAPF32[dsp + 20929840 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20929848 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 7318144 + (((max(~~((HEAP32[dsp + 20929864 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20929880 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) + +(+(fSlow233) * +(+(HEAPF32[dsp + 20929848 + (0 << 2) >> 2]) * +(+(+(fSlow235) * +(HEAPF32[dsp + 20928136 + (2 << 2) >> 2])) + +(+(fSlow234) * +(HEAPF32[dsp + 20928136 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18550400 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp114);
			HEAPF32[dsp + 20929896 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20929896 + (1 << 2) >> 2]) % +(fSlow259)) + +(fSlow260));
			HEAPF32[dsp + 20929904 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20929896 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20929896 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20929904 + (1 << 2) >> 2]));
			fTemp115 = +(+(+(1. - +(HEAPF32[dsp + 20929824 + (0 << 2) >> 2])) * +(fTemp114)) + +(+(+(HEAPF32[dsp + 20929824 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18550400 + (~~(+(+(HEAPF32[dsp + 20929896 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20929904 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow261) * +(HEAPF32[dsp + 20929896 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20929912 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20929912 + (1 << 2) >> 2])) + +(fSlow262));
			fSel8 = 0.;
			if ((((((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow263) != +(HEAPF32[dsp + 20929936 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel8 = 0.00390625;
				
			} else {
				fSel8 = +(((((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow263) != +(HEAPF32[dsp + 20929944 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel9 = 0.;
			if ((((+(HEAPF32[dsp + 20929920 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel9 = +(((((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20929920 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel9 = +(fSel8);
				
			}
			HEAPF32[dsp + 20929920 + (0 << 2) >> 2] = +(fSel9);
			HEAPF32[dsp + 20929928 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) + +(fSel9))))));
			HEAPF32[dsp + 20929936 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20929944 + (1 << 2) >> 2]) != +(fSlow263)) | 0)) | 0)?+(fSlow263):+(HEAPF32[dsp + 20929936 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20929944 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20929928 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20929936 + (1 << 2) >> 2]) != +(fSlow263)) | 0)) | 0)?+(fSlow263):+(HEAPF32[dsp + 20929944 + (1 << 2) >> 2]));
			HEAPF32[dsp + 15040448 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp115) + +(+(HEAPF32[dsp + 20929912 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20929928 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929936 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 20929928 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20929944 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp116 = +(+(+(1. - +(HEAPF32[dsp + 20929816 + (0 << 2) >> 2])) * +(fTemp115)) + +(+(HEAPF32[dsp + 20929816 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 15040448 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20929952 + (0 << 2) >> 2] = +(+(fSlow265) + +(0.99 * +(HEAPF32[dsp + 20929952 + (1 << 2) >> 2])));
			fTemp117 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20929952 + (0 << 2) >> 2]))));
			fTemp118 = +(1. - +(fTemp117));
			HEAPF32[dsp + 20929960 + (0 << 2) >> 2] = +(+(+(fSlow264) * +(HEAPF32[dsp + 20929992 + (1 << 2) >> 2])) + +(+(fTemp116) + +(+(fTemp118) * +(HEAPF32[dsp + 20929960 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20929968 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20929960 + (0 << 2) >> 2]) + +(+(fTemp118) * +(HEAPF32[dsp + 20929968 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929976 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20929968 + (0 << 2) >> 2]) + +(+(fTemp118) * +(HEAPF32[dsp + 20929976 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20929984 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20929976 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20929984 + (1 << 2) >> 2]) * +(fTemp118)));
			HEAPF32[dsp + 20929992 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20929984 + (0 << 2) >> 2]) * +(powf(+(fTemp117), 4.)));
			fTemp119 = +(+(+(1. - +(HEAPF32[dsp + 20929808 + (0 << 2) >> 2])) * +(fTemp116)) + +(+(HEAPF32[dsp + 20929808 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20929992 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930000 + (0 << 2) >> 2] = +(+(fSlow267) + +(0.999 * +(HEAPF32[dsp + 20930000 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930008 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930008 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20305376 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930008 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930016 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20305376 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930024 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930024 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930032 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20338144 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930024 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930032 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20338144 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930040 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930040 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930048 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20370912 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930040 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930048 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20370912 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930056 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930056 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930064 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20403680 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930056 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930064 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20403680 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930072 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930072 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930080 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20436448 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930072 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930080 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20436448 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930088 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930088 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930096 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20469216 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930088 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930096 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20469216 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930104 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930104 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930112 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20501984 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930104 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930112 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20501984 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930120 + (0 << 2) >> 2] = +(+(+(fSlow270) * +(HEAPF32[dsp + 20930120 + (1 << 2) >> 2])) + +(+(fSlow269) * +(HEAPF32[dsp + 20930128 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20534752 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp119) + +(+(fSlow268) * +(HEAPF32[dsp + 20930120 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930128 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20534752 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp120 = +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 20930016 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 20930032 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930048 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930064 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930080 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930096 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930112 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930128 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20930136 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20895200 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp120);
			HEAPF32[dsp + 20930136 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20895200 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec265 = +(0. - +(0.5 * +(fTemp120)));
			fTemp121 = +(+(HEAPF32[dsp + 20930136 + (1 << 2) >> 2]) + +(+(fRec265) + +(0.5 * +(HEAPF32[dsp + 20930144 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20899296 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp121);
			HEAPF32[dsp + 20930144 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20899296 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec263 = +(0. - +(0.5 * +(fTemp121)));
			fTemp122 = +(+(HEAPF32[dsp + 20930144 + (1 << 2) >> 2]) + +(+(fRec263) + +(0.5 * +(HEAPF32[dsp + 20930152 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20903392 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp122);
			HEAPF32[dsp + 20930152 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20903392 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec261 = +(0. - +(0.5 * +(fTemp122)));
			fTemp123 = +(+(HEAPF32[dsp + 20930152 + (1 << 2) >> 2]) + +(+(fRec261) + +(0.5 * +(HEAPF32[dsp + 20930160 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20907488 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp123);
			HEAPF32[dsp + 20930160 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20907488 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec259 = +(0. - +(0.5 * +(fTemp123)));
			fTemp124 = +(+(HEAPF32[dsp + 20929792 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20929800 + (0 << 2) >> 2])) * +(fTemp119)) + +(+(HEAPF32[dsp + 20929800 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20930000 + (0 << 2) >> 2])) * +(fTemp119)) + +(+(HEAPF32[dsp + 20930000 + (0 << 2) >> 2]) * +(+(fRec259) + +(HEAPF32[dsp + 20930160 + (1 << 2) >> 2])))))));
			HEAPF32[dsp + 20930168 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20930168 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp124)))));
			HEAPF32[dsp + 20931172 >> 2] = +(+(HEAPF32[dsp + 20930168 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20930176 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930176 + (1 << 2) >> 2])) + +(fSlow271));
			HEAPF32[dsp + 20930184 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930184 + (1 << 2) >> 2])) + +(fSlow272));
			fTemp125 = +(0. - +(HEAPF32[dsp + 20930184 + (0 << 2) >> 2]));
			fTemp126 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20930176 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp125)))), 0.5));
			iTemp127 = ((+(fTemp126) > 1.) | 0);
			iTemp128 = ((+(fTemp126) < 1.) | 0);
			fTemp129 = +(+((iTemp127 | 0)) + +(+(fTemp126) * +((iTemp128 | 0))));
			fTemp130 = +(+(fTemp124) * +(1. + +(1.38629 * +(0. - +(+(fTemp129) - 1.)))));
			fTemp131 = +(1.38629 * +(fTemp129));
			fTemp132 = +(+(fTemp131) - 0.693147);
			fTemp133 = +(2.4663 * +(fTemp132));
			fTemp134 = +(+(2.4663 * +(+(+(fTemp132) * +(((+(fTemp133) > 0.) | 0))) * +(((+(fTemp133) <= 1.) | 0)))) + +(((+(fTemp133) > 1.) | 0)));
			fTemp135 = +(atan2f(+(fTemp125), +(HEAPF32[dsp + 20930176 + (0 << 2) >> 2])));
			fTemp136 = +(2. * +(fTemp135));
			fTemp137 = +(+(+(faustpower2_f(+(fTemp126))) * +((iTemp127 | 0))) + +((iTemp128 | 0)));
			HEAPF32[dsp + 20930192 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930192 + (1 << 2) >> 2])) + +(fSlow273));
			HEAPF32[dsp + 20930200 + (0 << 2) >> 2] = +(+(fSlow274) + +(0.999 * +(HEAPF32[dsp + 20930200 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930208 + (0 << 2) >> 2] = +(+(fSlow275) + +(0.999 * +(HEAPF32[dsp + 20930208 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930216 + (0 << 2) >> 2] = +(+(fSlow276) + +(0.999 * +(HEAPF32[dsp + 20930216 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930224 + (0 << 2) >> 2] = +(+(fSlow277) + +(0.999 * +(HEAPF32[dsp + 20930224 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930232 + (0 << 2) >> 2] = +((iTemp0 | 0)?+(fSlow278):+(HEAPF32[dsp + 20930232 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20930240 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20930240 + (1 << 2) >> 2])) + +(0.01 * +(min(1., +(HEAPF32[dsp + 20930232 + (0 << 2) >> 2])))));
			HEAPF32[dsp + 20930248 + (0 << 2) >> 2] = +(+(fSlow279) + +(0.999 * +(HEAPF32[dsp + 20930248 + (1 << 2) >> 2])));
			iTemp138 = ((+(HEAPF32[dsp + 20930232 + (0 << 2) >> 2]) == 2.) | 0);
			HEAP32[dsp + 20930256 + (0 << 2) >> 2] = (iTemp138 | 0);
			HEAP32[dsp + 20930264 + (0 << 2) >> 2] = (((imul((iTemp138 | 0), (((iTemp138 | 0) + (HEAP32[dsp + 20930264 + (1 << 2) >> 2] | 0)) | 0)) | 0) % 441000) | 0);
			HEAPF32[dsp + 9082144 + ((HEAP32[dsp + 20930264 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp2);
			iTemp139 = ((+(HEAPF32[dsp + 20930232 + (0 << 2) >> 2]) == 3.) | 0);
			HEAP32[dsp + 20930272 + (0 << 2) >> 2] = (imul((((iTemp138 | 0) + (HEAP32[dsp + 20930272 + (1 << 2) >> 2] | 0)) | 0), ((1 - (((iTemp138 | 0) > (HEAP32[dsp + 20930256 + (1 << 2) >> 2] | 0)) | 0)) | 0)) | 0);
			HEAP32[dsp + 20930280 + (0 << 2) >> 2] = (((imul((iTemp139 | 0), (((iTemp139 | 0) + (HEAP32[dsp + 20930280 + (1 << 2) >> 2] | 0)) | 0)) | 0) % ((max(10, ~~((HEAP32[dsp + 20930272 + (0 << 2) >> 2] | 0)))) | 0)) | 0);
			HEAPF32[dsp + 20930288 + (0 << 2) >> 2] = +(+(fSlow298) + +(0.99 * +(HEAPF32[dsp + 20930288 + (1 << 2) >> 2])));
			fTemp140 = +(max(-1., +(min(1., +(+(+(HEAPF32[dsp + 20930240 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 9082144 + (((max(~~((HEAP32[dsp + 20930264 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20930280 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) * +(powf(10., +(2. * +(0.5 + +(0.0025 * +(HEAPF32[dsp + 20930288 + (0 << 2) >> 2])))))))))));
			HEAPF32[dsp + 20928068 + (0 << 2) >> 2] = +(+(+(fTemp140) * +(1. - +(0.333333 * +(faustpower2_f(+(fTemp140)))))) - +(+(fSlow295) * +(+(+(+(+(fSlow302) * +(HEAPF32[dsp + 20928068 + (1 << 2) >> 2])) + +(+(fSlow304) * +(HEAPF32[dsp + 20928068 + (2 << 2) >> 2]))) + +(+(fSlow305) * +(HEAPF32[dsp + 20928068 + (3 << 2) >> 2]))) + +(+(fSlow306) * +(HEAPF32[dsp + 20928068 + (4 << 2) >> 2])))));
			HEAPF32[dsp + 20928148 + (0 << 2) >> 2] = +(+(+(fSlow295) * +(+(+(+(+(+(fSlow297) * +(HEAPF32[dsp + 20928068 + (0 << 2) >> 2])) + +(+(fSlow307) * +(HEAPF32[dsp + 20928068 + (1 << 2) >> 2]))) + +(+(fSlow308) * +(HEAPF32[dsp + 20928068 + (2 << 2) >> 2]))) + +(+(fSlow307) * +(HEAPF32[dsp + 20928068 + (3 << 2) >> 2]))) + +(+(fSlow310) * +(HEAPF32[dsp + 20928068 + (4 << 2) >> 2])))) - +(+(fSlow287) * +(+(+(fSlow311) * +(HEAPF32[dsp + 20928148 + (1 << 2) >> 2])) + +(+(fSlow312) * +(HEAPF32[dsp + 20928148 + (2 << 2) >> 2])))));
			fTemp141 = +(+(+(+(HEAPF32[dsp + 20930240 + (0 << 2) >> 2]) * +(1. - +(HEAPF32[dsp + 20930248 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 9082144 + (((max(~~((HEAP32[dsp + 20930264 + (0 << 2) >> 2] | 0)), ~~((HEAP32[dsp + 20930280 + (0 << 2) >> 2] | 0)))) | 0) << 2) >> 2])) + +(+(fSlow287) * +(+(HEAPF32[dsp + 20930248 + (0 << 2) >> 2]) * +(+(+(fSlow289) * +(HEAPF32[dsp + 20928148 + (2 << 2) >> 2])) + +(+(fSlow288) * +(HEAPF32[dsp + 20928148 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 18903600 + ((HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp141);
			HEAPF32[dsp + 20930296 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 20930296 + (1 << 2) >> 2]) % +(fSlow313)) + +(fSlow314));
			HEAPF32[dsp + 20930304 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 20930296 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 20930296 + (1 << 2) >> 2])) | 0)?+(fTemp6):+(HEAPF32[dsp + 20930304 + (1 << 2) >> 2]));
			fTemp142 = +(+(+(1. - +(HEAPF32[dsp + 20930224 + (0 << 2) >> 2])) * +(fTemp141)) + +(+(+(HEAPF32[dsp + 20930224 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 18903600 + (~~(+(+(HEAPF32[dsp + 20930296 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 20930304 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow315) * +(HEAPF32[dsp + 20930296 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 20930312 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 20930312 + (1 << 2) >> 2])) + +(fSlow316));
			fSel10 = 0.;
			if ((((((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow317) != +(HEAPF32[dsp + 20930336 + (1 << 2) >> 2])) | 0)) | 0) != 0) | 0) {
				fSel10 = 0.00390625;
				
			} else {
				fSel10 = +(((((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow317) != +(HEAPF32[dsp + 20930344 + (1 << 2) >> 2])) | 0)) | 0)?-0.00390625:0.);
				
			}
			fSel11 = 0.;
			if ((((+(HEAPF32[dsp + 20930320 + (1 << 2) >> 2]) != 0.) | 0) != 0) | 0) {
				fSel11 = +(((((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF32[dsp + 20930320 + (1 << 2) >> 2]):0.);
				
			} else {
				fSel11 = +(fSel10);
				
			}
			HEAPF32[dsp + 20930320 + (0 << 2) >> 2] = +(fSel11);
			HEAPF32[dsp + 20930328 + (0 << 2) >> 2] = +(max(0., +(min(1., +(+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) + +(fSel11))))));
			HEAPF32[dsp + 20930336 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF32[dsp + 20930344 + (1 << 2) >> 2]) != +(fSlow317)) | 0)) | 0)?+(fSlow317):+(HEAPF32[dsp + 20930336 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20930344 + (0 << 2) >> 2] = +(((((+(HEAPF32[dsp + 20930328 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF32[dsp + 20930336 + (1 << 2) >> 2]) != +(fSlow317)) | 0)) | 0)?+(fSlow317):+(HEAPF32[dsp + 20930344 + (1 << 2) >> 2]));
			HEAPF32[dsp + 16089024 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 262143) | 0) << 2) >> 2] = +(+(fTemp142) + +(+(HEAPF32[dsp + 20930312 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20930328 + (0 << 2) >> 2])) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20930336 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 20930328 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - ((1 + ((~~(+(HEAPF32[dsp + 20930344 + (0 << 2) >> 2])) & 131071) | 0)) | 0)) | 0) & 262143) | 0) << 2) >> 2])))));
			fTemp143 = +(+(+(1. - +(HEAPF32[dsp + 20930216 + (0 << 2) >> 2])) * +(fTemp142)) + +(+(HEAPF32[dsp + 20930216 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 16089024 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - 0) | 0) & 262143) | 0) << 2) >> 2])));
			HEAPF32[dsp + 20930352 + (0 << 2) >> 2] = +(+(fSlow319) + +(0.99 * +(HEAPF32[dsp + 20930352 + (1 << 2) >> 2])));
			fTemp144 = +(+(HEAPF32[dsp + 20930776 >> 2]) * +(50. + +(10.582 * +(HEAPF32[dsp + 20930352 + (0 << 2) >> 2]))));
			fTemp145 = +(1. - +(fTemp144));
			HEAPF32[dsp + 20930360 + (0 << 2) >> 2] = +(+(+(fSlow318) * +(HEAPF32[dsp + 20930392 + (1 << 2) >> 2])) + +(+(fTemp143) + +(+(fTemp145) * +(HEAPF32[dsp + 20930360 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20930368 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20930360 + (0 << 2) >> 2]) + +(+(fTemp145) * +(HEAPF32[dsp + 20930368 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930376 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20930368 + (0 << 2) >> 2]) + +(+(fTemp145) * +(HEAPF32[dsp + 20930376 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930384 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20930376 + (0 << 2) >> 2]) + +(+(HEAPF32[dsp + 20930384 + (1 << 2) >> 2]) * +(fTemp145)));
			HEAPF32[dsp + 20930392 + (0 << 2) >> 2] = +(+(HEAPF32[dsp + 20930384 + (0 << 2) >> 2]) * +(powf(+(fTemp144), 4.)));
			fTemp146 = +(+(+(1. - +(HEAPF32[dsp + 20930208 + (0 << 2) >> 2])) * +(fTemp143)) + +(+(HEAPF32[dsp + 20930208 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 20930392 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930400 + (0 << 2) >> 2] = +(+(fSlow321) + +(0.999 * +(HEAPF32[dsp + 20930400 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20930408 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930408 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930416 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20567520 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930408 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930416 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20567520 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930800 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930424 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930424 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930432 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20600288 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930424 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930432 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20600288 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930804 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930440 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930440 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930448 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20633056 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930440 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930448 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20633056 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930456 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930456 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930464 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20665824 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930456 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930464 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20665824 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930812 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930472 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930472 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930480 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20698592 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930472 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930480 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20698592 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930488 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930488 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930496 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20731360 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930488 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930496 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20731360 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930820 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930504 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930504 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930512 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20764128 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930504 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930512 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20764128 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930824 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF32[dsp + 20930520 + (0 << 2) >> 2] = +(+(+(fSlow324) * +(HEAPF32[dsp + 20930520 + (1 << 2) >> 2])) + +(+(fSlow323) * +(HEAPF32[dsp + 20930528 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20796896 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp146) + +(+(fSlow322) * +(HEAPF32[dsp + 20930520 + (0 << 2) >> 2])));
			HEAPF32[dsp + 20930528 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20796896 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930828 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp147 = +(+(+(+(+(+(+(+(+(HEAPF32[dsp + 20930416 + (0 << 2) >> 2]) + +(HEAPF32[dsp + 20930432 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930448 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930464 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930480 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930496 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930512 + (0 << 2) >> 2])) + +(HEAPF32[dsp + 20930528 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF32[dsp + 20930536 + (1 << 2) >> 2])));
			HEAPF32[dsp + 20911584 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp147);
			HEAPF32[dsp + 20930536 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20911584 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930832 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec321 = +(0. - +(0.5 * +(fTemp147)));
			fTemp148 = +(+(HEAPF32[dsp + 20930536 + (1 << 2) >> 2]) + +(+(fRec321) + +(0.5 * +(HEAPF32[dsp + 20930544 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20915680 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp148);
			HEAPF32[dsp + 20930544 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20915680 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930836 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec319 = +(0. - +(0.5 * +(fTemp148)));
			fTemp149 = +(+(HEAPF32[dsp + 20930544 + (1 << 2) >> 2]) + +(+(fRec319) + +(0.5 * +(HEAPF32[dsp + 20930552 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20919776 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp149);
			HEAPF32[dsp + 20930552 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20919776 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930840 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec317 = +(0. - +(0.5 * +(fTemp149)));
			fTemp150 = +(+(HEAPF32[dsp + 20930552 + (1 << 2) >> 2]) + +(+(fRec317) + +(0.5 * +(HEAPF32[dsp + 20930560 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 20923872 + ((((HEAP32[dsp + 20930768 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp150);
			HEAPF32[dsp + 20930560 + (0 << 2) >> 2] = +(HEAPF32[dsp + 20923872 + ((((((HEAP32[dsp + 20930768 >> 2] | 0) - (HEAP32[dsp + 20930844 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec315 = +(0. - +(0.5 * +(fTemp150)));
			fTemp151 = +(+(HEAPF32[dsp + 20930192 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20930200 + (0 << 2) >> 2])) * +(fTemp146)) + +(+(HEAPF32[dsp + 20930200 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 20930400 + (0 << 2) >> 2])) * +(fTemp146)) + +(+(HEAPF32[dsp + 20930400 + (0 << 2) >> 2]) * +(+(fRec315) + +(HEAPF32[dsp + 20930560 + (1 << 2) >> 2])))))));
			HEAPF32[dsp + 20930568 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20930568 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp151)))));
			HEAPF32[dsp + 20931252 >> 2] = +(+(HEAPF32[dsp + 20930568 + (0 << 2) >> 2]));
			HEAPF32[dsp + 20930576 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930576 + (1 << 2) >> 2])) + +(fSlow325));
			HEAPF32[dsp + 20930584 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930584 + (1 << 2) >> 2])) + +(fSlow326));
			fTemp152 = +(0. - +(HEAPF32[dsp + 20930584 + (0 << 2) >> 2]));
			fTemp153 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 20930576 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp152)))), 0.5));
			iTemp154 = ((+(fTemp153) > 1.) | 0);
			iTemp155 = ((+(fTemp153) < 1.) | 0);
			fTemp156 = +(+((iTemp154 | 0)) + +(+(fTemp153) * +((iTemp155 | 0))));
			fTemp157 = +(+(fTemp151) * +(1. + +(1.38629 * +(0. - +(+(fTemp156) - 1.)))));
			fTemp158 = +(1.38629 * +(fTemp156));
			fTemp159 = +(+(fTemp158) - 0.693147);
			fTemp160 = +(2.4663 * +(fTemp159));
			fTemp161 = +(+(2.4663 * +(+(+(fTemp159) * +(((+(fTemp160) > 0.) | 0))) * +(((+(fTemp160) <= 1.) | 0)))) + +(((+(fTemp160) > 1.) | 0)));
			fTemp162 = +(atan2f(+(fTemp152), +(HEAPF32[dsp + 20930576 + (0 << 2) >> 2])));
			fTemp163 = +(2. * +(fTemp162));
			fTemp164 = +(+(+(faustpower2_f(+(fTemp153))) * +((iTemp154 | 0))) + +((iTemp155 | 0)));
			fTemp165 = +(+(+(+(+(+(+(+(+(fTemp22) * +(fTemp26)) * +(cosf(+(fTemp28)))) / +(fTemp29)) + +(+(+(+(fTemp49) * +(fTemp53)) * +(cosf(+(fTemp55)))) / +(fTemp56))) + +(+(+(+(fTemp76) * +(fTemp80)) * +(cosf(+(fTemp82)))) / +(fTemp83))) + +(+(+(+(fTemp103) * +(fTemp107)) * +(cosf(+(fTemp109)))) / +(fTemp110))) + +(+(+(+(fTemp130) * +(fTemp134)) * +(cosf(+(fTemp136)))) / +(fTemp137))) + +(+(+(+(fTemp157) * +(fTemp161)) * +(cosf(+(fTemp163)))) / +(fTemp164)));
			fTemp166 = +(+(+(+(+(+(+(fTemp22) / +(fTemp29)) + +(+(fTemp49) / +(fTemp56))) + +(+(fTemp76) / +(fTemp83))) + +(+(fTemp103) / +(fTemp110))) + +(+(fTemp130) / +(fTemp137))) + +(+(fTemp157) / +(fTemp164)));
			fTemp167 = +(0.5 * +(fTemp166));
			fTemp168 = +(2. * +(fTemp21));
			fTemp169 = +(+(2. * +(+(+(fTemp21) * +(((+(fTemp168) > 0.) | 0))) * +(((+(fTemp168) <= 1.) | 0)))) + +(((+(fTemp168) > 1.) | 0)));
			fTemp170 = +(2. * +(fTemp48));
			fTemp171 = +(+(2. * +(+(+(fTemp48) * +(((+(fTemp170) > 0.) | 0))) * +(((+(fTemp170) <= 1.) | 0)))) + +(((+(fTemp170) > 1.) | 0)));
			fTemp172 = +(2. * +(fTemp75));
			fTemp173 = +(+(2. * +(+(+(fTemp75) * +(((+(fTemp172) > 0.) | 0))) * +(((+(fTemp172) <= 1.) | 0)))) + +(((+(fTemp172) > 1.) | 0)));
			fTemp174 = +(2. * +(fTemp102));
			fTemp175 = +(+(2. * +(+(+(fTemp102) * +(((+(fTemp174) > 0.) | 0))) * +(((+(fTemp174) <= 1.) | 0)))) + +(((+(fTemp174) > 1.) | 0)));
			fTemp176 = +(2. * +(fTemp129));
			fTemp177 = +(+(2. * +(+(+(fTemp129) * +(((+(fTemp176) > 0.) | 0))) * +(((+(fTemp176) <= 1.) | 0)))) + +(((+(fTemp176) > 1.) | 0)));
			fTemp178 = +(2. * +(fTemp156));
			fTemp179 = +(+(2. * +(+(+(fTemp156) * +(((+(fTemp178) > 0.) | 0))) * +(((+(fTemp178) <= 1.) | 0)))) + +(((+(fTemp178) > 1.) | 0)));
			fTemp180 = +(+(+(+(+(+(+(+(+(fTemp22) * +(fTemp169)) * +(cosf(+(fTemp27)))) / +(fTemp29)) + +(+(+(+(fTemp49) * +(fTemp171)) * +(cosf(+(fTemp54)))) / +(fTemp56))) + +(+(+(+(fTemp76) * +(fTemp173)) * +(cosf(+(fTemp81)))) / +(fTemp83))) + +(+(+(+(fTemp103) * +(fTemp175)) * +(cosf(+(fTemp108)))) / +(fTemp110))) + +(+(+(+(fTemp130) * +(fTemp177)) * +(cosf(+(fTemp135)))) / +(fTemp137))) + +(+(+(+(fTemp157) * +(fTemp179)) * +(cosf(+(fTemp162)))) / +(fTemp164)));
			fTemp181 = +(+(fTemp23) - 1.09861);
			fTemp182 = +(3.47606 * +(fTemp181));
			fTemp183 = +(+(3.47606 * +(+(+(fTemp181) * +(((+(fTemp182) > 0.) | 0))) * +(((+(fTemp182) <= 1.) | 0)))) + +(((+(fTemp182) > 1.) | 0)));
			fTemp184 = +(3. * +(fTemp27));
			fTemp185 = +(+(fTemp50) - 1.09861);
			fTemp186 = +(3.47606 * +(fTemp185));
			fTemp187 = +(+(3.47606 * +(+(+(fTemp185) * +(((+(fTemp186) > 0.) | 0))) * +(((+(fTemp186) <= 1.) | 0)))) + +(((+(fTemp186) > 1.) | 0)));
			fTemp188 = +(3. * +(fTemp54));
			fTemp189 = +(+(fTemp77) - 1.09861);
			fTemp190 = +(3.47606 * +(fTemp189));
			fTemp191 = +(+(3.47606 * +(+(+(fTemp189) * +(((+(fTemp190) > 0.) | 0))) * +(((+(fTemp190) <= 1.) | 0)))) + +(((+(fTemp190) > 1.) | 0)));
			fTemp192 = +(3. * +(fTemp81));
			fTemp193 = +(+(fTemp104) - 1.09861);
			fTemp194 = +(3.47606 * +(fTemp193));
			fTemp195 = +(+(3.47606 * +(+(+(fTemp193) * +(((+(fTemp194) > 0.) | 0))) * +(((+(fTemp194) <= 1.) | 0)))) + +(((+(fTemp194) > 1.) | 0)));
			fTemp196 = +(3. * +(fTemp108));
			fTemp197 = +(+(fTemp131) - 1.09861);
			fTemp198 = +(3.47606 * +(fTemp197));
			fTemp199 = +(+(3.47606 * +(+(+(fTemp197) * +(((+(fTemp198) > 0.) | 0))) * +(((+(fTemp198) <= 1.) | 0)))) + +(((+(fTemp198) > 1.) | 0)));
			fTemp200 = +(3. * +(fTemp135));
			fTemp201 = +(+(fTemp158) - 1.09861);
			fTemp202 = +(3.47606 * +(fTemp201));
			fTemp203 = +(+(3.47606 * +(+(+(fTemp201) * +(((+(fTemp202) > 0.) | 0))) * +(((+(fTemp202) <= 1.) | 0)))) + +(((+(fTemp202) > 1.) | 0)));
			fTemp204 = +(3. * +(fTemp162));
			fTemp205 = +(+(+(+(+(+(+(+(+(fTemp22) * +(fTemp183)) * +(cosf(+(fTemp184)))) / +(fTemp29)) + +(+(+(+(fTemp49) * +(fTemp187)) * +(cosf(+(fTemp188)))) / +(fTemp56))) + +(+(+(+(fTemp76) * +(fTemp191)) * +(cosf(+(fTemp192)))) / +(fTemp83))) + +(+(+(+(fTemp103) * +(fTemp195)) * +(cosf(+(fTemp196)))) / +(fTemp110))) + +(+(+(+(fTemp130) * +(fTemp199)) * +(cosf(+(fTemp200)))) / +(fTemp137))) + +(+(+(+(fTemp157) * +(fTemp203)) * +(cosf(+(fTemp204)))) / +(fTemp164)));
			fTemp206 = +(0.202031 * +(+(+(fTemp165) + +(+(fTemp167) + +(fTemp180))) + +(fTemp205)));
			fTemp207 = +(+(+(+(+(+(+(+(+(fTemp22) * +(sinf(+(fTemp184)))) * +(fTemp183)) / +(fTemp29)) + +(+(+(+(fTemp49) * +(sinf(+(fTemp188)))) * +(fTemp187)) / +(fTemp56))) + +(+(+(+(fTemp76) * +(sinf(+(fTemp192)))) * +(fTemp191)) / +(fTemp83))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp196)))) * +(fTemp195)) / +(fTemp110))) + +(+(+(+(fTemp130) * +(sinf(+(fTemp200)))) * +(fTemp199)) / +(fTemp137))) + +(+(+(+(fTemp157) * +(sinf(+(fTemp204)))) * +(fTemp203)) / +(fTemp164)));
			fTemp208 = +(+(+(+(+(+(+(+(+(fTemp22) * +(sinf(+(fTemp27)))) * +(fTemp169)) / +(fTemp29)) + +(+(+(+(fTemp49) * +(sinf(+(fTemp54)))) * +(fTemp171)) / +(fTemp56))) + +(+(+(+(fTemp76) * +(sinf(+(fTemp81)))) * +(fTemp173)) / +(fTemp83))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp108)))) * +(fTemp175)) / +(fTemp110))) + +(+(+(+(fTemp130) * +(sinf(+(fTemp135)))) * +(fTemp177)) / +(fTemp137))) + +(+(+(+(fTemp157) * +(sinf(+(fTemp162)))) * +(fTemp179)) / +(fTemp164)));
			fTemp209 = +(+(+(+(+(+(+(+(+(fTemp22) * +(sinf(+(fTemp28)))) * +(fTemp26)) / +(fTemp29)) + +(+(+(+(fTemp49) * +(sinf(+(fTemp55)))) * +(fTemp53)) / +(fTemp56))) + +(+(+(+(fTemp76) * +(sinf(+(fTemp82)))) * +(fTemp80)) / +(fTemp83))) + +(+(+(+(fTemp103) * +(sinf(+(fTemp109)))) * +(fTemp107)) / +(fTemp110))) + +(+(+(+(fTemp130) * +(sinf(+(fTemp136)))) * +(fTemp134)) / +(fTemp137))) + +(+(+(+(fTemp157) * +(sinf(+(fTemp163)))) * +(fTemp161)) / +(fTemp164)));
			fTemp210 = +(0.202031 * +(fTemp205));
			fTemp211 = +(0.142857 * +(fTemp166));
			fTemp212 = +(0.285714 * +(fTemp209));
			HEAPF32[dsp + 20930592 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 20930592 + (1 << 2) >> 2])) + +(fSlow327));
			iTemp213 = ((+(HEAPF32[dsp + 20928168 + (0 << 2) >> 2]) < +(fSlow328)) | 0);
			iTemp214 = (((iTemp213 | 0) > 0) | 0);
			HEAP32[dsp + 20930600 + (0 << 2) >> 2] = (((iTemp214 | 0) & (((HEAP32[dsp + 20930600 + (1 << 2) >> 2] | 0) | ((+(HEAPF32[dsp + 20930608 + (1 << 2) >> 2]) >= 1.) | 0)) | 0)) | 0);
			iTemp215 = (((((iTemp213 | 0) <= 0) | 0) & ((+(HEAPF32[dsp + 20930608 + (1 << 2) >> 2]) > 0.) | 0)) | 0);
			HEAPF32[dsp + 20930608 + (0 << 2) >> 2] = +(+(+(+(HEAPF32[dsp + 20931268 >> 2]) * +((((((((HEAP32[dsp + 20930600 + (1 << 2) >> 2] | 0) == 0) | 0) & (iTemp214 | 0)) | 0) & ((+(HEAPF32[dsp + 20930608 + (1 << 2) >> 2]) < 1.) | 0)) | 0))) + +(+(HEAPF32[dsp + 20930608 + (1 << 2) >> 2]) * +(1. - +(+(HEAPF32[dsp + 20931272 >> 2]) * +((iTemp215 | 0)))))) * +((((((iTemp215 | 0) == 0) | 0) | ((+(HEAPF32[dsp + 20930608 + (1 << 2) >> 2]) >= 1.e-06) | 0)) | 0)));
			fTemp216 = +(+(HEAPF32[dsp + 20931276 >> 2]) + +(HEAPF32[dsp + 20930616 + (1 << 2) >> 2]));
			HEAPF32[dsp + 20930616 + (0 << 2) >> 2] = +(+(fTemp216) - +(floorf(+(fTemp216))));
			fTemp217 = +(+(HEAPF32[dsp + 20930608 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 20930616 + (0 << 2) >> 2]))) << 2) >> 2]));
			HEAPF32[dsp + 20930624 + (0 << 2) >> 2] = +(max(+(+(HEAPF32[dsp + 20930624 + (1 << 2) >> 2]) - 0.0001), +(fabsf(+(fTemp217)))));
			HEAPF32[dsp + 20931280 >> 2] = +(+(HEAPF32[dsp + 20930624 + (0 << 2) >> 2]));
			fTemp218 = +(+(HEAPF32[dsp + 20930592 + (0 << 2) >> 2]) * +(fTemp217));
			HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928160 + (0 << 2) >> 2]) * +(+(+(+(+(+(fTemp206) + +(0.987688 * +(+(0.202031 * +(+(fTemp207) + +(+(+(+(fTemp180) + +(+(0.707107 * +(fTemp166)) + +(1. * +(fTemp208)))) + +(1.41421 * +(fTemp209))) + +(8.65956e-17 * +(fTemp165))))) - +(fTemp210)))) + +(0.809017 * +(0. - +(+(5.24849e-17 * +(fTemp205)) + +(0.285714 * +(+(+(fTemp165) + +(fTemp207)) - +(+(+(+(fTemp167) + +(fTemp208)) + +(6.12323e-17 * +(fTemp180))) + +(1.22465e-16 * +(fTemp209))))))))) + +(0.45399 * +(+(+(+(+(fTemp211) + +(0.202031 * +(fTemp208))) + +(0.202031 * +(fTemp207))) + +(0.202031 * +(fTemp205))) - +(+(+(fTemp212) + +(0.202031 * +(fTemp180))) + +(5.24849e-17 * +(fTemp165)))))) + +(1.22465e-16 * +(0. - +(0.285714 * +(+(+(fTemp205) + +(+(fTemp180) + +(2.44929e-16 * +(fTemp209)))) - +(+(+(fTemp165) + +(+(fTemp167) + +(1.22465e-16 * +(fTemp208)))) + +(3.67394e-16 * +(fTemp207)))))))) + +(fTemp218))));
			HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(HEAPF32[dsp + 20928160 + (0 << 2) >> 2]) * +(+(fTemp218) + +(+(+(+(fTemp206) + +(0.45399 * +(+(+(+(+(fTemp211) + +(fTemp212)) + +(8.74748e-17 * +(fTemp165))) + +(0.202031 * +(fTemp205))) - +(+(+(0.202031 * +(fTemp208)) + +(0.202031 * +(fTemp180))) + +(0.202031 * +(fTemp207)))))) + +(0.809017 * +(+(+(0.285714 * +(fTemp207)) + +(1.57455e-16 * +(fTemp205))) - +(0.285714 * +(+(+(fTemp165) + +(+(fTemp208) + +(1.83697e-16 * +(fTemp180)))) - +(+(fTemp167) + +(3.67394e-16 * +(fTemp209)))))))) + +(0.987688 * +(0. - +(+(fTemp210) + +(0.202031 * +(+(+(fTemp207) + +(+(+(fTemp208) + +(1.41421 * +(fTemp209))) + +(6.06169e-16 * +(fTemp165)))) - +(+(0.707107 * +(fTemp166)) + +(1. * +(fTemp180))))))))))));
			HEAPF32[dsp + 20928160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928184 + (0 << 2) >> 2]);
			HEAP32[dsp + 20928192 + (1 << 2) >> 2] = (HEAP32[dsp + 20928192 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928200 + (1 << 2) >> 2] = (HEAP32[dsp + 20928200 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928208 + (1 << 2) >> 2] = (HEAP32[dsp + 20928208 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928216 + (1 << 2) >> 2] = (HEAP32[dsp + 20928216 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928224 + (1 << 2) >> 2] = (HEAP32[dsp + 20928224 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20928232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928232 + (0 << 2) >> 2]);
			for (j0 = 4; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20927968 + ((j0 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20927968 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928088 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928088 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928248 + (0 << 2) >> 2]);
			HEAP32[dsp + 20928256 + (1 << 2) >> 2] = (HEAP32[dsp + 20928256 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20928264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928320 + (0 << 2) >> 2]);
			HEAP32[dsp + 20930768 >> 2] = (((HEAP32[dsp + 20930768 >> 2] | 0) + 1) | 0);
			HEAPF32[dsp + 20928328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928512 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928592 + (0 << 2) >> 2]);
			HEAP32[dsp + 20928600 + (1 << 2) >> 2] = (HEAP32[dsp + 20928600 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928608 + (1 << 2) >> 2] = (HEAP32[dsp + 20928608 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928616 + (1 << 2) >> 2] = (HEAP32[dsp + 20928616 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20928624 + (1 << 2) >> 2] = (HEAP32[dsp + 20928624 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20928632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928648 + (0 << 2) >> 2]);
			for (j1 = 4; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20927988 + ((j1 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20927988 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928100 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928100 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928100 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928100 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928656 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928848 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928968 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20928992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928992 + (0 << 2) >> 2]);
			HEAP32[dsp + 20929000 + (1 << 2) >> 2] = (HEAP32[dsp + 20929000 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929008 + (1 << 2) >> 2] = (HEAP32[dsp + 20929008 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929016 + (1 << 2) >> 2] = (HEAP32[dsp + 20929016 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929024 + (1 << 2) >> 2] = (HEAP32[dsp + 20929024 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20929032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929048 + (0 << 2) >> 2]);
			for (j2 = 4; (((j2 | 0) > 0) | 0); j2 = (((j2 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20928008 + ((j2 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20928008 + ((((j2 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928112 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928112 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929248 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929256 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929256 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929400 + (0 << 2) >> 2]);
			HEAP32[dsp + 20929408 + (1 << 2) >> 2] = (HEAP32[dsp + 20929408 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929416 + (1 << 2) >> 2] = (HEAP32[dsp + 20929416 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929424 + (1 << 2) >> 2] = (HEAP32[dsp + 20929424 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929432 + (1 << 2) >> 2] = (HEAP32[dsp + 20929432 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20929440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929456 + (0 << 2) >> 2]);
			for (j3 = 4; (((j3 | 0) > 0) | 0); j3 = (((j3 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20928028 + ((j3 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20928028 + ((((j3 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928124 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928124 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928124 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928124 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929512 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929592 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929656 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929776 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929784 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929784 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929800 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929800 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929808 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929808 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929824 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929832 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929832 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929848 + (0 << 2) >> 2]);
			HEAP32[dsp + 20929856 + (1 << 2) >> 2] = (HEAP32[dsp + 20929856 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929864 + (1 << 2) >> 2] = (HEAP32[dsp + 20929864 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929872 + (1 << 2) >> 2] = (HEAP32[dsp + 20929872 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20929880 + (1 << 2) >> 2] = (HEAP32[dsp + 20929880 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20929888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929888 + (0 << 2) >> 2]);
			for (j4 = 4; (((j4 | 0) > 0) | 0); j4 = (((j4 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20928048 + ((j4 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20928048 + ((((j4 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928136 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928136 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929968 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20929992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20929992 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930248 + (0 << 2) >> 2]);
			HEAP32[dsp + 20930256 + (1 << 2) >> 2] = (HEAP32[dsp + 20930256 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20930264 + (1 << 2) >> 2] = (HEAP32[dsp + 20930264 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20930272 + (1 << 2) >> 2] = (HEAP32[dsp + 20930272 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 20930280 + (1 << 2) >> 2] = (HEAP32[dsp + 20930280 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20930288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930288 + (0 << 2) >> 2]);
			for (j5 = 4; (((j5 | 0) > 0) | 0); j5 = (((j5 | 0) - 1) | 0)) {
				HEAPF32[dsp + 20928068 + ((j5 | 0) << 2) >> 2] = +(HEAPF32[dsp + 20928068 + ((((j5 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 20928148 + (2 << 2) >> 2] = +(HEAPF32[dsp + 20928148 + (1 << 2) >> 2]);
			HEAPF32[dsp + 20928148 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20928148 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930512 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930536 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930544 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930552 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930552 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930568 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930592 + (0 << 2) >> 2]);
			HEAP32[dsp + 20930600 + (1 << 2) >> 2] = (HEAP32[dsp + 20930600 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 20930608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 20930624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 20930624 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };
}

function getSizeeffetFaust() {
	return 20931284;
}

function getPathTableeffetFaust() {
	var pathTable = [];
	pathTable["/0x00/SatB0"] = 20930740;
	pathTable["/0x00/MunB0"] = 20930744;
	pathTable["/0x00/SatB2"] = 20930948;
	pathTable["/0x00/MunB2"] = 20930960;
	pathTable["/0x00/DelB2"] = 20930972;
	pathTable["/0x00/FilB2"] = 20930984;
	pathTable["/0x00/RevB2"] = 20930996;
	pathTable["/0x00/SatB3"] = 20931032;
	pathTable["/0x00/MunB3"] = 20931044;
	pathTable["/0x00/DelB3"] = 20931056;
	pathTable["/0x00/FilB3"] = 20931068;
	pathTable["/0x00/RevB3"] = 20931080;
	pathTable["/0x00/DelB0"] = 20930756;
	pathTable["/0x00/RevB4"] = 20931108;
	pathTable["/0x00/FilB4"] = 20931112;
	pathTable["/0x00/DelB4"] = 20931116;
	pathTable["/0x00/MunB4"] = 20931120;
	pathTable["/0x00/SatB4"] = 20931128;
	pathTable["/0x00/RevB5"] = 20931188;
	pathTable["/0x00/FilB5"] = 20931192;
	pathTable["/0x00/DelB5"] = 20931196;
	pathTable["/0x00/MunB5"] = 20931200;
	pathTable["/0x00/SatB5"] = 20931208;
	pathTable["/0x00/FilB0"] = 20930772;
	pathTable["/0x00/RevB0"] = 20930788;
	pathTable["/0x00/SatB1"] = 20930868;
	pathTable["/0x00/MunB1"] = 20930880;
	pathTable["/0x00/DelB1"] = 20930892;
	pathTable["/0x00/FilB1"] = 20930904;
	pathTable["/0x00/RevB1"] = 20930916;
	pathTable["/0x00/audioLevel0"] = 20930852;
	pathTable["/0x00/audioLevel1"] = 20930932;
	pathTable["/0x00/audioLevel2"] = 20931012;
	pathTable["/0x00/audioLevel3"] = 20931092;
	pathTable["/0x00/audioLevel4"] = 20931172;
	pathTable["/0x00/audioLevel5"] = 20931252;
	pathTable["/0x00/metLevel"] = 20931280;
	pathTable["/0x00/VolL"] = 20930640;
	pathTable["/0x00/SatX0"] = 20930672;
	pathTable["/0x00/FilY0"] = 20930784;
	pathTable["/0x00/RevY0"] = 20930792;
	pathTable["/0x00/RevX0"] = 20930796;
	pathTable["/0x00/Vol0"] = 20930848;
	pathTable["/0x00/MovX0"] = 20930856;
	pathTable["/0x00/MovY0"] = 20930860;
	pathTable["/0x00/opt1"] = 20930864;
	pathTable["/0x00/SatX1"] = 20930872;
	pathTable["/0x00/SatY1"] = 20930876;
	pathTable["/0x00/MunX1"] = 20930884;
	pathTable["/0x00/VolS"] = 20930696;
	pathTable["/0x00/MunY1"] = 20930888;
	pathTable["/0x00/DelX1"] = 20930896;
	pathTable["/0x00/DelY1"] = 20930900;
	pathTable["/0x00/FilX1"] = 20930908;
	pathTable["/0x00/FilY1"] = 20930912;
	pathTable["/0x00/RevY1"] = 20930920;
	pathTable["/0x00/RevX1"] = 20930924;
	pathTable["/0x00/Vol1"] = 20930928;
	pathTable["/0x00/MovX1"] = 20930936;
	pathTable["/0x00/MovY1"] = 20930940;
	pathTable["/0x00/opt0"] = 20930700;
	pathTable["/0x00/opt2"] = 20930944;
	pathTable["/0x00/SatX2"] = 20930952;
	pathTable["/0x00/SatY2"] = 20930956;
	pathTable["/0x00/MunX2"] = 20930964;
	pathTable["/0x00/MunY2"] = 20930968;
	pathTable["/0x00/DelX2"] = 20930976;
	pathTable["/0x00/DelY2"] = 20930980;
	pathTable["/0x00/FilX2"] = 20930988;
	pathTable["/0x00/FilY2"] = 20930992;
	pathTable["/0x00/RevY2"] = 20931000;
	pathTable["/0x00/SatY0"] = 20930704;
	pathTable["/0x00/RevX2"] = 20931004;
	pathTable["/0x00/Vol2"] = 20931008;
	pathTable["/0x00/MovX2"] = 20931016;
	pathTable["/0x00/MovY2"] = 20931020;
	pathTable["/0x00/Vol3"] = 20931024;
	pathTable["/0x00/opt3"] = 20931028;
	pathTable["/0x00/SatX3"] = 20931036;
	pathTable["/0x00/SatY3"] = 20931040;
	pathTable["/0x00/MunX3"] = 20931048;
	pathTable["/0x00/MunY3"] = 20931052;
	pathTable["/0x00/MunX0"] = 20930748;
	pathTable["/0x00/DelX3"] = 20931060;
	pathTable["/0x00/DelY3"] = 20931064;
	pathTable["/0x00/FilX3"] = 20931072;
	pathTable["/0x00/FilY3"] = 20931076;
	pathTable["/0x00/RevY3"] = 20931084;
	pathTable["/0x00/RevX3"] = 20931088;
	pathTable["/0x00/MovY3"] = 20931096;
	pathTable["/0x00/MovX3"] = 20931100;
	pathTable["/0x00/Vol4"] = 20931104;
	pathTable["/0x00/opt4"] = 20931124;
	pathTable["/0x00/MunY0"] = 20930752;
	pathTable["/0x00/SatX4"] = 20931132;
	pathTable["/0x00/SatY4"] = 20931136;
	pathTable["/0x00/MunX4"] = 20931140;
	pathTable["/0x00/MunY4"] = 20931144;
	pathTable["/0x00/DelY4"] = 20931148;
	pathTable["/0x00/DelX4"] = 20931152;
	pathTable["/0x00/FilY4"] = 20931156;
	pathTable["/0x00/FilX4"] = 20931160;
	pathTable["/0x00/RevY4"] = 20931164;
	pathTable["/0x00/RevX4"] = 20931168;
	pathTable["/0x00/DelX0"] = 20930760;
	pathTable["/0x00/MovY4"] = 20931176;
	pathTable["/0x00/MovX4"] = 20931180;
	pathTable["/0x00/Vol5"] = 20931184;
	pathTable["/0x00/opt5"] = 20931204;
	pathTable["/0x00/SatX5"] = 20931212;
	pathTable["/0x00/SatY5"] = 20931216;
	pathTable["/0x00/MunX5"] = 20931220;
	pathTable["/0x00/MunY5"] = 20931224;
	pathTable["/0x00/DelY5"] = 20931228;
	pathTable["/0x00/DelX5"] = 20931232;
	pathTable["/0x00/DelY0"] = 20930764;
	pathTable["/0x00/FilY5"] = 20931236;
	pathTable["/0x00/FilX5"] = 20931240;
	pathTable["/0x00/RevY5"] = 20931244;
	pathTable["/0x00/RevX5"] = 20931248;
	pathTable["/0x00/MovY5"] = 20931256;
	pathTable["/0x00/MovX5"] = 20931260;
	pathTable["/0x00/VolV"] = 20931264;
	pathTable["/0x00/FilX0"] = 20930780;
	return pathTable;
}

function getJSONeffetFaust() {
	return "{  \"name\": \"\",  \"inputs\": \"1\",  \"outputs\": \"2\",  \"meta\": [    { \"effect.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"effect.lib/copyright\": \"Julius O. Smith III\" },   { \"effect.lib/exciter_author\": \"Priyanka Shekar (pshekar@ccrma.stanford.edu)\" },   { \"effect.lib/exciter_copyright\": \"Copyright (c) 2013 Priyanka Shekar\" },   { \"effect.lib/exciter_license\": \"MIT License (MIT)\" },   { \"effect.lib/exciter_name\": \"Harmonic Exciter\" },   { \"effect.lib/exciter_version\": \"1.0\" },   { \"effect.lib/license\": \"STK-4.3\" },   { \"effect.lib/name\": \"Faust Audio Effect Library\" },   { \"effect.lib/version\": \"1.33\" },   { \"filter.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"filter.lib/copyright\": \"Julius O. Smith III\" },   { \"filter.lib/license\": \"STK-4.3\" },   { \"filter.lib/name\": \"Faust Filter Library\" },   { \"filter.lib/reference\": \"https://ccrma.stanford.edu/~jos/filters/\" },   { \"filter.lib/version\": \"1.29\" },   { \"hoa.lib/author\": \"Pierre Guillot\" },   { \"hoa.lib/copyright\": \"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\" },   { \"hoa.lib/name\": \"HOA\" },   { \"hoa.lib/title\": \"High Order Ambisonics library\" },   { \"instrument.lib/author\": \"Romain Michon (rmichon@ccrma.stanford.edu)\" },   { \"instrument.lib/copyright\": \"Romain Michon\" },   { \"instrument.lib/licence\": \"STK-4.3\" },   { \"instrument.lib/name\": \"Faust-STK Tools Library\" },   { \"instrument.lib/version\": \"1.0\" },   { \"math.lib/author\": \"GRAME\" },   { \"math.lib/copyright\": \"GRAME\" },   { \"math.lib/license\": \"LGPL with exception\" },   { \"math.lib/name\": \"Math Library\" },   { \"math.lib/version\": \"1.0\" },   { \"music.lib/author\": \"GRAME\" },   { \"music.lib/copyright\": \"GRAME\" },   { \"music.lib/license\": \"LGPL with exception\" },   { \"music.lib/name\": \"Music Library\" },   { \"music.lib/version\": \"1.0\" }  ],  \"ui\": [    {    \"type\": \"vgroup\",    \"label\": \"0x00\",    \"items\": [      {      \"type\": \"button\",      \"label\": \"DelB0\",      \"address\": \"/0x00/DelB0\"     },     {      \"type\": \"button\",      \"label\": \"DelB1\",      \"address\": \"/0x00/DelB1\"     },     {      \"type\": \"button\",      \"label\": \"DelB2\",      \"address\": \"/0x00/DelB2\"     },     {      \"type\": \"button\",      \"label\": \"DelB3\",      \"address\": \"/0x00/DelB3\"     },     {      \"type\": \"button\",      \"label\": \"DelB4\",      \"address\": \"/0x00/DelB4\"     },     {      \"type\": \"button\",      \"label\": \"DelB5\",      \"address\": \"/0x00/DelB5\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX0\",      \"address\": \"/0x00/DelX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX1\",      \"address\": \"/0x00/DelX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX2\",      \"address\": \"/0x00/DelX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX3\",      \"address\": \"/0x00/DelX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX4\",      \"address\": \"/0x00/DelX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelX5\",      \"address\": \"/0x00/DelX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY0\",      \"address\": \"/0x00/DelY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY1\",      \"address\": \"/0x00/DelY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY2\",      \"address\": \"/0x00/DelY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY3\",      \"address\": \"/0x00/DelY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY4\",      \"address\": \"/0x00/DelY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"DelY5\",      \"address\": \"/0x00/DelY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"FilB0\",      \"address\": \"/0x00/FilB0\"     },     {      \"type\": \"button\",      \"label\": \"FilB1\",      \"address\": \"/0x00/FilB1\"     },     {      \"type\": \"button\",      \"label\": \"FilB2\",      \"address\": \"/0x00/FilB2\"     },     {      \"type\": \"button\",      \"label\": \"FilB3\",      \"address\": \"/0x00/FilB3\"     },     {      \"type\": \"button\",      \"label\": \"FilB4\",      \"address\": \"/0x00/FilB4\"     },     {      \"type\": \"button\",      \"label\": \"FilB5\",      \"address\": \"/0x00/FilB5\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX0\",      \"address\": \"/0x00/FilX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX1\",      \"address\": \"/0x00/FilX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX2\",      \"address\": \"/0x00/FilX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX3\",      \"address\": \"/0x00/FilX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX4\",      \"address\": \"/0x00/FilX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilX5\",      \"address\": \"/0x00/FilX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY0\",      \"address\": \"/0x00/FilY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY1\",      \"address\": \"/0x00/FilY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY2\",      \"address\": \"/0x00/FilY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY3\",      \"address\": \"/0x00/FilY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY4\",      \"address\": \"/0x00/FilY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FilY5\",      \"address\": \"/0x00/FilY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX0\",      \"address\": \"/0x00/MovX0\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX1\",      \"address\": \"/0x00/MovX1\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX2\",      \"address\": \"/0x00/MovX2\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX3\",      \"address\": \"/0x00/MovX3\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX4\",      \"address\": \"/0x00/MovX4\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX5\",      \"address\": \"/0x00/MovX5\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY0\",      \"address\": \"/0x00/MovY0\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY1\",      \"address\": \"/0x00/MovY1\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY2\",      \"address\": \"/0x00/MovY2\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY3\",      \"address\": \"/0x00/MovY3\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY4\",      \"address\": \"/0x00/MovY4\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY5\",      \"address\": \"/0x00/MovY5\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"button\",      \"label\": \"MunB0\",      \"address\": \"/0x00/MunB0\"     },     {      \"type\": \"button\",      \"label\": \"MunB1\",      \"address\": \"/0x00/MunB1\"     },     {      \"type\": \"button\",      \"label\": \"MunB2\",      \"address\": \"/0x00/MunB2\"     },     {      \"type\": \"button\",      \"label\": \"MunB3\",      \"address\": \"/0x00/MunB3\"     },     {      \"type\": \"button\",      \"label\": \"MunB4\",      \"address\": \"/0x00/MunB4\"     },     {      \"type\": \"button\",      \"label\": \"MunB5\",      \"address\": \"/0x00/MunB5\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX0\",      \"address\": \"/0x00/MunX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX1\",      \"address\": \"/0x00/MunX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX2\",      \"address\": \"/0x00/MunX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX3\",      \"address\": \"/0x00/MunX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX4\",      \"address\": \"/0x00/MunX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX5\",      \"address\": \"/0x00/MunX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY0\",      \"address\": \"/0x00/MunY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY1\",      \"address\": \"/0x00/MunY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY2\",      \"address\": \"/0x00/MunY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY3\",      \"address\": \"/0x00/MunY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY4\",      \"address\": \"/0x00/MunY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY5\",      \"address\": \"/0x00/MunY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"RevB0\",      \"address\": \"/0x00/RevB0\"     },     {      \"type\": \"button\",      \"label\": \"RevB1\",      \"address\": \"/0x00/RevB1\"     },     {      \"type\": \"button\",      \"label\": \"RevB2\",      \"address\": \"/0x00/RevB2\"     },     {      \"type\": \"button\",      \"label\": \"RevB3\",      \"address\": \"/0x00/RevB3\"     },     {      \"type\": \"button\",      \"label\": \"RevB4\",      \"address\": \"/0x00/RevB4\"     },     {      \"type\": \"button\",      \"label\": \"RevB5\",      \"address\": \"/0x00/RevB5\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX0\",      \"address\": \"/0x00/RevX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX1\",      \"address\": \"/0x00/RevX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX2\",      \"address\": \"/0x00/RevX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX3\",      \"address\": \"/0x00/RevX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX4\",      \"address\": \"/0x00/RevX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX5\",      \"address\": \"/0x00/RevX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY0\",      \"address\": \"/0x00/RevY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY1\",      \"address\": \"/0x00/RevY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY2\",      \"address\": \"/0x00/RevY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY3\",      \"address\": \"/0x00/RevY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY4\",      \"address\": \"/0x00/RevY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY5\",      \"address\": \"/0x00/RevY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"SatB0\",      \"address\": \"/0x00/SatB0\"     },     {      \"type\": \"button\",      \"label\": \"SatB1\",      \"address\": \"/0x00/SatB1\"     },     {      \"type\": \"button\",      \"label\": \"SatB2\",      \"address\": \"/0x00/SatB2\"     },     {      \"type\": \"button\",      \"label\": \"SatB3\",      \"address\": \"/0x00/SatB3\"     },     {      \"type\": \"button\",      \"label\": \"SatB4\",      \"address\": \"/0x00/SatB4\"     },     {      \"type\": \"button\",      \"label\": \"SatB5\",      \"address\": \"/0x00/SatB5\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX0\",      \"address\": \"/0x00/SatX0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX1\",      \"address\": \"/0x00/SatX1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX2\",      \"address\": \"/0x00/SatX2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX3\",      \"address\": \"/0x00/SatX3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX4\",      \"address\": \"/0x00/SatX4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatX5\",      \"address\": \"/0x00/SatX5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY0\",      \"address\": \"/0x00/SatY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY1\",      \"address\": \"/0x00/SatY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY2\",      \"address\": \"/0x00/SatY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY3\",      \"address\": \"/0x00/SatY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY4\",      \"address\": \"/0x00/SatY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"SatY5\",      \"address\": \"/0x00/SatY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol0\",      \"address\": \"/0x00/Vol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol1\",      \"address\": \"/0x00/Vol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol2\",      \"address\": \"/0x00/Vol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol3\",      \"address\": \"/0x00/Vol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol4\",      \"address\": \"/0x00/Vol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol5\",      \"address\": \"/0x00/Vol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"VolL\",      \"address\": \"/0x00/VolL\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"VolS\",      \"address\": \"/0x00/VolS\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"VolV\",      \"address\": \"/0x00/VolV\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel0\",      \"address\": \"/0x00/audioLevel0\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel1\",      \"address\": \"/0x00/audioLevel1\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel2\",      \"address\": \"/0x00/audioLevel2\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel3\",      \"address\": \"/0x00/audioLevel3\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel4\",      \"address\": \"/0x00/audioLevel4\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"audioLevel5\",      \"address\": \"/0x00/audioLevel5\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hbargraph\",      \"label\": \"metLevel\",      \"address\": \"/0x00/metLevel\",      \"min\": \"0\",      \"max\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt0\",      \"address\": \"/0x00/opt0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt1\",      \"address\": \"/0x00/opt1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt2\",      \"address\": \"/0x00/opt2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt3\",      \"address\": \"/0x00/opt3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt4\",      \"address\": \"/0x00/opt4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt5\",      \"address\": \"/0x00/opt5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     }    ]   }  ] } ";
}

function metadataeffetFaust(m) {
	m.declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("effect.lib/copyright", "Julius O. Smith III");
	m.declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
	m.declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("effect.lib/exciter_license", "MIT License (MIT)");
	m.declare("effect.lib/exciter_name", "Harmonic Exciter");
	m.declare("effect.lib/exciter_version", "1.0");
	m.declare("effect.lib/license", "STK-4.3");
	m.declare("effect.lib/name", "Faust Audio Effect Library");
	m.declare("effect.lib/version", "1.33");
	m.declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("filter.lib/copyright", "Julius O. Smith III");
	m.declare("filter.lib/license", "STK-4.3");
	m.declare("filter.lib/name", "Faust Filter Library");
	m.declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
	m.declare("filter.lib/version", "1.29");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "HOA");
	m.declare("hoa.lib/title", "High Order Ambisonics library");
	m.declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
	m.declare("instrument.lib/copyright", "Romain Michon");
	m.declare("instrument.lib/licence", "STK-4.3");
	m.declare("instrument.lib/name", "Faust-STK Tools Library");
	m.declare("instrument.lib/version", "1.0");
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
}


// Standard Faust DSP

faust.effetFaust = function (context, buffer_size) {

    var handler = null;
    var ins, outs;
    var numIn, numOut;
    
    var scriptProcessor;
    
    var dspInChannnels = [];
    var dspOutChannnels = [];
   
    // Keep JSON parsed object
    var jon_object = JSON.parse(getJSONeffetFaust());
    
    function getNumInputsAux () 
    {
        return (jon_object.inputs !== undefined) ? parseInt(jon_object.inputs) : 0;
    }
    
    function getNumOutputsAux () 
    {
        return (jon_object.outputs !== undefined) ? parseInt(jon_object.outputs) : 0;
    }
     
    // Memory allocator
    var ptr_size = 4; 
    var sample_size = 4;
    
    function pow2limit (x)
    {
        var n = 2;
        while (n < x) { n = 2 * n; }
        return (n < 65536) ? 65536 : n; // Minimum = 64 kB
    }
     
    var memory_size = pow2limit(getSizeeffetFaust() + (getNumInputsAux() + getNumOutputsAux()) * (ptr_size + (buffer_size * sample_size)));
   
    var HEAP = new ArrayBuffer(memory_size);
    var HEAP32 = new Int32Array(HEAP);
    var HEAPF32 = new Float32Array(HEAP);
     
    console.log(HEAP);
    console.log(HEAP32);
    console.log(HEAPF32);
 
    // bargraph
    var ouputs_timer = 5;
    var ouputs_items = [];
     
    // input items
    var inputs_items = [];
     
    // Start of HEAP index
    var audio_heap_ptr = 0;
     
    // Setup pointers offset
    var audio_heap_ptr_inputs = audio_heap_ptr; 
    var audio_heap_ptr_outputs = audio_heap_ptr_inputs + (getNumInputsAux() * ptr_size);
     
    // Setup buffer offset
    var audio_heap_inputs = audio_heap_ptr_outputs + (getNumOutputsAux() * ptr_size);
    var audio_heap_outputs = audio_heap_inputs + (getNumInputsAux() * buffer_size * sample_size);
    
    // Setup DSP offset
    var dsp_start = audio_heap_outputs + (getNumOutputsAux() * buffer_size * sample_size);
     
    // Start of DSP memory
    var dsp = dsp_start;
 
    // ASM module
    var factory = effetFaustModule(window, null, HEAP);
    console.log(factory);
 
    var pathTable = getPathTableeffetFaust();
    
    // Allocate table for 'setValue'
    var value_table = [];
        
    function update_outputs () 
    {
        if (ouputs_items.length > 0 && handler && ouputs_timer-- === 0) {
            ouputs_timer = 5;
            for (var i = 0; i < ouputs_items.length; i++) {
                handler(ouputs_items[i], factory.getValue(dsp, pathTable[ouputs_items[i]]));
            }
        }
    }
    
    function compute (e) 
    {
        var i, j;
        
        // Read inputs
        for (i = 0; i < numIn; i++) {
            var input = e.inputBuffer.getChannelData(i);
            var dspInput = dspInChannnels[i];
            for (j = 0; j < input.length; j++) {
                dspInput[j] = input[j];
            }
        }
        
        // Update control state
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = value_table[path];
            factory.setValue(dsp, pathTable[path], values[0]);
            values[0] = values[1];
        }
        
        // Compute
        factory.compute(dsp, buffer_size, ins, outs);
       
        // Update bargraph
        update_outputs();
        
        // Write outputs
        for (i = 0; i < numOut; i++) {
            var output = e.outputBuffer.getChannelData(i);
            var dspOutput = dspOutChannnels[i];
            for (j = 0; j < output.length; j++) {
                output[j] = dspOutput[j];
            }
        }
    };
         
    // JSON parsing
    function parse_ui (ui) 
    {
        for (var i = 0; i < ui.length; i++) {
            console.log(ui[i]);
            parse_group(ui[i]);
        }
    }
    
    function parse_group (group) 
    {
        if (group.items) {
            parse_items(group.items);
        }
    }
    
    function parse_items (items) 
    {
        var i;
        for (i = 0; i < items.length; i++) {
            parse_item(items[i]);
        }
    }
    
    function parse_item (item) 
    {
        if (item.type === "vgroup" || item.type === "hgroup" || item.type === "tgroup") {
            parse_items(item.items);
        } else if (item.type === "hbargraph" || item.type === "vbargraph") {
            // Keep bargraph adresses
            ouputs_items.push(item.address);
        } else if (item.type === "vslider" || item.type === "hslider" || item.type === "button" || item.type === "checkbox" || item.type === "nentry") {
            // Keep inputs adresses
            inputs_items.push(item.address);
        }
    }
      
    function init ()
    {
        var i;
        
        // Get input / output counts
        numIn = getNumInputsAux();
        numOut = getNumOutputsAux();
         
        // Setup web audio context
        console.log("buffer_size %d", buffer_size);
        scriptProcessor = context.createScriptProcessor(buffer_size, numIn, numOut);
        scriptProcessor.onaudioprocess = compute;
        
        if (numIn > 0) {
            ins = audio_heap_ptr_inputs; 
            for (i = 0; i < numIn; i++) { 
                HEAP32[(ins >> 2) + i] = audio_heap_inputs + ((buffer_size * sample_size) * i);
            }
     
            var dspInChans = HEAP32.subarray(ins >> 2, (ins + numIn * ptr_size) >> 2);
            for (i = 0; i < numIn; i++) {
                dspInChannnels[i] = HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + buffer_size * sample_size) >> 2);
            }
        }
        
        if (numOut > 0) {
            outs = audio_heap_ptr_outputs; 
            for (i = 0; i < numOut; i++) { 
                HEAP32[(outs >> 2) + i] = audio_heap_outputs + ((buffer_size * sample_size) * i);
            }
          
            var dspOutChans = HEAP32.subarray(outs >> 2, (outs + numOut * ptr_size) >> 2);
            for (i = 0; i < numOut; i++) {
                dspOutChannnels[i] = HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + buffer_size * sample_size) >> 2);
            }
        }
                                
        // bargraph
        parse_ui(jon_object.ui);
        
        // Init DSP
        factory.init(dsp, context.sampleRate);
        
        // Init 'value' table
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = new Float32Array(2);
            values[0] = values[1] = factory.getValue(dsp, pathTable[path]);
            value_table[path] = values;
        }
    }
    
    init();
    
    // External API
    return {
    
        getNumInputs : function () 
        {
            return getNumInputsAux();
        },
        
        getNumOutputs : function() 
        {
            return getNumOutputsAux();
        },
    
        destroy : function  ()
        {
            // Nothing to do
        },
        
        // Connect/disconnect to another node
        connect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.connect(node.getProcessor());
            } else {
                scriptProcessor.connect(node);
            }
        },

        disconnect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.disconnect(node.getProcessor());
            } else {
                scriptProcessor.disconnect(node);
            }
        },
        
        setHandler : function (hd)
        {
            handler = hd;
        },
        
        start : function () 
        {
            scriptProcessor.connect(context.destination);
        },

        stop : function () 
        {
            scriptProcessor.disconnect(context.destination);
        },

        setValue : function (path, val) 
        {
            var values = value_table[path];
            if (values) {
                if (factory.getValue(dsp, pathTable[path]) == values[0]) {
                    values[0] = val;
                } 
                values[1] = val;
            }
        },

        getValue : function (path) 
        {
            return factory.getValue(dsp, pathTable[path]);
        },
        
        controls : function()
        {
            return inputs_items;
        },
        
        json : function ()
        {
            return getJSONeffetFaust();
        },
        
        getProcessor : function ()
        {
            return scriptProcessor;
        }
    };
};

