/* ------------------------------------------------------------
Code generated with Faust 2.0.a41 (http://faust.grame.fr)
------------------------------------------------------------ */
/*
 faust2webaudio
 
 Primarily written by Myles Borins
 During the Spring 2013 offering of Music 420b with Julius Smith
 A bit during the Summer of 2013 with the help of Joshua Kit Clayton
 And finally a sprint during the late fall of 2013 to get everything working
 A Special thanks to Yann Orlarey and St√©phane Letz
 
 faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
 Choose the license that best suits your project. The text of the MIT and GPL
 licenses are at the root directory.
 
 Additional code : GRAME 2014
 
 */
 
'use strict';

var faust = faust || {};



function effet2v200Module(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF32 = new global.Float32Array(buffer);
	
	var imul = global.Math.imul;
	var log = global.Math.log;
	
	var abs = global.Math.abs;
	var atan2f = global.Math.atan2;
	var cosf = global.Math.cos;
	var max = global.Math.max;
	var min = global.Math.min;
	var powf = global.Math.pow;
	var sinf = global.Math.sin;
	var sqrtf = global.Math.sqrt;
	var tanf = global.Math.tan;
	function faustpower3_f(value) {
		value = +(value);
		return +(((value * value) * value));
		
	}
	
	function faustpower2_i(value) {
		value = (value | 0);
		return (((value * value)) | 0);
		
	}
	
	function faustpower2_f(value) {
		value = +(value);
		return +((value * value));
		
	}
	
	function faustpower4_f(value) {
		value = +(value);
		return +((((value * value) * value) * value));
		
	}
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }

	function getNumInputseffet2v200SIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputseffet2v200SIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceIniteffet2v200SIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function filleffet2v200SIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[output + ((i | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 7;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var i0 = 0;
		var i1 = 0;
		var i2 = 0;
		var i3 = 0;
		var i4 = 0;
		var i5 = 0;
		var i6 = 0;
		var i7 = 0;
		var i8 = 0;
		var i9 = 0;
		var i10 = 0;
		var i11 = 0;
		var i12 = 0;
		var i13 = 0;
		var i14 = 0;
		var i15 = 0;
		var i16 = 0;
		var i17 = 0;
		var i18 = 0;
		var i19 = 0;
		var i20 = 0;
		var i21 = 0;
		var i22 = 0;
		var i23 = 0;
		var i24 = 0;
		var i25 = 0;
		var i26 = 0;
		var i27 = 0;
		var i28 = 0;
		var i29 = 0;
		var i30 = 0;
		var i31 = 0;
		var i32 = 0;
		var i33 = 0;
		var i34 = 0;
		var i35 = 0;
		var i36 = 0;
		var i37 = 0;
		var i38 = 0;
		var i39 = 0;
		var i40 = 0;
		var i41 = 0;
		var i42 = 0;
		var i43 = 0;
		var i44 = 0;
		var i45 = 0;
		var i46 = 0;
		var i47 = 0;
		var i48 = 0;
		var i49 = 0;
		var i50 = 0;
		var i51 = 0;
		var i52 = 0;
		var i53 = 0;
		var i54 = 0;
		var i55 = 0;
		var i56 = 0;
		var i57 = 0;
		var i58 = 0;
		var i59 = 0;
		var i60 = 0;
		var i61 = 0;
		var i62 = 0;
		var i63 = 0;
		var i64 = 0;
		var i65 = 0;
		var i66 = 0;
		var i67 = 0;
		var i68 = 0;
		var i69 = 0;
		var i70 = 0;
		var i71 = 0;
		var i72 = 0;
		var i73 = 0;
		var i74 = 0;
		var i75 = 0;
		var i76 = 0;
		var i77 = 0;
		var i78 = 0;
		var i79 = 0;
		var i80 = 0;
		var i81 = 0;
		var i82 = 0;
		var i83 = 0;
		var i84 = 0;
		var i85 = 0;
		var i86 = 0;
		var i87 = 0;
		var i88 = 0;
		var i89 = 0;
		var i90 = 0;
		var i91 = 0;
		var i92 = 0;
		var i93 = 0;
		var i94 = 0;
		var i95 = 0;
		var i96 = 0;
		var i97 = 0;
		var i98 = 0;
		var i99 = 0;
		var i100 = 0;
		var i101 = 0;
		var i102 = 0;
		var i103 = 0;
		var i104 = 0;
		var i105 = 0;
		var i106 = 0;
		var i107 = 0;
		var i108 = 0;
		var i109 = 0;
		var i110 = 0;
		var i111 = 0;
		var i112 = 0;
		var i113 = 0;
		var i114 = 0;
		var i115 = 0;
		var i116 = 0;
		var i117 = 0;
		var i118 = 0;
		var i119 = 0;
		var i120 = 0;
		var i121 = 0;
		var i122 = 0;
		var i123 = 0;
		var i124 = 0;
		var i125 = 0;
		var i126 = 0;
		var i127 = 0;
		var i128 = 0;
		var i129 = 0;
		var i130 = 0;
		var i131 = 0;
		var i132 = 0;
		var i133 = 0;
		var i134 = 0;
		var i135 = 0;
		var i136 = 0;
		var i137 = 0;
		var i138 = 0;
		var i139 = 0;
		var i140 = 0;
		var i141 = 0;
		var i142 = 0;
		var i143 = 0;
		var i144 = 0;
		var i145 = 0;
		var i146 = 0;
		var i147 = 0;
		var i148 = 0;
		var i149 = 0;
		var i150 = 0;
		var i151 = 0;
		var i152 = 0;
		var i153 = 0;
		var i154 = 0;
		var i155 = 0;
		var i156 = 0;
		var i157 = 0;
		var i158 = 0;
		var i159 = 0;
		var i160 = 0;
		var i161 = 0;
		var i162 = 0;
		var i163 = 0;
		var i164 = 0;
		var i165 = 0;
		var i166 = 0;
		var i167 = 0;
		var i168 = 0;
		var i169 = 0;
		var i170 = 0;
		var i171 = 0;
		var i172 = 0;
		var i173 = 0;
		var i174 = 0;
		var i175 = 0;
		var i176 = 0;
		var i177 = 0;
		var i178 = 0;
		var i179 = 0;
		var i180 = 0;
		var i181 = 0;
		var i182 = 0;
		var i183 = 0;
		var i184 = 0;
		var i185 = 0;
		var i186 = 0;
		var i187 = 0;
		var i188 = 0;
		var i189 = 0;
		var i190 = 0;
		var i191 = 0;
		var i192 = 0;
		var i193 = 0;
		var i194 = 0;
		var i195 = 0;
		var i196 = 0;
		var i197 = 0;
		var i198 = 0;
		var i199 = 0;
		var i200 = 0;
		var i201 = 0;
		var i202 = 0;
		var i203 = 0;
		var i204 = 0;
		var i205 = 0;
		var i206 = 0;
		var i207 = 0;
		var i208 = 0;
		var i209 = 0;
		var i210 = 0;
		var i211 = 0;
		var i212 = 0;
		var i213 = 0;
		var i214 = 0;
		var i215 = 0;
		var i216 = 0;
		var i217 = 0;
		var i218 = 0;
		var i219 = 0;
		var i220 = 0;
		var i221 = 0;
		var i222 = 0;
		var i223 = 0;
		var i224 = 0;
		var i225 = 0;
		var i226 = 0;
		var i227 = 0;
		var i228 = 0;
		var i229 = 0;
		var i230 = 0;
		var i231 = 0;
		var i232 = 0;
		var i233 = 0;
		var i234 = 0;
		var i235 = 0;
		var i236 = 0;
		var i237 = 0;
		var i238 = 0;
		var i239 = 0;
		var i240 = 0;
		var i241 = 0;
		var i242 = 0;
		var i243 = 0;
		var i244 = 0;
		var i245 = 0;
		var i246 = 0;
		var i247 = 0;
		var i248 = 0;
		var i249 = 0;
		var i250 = 0;
		var i251 = 0;
		var i252 = 0;
		var i253 = 0;
		var i254 = 0;
		var i255 = 0;
		var i256 = 0;
		var i257 = 0;
		var i258 = 0;
		var i259 = 0;
		var i260 = 0;
		var i261 = 0;
		var i262 = 0;
		var i263 = 0;
		var i264 = 0;
		var i265 = 0;
		var i266 = 0;
		var i267 = 0;
		var i268 = 0;
		var i269 = 0;
		var i270 = 0;
		var i271 = 0;
		var i272 = 0;
		var i273 = 0;
		var i274 = 0;
		var i275 = 0;
		var i276 = 0;
		var i277 = 0;
		var i278 = 0;
		var i279 = 0;
		var i280 = 0;
		var i281 = 0;
		var i282 = 0;
		var i283 = 0;
		var i284 = 0;
		var i285 = 0;
		var i286 = 0;
		var i287 = 0;
		var i288 = 0;
		var i289 = 0;
		var i290 = 0;
		var i291 = 0;
		var i292 = 0;
		var i293 = 0;
		var i294 = 0;
		var i295 = 0;
		var i296 = 0;
		var i297 = 0;
		var i298 = 0;
		var i299 = 0;
		var i300 = 0;
		var i301 = 0;
		var i302 = 0;
		var i303 = 0;
		var i304 = 0;
		var i305 = 0;
		var i306 = 0;
		var i307 = 0;
		var i308 = 0;
		var i309 = 0;
		var i310 = 0;
		var i311 = 0;
		var i312 = 0;
		var i313 = 0;
		var i314 = 0;
		HEAP32[dsp + 13928564 >> 2] = (samplingFreq | 0);
		HEAPF32[dsp + 13928544 >> 2] = +(0.);
		for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926888 + ((i0 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 10584000 | 0));
		for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926896 + ((i1 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928548 >> 2] = +(0.);
		for (i2 = 0; (((i2 | 0) < 2) | 0); i2 = (((i2 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926904 + ((i2 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 0 | 0));
		for (i3 = 0; (((i3 | 0) < 2) | 0); i3 = (((i3 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926912 + ((i3 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 13928552 >> 2] = 0;
		for (i4 = 0; (((i4 | 0) < 128) | 0); i4 = (((i4 | 0) + 1) | 0)) {
			HEAP32[dsp + 13915200 + ((i4 | 0) << 2) >> 2] = 0;
			
		}
		for (i5 = 0; (((i5 | 0) < 2) | 0); i5 = (((i5 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926920 + ((i5 | 0) << 2) >> 2] = 0;
			
		}
		for (i6 = 0; (((i6 | 0) < 2) | 0); i6 = (((i6 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926928 + ((i6 | 0) << 2) >> 2] = 0;
			
		}
		for (i7 = 0; (((i7 | 0) < 128) | 0); i7 = (((i7 | 0) + 1) | 0)) {
			HEAP32[dsp + 13915712 + ((i7 | 0) << 2) >> 2] = 0;
			
		}
		for (i8 = 0; (((i8 | 0) < 2) | 0); i8 = (((i8 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926936 + ((i8 | 0) << 2) >> 2] = 0;
			
		}
		for (i9 = 0; (((i9 | 0) < 2) | 0); i9 = (((i9 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926944 + ((i9 | 0) << 2) >> 2] = 0;
			
		}
		for (i10 = 0; (((i10 | 0) < 2) | 0); i10 = (((i10 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926952 + ((i10 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928556 >> 2] = +(0.);
		for (i11 = 0; (((i11 | 0) < 8192) | 0); i11 = (((i11 | 0) + 1) | 0)) {
			HEAP32[dsp + 13489632 + ((i11 | 0) << 2) >> 2] = 0;
			
		}
		for (i12 = 0; (((i12 | 0) < 2) | 0); i12 = (((i12 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926960 + ((i12 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13686240 | 0));
		for (i13 = 0; (((i13 | 0) < 2) | 0); i13 = (((i13 | 0) + 1) | 0)) {
			HEAP32[dsp + 13926968 + ((i13 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928560 >> 2] = +(0.);
		for (i14 = 0; (((i14 | 0) < 2) | 0); i14 = (((i14 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926976 + ((i14 | 0) << 2) >> 2] = 0.;
			
		}
		for (i15 = 0; (((i15 | 0) < 32768) | 0); i15 = (((i15 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12703200 + ((i15 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 13928568 >> 2] = ((min(192000, ((max(1, (HEAP32[dsp + 13928564 >> 2] | 0))) | 0))) | 0);
		HEAPF32[dsp + 13928572 >> 2] = +((HEAP32[dsp + 13928568 >> 2] | 0));
		HEAPF32[dsp + 13928576 >> 2] = +(1. / +(HEAPF32[dsp + 13928572 >> 2]));
		HEAPF32[dsp + 13928580 >> 2] = +(faustpower3_f(+(HEAPF32[dsp + 13928576 >> 2])));
		HEAPF32[dsp + 13928584 >> 2] = +(4. * +(((faustpower2_i((HEAP32[dsp + 13928568 >> 2] | 0))) | 0)));
		HEAPF32[dsp + 13928588 >> 2] = +(3.14159 / +((HEAP32[dsp + 13928568 >> 2] | 0)));
		HEAPF32[dsp + 13928592 >> 2] = +(100.);
		for (i16 = 0; (((i16 | 0) < 2) | 0); i16 = (((i16 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926984 + ((i16 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928596 >> 2] = +(2. * +((HEAP32[dsp + 13928568 >> 2] | 0)));
		HEAPF32[dsp + 13928600 >> 2] = +(0.5 / +((HEAP32[dsp + 13928568 >> 2] | 0)));
		HEAPF32[dsp + 13928604 >> 2] = +(4. * +(HEAPF32[dsp + 13928576 >> 2]));
		HEAPF32[dsp + 13928608 >> 2] = +(12.5186 / +(HEAPF32[dsp + 13928572 >> 2]));
		HEAPF32[dsp + 13928612 >> 2] = +(faustpower2_f(+(HEAPF32[dsp + 13928576 >> 2])));
		HEAPF32[dsp + 13928616 >> 2] = +(6. * +(HEAPF32[dsp + 13928612 >> 2]));
		HEAPF32[dsp + 13928620 >> 2] = +(6.2593 / +(HEAPF32[dsp + 13928572 >> 2]));
		for (i17 = 0; (((i17 | 0) < 5) | 0); i17 = (((i17 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926240 + ((i17 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928624 >> 2] = +(faustpower4_f(+(HEAPF32[dsp + 13928576 >> 2])));
		HEAPF32[dsp + 13928628 >> 2] = +(0.0004 * +(HEAPF32[dsp + 13928624 >> 2]));
		HEAPF32[dsp + 13928632 >> 2] = +(0.0006 * +(HEAPF32[dsp + 13928612 >> 2]));
		HEAPF32[dsp + 13928636 >> 2] = +(0.0001 * +(HEAPF32[dsp + 13928612 >> 2]));
		HEAPF32[dsp + 13928640 >> 2] = +(8.19966 / +(HEAPF32[dsp + 13928572 >> 2]));
		HEAPF32[dsp + 13928644 >> 2] = +(4.09983 / +(HEAPF32[dsp + 13928572 >> 2]));
		for (i18 = 0; (((i18 | 0) < 5) | 0); i18 = (((i18 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926260 + ((i18 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928648 >> 2] = +(4. * +(HEAPF32[dsp + 13928624 >> 2]));
		HEAPF32[dsp + 13928652 >> 2] = +(2.69448 / +(HEAPF32[dsp + 13928572 >> 2]));
		HEAPF32[dsp + 13928656 >> 2] = +(1.34724 / +(HEAPF32[dsp + 13928572 >> 2]));
		for (i19 = 0; (((i19 | 0) < 5) | 0); i19 = (((i19 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926280 + ((i19 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928660 >> 2] = +(100.);
		HEAPF32[dsp + 13928664 >> 2] = +(0.);
		for (i20 = 0; (((i20 | 0) < 2) | 0); i20 = (((i20 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926992 + ((i20 | 0) << 2) >> 2] = 0.;
			
		}
		for (i21 = 0; (((i21 | 0) < 2) | 0); i21 = (((i21 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927000 + ((i21 | 0) << 2) >> 2] = 0;
			
		}
		for (i22 = 0; (((i22 | 0) < 2) | 0); i22 = (((i22 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927008 + ((i22 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928668 >> 2] = +(0.);
		for (i23 = 0; (((i23 | 0) < 2) | 0); i23 = (((i23 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927016 + ((i23 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928672 >> 2] = +(0.);
		for (i24 = 0; (((i24 | 0) < 2) | 0); i24 = (((i24 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927024 + ((i24 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928676 >> 2] = +(100.);
		for (i25 = 0; (((i25 | 0) < 2) | 0); i25 = (((i25 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927032 + ((i25 | 0) << 2) >> 2] = 0.;
			
		}
		for (i26 = 0; (((i26 | 0) < 3) | 0); i26 = (((i26 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926600 + ((i26 | 0) << 2) >> 2] = 0.;
			
		}
		for (i27 = 0; (((i27 | 0) < 3) | 0); i27 = (((i27 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926612 + ((i27 | 0) << 2) >> 2] = 0.;
			
		}
		for (i28 = 0; (((i28 | 0) < 3) | 0); i28 = (((i28 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926624 + ((i28 | 0) << 2) >> 2] = 0.;
			
		}
		for (i29 = 0; (((i29 | 0) < 3) | 0); i29 = (((i29 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926636 + ((i29 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928680 >> 2] = +(0.);
		HEAPF32[dsp + 13928684 >> 2] = +(1. / +((HEAP32[dsp + 13928568 >> 2] | 0)));
		HEAPF32[dsp + 13928688 >> 2] = +(100.);
		for (i30 = 0; (((i30 | 0) < 2) | 0); i30 = (((i30 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927040 + ((i30 | 0) << 2) >> 2] = 0.;
			
		}
		for (i31 = 0; (((i31 | 0) < 2) | 0); i31 = (((i31 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927048 + ((i31 | 0) << 2) >> 2] = 0.;
			
		}
		for (i32 = 0; (((i32 | 0) < 2048) | 0); i32 = (((i32 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13792320 + ((i32 | 0) << 2) >> 2] = 0.;
			
		}
		for (i33 = 0; (((i33 | 0) < 2) | 0); i33 = (((i33 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927056 + ((i33 | 0) << 2) >> 2] = 0.;
			
		}
		for (i34 = 0; (((i34 | 0) < 2) | 0); i34 = (((i34 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927064 + ((i34 | 0) << 2) >> 2] = 0.;
			
		}
		for (i35 = 0; (((i35 | 0) < 1024) | 0); i35 = (((i35 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13841472 + ((i35 | 0) << 2) >> 2] = 0.;
			
		}
		for (i36 = 0; (((i36 | 0) < 2) | 0); i36 = (((i36 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927072 + ((i36 | 0) << 2) >> 2] = 0.;
			
		}
		for (i37 = 0; (((i37 | 0) < 2) | 0); i37 = (((i37 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927080 + ((i37 | 0) << 2) >> 2] = 0.;
			
		}
		for (i38 = 0; (((i38 | 0) < 1024) | 0); i38 = (((i38 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13845568 + ((i38 | 0) << 2) >> 2] = 0.;
			
		}
		for (i39 = 0; (((i39 | 0) < 2) | 0); i39 = (((i39 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927088 + ((i39 | 0) << 2) >> 2] = 0.;
			
		}
		for (i40 = 0; (((i40 | 0) < 2) | 0); i40 = (((i40 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927096 + ((i40 | 0) << 2) >> 2] = 0.;
			
		}
		for (i41 = 0; (((i41 | 0) < 1024) | 0); i41 = (((i41 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13849664 + ((i41 | 0) << 2) >> 2] = 0.;
			
		}
		for (i42 = 0; (((i42 | 0) < 2) | 0); i42 = (((i42 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927104 + ((i42 | 0) << 2) >> 2] = 0.;
			
		}
		for (i43 = 0; (((i43 | 0) < 2) | 0); i43 = (((i43 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927112 + ((i43 | 0) << 2) >> 2] = 0.;
			
		}
		for (i44 = 0; (((i44 | 0) < 128) | 0); i44 = (((i44 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13916224 + ((i44 | 0) << 2) >> 2] = 0.;
			
		}
		for (i45 = 0; (((i45 | 0) < 2) | 0); i45 = (((i45 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927120 + ((i45 | 0) << 2) >> 2] = 0.;
			
		}
		for (i46 = 0; (((i46 | 0) < 64) | 0); i46 = (((i46 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13924416 + ((i46 | 0) << 2) >> 2] = 0.;
			
		}
		for (i47 = 0; (((i47 | 0) < 2) | 0); i47 = (((i47 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927128 + ((i47 | 0) << 2) >> 2] = 0.;
			
		}
		for (i48 = 0; (((i48 | 0) < 12) | 0); i48 = (((i48 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13925952 + ((i48 | 0) << 2) >> 2] = 0.;
			
		}
		for (i49 = 0; (((i49 | 0) < 2) | 0); i49 = (((i49 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927136 + ((i49 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928692 >> 2] = +(100.);
		HEAPF32[dsp + 13928696 >> 2] = +(0.);
		for (i50 = 0; (((i50 | 0) < 2) | 0); i50 = (((i50 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927144 + ((i50 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928700 >> 2] = +(0.);
		for (i51 = 0; (((i51 | 0) < 2) | 0); i51 = (((i51 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927152 + ((i51 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928704 >> 2] = +(0.);
		for (i52 = 0; (((i52 | 0) < 2) | 0); i52 = (((i52 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927160 + ((i52 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928708 >> 2] = +(5.);
		for (i53 = 0; (((i53 | 0) < 2) | 0); i53 = (((i53 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927168 + ((i53 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928712 >> 2] = +(0.);
		for (i54 = 0; (((i54 | 0) < 2) | 0); i54 = (((i54 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927176 + ((i54 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928716 >> 2] = +(0.);
		for (i55 = 0; (((i55 | 0) < 2) | 0); i55 = (((i55 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927184 + ((i55 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928720 >> 2] = +(0.);
		for (i56 = 0; (((i56 | 0) < 2) | 0); i56 = (((i56 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927192 + ((i56 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 1764000 | 0));
		for (i57 = 0; (((i57 | 0) < 128) | 0); i57 = (((i57 | 0) + 1) | 0)) {
			HEAP32[dsp + 13916736 + ((i57 | 0) << 2) >> 2] = 0;
			
		}
		for (i58 = 0; (((i58 | 0) < 2) | 0); i58 = (((i58 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927200 + ((i58 | 0) << 2) >> 2] = 0;
			
		}
		for (i59 = 0; (((i59 | 0) < 2) | 0); i59 = (((i59 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927208 + ((i59 | 0) << 2) >> 2] = 0;
			
		}
		for (i60 = 0; (((i60 | 0) < 128) | 0); i60 = (((i60 | 0) + 1) | 0)) {
			HEAP32[dsp + 13917248 + ((i60 | 0) << 2) >> 2] = 0;
			
		}
		for (i61 = 0; (((i61 | 0) < 2) | 0); i61 = (((i61 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927216 + ((i61 | 0) << 2) >> 2] = 0;
			
		}
		for (i62 = 0; (((i62 | 0) < 2) | 0); i62 = (((i62 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927224 + ((i62 | 0) << 2) >> 2] = 0;
			
		}
		for (i63 = 0; (((i63 | 0) < 2) | 0); i63 = (((i63 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927232 + ((i63 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928724 >> 2] = +(0.);
		for (i64 = 0; (((i64 | 0) < 8192) | 0); i64 = (((i64 | 0) + 1) | 0)) {
			HEAP32[dsp + 13522400 + ((i64 | 0) << 2) >> 2] = 0;
			
		}
		for (i65 = 0; (((i65 | 0) < 2) | 0); i65 = (((i65 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927240 + ((i65 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928728 >> 2] = +(100.);
		for (i66 = 0; (((i66 | 0) < 2) | 0); i66 = (((i66 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927248 + ((i66 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13703920 | 0));
		for (i67 = 0; (((i67 | 0) < 2) | 0); i67 = (((i67 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927256 + ((i67 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928732 >> 2] = +(0.);
		for (i68 = 0; (((i68 | 0) < 2) | 0); i68 = (((i68 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927264 + ((i68 | 0) << 2) >> 2] = 0.;
			
		}
		for (i69 = 0; (((i69 | 0) < 32768) | 0); i69 = (((i69 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12834272 + ((i69 | 0) << 2) >> 2] = 0.;
			
		}
		for (i70 = 0; (((i70 | 0) < 5) | 0); i70 = (((i70 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926300 + ((i70 | 0) << 2) >> 2] = 0.;
			
		}
		for (i71 = 0; (((i71 | 0) < 5) | 0); i71 = (((i71 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926320 + ((i71 | 0) << 2) >> 2] = 0.;
			
		}
		for (i72 = 0; (((i72 | 0) < 5) | 0); i72 = (((i72 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926340 + ((i72 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 10937200 | 0));
		HEAPF32[dsp + 13928736 >> 2] = +(100.);
		HEAPF32[dsp + 13928740 >> 2] = +(0.);
		for (i73 = 0; (((i73 | 0) < 2) | 0); i73 = (((i73 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927272 + ((i73 | 0) << 2) >> 2] = 0.;
			
		}
		for (i74 = 0; (((i74 | 0) < 2) | 0); i74 = (((i74 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927280 + ((i74 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928744 >> 2] = +(100.);
		for (i75 = 0; (((i75 | 0) < 2) | 0); i75 = (((i75 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927288 + ((i75 | 0) << 2) >> 2] = 0.;
			
		}
		for (i76 = 0; (((i76 | 0) < 3) | 0); i76 = (((i76 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926648 + ((i76 | 0) << 2) >> 2] = 0.;
			
		}
		for (i77 = 0; (((i77 | 0) < 3) | 0); i77 = (((i77 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926660 + ((i77 | 0) << 2) >> 2] = 0.;
			
		}
		for (i78 = 0; (((i78 | 0) < 3) | 0); i78 = (((i78 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926672 + ((i78 | 0) << 2) >> 2] = 0.;
			
		}
		for (i79 = 0; (((i79 | 0) < 3) | 0); i79 = (((i79 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926684 + ((i79 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928748 >> 2] = +(0.);
		for (i80 = 0; (((i80 | 0) < 2) | 0); i80 = (((i80 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927296 + ((i80 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928752 >> 2] = +(0.);
		for (i81 = 0; (((i81 | 0) < 2) | 0); i81 = (((i81 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927304 + ((i81 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928756 >> 2] = +(0.);
		HEAPF32[dsp + 13928760 >> 2] = +(100.);
		for (i82 = 0; (((i82 | 0) < 2) | 0); i82 = (((i82 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927312 + ((i82 | 0) << 2) >> 2] = 0.;
			
		}
		for (i83 = 0; (((i83 | 0) < 2) | 0); i83 = (((i83 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927320 + ((i83 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928764 >> 2] = +(0.);
		for (i84 = 0; (((i84 | 0) < 2) | 0); i84 = (((i84 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927328 + ((i84 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928768 >> 2] = +(100.);
		HEAPF32[dsp + 13928772 >> 2] = +(0.);
		for (i85 = 0; (((i85 | 0) < 2) | 0); i85 = (((i85 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927336 + ((i85 | 0) << 2) >> 2] = 0.;
			
		}
		for (i86 = 0; (((i86 | 0) < 2048) | 0); i86 = (((i86 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13800512 + ((i86 | 0) << 2) >> 2] = 0.;
			
		}
		for (i87 = 0; (((i87 | 0) < 2) | 0); i87 = (((i87 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927344 + ((i87 | 0) << 2) >> 2] = 0.;
			
		}
		for (i88 = 0; (((i88 | 0) < 2) | 0); i88 = (((i88 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927352 + ((i88 | 0) << 2) >> 2] = 0.;
			
		}
		for (i89 = 0; (((i89 | 0) < 1024) | 0); i89 = (((i89 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13853760 + ((i89 | 0) << 2) >> 2] = 0.;
			
		}
		for (i90 = 0; (((i90 | 0) < 2) | 0); i90 = (((i90 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927360 + ((i90 | 0) << 2) >> 2] = 0.;
			
		}
		for (i91 = 0; (((i91 | 0) < 2) | 0); i91 = (((i91 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927368 + ((i91 | 0) << 2) >> 2] = 0.;
			
		}
		for (i92 = 0; (((i92 | 0) < 1024) | 0); i92 = (((i92 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13857856 + ((i92 | 0) << 2) >> 2] = 0.;
			
		}
		for (i93 = 0; (((i93 | 0) < 2) | 0); i93 = (((i93 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927376 + ((i93 | 0) << 2) >> 2] = 0.;
			
		}
		for (i94 = 0; (((i94 | 0) < 2) | 0); i94 = (((i94 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927384 + ((i94 | 0) << 2) >> 2] = 0.;
			
		}
		for (i95 = 0; (((i95 | 0) < 1024) | 0); i95 = (((i95 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13861952 + ((i95 | 0) << 2) >> 2] = 0.;
			
		}
		for (i96 = 0; (((i96 | 0) < 2) | 0); i96 = (((i96 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927392 + ((i96 | 0) << 2) >> 2] = 0.;
			
		}
		for (i97 = 0; (((i97 | 0) < 2) | 0); i97 = (((i97 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927400 + ((i97 | 0) << 2) >> 2] = 0.;
			
		}
		for (i98 = 0; (((i98 | 0) < 128) | 0); i98 = (((i98 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13917760 + ((i98 | 0) << 2) >> 2] = 0.;
			
		}
		for (i99 = 0; (((i99 | 0) < 2) | 0); i99 = (((i99 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927408 + ((i99 | 0) << 2) >> 2] = 0.;
			
		}
		for (i100 = 0; (((i100 | 0) < 64) | 0); i100 = (((i100 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13924672 + ((i100 | 0) << 2) >> 2] = 0.;
			
		}
		for (i101 = 0; (((i101 | 0) < 2) | 0); i101 = (((i101 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927416 + ((i101 | 0) << 2) >> 2] = 0.;
			
		}
		for (i102 = 0; (((i102 | 0) < 12) | 0); i102 = (((i102 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926000 + ((i102 | 0) << 2) >> 2] = 0.;
			
		}
		for (i103 = 0; (((i103 | 0) < 2) | 0); i103 = (((i103 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927424 + ((i103 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928776 >> 2] = +(0.);
		for (i104 = 0; (((i104 | 0) < 2) | 0); i104 = (((i104 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927432 + ((i104 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928780 >> 2] = +(5.);
		for (i105 = 0; (((i105 | 0) < 2) | 0); i105 = (((i105 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927440 + ((i105 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928784 >> 2] = +(0.);
		for (i106 = 0; (((i106 | 0) < 2) | 0); i106 = (((i106 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927448 + ((i106 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928788 >> 2] = +(0.);
		for (i107 = 0; (((i107 | 0) < 2) | 0); i107 = (((i107 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927456 + ((i107 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928792 >> 2] = +(0.);
		for (i108 = 0; (((i108 | 0) < 2) | 0); i108 = (((i108 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927464 + ((i108 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928796 >> 2] = +(0.);
		for (i109 = 0; (((i109 | 0) < 2) | 0); i109 = (((i109 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927472 + ((i109 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928800 >> 2] = +(0.);
		for (i110 = 0; (((i110 | 0) < 2) | 0); i110 = (((i110 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927480 + ((i110 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928804 >> 2] = +(0.);
		for (i111 = 0; (((i111 | 0) < 2) | 0); i111 = (((i111 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927488 + ((i111 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928808 >> 2] = +(0.);
		for (i112 = 0; (((i112 | 0) < 2) | 0); i112 = (((i112 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927496 + ((i112 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 3528000 | 0));
		for (i113 = 0; (((i113 | 0) < 128) | 0); i113 = (((i113 | 0) + 1) | 0)) {
			HEAP32[dsp + 13918272 + ((i113 | 0) << 2) >> 2] = 0;
			
		}
		for (i114 = 0; (((i114 | 0) < 2) | 0); i114 = (((i114 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927504 + ((i114 | 0) << 2) >> 2] = 0;
			
		}
		for (i115 = 0; (((i115 | 0) < 2) | 0); i115 = (((i115 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927512 + ((i115 | 0) << 2) >> 2] = 0;
			
		}
		for (i116 = 0; (((i116 | 0) < 128) | 0); i116 = (((i116 | 0) + 1) | 0)) {
			HEAP32[dsp + 13918784 + ((i116 | 0) << 2) >> 2] = 0;
			
		}
		for (i117 = 0; (((i117 | 0) < 2) | 0); i117 = (((i117 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927520 + ((i117 | 0) << 2) >> 2] = 0;
			
		}
		for (i118 = 0; (((i118 | 0) < 2) | 0); i118 = (((i118 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927528 + ((i118 | 0) << 2) >> 2] = 0;
			
		}
		for (i119 = 0; (((i119 | 0) < 2) | 0); i119 = (((i119 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927536 + ((i119 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928812 >> 2] = +(0.);
		for (i120 = 0; (((i120 | 0) < 8192) | 0); i120 = (((i120 | 0) + 1) | 0)) {
			HEAP32[dsp + 13555168 + ((i120 | 0) << 2) >> 2] = 0;
			
		}
		for (i121 = 0; (((i121 | 0) < 2) | 0); i121 = (((i121 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927544 + ((i121 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13721600 | 0));
		for (i122 = 0; (((i122 | 0) < 2) | 0); i122 = (((i122 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927552 + ((i122 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928816 >> 2] = +(0.);
		for (i123 = 0; (((i123 | 0) < 2) | 0); i123 = (((i123 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927560 + ((i123 | 0) << 2) >> 2] = 0.;
			
		}
		for (i124 = 0; (((i124 | 0) < 32768) | 0); i124 = (((i124 | 0) + 1) | 0)) {
			HEAPF32[dsp + 12965344 + ((i124 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928820 >> 2] = +(100.);
		for (i125 = 0; (((i125 | 0) < 2) | 0); i125 = (((i125 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927568 + ((i125 | 0) << 2) >> 2] = 0.;
			
		}
		for (i126 = 0; (((i126 | 0) < 5) | 0); i126 = (((i126 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926360 + ((i126 | 0) << 2) >> 2] = 0.;
			
		}
		for (i127 = 0; (((i127 | 0) < 5) | 0); i127 = (((i127 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926380 + ((i127 | 0) << 2) >> 2] = 0.;
			
		}
		for (i128 = 0; (((i128 | 0) < 5) | 0); i128 = (((i128 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926400 + ((i128 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 11290400 | 0));
		HEAPF32[dsp + 13928824 >> 2] = +(100.);
		HEAPF32[dsp + 13928828 >> 2] = +(0.);
		for (i129 = 0; (((i129 | 0) < 2) | 0); i129 = (((i129 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927576 + ((i129 | 0) << 2) >> 2] = 0.;
			
		}
		for (i130 = 0; (((i130 | 0) < 2) | 0); i130 = (((i130 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927584 + ((i130 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928832 >> 2] = +(100.);
		for (i131 = 0; (((i131 | 0) < 2) | 0); i131 = (((i131 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927592 + ((i131 | 0) << 2) >> 2] = 0.;
			
		}
		for (i132 = 0; (((i132 | 0) < 3) | 0); i132 = (((i132 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926696 + ((i132 | 0) << 2) >> 2] = 0.;
			
		}
		for (i133 = 0; (((i133 | 0) < 3) | 0); i133 = (((i133 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926708 + ((i133 | 0) << 2) >> 2] = 0.;
			
		}
		for (i134 = 0; (((i134 | 0) < 3) | 0); i134 = (((i134 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926720 + ((i134 | 0) << 2) >> 2] = 0.;
			
		}
		for (i135 = 0; (((i135 | 0) < 3) | 0); i135 = (((i135 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926732 + ((i135 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928836 >> 2] = +(0.);
		HEAPF32[dsp + 13928840 >> 2] = +(100.);
		for (i136 = 0; (((i136 | 0) < 2) | 0); i136 = (((i136 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927600 + ((i136 | 0) << 2) >> 2] = 0.;
			
		}
		for (i137 = 0; (((i137 | 0) < 2) | 0); i137 = (((i137 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927608 + ((i137 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928844 >> 2] = +(100.);
		HEAPF32[dsp + 13928848 >> 2] = +(0.);
		for (i138 = 0; (((i138 | 0) < 2) | 0); i138 = (((i138 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927616 + ((i138 | 0) << 2) >> 2] = 0.;
			
		}
		for (i139 = 0; (((i139 | 0) < 2048) | 0); i139 = (((i139 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13808704 + ((i139 | 0) << 2) >> 2] = 0.;
			
		}
		for (i140 = 0; (((i140 | 0) < 2) | 0); i140 = (((i140 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927624 + ((i140 | 0) << 2) >> 2] = 0.;
			
		}
		for (i141 = 0; (((i141 | 0) < 2) | 0); i141 = (((i141 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927632 + ((i141 | 0) << 2) >> 2] = 0.;
			
		}
		for (i142 = 0; (((i142 | 0) < 1024) | 0); i142 = (((i142 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13866048 + ((i142 | 0) << 2) >> 2] = 0.;
			
		}
		for (i143 = 0; (((i143 | 0) < 2) | 0); i143 = (((i143 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927640 + ((i143 | 0) << 2) >> 2] = 0.;
			
		}
		for (i144 = 0; (((i144 | 0) < 2) | 0); i144 = (((i144 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927648 + ((i144 | 0) << 2) >> 2] = 0.;
			
		}
		for (i145 = 0; (((i145 | 0) < 1024) | 0); i145 = (((i145 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13870144 + ((i145 | 0) << 2) >> 2] = 0.;
			
		}
		for (i146 = 0; (((i146 | 0) < 2) | 0); i146 = (((i146 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927656 + ((i146 | 0) << 2) >> 2] = 0.;
			
		}
		for (i147 = 0; (((i147 | 0) < 2) | 0); i147 = (((i147 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927664 + ((i147 | 0) << 2) >> 2] = 0.;
			
		}
		for (i148 = 0; (((i148 | 0) < 1024) | 0); i148 = (((i148 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13874240 + ((i148 | 0) << 2) >> 2] = 0.;
			
		}
		for (i149 = 0; (((i149 | 0) < 2) | 0); i149 = (((i149 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927672 + ((i149 | 0) << 2) >> 2] = 0.;
			
		}
		for (i150 = 0; (((i150 | 0) < 2) | 0); i150 = (((i150 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927680 + ((i150 | 0) << 2) >> 2] = 0.;
			
		}
		for (i151 = 0; (((i151 | 0) < 128) | 0); i151 = (((i151 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13919296 + ((i151 | 0) << 2) >> 2] = 0.;
			
		}
		for (i152 = 0; (((i152 | 0) < 2) | 0); i152 = (((i152 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927688 + ((i152 | 0) << 2) >> 2] = 0.;
			
		}
		for (i153 = 0; (((i153 | 0) < 64) | 0); i153 = (((i153 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13924928 + ((i153 | 0) << 2) >> 2] = 0.;
			
		}
		for (i154 = 0; (((i154 | 0) < 2) | 0); i154 = (((i154 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927696 + ((i154 | 0) << 2) >> 2] = 0.;
			
		}
		for (i155 = 0; (((i155 | 0) < 12) | 0); i155 = (((i155 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926048 + ((i155 | 0) << 2) >> 2] = 0.;
			
		}
		for (i156 = 0; (((i156 | 0) < 2) | 0); i156 = (((i156 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927704 + ((i156 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928852 >> 2] = +(5.);
		for (i157 = 0; (((i157 | 0) < 2) | 0); i157 = (((i157 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927712 + ((i157 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928856 >> 2] = +(0.);
		for (i158 = 0; (((i158 | 0) < 2) | 0); i158 = (((i158 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927720 + ((i158 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928860 >> 2] = +(0.);
		for (i159 = 0; (((i159 | 0) < 2) | 0); i159 = (((i159 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927728 + ((i159 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928864 >> 2] = +(0.);
		for (i160 = 0; (((i160 | 0) < 2) | 0); i160 = (((i160 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927736 + ((i160 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928868 >> 2] = +(0.);
		for (i161 = 0; (((i161 | 0) < 2) | 0); i161 = (((i161 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927744 + ((i161 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928872 >> 2] = +(0.);
		for (i162 = 0; (((i162 | 0) < 2) | 0); i162 = (((i162 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927752 + ((i162 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928876 >> 2] = +(0.);
		for (i163 = 0; (((i163 | 0) < 2) | 0); i163 = (((i163 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927760 + ((i163 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928880 >> 2] = +(0.);
		for (i164 = 0; (((i164 | 0) < 8192) | 0); i164 = (((i164 | 0) + 1) | 0)) {
			HEAP32[dsp + 13587936 + ((i164 | 0) << 2) >> 2] = 0;
			
		}
		for (i165 = 0; (((i165 | 0) < 2) | 0); i165 = (((i165 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927768 + ((i165 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928884 >> 2] = +(0.);
		for (i166 = 0; (((i166 | 0) < 2) | 0); i166 = (((i166 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927776 + ((i166 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 5292000 | 0));
		for (i167 = 0; (((i167 | 0) < 2) | 0); i167 = (((i167 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927784 + ((i167 | 0) << 2) >> 2] = 0;
			
		}
		for (i168 = 0; (((i168 | 0) < 128) | 0); i168 = (((i168 | 0) + 1) | 0)) {
			HEAP32[dsp + 13919808 + ((i168 | 0) << 2) >> 2] = 0;
			
		}
		for (i169 = 0; (((i169 | 0) < 2) | 0); i169 = (((i169 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927792 + ((i169 | 0) << 2) >> 2] = 0;
			
		}
		for (i170 = 0; (((i170 | 0) < 2) | 0); i170 = (((i170 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927800 + ((i170 | 0) << 2) >> 2] = 0;
			
		}
		for (i171 = 0; (((i171 | 0) < 128) | 0); i171 = (((i171 | 0) + 1) | 0)) {
			HEAP32[dsp + 13920320 + ((i171 | 0) << 2) >> 2] = 0;
			
		}
		for (i172 = 0; (((i172 | 0) < 2) | 0); i172 = (((i172 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927808 + ((i172 | 0) << 2) >> 2] = 0;
			
		}
		for (i173 = 0; (((i173 | 0) < 2) | 0); i173 = (((i173 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927816 + ((i173 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928888 >> 2] = +(100.);
		for (i174 = 0; (((i174 | 0) < 2) | 0); i174 = (((i174 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927824 + ((i174 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13739280 | 0));
		for (i175 = 0; (((i175 | 0) < 2) | 0); i175 = (((i175 | 0) + 1) | 0)) {
			HEAP32[dsp + 13927832 + ((i175 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928892 >> 2] = +(0.);
		for (i176 = 0; (((i176 | 0) < 2) | 0); i176 = (((i176 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927840 + ((i176 | 0) << 2) >> 2] = 0.;
			
		}
		for (i177 = 0; (((i177 | 0) < 32768) | 0); i177 = (((i177 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13096416 + ((i177 | 0) << 2) >> 2] = 0.;
			
		}
		for (i178 = 0; (((i178 | 0) < 5) | 0); i178 = (((i178 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926420 + ((i178 | 0) << 2) >> 2] = 0.;
			
		}
		for (i179 = 0; (((i179 | 0) < 5) | 0); i179 = (((i179 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926440 + ((i179 | 0) << 2) >> 2] = 0.;
			
		}
		for (i180 = 0; (((i180 | 0) < 5) | 0); i180 = (((i180 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926460 + ((i180 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 11643600 | 0));
		HEAPF32[dsp + 13928896 >> 2] = +(100.);
		HEAPF32[dsp + 13928900 >> 2] = +(0.);
		for (i181 = 0; (((i181 | 0) < 2) | 0); i181 = (((i181 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927848 + ((i181 | 0) << 2) >> 2] = 0.;
			
		}
		for (i182 = 0; (((i182 | 0) < 2) | 0); i182 = (((i182 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927856 + ((i182 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928904 >> 2] = +(100.);
		for (i183 = 0; (((i183 | 0) < 2) | 0); i183 = (((i183 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927864 + ((i183 | 0) << 2) >> 2] = 0.;
			
		}
		for (i184 = 0; (((i184 | 0) < 3) | 0); i184 = (((i184 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926744 + ((i184 | 0) << 2) >> 2] = 0.;
			
		}
		for (i185 = 0; (((i185 | 0) < 3) | 0); i185 = (((i185 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926756 + ((i185 | 0) << 2) >> 2] = 0.;
			
		}
		for (i186 = 0; (((i186 | 0) < 3) | 0); i186 = (((i186 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926768 + ((i186 | 0) << 2) >> 2] = 0.;
			
		}
		for (i187 = 0; (((i187 | 0) < 3) | 0); i187 = (((i187 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926780 + ((i187 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928908 >> 2] = +(0.);
		HEAPF32[dsp + 13928912 >> 2] = +(100.);
		for (i188 = 0; (((i188 | 0) < 2) | 0); i188 = (((i188 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927872 + ((i188 | 0) << 2) >> 2] = 0.;
			
		}
		for (i189 = 0; (((i189 | 0) < 2) | 0); i189 = (((i189 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927880 + ((i189 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928916 >> 2] = +(100.);
		HEAPF32[dsp + 13928920 >> 2] = +(0.);
		for (i190 = 0; (((i190 | 0) < 2) | 0); i190 = (((i190 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927888 + ((i190 | 0) << 2) >> 2] = 0.;
			
		}
		for (i191 = 0; (((i191 | 0) < 2048) | 0); i191 = (((i191 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13816896 + ((i191 | 0) << 2) >> 2] = 0.;
			
		}
		for (i192 = 0; (((i192 | 0) < 2) | 0); i192 = (((i192 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927896 + ((i192 | 0) << 2) >> 2] = 0.;
			
		}
		for (i193 = 0; (((i193 | 0) < 2) | 0); i193 = (((i193 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927904 + ((i193 | 0) << 2) >> 2] = 0.;
			
		}
		for (i194 = 0; (((i194 | 0) < 1024) | 0); i194 = (((i194 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13878336 + ((i194 | 0) << 2) >> 2] = 0.;
			
		}
		for (i195 = 0; (((i195 | 0) < 2) | 0); i195 = (((i195 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927912 + ((i195 | 0) << 2) >> 2] = 0.;
			
		}
		for (i196 = 0; (((i196 | 0) < 2) | 0); i196 = (((i196 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927920 + ((i196 | 0) << 2) >> 2] = 0.;
			
		}
		for (i197 = 0; (((i197 | 0) < 1024) | 0); i197 = (((i197 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13882432 + ((i197 | 0) << 2) >> 2] = 0.;
			
		}
		for (i198 = 0; (((i198 | 0) < 2) | 0); i198 = (((i198 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927928 + ((i198 | 0) << 2) >> 2] = 0.;
			
		}
		for (i199 = 0; (((i199 | 0) < 2) | 0); i199 = (((i199 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927936 + ((i199 | 0) << 2) >> 2] = 0.;
			
		}
		for (i200 = 0; (((i200 | 0) < 1024) | 0); i200 = (((i200 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13886528 + ((i200 | 0) << 2) >> 2] = 0.;
			
		}
		for (i201 = 0; (((i201 | 0) < 2) | 0); i201 = (((i201 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927944 + ((i201 | 0) << 2) >> 2] = 0.;
			
		}
		for (i202 = 0; (((i202 | 0) < 2) | 0); i202 = (((i202 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927952 + ((i202 | 0) << 2) >> 2] = 0.;
			
		}
		for (i203 = 0; (((i203 | 0) < 128) | 0); i203 = (((i203 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13920832 + ((i203 | 0) << 2) >> 2] = 0.;
			
		}
		for (i204 = 0; (((i204 | 0) < 2) | 0); i204 = (((i204 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927960 + ((i204 | 0) << 2) >> 2] = 0.;
			
		}
		for (i205 = 0; (((i205 | 0) < 64) | 0); i205 = (((i205 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13925184 + ((i205 | 0) << 2) >> 2] = 0.;
			
		}
		for (i206 = 0; (((i206 | 0) < 2) | 0); i206 = (((i206 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927968 + ((i206 | 0) << 2) >> 2] = 0.;
			
		}
		for (i207 = 0; (((i207 | 0) < 12) | 0); i207 = (((i207 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926096 + ((i207 | 0) << 2) >> 2] = 0.;
			
		}
		for (i208 = 0; (((i208 | 0) < 2) | 0); i208 = (((i208 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927976 + ((i208 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928924 >> 2] = +(5.);
		for (i209 = 0; (((i209 | 0) < 2) | 0); i209 = (((i209 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927984 + ((i209 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928928 >> 2] = +(0.);
		for (i210 = 0; (((i210 | 0) < 2) | 0); i210 = (((i210 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13927992 + ((i210 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928932 >> 2] = +(0.);
		for (i211 = 0; (((i211 | 0) < 2) | 0); i211 = (((i211 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928000 + ((i211 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928936 >> 2] = +(0.);
		for (i212 = 0; (((i212 | 0) < 2) | 0); i212 = (((i212 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928008 + ((i212 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928940 >> 2] = +(0.);
		for (i213 = 0; (((i213 | 0) < 2) | 0); i213 = (((i213 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928016 + ((i213 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928944 >> 2] = +(0.);
		for (i214 = 0; (((i214 | 0) < 2) | 0); i214 = (((i214 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928024 + ((i214 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928948 >> 2] = +(0.);
		for (i215 = 0; (((i215 | 0) < 2) | 0); i215 = (((i215 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928032 + ((i215 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928952 >> 2] = +(0.);
		for (i216 = 0; (((i216 | 0) < 8192) | 0); i216 = (((i216 | 0) + 1) | 0)) {
			HEAP32[dsp + 13620704 + ((i216 | 0) << 2) >> 2] = 0;
			
		}
		for (i217 = 0; (((i217 | 0) < 2) | 0); i217 = (((i217 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928040 + ((i217 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 7056000 | 0));
		HEAPF32[dsp + 13928956 >> 2] = +(0.);
		for (i218 = 0; (((i218 | 0) < 2) | 0); i218 = (((i218 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928048 + ((i218 | 0) << 2) >> 2] = 0;
			
		}
		for (i219 = 0; (((i219 | 0) < 128) | 0); i219 = (((i219 | 0) + 1) | 0)) {
			HEAP32[dsp + 13921344 + ((i219 | 0) << 2) >> 2] = 0;
			
		}
		for (i220 = 0; (((i220 | 0) < 2) | 0); i220 = (((i220 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928056 + ((i220 | 0) << 2) >> 2] = 0;
			
		}
		for (i221 = 0; (((i221 | 0) < 2) | 0); i221 = (((i221 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928064 + ((i221 | 0) << 2) >> 2] = 0;
			
		}
		for (i222 = 0; (((i222 | 0) < 128) | 0); i222 = (((i222 | 0) + 1) | 0)) {
			HEAP32[dsp + 13921856 + ((i222 | 0) << 2) >> 2] = 0;
			
		}
		for (i223 = 0; (((i223 | 0) < 2) | 0); i223 = (((i223 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928072 + ((i223 | 0) << 2) >> 2] = 0;
			
		}
		for (i224 = 0; (((i224 | 0) < 2) | 0); i224 = (((i224 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928080 + ((i224 | 0) << 2) >> 2] = 0;
			
		}
		for (i225 = 0; (((i225 | 0) < 2) | 0); i225 = (((i225 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928088 + ((i225 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13756960 | 0));
		for (i226 = 0; (((i226 | 0) < 2) | 0); i226 = (((i226 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928096 + ((i226 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13928960 >> 2] = +(0.);
		for (i227 = 0; (((i227 | 0) < 2) | 0); i227 = (((i227 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928104 + ((i227 | 0) << 2) >> 2] = 0.;
			
		}
		for (i228 = 0; (((i228 | 0) < 32768) | 0); i228 = (((i228 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13227488 + ((i228 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928964 >> 2] = +(100.);
		for (i229 = 0; (((i229 | 0) < 2) | 0); i229 = (((i229 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928112 + ((i229 | 0) << 2) >> 2] = 0.;
			
		}
		for (i230 = 0; (((i230 | 0) < 5) | 0); i230 = (((i230 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926480 + ((i230 | 0) << 2) >> 2] = 0.;
			
		}
		for (i231 = 0; (((i231 | 0) < 5) | 0); i231 = (((i231 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926500 + ((i231 | 0) << 2) >> 2] = 0.;
			
		}
		for (i232 = 0; (((i232 | 0) < 5) | 0); i232 = (((i232 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926520 + ((i232 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 11996800 | 0));
		HEAPF32[dsp + 13928968 >> 2] = +(100.);
		HEAPF32[dsp + 13928972 >> 2] = +(0.);
		for (i233 = 0; (((i233 | 0) < 2) | 0); i233 = (((i233 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928120 + ((i233 | 0) << 2) >> 2] = 0.;
			
		}
		for (i234 = 0; (((i234 | 0) < 2) | 0); i234 = (((i234 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928128 + ((i234 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928976 >> 2] = +(100.);
		for (i235 = 0; (((i235 | 0) < 2) | 0); i235 = (((i235 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928136 + ((i235 | 0) << 2) >> 2] = 0.;
			
		}
		for (i236 = 0; (((i236 | 0) < 3) | 0); i236 = (((i236 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926792 + ((i236 | 0) << 2) >> 2] = 0.;
			
		}
		for (i237 = 0; (((i237 | 0) < 3) | 0); i237 = (((i237 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926804 + ((i237 | 0) << 2) >> 2] = 0.;
			
		}
		for (i238 = 0; (((i238 | 0) < 3) | 0); i238 = (((i238 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926816 + ((i238 | 0) << 2) >> 2] = 0.;
			
		}
		for (i239 = 0; (((i239 | 0) < 3) | 0); i239 = (((i239 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926828 + ((i239 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928980 >> 2] = +(0.);
		HEAPF32[dsp + 13928984 >> 2] = +(100.);
		for (i240 = 0; (((i240 | 0) < 2) | 0); i240 = (((i240 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928144 + ((i240 | 0) << 2) >> 2] = 0.;
			
		}
		for (i241 = 0; (((i241 | 0) < 2) | 0); i241 = (((i241 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928152 + ((i241 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928988 >> 2] = +(100.);
		HEAPF32[dsp + 13928992 >> 2] = +(0.);
		for (i242 = 0; (((i242 | 0) < 2) | 0); i242 = (((i242 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928160 + ((i242 | 0) << 2) >> 2] = 0.;
			
		}
		for (i243 = 0; (((i243 | 0) < 2048) | 0); i243 = (((i243 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13825088 + ((i243 | 0) << 2) >> 2] = 0.;
			
		}
		for (i244 = 0; (((i244 | 0) < 2) | 0); i244 = (((i244 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928168 + ((i244 | 0) << 2) >> 2] = 0.;
			
		}
		for (i245 = 0; (((i245 | 0) < 2) | 0); i245 = (((i245 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928176 + ((i245 | 0) << 2) >> 2] = 0.;
			
		}
		for (i246 = 0; (((i246 | 0) < 1024) | 0); i246 = (((i246 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13890624 + ((i246 | 0) << 2) >> 2] = 0.;
			
		}
		for (i247 = 0; (((i247 | 0) < 2) | 0); i247 = (((i247 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928184 + ((i247 | 0) << 2) >> 2] = 0.;
			
		}
		for (i248 = 0; (((i248 | 0) < 2) | 0); i248 = (((i248 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928192 + ((i248 | 0) << 2) >> 2] = 0.;
			
		}
		for (i249 = 0; (((i249 | 0) < 1024) | 0); i249 = (((i249 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13894720 + ((i249 | 0) << 2) >> 2] = 0.;
			
		}
		for (i250 = 0; (((i250 | 0) < 2) | 0); i250 = (((i250 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928200 + ((i250 | 0) << 2) >> 2] = 0.;
			
		}
		for (i251 = 0; (((i251 | 0) < 2) | 0); i251 = (((i251 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928208 + ((i251 | 0) << 2) >> 2] = 0.;
			
		}
		for (i252 = 0; (((i252 | 0) < 1024) | 0); i252 = (((i252 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13898816 + ((i252 | 0) << 2) >> 2] = 0.;
			
		}
		for (i253 = 0; (((i253 | 0) < 2) | 0); i253 = (((i253 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928216 + ((i253 | 0) << 2) >> 2] = 0.;
			
		}
		for (i254 = 0; (((i254 | 0) < 2) | 0); i254 = (((i254 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928224 + ((i254 | 0) << 2) >> 2] = 0.;
			
		}
		for (i255 = 0; (((i255 | 0) < 128) | 0); i255 = (((i255 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13922368 + ((i255 | 0) << 2) >> 2] = 0.;
			
		}
		for (i256 = 0; (((i256 | 0) < 2) | 0); i256 = (((i256 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928232 + ((i256 | 0) << 2) >> 2] = 0.;
			
		}
		for (i257 = 0; (((i257 | 0) < 64) | 0); i257 = (((i257 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13925440 + ((i257 | 0) << 2) >> 2] = 0.;
			
		}
		for (i258 = 0; (((i258 | 0) < 2) | 0); i258 = (((i258 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928240 + ((i258 | 0) << 2) >> 2] = 0.;
			
		}
		for (i259 = 0; (((i259 | 0) < 12) | 0); i259 = (((i259 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926144 + ((i259 | 0) << 2) >> 2] = 0.;
			
		}
		for (i260 = 0; (((i260 | 0) < 2) | 0); i260 = (((i260 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928248 + ((i260 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13928996 >> 2] = +(5.);
		for (i261 = 0; (((i261 | 0) < 2) | 0); i261 = (((i261 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928256 + ((i261 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929000 >> 2] = +(0.);
		for (i262 = 0; (((i262 | 0) < 2) | 0); i262 = (((i262 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928264 + ((i262 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929004 >> 2] = +(0.);
		for (i263 = 0; (((i263 | 0) < 2) | 0); i263 = (((i263 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928272 + ((i263 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929008 >> 2] = +(0.);
		for (i264 = 0; (((i264 | 0) < 2) | 0); i264 = (((i264 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928280 + ((i264 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929012 >> 2] = +(0.);
		for (i265 = 0; (((i265 | 0) < 2) | 0); i265 = (((i265 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928288 + ((i265 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929016 >> 2] = +(0.);
		for (i266 = 0; (((i266 | 0) < 2) | 0); i266 = (((i266 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928296 + ((i266 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929020 >> 2] = +(0.);
		for (i267 = 0; (((i267 | 0) < 2) | 0); i267 = (((i267 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928304 + ((i267 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929024 >> 2] = +(0.);
		for (i268 = 0; (((i268 | 0) < 8192) | 0); i268 = (((i268 | 0) + 1) | 0)) {
			HEAP32[dsp + 13653472 + ((i268 | 0) << 2) >> 2] = 0;
			
		}
		for (i269 = 0; (((i269 | 0) < 2) | 0); i269 = (((i269 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928312 + ((i269 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929028 >> 2] = +(0.);
		for (i270 = 0; (((i270 | 0) < 2) | 0); i270 = (((i270 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928320 + ((i270 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 441000, (dsp + 8820000 | 0));
		for (i271 = 0; (((i271 | 0) < 2) | 0); i271 = (((i271 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928328 + ((i271 | 0) << 2) >> 2] = 0;
			
		}
		for (i272 = 0; (((i272 | 0) < 128) | 0); i272 = (((i272 | 0) + 1) | 0)) {
			HEAP32[dsp + 13922880 + ((i272 | 0) << 2) >> 2] = 0;
			
		}
		for (i273 = 0; (((i273 | 0) < 2) | 0); i273 = (((i273 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928336 + ((i273 | 0) << 2) >> 2] = 0;
			
		}
		for (i274 = 0; (((i274 | 0) < 2) | 0); i274 = (((i274 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928344 + ((i274 | 0) << 2) >> 2] = 0;
			
		}
		for (i275 = 0; (((i275 | 0) < 128) | 0); i275 = (((i275 | 0) + 1) | 0)) {
			HEAP32[dsp + 13923392 + ((i275 | 0) << 2) >> 2] = 0;
			
		}
		for (i276 = 0; (((i276 | 0) < 2) | 0); i276 = (((i276 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928352 + ((i276 | 0) << 2) >> 2] = 0;
			
		}
		for (i277 = 0; (((i277 | 0) < 2) | 0); i277 = (((i277 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928360 + ((i277 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13929032 >> 2] = +(100.);
		for (i278 = 0; (((i278 | 0) < 2) | 0); i278 = (((i278 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928368 + ((i278 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 4420, (dsp + 13774640 | 0));
		for (i279 = 0; (((i279 | 0) < 2) | 0); i279 = (((i279 | 0) + 1) | 0)) {
			HEAP32[dsp + 13928376 + ((i279 | 0) << 2) >> 2] = 0;
			
		}
		HEAPF32[dsp + 13929036 >> 2] = +(0.);
		for (i280 = 0; (((i280 | 0) < 2) | 0); i280 = (((i280 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928384 + ((i280 | 0) << 2) >> 2] = 0.;
			
		}
		for (i281 = 0; (((i281 | 0) < 32768) | 0); i281 = (((i281 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13358560 + ((i281 | 0) << 2) >> 2] = 0.;
			
		}
		for (i282 = 0; (((i282 | 0) < 5) | 0); i282 = (((i282 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926540 + ((i282 | 0) << 2) >> 2] = 0.;
			
		}
		for (i283 = 0; (((i283 | 0) < 5) | 0); i283 = (((i283 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926560 + ((i283 | 0) << 2) >> 2] = 0.;
			
		}
		for (i284 = 0; (((i284 | 0) < 5) | 0); i284 = (((i284 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926580 + ((i284 | 0) << 2) >> 2] = 0.;
			
		}
		instanceIniteffet2v200SIG0(dsp, (samplingFreq | 0));
		filleffet2v200SIG0(dsp, 88300, (dsp + 12350000 | 0));
		HEAPF32[dsp + 13929040 >> 2] = +(100.);
		HEAPF32[dsp + 13929044 >> 2] = +(0.);
		for (i285 = 0; (((i285 | 0) < 2) | 0); i285 = (((i285 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928392 + ((i285 | 0) << 2) >> 2] = 0.;
			
		}
		for (i286 = 0; (((i286 | 0) < 2) | 0); i286 = (((i286 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928400 + ((i286 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929048 >> 2] = +(100.);
		for (i287 = 0; (((i287 | 0) < 2) | 0); i287 = (((i287 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928408 + ((i287 | 0) << 2) >> 2] = 0.;
			
		}
		for (i288 = 0; (((i288 | 0) < 3) | 0); i288 = (((i288 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926840 + ((i288 | 0) << 2) >> 2] = 0.;
			
		}
		for (i289 = 0; (((i289 | 0) < 3) | 0); i289 = (((i289 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926852 + ((i289 | 0) << 2) >> 2] = 0.;
			
		}
		for (i290 = 0; (((i290 | 0) < 3) | 0); i290 = (((i290 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926864 + ((i290 | 0) << 2) >> 2] = 0.;
			
		}
		for (i291 = 0; (((i291 | 0) < 3) | 0); i291 = (((i291 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926876 + ((i291 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929052 >> 2] = +(0.);
		HEAPF32[dsp + 13929056 >> 2] = +(100.);
		for (i292 = 0; (((i292 | 0) < 2) | 0); i292 = (((i292 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928416 + ((i292 | 0) << 2) >> 2] = 0.;
			
		}
		for (i293 = 0; (((i293 | 0) < 2) | 0); i293 = (((i293 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928424 + ((i293 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929060 >> 2] = +(100.);
		HEAPF32[dsp + 13929064 >> 2] = +(0.);
		for (i294 = 0; (((i294 | 0) < 2) | 0); i294 = (((i294 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928432 + ((i294 | 0) << 2) >> 2] = 0.;
			
		}
		for (i295 = 0; (((i295 | 0) < 2048) | 0); i295 = (((i295 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13833280 + ((i295 | 0) << 2) >> 2] = 0.;
			
		}
		for (i296 = 0; (((i296 | 0) < 2) | 0); i296 = (((i296 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928440 + ((i296 | 0) << 2) >> 2] = 0.;
			
		}
		for (i297 = 0; (((i297 | 0) < 2) | 0); i297 = (((i297 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928448 + ((i297 | 0) << 2) >> 2] = 0.;
			
		}
		for (i298 = 0; (((i298 | 0) < 1024) | 0); i298 = (((i298 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13902912 + ((i298 | 0) << 2) >> 2] = 0.;
			
		}
		for (i299 = 0; (((i299 | 0) < 2) | 0); i299 = (((i299 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928456 + ((i299 | 0) << 2) >> 2] = 0.;
			
		}
		for (i300 = 0; (((i300 | 0) < 2) | 0); i300 = (((i300 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928464 + ((i300 | 0) << 2) >> 2] = 0.;
			
		}
		for (i301 = 0; (((i301 | 0) < 1024) | 0); i301 = (((i301 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13907008 + ((i301 | 0) << 2) >> 2] = 0.;
			
		}
		for (i302 = 0; (((i302 | 0) < 2) | 0); i302 = (((i302 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928472 + ((i302 | 0) << 2) >> 2] = 0.;
			
		}
		for (i303 = 0; (((i303 | 0) < 2) | 0); i303 = (((i303 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928480 + ((i303 | 0) << 2) >> 2] = 0.;
			
		}
		for (i304 = 0; (((i304 | 0) < 1024) | 0); i304 = (((i304 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13911104 + ((i304 | 0) << 2) >> 2] = 0.;
			
		}
		for (i305 = 0; (((i305 | 0) < 2) | 0); i305 = (((i305 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928488 + ((i305 | 0) << 2) >> 2] = 0.;
			
		}
		for (i306 = 0; (((i306 | 0) < 2) | 0); i306 = (((i306 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928496 + ((i306 | 0) << 2) >> 2] = 0.;
			
		}
		for (i307 = 0; (((i307 | 0) < 128) | 0); i307 = (((i307 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13923904 + ((i307 | 0) << 2) >> 2] = 0.;
			
		}
		for (i308 = 0; (((i308 | 0) < 2) | 0); i308 = (((i308 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928504 + ((i308 | 0) << 2) >> 2] = 0.;
			
		}
		for (i309 = 0; (((i309 | 0) < 64) | 0); i309 = (((i309 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13925696 + ((i309 | 0) << 2) >> 2] = 0.;
			
		}
		for (i310 = 0; (((i310 | 0) < 2) | 0); i310 = (((i310 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928512 + ((i310 | 0) << 2) >> 2] = 0.;
			
		}
		for (i311 = 0; (((i311 | 0) < 12) | 0); i311 = (((i311 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926192 + ((i311 | 0) << 2) >> 2] = 0.;
			
		}
		for (i312 = 0; (((i312 | 0) < 2) | 0); i312 = (((i312 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928520 + ((i312 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929068 >> 2] = +(5.);
		for (i313 = 0; (((i313 | 0) < 2) | 0); i313 = (((i313 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928528 + ((i313 | 0) << 2) >> 2] = 0.;
			
		}
		HEAPF32[dsp + 13929072 >> 2] = +(0.);
		for (i314 = 0; (((i314 | 0) < 2) | 0); i314 = (((i314 | 0) + 1) | 0)) {
			HEAPF32[dsp + 13928536 + ((i314 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function setValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF32[dsp + offset >> 2] = value;
	}
	
	function getValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +HEAPF32[dsp + offset >> 2];
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var output1 = 0;
		var output2 = 0;
		var output3 = 0;
		var output4 = 0;
		var output5 = 0;
		var output6 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var iSlow4 = 0;
		var iSlow5 = 0;
		var iSlow6 = 0;
		var iSlow7 = 0;
		var iSlow8 = 0;
		var iSlow9 = 0;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var iSlow32 = 0;
		var iSlow33 = 0;
		var iSlow34 = 0;
		var iSlow35 = 0;
		var iSlow36 = 0;
		var iSlow37 = 0;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var iSlow64 = 0;
		var iSlow65 = 0;
		var iSlow66 = 0;
		var iSlow67 = 0;
		var iSlow68 = 0;
		var iSlow69 = 0;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var fSlow85 = 0.;
		var fSlow86 = 0.;
		var fSlow87 = 0.;
		var fSlow88 = 0.;
		var iSlow89 = 0;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var fSlow92 = 0.;
		var fSlow93 = 0.;
		var iSlow94 = 0;
		var iSlow95 = 0;
		var iSlow96 = 0;
		var iSlow97 = 0;
		var iSlow98 = 0;
		var fSlow99 = 0.;
		var fSlow100 = 0.;
		var fSlow101 = 0.;
		var fSlow102 = 0.;
		var fSlow103 = 0.;
		var fSlow104 = 0.;
		var fSlow105 = 0.;
		var fSlow106 = 0.;
		var fSlow107 = 0.;
		var fSlow108 = 0.;
		var fSlow109 = 0.;
		var fSlow110 = 0.;
		var fSlow111 = 0.;
		var fSlow112 = 0.;
		var fSlow113 = 0.;
		var fSlow114 = 0.;
		var fSlow115 = 0.;
		var fSlow116 = 0.;
		var iSlow117 = 0;
		var fSlow118 = 0.;
		var fSlow119 = 0.;
		var iSlow120 = 0;
		var iSlow121 = 0;
		var iSlow122 = 0;
		var fSlow123 = 0.;
		var iSlow124 = 0;
		var iSlow125 = 0;
		var fSlow126 = 0.;
		var fSlow127 = 0.;
		var fSlow128 = 0.;
		var fSlow129 = 0.;
		var fSlow130 = 0.;
		var fSlow131 = 0.;
		var fSlow132 = 0.;
		var fSlow133 = 0.;
		var fSlow134 = 0.;
		var fSlow135 = 0.;
		var fSlow136 = 0.;
		var fSlow137 = 0.;
		var fSlow138 = 0.;
		var fSlow139 = 0.;
		var fSlow140 = 0.;
		var fSlow141 = 0.;
		var fSlow142 = 0.;
		var fSlow143 = 0.;
		var fSlow144 = 0.;
		var iSlow145 = 0;
		var fSlow146 = 0.;
		var fSlow147 = 0.;
		var fSlow148 = 0.;
		var fSlow149 = 0.;
		var iSlow150 = 0;
		var iSlow151 = 0;
		var iSlow152 = 0;
		var iSlow153 = 0;
		var iSlow154 = 0;
		var fSlow155 = 0.;
		var fSlow156 = 0.;
		var fSlow157 = 0.;
		var fSlow158 = 0.;
		var fSlow159 = 0.;
		var fSlow160 = 0.;
		var fSlow161 = 0.;
		var fSlow162 = 0.;
		var fSlow163 = 0.;
		var fSlow164 = 0.;
		var fSlow165 = 0.;
		var fSlow166 = 0.;
		var fSlow167 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var iTemp1 = 0;
		var iTemp2 = 0;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fTemp62 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fRec5 = 0.;
		var fTemp65 = 0.;
		var fRec3 = 0.;
		var fTemp66 = 0.;
		var fRec1 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var iTemp69 = 0;
		var iTemp70 = 0;
		var fTemp71 = 0.;
		var fTemp72 = 0.;
		var fTemp73 = 0.;
		var iTemp74 = 0;
		var fTemp75 = 0.;
		var fTemp76 = 0.;
		var fTemp77 = 0.;
		var fTemp78 = 0.;
		var fTemp79 = 0.;
		var fTemp80 = 0.;
		var fTemp81 = 0.;
		var fTemp82 = 0.;
		var iTemp83 = 0;
		var fTemp84 = 0.;
		var fTemp85 = 0.;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fTemp89 = 0.;
		var fTemp90 = 0.;
		var fTemp91 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fTemp94 = 0.;
		var fTemp95 = 0.;
		var fTemp96 = 0.;
		var fTemp97 = 0.;
		var fTemp98 = 0.;
		var fTemp99 = 0.;
		var fTemp100 = 0.;
		var fTemp101 = 0.;
		var fTemp102 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var fTemp105 = 0.;
		var fTemp106 = 0.;
		var fTemp107 = 0.;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var fTemp111 = 0.;
		var fTemp112 = 0.;
		var fTemp113 = 0.;
		var fTemp114 = 0.;
		var fTemp115 = 0.;
		var fTemp116 = 0.;
		var fTemp117 = 0.;
		var fTemp118 = 0.;
		var fTemp119 = 0.;
		var fTemp120 = 0.;
		var fTemp121 = 0.;
		var fTemp122 = 0.;
		var fTemp123 = 0.;
		var fTemp124 = 0.;
		var fTemp125 = 0.;
		var fTemp126 = 0.;
		var fTemp127 = 0.;
		var fTemp128 = 0.;
		var fTemp129 = 0.;
		var fTemp130 = 0.;
		var fTemp131 = 0.;
		var fTemp132 = 0.;
		var fTemp133 = 0.;
		var fTemp134 = 0.;
		var fTemp135 = 0.;
		var fRec83 = 0.;
		var fTemp136 = 0.;
		var fRec81 = 0.;
		var fTemp137 = 0.;
		var fRec79 = 0.;
		var fTemp138 = 0.;
		var fTemp139 = 0.;
		var iTemp140 = 0;
		var iTemp141 = 0;
		var fTemp142 = 0.;
		var fTemp143 = 0.;
		var fTemp144 = 0.;
		var iTemp145 = 0;
		var fTemp146 = 0.;
		var iTemp147 = 0;
		var fTemp148 = 0.;
		var fTemp149 = 0.;
		var fTemp150 = 0.;
		var fTemp151 = 0.;
		var fTemp152 = 0.;
		var fTemp153 = 0.;
		var fTemp154 = 0.;
		var fTemp155 = 0.;
		var fTemp156 = 0.;
		var fTemp157 = 0.;
		var fTemp158 = 0.;
		var fTemp159 = 0.;
		var fTemp160 = 0.;
		var fTemp161 = 0.;
		var fTemp162 = 0.;
		var fTemp163 = 0.;
		var fTemp164 = 0.;
		var fTemp165 = 0.;
		var fTemp166 = 0.;
		var fTemp167 = 0.;
		var fTemp168 = 0.;
		var fTemp169 = 0.;
		var fTemp170 = 0.;
		var fTemp171 = 0.;
		var fTemp172 = 0.;
		var fTemp173 = 0.;
		var fTemp174 = 0.;
		var fTemp175 = 0.;
		var fTemp176 = 0.;
		var fTemp177 = 0.;
		var fTemp178 = 0.;
		var fTemp179 = 0.;
		var fTemp180 = 0.;
		var fTemp181 = 0.;
		var fTemp182 = 0.;
		var fTemp183 = 0.;
		var fTemp184 = 0.;
		var fTemp185 = 0.;
		var fTemp186 = 0.;
		var fTemp187 = 0.;
		var fTemp188 = 0.;
		var fTemp189 = 0.;
		var fTemp190 = 0.;
		var fTemp191 = 0.;
		var fTemp192 = 0.;
		var fTemp193 = 0.;
		var fTemp194 = 0.;
		var fTemp195 = 0.;
		var fTemp196 = 0.;
		var fTemp197 = 0.;
		var fTemp198 = 0.;
		var fTemp199 = 0.;
		var fTemp200 = 0.;
		var fTemp201 = 0.;
		var fTemp202 = 0.;
		var fTemp203 = 0.;
		var fTemp204 = 0.;
		var fTemp205 = 0.;
		var fTemp206 = 0.;
		var fRec130 = 0.;
		var fTemp207 = 0.;
		var fRec128 = 0.;
		var fTemp208 = 0.;
		var fRec126 = 0.;
		var fTemp209 = 0.;
		var fTemp210 = 0.;
		var iTemp211 = 0;
		var iTemp212 = 0;
		var fTemp213 = 0.;
		var fTemp214 = 0.;
		var fTemp215 = 0.;
		var iTemp216 = 0;
		var fTemp217 = 0.;
		var fTemp218 = 0.;
		var fTemp219 = 0.;
		var fTemp220 = 0.;
		var fTemp221 = 0.;
		var fTemp222 = 0.;
		var iTemp223 = 0;
		var fTemp224 = 0.;
		var fTemp225 = 0.;
		var fTemp226 = 0.;
		var fTemp227 = 0.;
		var fTemp228 = 0.;
		var fTemp229 = 0.;
		var fTemp230 = 0.;
		var fTemp231 = 0.;
		var fTemp232 = 0.;
		var fTemp233 = 0.;
		var fTemp234 = 0.;
		var fTemp235 = 0.;
		var fTemp236 = 0.;
		var fTemp237 = 0.;
		var fTemp238 = 0.;
		var fTemp239 = 0.;
		var fTemp240 = 0.;
		var fTemp241 = 0.;
		var fTemp242 = 0.;
		var fTemp243 = 0.;
		var fTemp244 = 0.;
		var fTemp245 = 0.;
		var fTemp246 = 0.;
		var fTemp247 = 0.;
		var fTemp248 = 0.;
		var fTemp249 = 0.;
		var fTemp250 = 0.;
		var fTemp251 = 0.;
		var fTemp252 = 0.;
		var fTemp253 = 0.;
		var fTemp254 = 0.;
		var fTemp255 = 0.;
		var fTemp256 = 0.;
		var fTemp257 = 0.;
		var fTemp258 = 0.;
		var fTemp259 = 0.;
		var fTemp260 = 0.;
		var fTemp261 = 0.;
		var fTemp262 = 0.;
		var fTemp263 = 0.;
		var fTemp264 = 0.;
		var fTemp265 = 0.;
		var fTemp266 = 0.;
		var fTemp267 = 0.;
		var fTemp268 = 0.;
		var fTemp269 = 0.;
		var fTemp270 = 0.;
		var fTemp271 = 0.;
		var fTemp272 = 0.;
		var fTemp273 = 0.;
		var fTemp274 = 0.;
		var fTemp275 = 0.;
		var fTemp276 = 0.;
		var fTemp277 = 0.;
		var fRec176 = 0.;
		var fTemp278 = 0.;
		var fRec174 = 0.;
		var fTemp279 = 0.;
		var fRec172 = 0.;
		var fTemp280 = 0.;
		var fTemp281 = 0.;
		var iTemp282 = 0;
		var iTemp283 = 0;
		var fTemp284 = 0.;
		var fTemp285 = 0.;
		var fTemp286 = 0.;
		var iTemp287 = 0;
		var fTemp288 = 0.;
		var iTemp289 = 0;
		var fTemp290 = 0.;
		var fTemp291 = 0.;
		var fTemp292 = 0.;
		var fTemp293 = 0.;
		var fTemp294 = 0.;
		var fTemp295 = 0.;
		var fTemp296 = 0.;
		var fTemp297 = 0.;
		var fTemp298 = 0.;
		var fTemp299 = 0.;
		var fTemp300 = 0.;
		var fTemp301 = 0.;
		var fTemp302 = 0.;
		var fTemp303 = 0.;
		var fTemp304 = 0.;
		var fTemp305 = 0.;
		var fTemp306 = 0.;
		var fTemp307 = 0.;
		var fTemp308 = 0.;
		var fTemp309 = 0.;
		var fTemp310 = 0.;
		var fTemp311 = 0.;
		var fTemp312 = 0.;
		var fTemp313 = 0.;
		var fTemp314 = 0.;
		var fTemp315 = 0.;
		var fTemp316 = 0.;
		var fTemp317 = 0.;
		var fTemp318 = 0.;
		var fTemp319 = 0.;
		var fTemp320 = 0.;
		var fTemp321 = 0.;
		var fTemp322 = 0.;
		var fTemp323 = 0.;
		var fTemp324 = 0.;
		var fTemp325 = 0.;
		var fTemp326 = 0.;
		var fTemp327 = 0.;
		var fTemp328 = 0.;
		var fTemp329 = 0.;
		var fTemp330 = 0.;
		var fTemp331 = 0.;
		var fTemp332 = 0.;
		var fTemp333 = 0.;
		var fTemp334 = 0.;
		var fTemp335 = 0.;
		var fTemp336 = 0.;
		var fTemp337 = 0.;
		var fTemp338 = 0.;
		var fTemp339 = 0.;
		var fTemp340 = 0.;
		var fTemp341 = 0.;
		var fTemp342 = 0.;
		var fTemp343 = 0.;
		var fTemp344 = 0.;
		var fTemp345 = 0.;
		var fTemp346 = 0.;
		var fTemp347 = 0.;
		var fTemp348 = 0.;
		var fRec222 = 0.;
		var fTemp349 = 0.;
		var fRec220 = 0.;
		var fTemp350 = 0.;
		var fRec218 = 0.;
		var fTemp351 = 0.;
		var fTemp352 = 0.;
		var iTemp353 = 0;
		var iTemp354 = 0;
		var fTemp355 = 0.;
		var fTemp356 = 0.;
		var fTemp357 = 0.;
		var iTemp358 = 0;
		var fTemp359 = 0.;
		var fTemp360 = 0.;
		var fTemp361 = 0.;
		var fTemp362 = 0.;
		var fTemp363 = 0.;
		var fTemp364 = 0.;
		var fTemp365 = 0.;
		var fTemp366 = 0.;
		var fTemp367 = 0.;
		var iTemp368 = 0;
		var fTemp369 = 0.;
		var fTemp370 = 0.;
		var fTemp371 = 0.;
		var fTemp372 = 0.;
		var fTemp373 = 0.;
		var fTemp374 = 0.;
		var fTemp375 = 0.;
		var fTemp376 = 0.;
		var fTemp377 = 0.;
		var fTemp378 = 0.;
		var fTemp379 = 0.;
		var fTemp380 = 0.;
		var fTemp381 = 0.;
		var fTemp382 = 0.;
		var fTemp383 = 0.;
		var fTemp384 = 0.;
		var fTemp385 = 0.;
		var fTemp386 = 0.;
		var fTemp387 = 0.;
		var fTemp388 = 0.;
		var fTemp389 = 0.;
		var fTemp390 = 0.;
		var fTemp391 = 0.;
		var fTemp392 = 0.;
		var fTemp393 = 0.;
		var fTemp394 = 0.;
		var fTemp395 = 0.;
		var fTemp396 = 0.;
		var fTemp397 = 0.;
		var fTemp398 = 0.;
		var fTemp399 = 0.;
		var fTemp400 = 0.;
		var fTemp401 = 0.;
		var fTemp402 = 0.;
		var fTemp403 = 0.;
		var fTemp404 = 0.;
		var fTemp405 = 0.;
		var fTemp406 = 0.;
		var fTemp407 = 0.;
		var fTemp408 = 0.;
		var fTemp409 = 0.;
		var fTemp410 = 0.;
		var fTemp411 = 0.;
		var fTemp412 = 0.;
		var fTemp413 = 0.;
		var fTemp414 = 0.;
		var fTemp415 = 0.;
		var fTemp416 = 0.;
		var fTemp417 = 0.;
		var fTemp418 = 0.;
		var fTemp419 = 0.;
		var fRec268 = 0.;
		var fTemp420 = 0.;
		var fRec266 = 0.;
		var fTemp421 = 0.;
		var fRec264 = 0.;
		var fTemp422 = 0.;
		var fTemp423 = 0.;
		var fTemp424 = 0.;
		var iTemp425 = 0;
		var iTemp426 = 0;
		var fTemp427 = 0.;
		var fTemp428 = 0.;
		var fTemp429 = 0.;
		var fTemp430 = 0.;
		var fTemp431 = 0.;
		var fTemp432 = 0.;
		var fTemp433 = 0.;
		var fTemp434 = 0.;
		var fTemp435 = 0.;
		var fTemp436 = 0.;
		var fTemp437 = 0.;
		var fTemp438 = 0.;
		var fTemp439 = 0.;
		var fTemp440 = 0.;
		var fTemp441 = 0.;
		var fTemp442 = 0.;
		var fTemp443 = 0.;
		var fTemp444 = 0.;
		var fTemp445 = 0.;
		var fTemp446 = 0.;
		var fTemp447 = 0.;
		var fTemp448 = 0.;
		var fTemp449 = 0.;
		var fTemp450 = 0.;
		var fTemp451 = 0.;
		var fTemp452 = 0.;
		var fTemp453 = 0.;
		var fTemp454 = 0.;
		var fTemp455 = 0.;
		var fTemp456 = 0.;
		var fTemp457 = 0.;
		var fTemp458 = 0.;
		var fTemp459 = 0.;
		var fTemp460 = 0.;
		var fTemp461 = 0.;
		var fTemp462 = 0.;
		var fTemp463 = 0.;
		var fTemp464 = 0.;
		var fTemp465 = 0.;
		var fTemp466 = 0.;
		var fTemp467 = 0.;
		var fTemp468 = 0.;
		var fTemp469 = 0.;
		var fTemp470 = 0.;
		var fTemp471 = 0.;
		var fTemp472 = 0.;
		var fTemp473 = 0.;
		var fTemp474 = 0.;
		var fTemp475 = 0.;
		var fTemp476 = 0.;
		var fTemp477 = 0.;
		var fTemp478 = 0.;
		var fTemp479 = 0.;
		var fTemp480 = 0.;
		var fTemp481 = 0.;
		var fTemp482 = 0.;
		var fTemp483 = 0.;
		var fTemp484 = 0.;
		var fTemp485 = 0.;
		var fTemp486 = 0.;
		var fTemp487 = 0.;
		var fTemp488 = 0.;
		var fTemp489 = 0.;
		var fTemp490 = 0.;
		var fTemp491 = 0.;
		var fTemp492 = 0.;
		var fTemp493 = 0.;
		var fTemp494 = 0.;
		var fTemp495 = 0.;
		var fTemp496 = 0.;
		var fTemp497 = 0.;
		var fTemp498 = 0.;
		var fTemp499 = 0.;
		var fTemp500 = 0.;
		var fTemp501 = 0.;
		var j0 = 4;
		var j1 = 4;
		var j2 = 4;
		var j3 = 11;
		var j4 = 4;
		var j5 = 4;
		var j6 = 4;
		var j7 = 11;
		var j8 = 4;
		var j9 = 4;
		var j10 = 4;
		var j11 = 11;
		var j12 = 4;
		var j13 = 4;
		var j14 = 4;
		var j15 = 11;
		var j16 = 4;
		var j17 = 4;
		var j18 = 4;
		var j19 = 11;
		var j20 = 4;
		var j21 = 4;
		var j22 = 4;
		var j23 = 11;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		output2 = (HEAP32[outputs + (2 << 2) >> 2] | 0);
		output3 = (HEAP32[outputs + (3 << 2) >> 2] | 0);
		output4 = (HEAP32[outputs + (4 << 2) >> 2] | 0);
		output5 = (HEAP32[outputs + (5 << 2) >> 2] | 0);
		output6 = (HEAP32[outputs + (6 << 2) >> 2] | 0);
		fSlow0 = +(0.001 * +(+(HEAPF32[dsp + 13928544 >> 2])));
		fSlow1 = +(+(HEAPF32[dsp + 13928548 >> 2]));
		fSlow2 = +(min(1., +(fSlow1)));
		fSlow3 = +(0.01 * +(((+(fSlow1) < 3.) | 0)));
		iSlow4 = ~~(+(fSlow1));
		iSlow5 = (((iSlow4 | 0) == 2) | 0);
		iSlow6 = ((max(0, ((1 - ((abs((((iSlow4 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow7 = (((iSlow4 | 0) == 3) | 0);
		iSlow8 = ((max(0, ((1 - ((abs((((iSlow4 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow9 = ((+(+(HEAPF32[dsp + 13928556 >> 2])) > 0.) | 0);
		fSlow10 = +(0.001 * +((iSlow9 | 0)));
		fSlow11 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928560 >> 2]))));
		fSlow12 = +(0.001 * +(+(HEAPF32[dsp + 13928592 >> 2])));
		fSlow13 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13928660 >> 2]))));
		fSlow14 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928664 >> 2]))));
		fSlow15 = +(3.14 / +(fSlow13));
		fSlow16 = +(0.001 * +(((+(+(HEAPF32[dsp + 13928668 >> 2])) > 0.) | 0)));
		fSlow17 = +(0.001 * +(+(HEAPF32[dsp + 13928672 >> 2])));
		fSlow18 = +(+(HEAPF32[dsp + 13928676 >> 2]));
		fSlow19 = +(0.026455 * +(fSlow18));
		fSlow20 = +(2. / +(50. + +(0.529101 * +(fSlow18))));
		fSlow21 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13928680 >> 2]))), 0.99));
		fSlow22 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13928688 >> 2])))));
		fSlow23 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13928692 >> 2])) + +(+(HEAPF32[dsp + 13928696 >> 2]))));
		fSlow24 = +(0.001 * +(+(HEAPF32[dsp + 13928700 >> 2])));
		fSlow25 = +(0.001 * +(+(HEAPF32[dsp + 13928704 >> 2])));
		fSlow26 = +(0.001 * +(+(HEAPF32[dsp + 13928708 >> 2])));
		fSlow27 = +(0.001 * +(+(HEAPF32[dsp + 13928712 >> 2])));
		fSlow28 = +(0.001 * +(((+(+(HEAPF32[dsp + 13928716 >> 2])) > 0.) | 0)));
		fSlow29 = +(+(HEAPF32[dsp + 13928720 >> 2]));
		fSlow30 = +(min(1., +(fSlow29)));
		fSlow31 = +(0.01 * +(((+(fSlow29) < 3.) | 0)));
		iSlow32 = ~~(+(fSlow29));
		iSlow33 = (((iSlow32 | 0) == 2) | 0);
		iSlow34 = ((max(0, ((1 - ((abs((((iSlow32 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow35 = (((iSlow32 | 0) == 3) | 0);
		iSlow36 = ((max(0, ((1 - ((abs((((iSlow32 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow37 = ((+(+(HEAPF32[dsp + 13928724 >> 2])) > 0.) | 0);
		fSlow38 = +(0.001 * +((iSlow37 | 0)));
		fSlow39 = +(0.001 * +(+(HEAPF32[dsp + 13928728 >> 2])));
		fSlow40 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928732 >> 2]))));
		fSlow41 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13928736 >> 2]))));
		fSlow42 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928740 >> 2]))));
		fSlow43 = +(3.14 / +(fSlow41));
		fSlow44 = +(+(HEAPF32[dsp + 13928744 >> 2]));
		fSlow45 = +(0.026455 * +(fSlow44));
		fSlow46 = +(2. / +(50. + +(0.529101 * +(fSlow44))));
		fSlow47 = +(0.001 * +(+(HEAPF32[dsp + 13928748 >> 2])));
		fSlow48 = +(0.001 * +(+(HEAPF32[dsp + 13928752 >> 2])));
		fSlow49 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13928756 >> 2]))), 0.99));
		fSlow50 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13928760 >> 2])))));
		fSlow51 = +(0.001 * +(+(HEAPF32[dsp + 13928764 >> 2])));
		fSlow52 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13928768 >> 2])) + +(+(HEAPF32[dsp + 13928772 >> 2]))));
		fSlow53 = +(0.001 * +(+(HEAPF32[dsp + 13928776 >> 2])));
		fSlow54 = +(0.001 * +(+(HEAPF32[dsp + 13928780 >> 2])));
		fSlow55 = +(0.001 * +(+(HEAPF32[dsp + 13928784 >> 2])));
		fSlow56 = +(0.001 * +(+(HEAPF32[dsp + 13928788 >> 2])));
		fSlow57 = +(0.001 * +(+(HEAPF32[dsp + 13928792 >> 2])));
		fSlow58 = +(0.001 * +(+(HEAPF32[dsp + 13928796 >> 2])));
		fSlow59 = +(0.001 * +(+(HEAPF32[dsp + 13928800 >> 2])));
		fSlow60 = +(0.001 * +(((+(+(HEAPF32[dsp + 13928804 >> 2])) > 0.) | 0)));
		fSlow61 = +(+(HEAPF32[dsp + 13928808 >> 2]));
		fSlow62 = +(min(1., +(fSlow61)));
		fSlow63 = +(0.01 * +(((+(fSlow61) < 3.) | 0)));
		iSlow64 = ~~(+(fSlow61));
		iSlow65 = (((iSlow64 | 0) == 2) | 0);
		iSlow66 = ((max(0, ((1 - ((abs((((iSlow64 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow67 = (((iSlow64 | 0) == 3) | 0);
		iSlow68 = ((max(0, ((1 - ((abs((((iSlow64 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow69 = ((+(+(HEAPF32[dsp + 13928812 >> 2])) > 0.) | 0);
		fSlow70 = +(0.001 * +((iSlow69 | 0)));
		fSlow71 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928816 >> 2]))));
		fSlow72 = +(0.001 * +(+(HEAPF32[dsp + 13928820 >> 2])));
		fSlow73 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13928824 >> 2]))));
		fSlow74 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928828 >> 2]))));
		fSlow75 = +(3.14 / +(fSlow73));
		fSlow76 = +(+(HEAPF32[dsp + 13928832 >> 2]));
		fSlow77 = +(0.026455 * +(fSlow76));
		fSlow78 = +(2. / +(50. + +(0.529101 * +(fSlow76))));
		fSlow79 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13928836 >> 2]))), 0.99));
		fSlow80 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13928840 >> 2])))));
		fSlow81 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13928844 >> 2])) + +(+(HEAPF32[dsp + 13928848 >> 2]))));
		fSlow82 = +(0.001 * +(+(HEAPF32[dsp + 13928852 >> 2])));
		fSlow83 = +(0.001 * +(+(HEAPF32[dsp + 13928856 >> 2])));
		fSlow84 = +(0.001 * +(+(HEAPF32[dsp + 13928860 >> 2])));
		fSlow85 = +(0.001 * +(+(HEAPF32[dsp + 13928864 >> 2])));
		fSlow86 = +(0.001 * +(+(HEAPF32[dsp + 13928868 >> 2])));
		fSlow87 = +(0.001 * +(+(HEAPF32[dsp + 13928872 >> 2])));
		fSlow88 = +(0.001 * +(((+(+(HEAPF32[dsp + 13928876 >> 2])) > 0.) | 0)));
		iSlow89 = ((+(+(HEAPF32[dsp + 13928880 >> 2])) > 0.) | 0);
		fSlow90 = +(0.001 * +((iSlow89 | 0)));
		fSlow91 = +(+(HEAPF32[dsp + 13928884 >> 2]));
		fSlow92 = +(min(1., +(fSlow91)));
		fSlow93 = +(0.01 * +(((+(fSlow91) < 3.) | 0)));
		iSlow94 = ~~(+(fSlow91));
		iSlow95 = ((max(0, ((1 - ((abs((((iSlow94 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow96 = (((iSlow94 | 0) == 2) | 0);
		iSlow97 = ((max(0, ((1 - ((abs((((iSlow94 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow98 = (((iSlow94 | 0) == 3) | 0);
		fSlow99 = +(0.001 * +(+(HEAPF32[dsp + 13928888 >> 2])));
		fSlow100 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928892 >> 2]))));
		fSlow101 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13928896 >> 2]))));
		fSlow102 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928900 >> 2]))));
		fSlow103 = +(3.14 / +(fSlow101));
		fSlow104 = +(+(HEAPF32[dsp + 13928904 >> 2]));
		fSlow105 = +(0.026455 * +(fSlow104));
		fSlow106 = +(2. / +(50. + +(0.529101 * +(fSlow104))));
		fSlow107 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13928908 >> 2]))), 0.99));
		fSlow108 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13928912 >> 2])))));
		fSlow109 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13928916 >> 2])) + +(+(HEAPF32[dsp + 13928920 >> 2]))));
		fSlow110 = +(0.001 * +(+(HEAPF32[dsp + 13928924 >> 2])));
		fSlow111 = +(0.001 * +(+(HEAPF32[dsp + 13928928 >> 2])));
		fSlow112 = +(0.001 * +(+(HEAPF32[dsp + 13928932 >> 2])));
		fSlow113 = +(0.001 * +(+(HEAPF32[dsp + 13928936 >> 2])));
		fSlow114 = +(0.001 * +(+(HEAPF32[dsp + 13928940 >> 2])));
		fSlow115 = +(0.001 * +(+(HEAPF32[dsp + 13928944 >> 2])));
		fSlow116 = +(0.001 * +(((+(+(HEAPF32[dsp + 13928948 >> 2])) > 0.) | 0)));
		iSlow117 = ((+(+(HEAPF32[dsp + 13928952 >> 2])) > 0.) | 0);
		fSlow118 = +(0.001 * +((iSlow117 | 0)));
		fSlow119 = +(+(HEAPF32[dsp + 13928956 >> 2]));
		iSlow120 = ~~(+(fSlow119));
		iSlow121 = ((max(0, ((1 - ((abs((((iSlow120 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow122 = (((iSlow120 | 0) == 2) | 0);
		fSlow123 = +(min(1., +(fSlow119)));
		iSlow124 = ((max(0, ((1 - ((abs((((iSlow120 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow125 = (((iSlow120 | 0) == 3) | 0);
		fSlow126 = +(0.01 * +(((+(fSlow119) < 3.) | 0)));
		fSlow127 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928960 >> 2]))));
		fSlow128 = +(0.001 * +(+(HEAPF32[dsp + 13928964 >> 2])));
		fSlow129 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13928968 >> 2]))));
		fSlow130 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13928972 >> 2]))));
		fSlow131 = +(3.14 / +(fSlow129));
		fSlow132 = +(+(HEAPF32[dsp + 13928976 >> 2]));
		fSlow133 = +(0.026455 * +(fSlow132));
		fSlow134 = +(2. / +(50. + +(0.529101 * +(fSlow132))));
		fSlow135 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13928980 >> 2]))), 0.99));
		fSlow136 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13928984 >> 2])))));
		fSlow137 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13928988 >> 2])) + +(+(HEAPF32[dsp + 13928992 >> 2]))));
		fSlow138 = +(0.001 * +(+(HEAPF32[dsp + 13928996 >> 2])));
		fSlow139 = +(0.001 * +(+(HEAPF32[dsp + 13929000 >> 2])));
		fSlow140 = +(0.001 * +(+(HEAPF32[dsp + 13929004 >> 2])));
		fSlow141 = +(0.001 * +(+(HEAPF32[dsp + 13929008 >> 2])));
		fSlow142 = +(0.001 * +(+(HEAPF32[dsp + 13929012 >> 2])));
		fSlow143 = +(0.001 * +(+(HEAPF32[dsp + 13929016 >> 2])));
		fSlow144 = +(0.001 * +(((+(+(HEAPF32[dsp + 13929020 >> 2])) > 0.) | 0)));
		iSlow145 = ((+(+(HEAPF32[dsp + 13929024 >> 2])) > 0.) | 0);
		fSlow146 = +(0.001 * +((iSlow145 | 0)));
		fSlow147 = +(+(HEAPF32[dsp + 13929028 >> 2]));
		fSlow148 = +(min(1., +(fSlow147)));
		fSlow149 = +(0.01 * +(((+(fSlow147) < 3.) | 0)));
		iSlow150 = ~~(+(fSlow147));
		iSlow151 = ((max(0, ((1 - ((abs((((iSlow150 | 0) - 2) | 0))) | 0)) | 0))) | 0);
		iSlow152 = (((iSlow150 | 0) == 2) | 0);
		iSlow153 = ((max(0, ((1 - ((abs((((iSlow150 | 0) - 3) | 0))) | 0)) | 0))) | 0);
		iSlow154 = (((iSlow150 | 0) == 3) | 0);
		fSlow155 = +(0.001 * +(+(HEAPF32[dsp + 13929032 >> 2])));
		fSlow156 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13929036 >> 2]))));
		fSlow157 = +(1000. + +(79.3651 * +(+(HEAPF32[dsp + 13929040 >> 2]))));
		fSlow158 = +(0.2 + +(0.01 * +(+(HEAPF32[dsp + 13929044 >> 2]))));
		fSlow159 = +(3.14 / +(fSlow157));
		fSlow160 = +(+(HEAPF32[dsp + 13929048 >> 2]));
		fSlow161 = +(0.026455 * +(fSlow160));
		fSlow162 = +(2. / +(50. + +(0.529101 * +(fSlow160))));
		fSlow163 = +(min(+(0.00529101 * +(+(HEAPF32[dsp + 13929052 >> 2]))), 0.99));
		fSlow164 = +(+(HEAPF32[dsp + 13928684 >> 2]) * +(30. + +(2. * +(+(HEAPF32[dsp + 13929056 >> 2])))));
		fSlow165 = +(2.5e-06 * +(+(+(HEAPF32[dsp + 13929060 >> 2])) + +(+(HEAPF32[dsp + 13929064 >> 2]))));
		fSlow166 = +(0.001 * +(+(HEAPF32[dsp + 13929068 >> 2])));
		fSlow167 = +(0.001 * +(+(HEAPF32[dsp + 13929072 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF32[dsp + 13926888 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999 * +(HEAPF32[dsp + 13926888 + (1 << 2) >> 2])));
			HEAP32[dsp + 13926896 + (0 << 2) >> 2] = ((1 + (((HEAP32[dsp + 13926896 + (1 << 2) >> 2] | 0) % 88200) | 0)) | 0);
			fTemp0 = +(+(HEAPF32[input0 + ((i | 0) << 2) >> 2]));
			HEAPF32[dsp + 13926904 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13926904 + (1 << 2) >> 2])) + +(fSlow3));
			HEAPF32[dsp + 13926912 + (0 << 2) >> 2] = +(0.1 + +(+(HEAPF32[dsp + 13926912 + (1 << 2) >> 2]) % 1000.));
			iTemp1 = ((+(HEAPF32[dsp + 13926912 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13926912 + (1 << 2) >> 2])) | 0);
			HEAP32[dsp + 13915200 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow5 | 0):(HEAP32[dsp + 13915200 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp2 = (imul(((1 - (HEAP32[dsp + 13915200 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13915200 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13926920 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow6 | 0):(HEAP32[dsp + 13926920 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13926928 + (0 << 2) >> 2] = (((((((iTemp2 | 0)?0:(HEAP32[dsp + 13926928 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0) + (HEAP32[dsp + 13926920 + (0 << 2) >> 2] | 0)) | 0);
			HEAPF32[dsp + 0 + ((HEAP32[dsp + 13926928 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow2) * +(fTemp0));
			HEAP32[dsp + 13915712 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow7 | 0):(HEAP32[dsp + 13915712 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13926936 + (0 << 2) >> 2] = (((((iTemp2 | 0)?0:(HEAP32[dsp + 13926936 + (1 << 2) >> 2] | 0)) | 0) + (HEAP32[dsp + 13926920 + (0 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13926944 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow8 | 0):(HEAP32[dsp + 13926944 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13926952 + (0 << 2) >> 2] = (((((((imul(((1 - (HEAP32[dsp + 13915712 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13915712 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)?0:(HEAP32[dsp + 13926952 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13926936 + (0 << 2) >> 2] | 0))) | 0)) | 0) + (HEAP32[dsp + 13926944 + (0 << 2) >> 2] | 0)) | 0);
			fTemp3 = +(+(+(fSlow2) * +(+(fTemp0) * +(HEAPF32[dsp + 13926904 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 0 + ((HEAP32[dsp + 13926952 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAP32[dsp + 13489632 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow9 | 0);
			HEAPF32[dsp + 13926960 + (0 << 2) >> 2] = +(+(fSlow10) + +(0.999 * +(HEAPF32[dsp + 13926960 + (1 << 2) >> 2])));
			iTemp4 = (imul((iSlow9 | 0), ((1 - (HEAP32[dsp + 13489632 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13926968 + (0 << 2) >> 2] = ((1 + (((iTemp4 | 0)?0:(HEAP32[dsp + 13926968 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13686240 + (((min(4410, (HEAP32[dsp + 13926968 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp3) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13926968 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13926976 + (0 << 2) >> 2] = +(+((iTemp4 | 0)?0.:+(HEAPF32[dsp + 13926976 + (1 << 2) >> 2])) + +(fSlow11));
			HEAPF32[dsp + 12703200 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13686240 + (~~(+(+(HEAPF32[dsp + 13926976 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			HEAPF32[dsp + 13926984 + (0 << 2) >> 2] = +(+(fSlow12) + +(0.999 * +(HEAPF32[dsp + 13926984 + (1 << 2) >> 2])));
			fTemp5 = +(15.873 * +(HEAPF32[dsp + 13926984 + (0 << 2) >> 2]));
			fTemp6 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp5)))));
			fTemp7 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp5))))) * +(fTemp6)))));
			fTemp8 = +(faustpower2_f(+(fTemp7)));
			fTemp9 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp6)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp8) / +(fTemp6))));
			fTemp10 = +(3.12965 * +(fTemp9));
			fTemp11 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp8));
			fTemp12 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp9));
			fTemp13 = +(faustpower2_f(+(fTemp9)));
			fTemp14 = +(16. * +(fTemp8));
			fTemp15 = +(faustpower4_f(+(fTemp7)));
			fTemp16 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp15));
			fTemp17 = +(8. * +(fTemp8));
			fTemp18 = +(+(fTemp17) + +(0.981166 * +(fTemp13)));
			fTemp19 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp8));
			fTemp20 = +(1.56483 * +(fTemp9));
			fTemp21 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp9));
			fTemp22 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp18) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) + +(fTemp20)))))) + +(fTemp21)));
			HEAPF32[dsp + 13926240 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 12703200 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13686240 + (~~(+(+(HEAPF32[dsp + 13926976 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 12703200 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926240 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp10) + +(fTemp11)))) - +(64. + +(fTemp12)))) + +(+(HEAPF32[dsp + 13926240 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp13)) + +(fTemp14))) + +(fTemp16)))))) + +(+(HEAPF32[dsp + 13926240 + (3 << 2) >> 2]) * +(+(+(fTemp12) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp11) - +(fTemp10))))) - 64.))) + +(+(HEAPF32[dsp + 13926240 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp18) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) - +(fTemp20))))))) - +(fTemp21)))) / +(fTemp22)));
			fTemp23 = +(+(0.00173291 * +(fTemp13)) + +(0.0008 * +(fTemp8)));
			fTemp24 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp15)) - 0.0064);
			fTemp25 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp15));
			fTemp26 = +(2.04991 * +(fTemp9));
			fTemp27 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp9));
			fTemp28 = +(+(fTemp17) + +(2.75849 * +(fTemp13)));
			fTemp29 = +(1.02496 * +(fTemp9));
			fTemp30 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp9));
			fTemp31 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp28) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) + +(fTemp29)))))) + +(fTemp30)));
			HEAPF32[dsp + 13926260 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926240 + (0 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp23)) + 0.0016)) + +(+(HEAPF32[dsp + 13926240 + (1 << 2) >> 2]) * +(fTemp24))) + +(+(HEAPF32[dsp + 13926240 + (2 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp13)) + +(0.0016 * +(fTemp8)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp15)))) + 0.0096))) + +(+(HEAPF32[dsp + 13926240 + (3 << 2) >> 2]) * +(fTemp24))) + +(+(HEAPF32[dsp + 13926240 + (4 << 2) >> 2]) * +(0.0016 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp25) + +(+(fTemp23) + +(fTemp25))))))) / +(fTemp22)) - +(+(+(+(+(+(HEAPF32[dsp + 13926260 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp11) + +(fTemp26)))) - +(64. + +(fTemp27)))) + +(+(HEAPF32[dsp + 13926260 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp16) + +(0. - +(+(fTemp14) + +(5.51697 * +(fTemp13))))))))) + +(+(HEAPF32[dsp + 13926260 + (3 << 2) >> 2]) * +(+(+(fTemp27) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp11) - +(fTemp26))))) - 64.))) + +(+(HEAPF32[dsp + 13926260 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp28) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) - +(fTemp29))))))) - +(fTemp30)))) / +(fTemp31)));
			fTemp32 = +(+(fTemp17) + +(30.4869 * +(fTemp13)));
			fTemp33 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp15)) - 64.);
			fTemp34 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp15));
			fTemp35 = +(0.67362 * +(fTemp9));
			fTemp36 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp9));
			fTemp37 = +(+(fTemp17) + +(4.27743 * +(fTemp13)));
			fTemp38 = +(0.33681 * +(fTemp9));
			fTemp39 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp9));
			fTemp40 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp37) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) + +(fTemp38)))))) + +(fTemp39)));
			HEAPF32[dsp + 13926280 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926260 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp32)))) + +(+(HEAPF32[dsp + 13926260 + (1 << 2) >> 2]) * +(fTemp33))) + +(+(HEAPF32[dsp + 13926260 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp16) + +(0. - +(+(fTemp14) + +(60.9739 * +(fTemp13))))))))) + +(+(HEAPF32[dsp + 13926260 + (3 << 2) >> 2]) * +(fTemp33))) + +(+(HEAPF32[dsp + 13926260 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp34) + +(+(fTemp34) + +(fTemp32))))))) / +(fTemp31)) - +(+(+(+(+(+(HEAPF32[dsp + 13926280 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp11) + +(fTemp35)))) - +(64. + +(fTemp36)))) + +(+(HEAPF32[dsp + 13926280 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(8.55487 * +(fTemp13)) + +(fTemp14))) + +(fTemp16)))))) + +(+(HEAPF32[dsp + 13926280 + (3 << 2) >> 2]) * +(+(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp8) * +(+(fTemp11) - +(fTemp35)))) + +(fTemp36)) - 64.))) + +(+(HEAPF32[dsp + 13926280 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp37) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp8) * +(+(fTemp19) - +(fTemp38))))))) - +(fTemp39)))) / +(fTemp40)));
			fTemp41 = +(+(fTemp17) + +(214.145 * +(fTemp13)));
			fTemp42 = +(+(+(fTemp3) * +(1. - +(HEAPF32[dsp + 13926960 + (0 << 2) >> 2]))) + +(50. * +(+(+(+(+(+(HEAPF32[dsp + 13926280 + (3 << 2) >> 2]) * +(fTemp33)) + +(+(+(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp41))) * +(HEAPF32[dsp + 13926280 + (0 << 2) >> 2])) + +(+(fTemp33) * +(HEAPF32[dsp + 13926280 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926280 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(428.289 * +(fTemp13)) + +(fTemp14))) + +(fTemp16))))))) + +(+(HEAPF32[dsp + 13926280 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(+(fTemp41) + +(fTemp34)) + +(fTemp34)))))) * +(HEAPF32[dsp + 13926960 + (0 << 2) >> 2])) / +(fTemp40))));
			HEAPF32[dsp + 10584000 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp42);
			HEAPF32[dsp + 13926992 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13926992 + (1 << 2) >> 2]) % +(fSlow13)) + +(fSlow14));
			HEAP32[dsp + 13927000 + (0 << 2) >> 2] = ((12345 + (imul(1103515245, (HEAP32[dsp + 13927000 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			fTemp43 = +(+(30000. * +(1. + +(4.65661e-10 * +((HEAP32[dsp + 13927000 + (0 << 2) >> 2] | 0))))) + +((imul(44100, (((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) < 44100) | 0)) | 0)));
			HEAPF32[dsp + 13927008 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13926992 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13926992 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13927008 + (1 << 2) >> 2]));
			HEAPF32[dsp + 13927016 + (0 << 2) >> 2] = +(+(fSlow16) + +(0.999 * +(HEAPF32[dsp + 13927016 + (1 << 2) >> 2])));
			fTemp44 = +(+(+(+(HEAPF32[dsp + 10584000 + (~~(+(+(HEAPF32[dsp + 13926992 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13927008 + (0 << 2) >> 2]))))))) << 2) >> 2]) * +(sinf(+(+(fSlow15) * +(HEAPF32[dsp + 13926992 + (0 << 2) >> 2]))))) * +(HEAPF32[dsp + 13927016 + (0 << 2) >> 2])) + +(+(fTemp42) * +(1. - +(HEAPF32[dsp + 13927016 + (0 << 2) >> 2]))));
			HEAPF32[dsp + 13927024 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927024 + (1 << 2) >> 2])) + +(fSlow17));
			HEAPF32[dsp + 13927032 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13927032 + (1 << 2) >> 2])) + +(fSlow19));
			fTemp45 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13927032 + (0 << 2) >> 2])))));
			fTemp46 = +(1. / +(fTemp45));
			fTemp47 = +(1. + +(+(+(fTemp46) + +(fSlow20)) / +(fTemp45)));
			HEAPF32[dsp + 13926600 + (0 << 2) >> 2] = +(+(fTemp44) - +(+(+(+(HEAPF32[dsp + 13926600 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp46) - +(fSlow20)) / +(fTemp45)))) + +(2. * +(+(HEAPF32[dsp + 13926600 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp45)))))))) / +(fTemp47)));
			fTemp48 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13927032 + (0 << 2) >> 2]))))));
			fTemp49 = +(1. / +(fTemp48));
			fTemp50 = +(1. + +(+(+(fSlow20) + +(fTemp49)) / +(fTemp48)));
			HEAPF32[dsp + 13926612 + (0 << 2) >> 2] = +(+(fTemp44) - +(+(+(+(HEAPF32[dsp + 13926612 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp49) - +(fSlow20)) / +(fTemp48)))) + +(2. * +(+(HEAPF32[dsp + 13926612 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp48)))))))) / +(fTemp50)));
			fTemp51 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13927032 + (0 << 2) >> 2]))))));
			fTemp52 = +(1. / +(fTemp51));
			fTemp53 = +(1. + +(+(+(fSlow20) + +(fTemp52)) / +(fTemp51)));
			HEAPF32[dsp + 13926624 + (0 << 2) >> 2] = +(+(fTemp44) - +(+(+(+(HEAPF32[dsp + 13926624 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp52) - +(fSlow20)) / +(fTemp51)))) + +(2. * +(+(HEAPF32[dsp + 13926624 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp51)))))))) / +(fTemp53)));
			fTemp54 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13927032 + (0 << 2) >> 2]))))));
			fTemp55 = +(1. / +(fTemp54));
			fTemp56 = +(1. + +(+(+(fSlow20) + +(fTemp55)) / +(fTemp54)));
			HEAPF32[dsp + 13926636 + (0 << 2) >> 2] = +(+(fTemp44) - +(+(+(+(HEAPF32[dsp + 13926636 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp55) - +(fSlow20)) / +(fTemp54)))) + +(2. * +(+(HEAPF32[dsp + 13926636 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp54)))))))) / +(fTemp56)));
			fTemp57 = +(+(+(fTemp44) * +(1. - +(HEAPF32[dsp + 13927024 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13927024 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(1.2 * +(HEAPF32[dsp + 13926600 + (1 << 2) >> 2])) + +(0.6 * +(HEAPF32[dsp + 13926600 + (0 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926600 + (2 << 2) >> 2]))) / +(fTemp47)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926612 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926612 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926612 + (2 << 2) >> 2]))) / +(fTemp50))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926624 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926624 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926624 + (2 << 2) >> 2]))) / +(fTemp53))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926636 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926636 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926636 + (2 << 2) >> 2]))) / +(fTemp56)))));
			HEAPF32[dsp + 13927040 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13927040 + (1 << 2) >> 2]) + +(fSlow22)), 1.));
			HEAPF32[dsp + 13927048 + (0 << 2) >> 2] = +(+(+(fSlow21) * +(HEAPF32[dsp + 13927048 + (1 << 2) >> 2])) + +(+(fTemp57) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13927040 + (0 << 2) >> 2]))))));
			fTemp58 = +(+(+(1. - +(HEAPF32[dsp + 13926888 + (0 << 2) >> 2])) * +(fTemp57)) + +(+(HEAPF32[dsp + 13926888 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13927048 + (0 << 2) >> 2])));
			fTemp59 = +(0.2 * +(fTemp58));
			fTemp60 = +(+(fTemp59) + +(0.764 * +(HEAPF32[dsp + 13927056 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13792320 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp60);
			HEAPF32[dsp + 13927056 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13792320 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927064 + (0 << 2) >> 2] = +(fTemp60);
			fTemp61 = +(+(fTemp59) + +(0.783 * +(HEAPF32[dsp + 13927072 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13841472 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp61);
			HEAPF32[dsp + 13927072 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13841472 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927080 + (0 << 2) >> 2] = +(fTemp61);
			fTemp62 = +(+(fTemp59) + +(0.805 * +(HEAPF32[dsp + 13927088 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13845568 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp62);
			HEAPF32[dsp + 13927088 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13845568 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927096 + (0 << 2) >> 2] = +(fTemp62);
			fTemp63 = +(+(0.827 * +(HEAPF32[dsp + 13927104 + (1 << 2) >> 2])) + +(fTemp59));
			HEAPF32[dsp + 13849664 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp63);
			HEAPF32[dsp + 13927104 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13849664 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927112 + (0 << 2) >> 2] = +(fTemp63);
			fTemp64 = +(+(HEAPF32[dsp + 13927064 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927080 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927096 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13927120 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927112 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13916224 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp64);
			HEAPF32[dsp + 13927120 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13916224 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec5 = +(0. - +(0.7 * +(fTemp64)));
			fTemp65 = +(+(+(fRec5) + +(0.7 * +(HEAPF32[dsp + 13927128 + (1 << 2) >> 2]))) + +(HEAPF32[dsp + 13927120 + (1 << 2) >> 2]));
			HEAPF32[dsp + 13924416 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp65);
			HEAPF32[dsp + 13927128 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13924416 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec3 = +(0. - +(0.7 * +(fTemp65)));
			fTemp66 = +(+(+(fRec3) + +(0.7 * +(HEAPF32[dsp + 13927136 + (1 << 2) >> 2]))) + +(HEAPF32[dsp + 13927128 + (1 << 2) >> 2]));
			HEAPF32[dsp + 13925952 + (0 << 2) >> 2] = +(fTemp66);
			HEAPF32[dsp + 13927136 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13925952 + (11 << 2) >> 2]);
			fRec1 = +(0. - +(0.7 * +(fTemp66)));
			HEAPF32[dsp + 13927144 + (0 << 2) >> 2] = +(+(fSlow23) + +(0.999 * +(HEAPF32[dsp + 13927144 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927152 + (0 << 2) >> 2] = +(+(fSlow24) + +(0.999 * +(HEAPF32[dsp + 13927152 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927160 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927160 + (1 << 2) >> 2])) + +(fSlow25));
			fTemp67 = +(0. - +(HEAPF32[dsp + 13927160 + (0 << 2) >> 2]));
			HEAPF32[dsp + 13927168 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927168 + (1 << 2) >> 2])) + +(fSlow26));
			fTemp68 = +(powf(+(+(faustpower2_f(+(fTemp67))) + +(faustpower2_f(+(HEAPF32[dsp + 13927168 + (0 << 2) >> 2])))), 0.5));
			iTemp69 = ((+(fTemp68) > 1.) | 0);
			iTemp70 = ((+(fTemp68) < 1.) | 0);
			fTemp71 = +(+((iTemp69 | 0)) + +(+(fTemp68) * +((iTemp70 | 0))));
			HEAPF32[dsp + 13927176 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927176 + (1 << 2) >> 2])) + +(fSlow27));
			fTemp72 = +(+(+(+(+(+(+(+(fRec1) + +(HEAPF32[dsp + 13927136 + (1 << 2) >> 2])) * +(HEAPF32[dsp + 13927144 + (0 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 13927144 + (0 << 2) >> 2])) * +(fTemp58))) * +(HEAPF32[dsp + 13927152 + (0 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 13927152 + (0 << 2) >> 2])) * +(fTemp58))) * +(1. + +(1.38629 * +(0. - +(+(fTemp71) - 1.))))) * +(HEAPF32[dsp + 13927176 + (0 << 2) >> 2]));
			fTemp73 = +(+(+(faustpower2_f(+(fTemp68))) * +((iTemp69 | 0))) + +((iTemp70 | 0)));
			HEAPF32[dsp + 13927184 + (0 << 2) >> 2] = +(+(fSlow28) + +(0.999 * +(HEAPF32[dsp + 13927184 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927192 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13927192 + (1 << 2) >> 2])) + +(fSlow31));
			HEAP32[dsp + 13916736 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow33 | 0):(HEAP32[dsp + 13916736 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp74 = (imul(((1 - (HEAP32[dsp + 13916736 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13916736 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927200 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow34 | 0):(HEAP32[dsp + 13927200 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927208 + (0 << 2) >> 2] = (((((((iTemp74 | 0)?0:(HEAP32[dsp + 13927208 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0) + (HEAP32[dsp + 13927200 + (0 << 2) >> 2] | 0)) | 0);
			HEAPF32[dsp + 1764000 + ((HEAP32[dsp + 13927208 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow30) * +(fTemp0));
			HEAP32[dsp + 13917248 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow35 | 0):(HEAP32[dsp + 13917248 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927216 + (0 << 2) >> 2] = (((((iTemp74 | 0)?0:(HEAP32[dsp + 13927216 + (1 << 2) >> 2] | 0)) | 0) + (HEAP32[dsp + 13927200 + (0 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927224 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow36 | 0):(HEAP32[dsp + 13927224 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927232 + (0 << 2) >> 2] = (((((((imul(((1 - (HEAP32[dsp + 13917248 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13917248 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)?0:(HEAP32[dsp + 13927232 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13927216 + (0 << 2) >> 2] | 0))) | 0)) | 0) + (HEAP32[dsp + 13927224 + (0 << 2) >> 2] | 0)) | 0);
			fTemp75 = +(+(+(fSlow30) * +(+(fTemp0) * +(HEAPF32[dsp + 13927192 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 1764000 + ((HEAP32[dsp + 13927232 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAP32[dsp + 13522400 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow37 | 0);
			HEAPF32[dsp + 13927240 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927240 + (1 << 2) >> 2])) + +(fSlow38));
			HEAPF32[dsp + 13927248 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927248 + (1 << 2) >> 2])) + +(fSlow39));
			fTemp76 = +(15.873 * +(HEAPF32[dsp + 13927248 + (0 << 2) >> 2]));
			fTemp77 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp76)))));
			fTemp78 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp76))))) * +(fTemp77)))));
			fTemp79 = +(faustpower2_f(+(fTemp78)));
			fTemp80 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp77)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp79) / +(fTemp77))));
			fTemp81 = +(faustpower2_f(+(fTemp80)));
			fTemp82 = +(+(0.0008 * +(fTemp79)) + +(0.00173291 * +(fTemp81)));
			iTemp83 = (imul((iSlow37 | 0), ((1 - (HEAP32[dsp + 13522400 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13927256 + (0 << 2) >> 2] = ((1 + (((iTemp83 | 0)?0:(HEAP32[dsp + 13927256 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13703920 + (((min(4410, (HEAP32[dsp + 13927256 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp75) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13927256 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13927264 + (0 << 2) >> 2] = +(+((iTemp83 | 0)?0.:+(HEAPF32[dsp + 13927264 + (1 << 2) >> 2])) + +(fSlow40));
			HEAPF32[dsp + 12834272 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13703920 + (~~(+(+(HEAPF32[dsp + 13927264 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			fTemp84 = +(3.12965 * +(fTemp80));
			fTemp85 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp79));
			fTemp86 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp80));
			fTemp87 = +(16. * +(fTemp79));
			fTemp88 = +(faustpower4_f(+(fTemp78)));
			fTemp89 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp88));
			fTemp90 = +(8. * +(fTemp79));
			fTemp91 = +(+(0.981166 * +(fTemp81)) + +(fTemp90));
			fTemp92 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp79));
			fTemp93 = +(1.56483 * +(fTemp80));
			fTemp94 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp80));
			fTemp95 = +(16. + +(+(fTemp94) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp91) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) + +(fTemp93))))))));
			HEAPF32[dsp + 13926300 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 12834272 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13703920 + (~~(+(+(HEAPF32[dsp + 13927264 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 12834272 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926300 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp84) + +(fTemp85)))) - +(64. + +(fTemp86)))) + +(+(HEAPF32[dsp + 13926300 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp81)) + +(fTemp87))) + +(fTemp89)))))) + +(+(HEAPF32[dsp + 13926300 + (3 << 2) >> 2]) * +(+(+(fTemp86) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp85) - +(fTemp84))))) - 64.))) + +(+(HEAPF32[dsp + 13926300 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp91) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) - +(fTemp93))))))) - +(fTemp94)))) / +(fTemp95)));
			fTemp96 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp88)) - 0.0064);
			fTemp97 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp88));
			fTemp98 = +(2.04991 * +(fTemp80));
			fTemp99 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp80));
			fTemp100 = +(+(fTemp90) + +(2.75849 * +(fTemp81)));
			fTemp101 = +(1.02496 * +(fTemp80));
			fTemp102 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp80));
			fTemp103 = +(16. + +(+(fTemp102) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp100) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) + +(fTemp101))))))));
			HEAPF32[dsp + 13926320 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp82)) + 0.0016) * +(HEAPF32[dsp + 13926300 + (0 << 2) >> 2])) + +(+(HEAPF32[dsp + 13926300 + (1 << 2) >> 2]) * +(fTemp96))) + +(+(HEAPF32[dsp + 13926300 + (2 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp81)) + +(0.0016 * +(fTemp79)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp88)))) + 0.0096))) + +(+(HEAPF32[dsp + 13926300 + (3 << 2) >> 2]) * +(fTemp96))) + +(+(HEAPF32[dsp + 13926300 + (4 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp97) + +(+(fTemp82) + +(fTemp97)))) + 0.0016))) / +(fTemp95)) - +(+(+(+(+(+(HEAPF32[dsp + 13926320 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp85) + +(fTemp98)))) - +(64. + +(fTemp99)))) + +(+(HEAPF32[dsp + 13926320 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp89) + +(0. - +(+(fTemp87) + +(5.51697 * +(fTemp81))))))))) + +(+(HEAPF32[dsp + 13926320 + (3 << 2) >> 2]) * +(+(+(fTemp99) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp85) - +(fTemp98))))) - 64.))) + +(+(HEAPF32[dsp + 13926320 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp100) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) - +(fTemp101))))))) - +(fTemp102)))) / +(fTemp103)));
			fTemp104 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp88));
			fTemp105 = +(+(fTemp90) + +(30.4869 * +(fTemp81)));
			fTemp106 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp88)) - 64.);
			fTemp107 = +(0.67362 * +(fTemp80));
			fTemp108 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp80));
			fTemp109 = +(+(fTemp90) + +(4.27743 * +(fTemp81)));
			fTemp110 = +(0.33681 * +(fTemp80));
			fTemp111 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp80));
			fTemp112 = +(16. + +(+(fTemp111) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp109) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) + +(fTemp110))))))));
			HEAPF32[dsp + 13926340 + (0 << 2) >> 2] = +(+(+(+(+(HEAPF32[dsp + 13926320 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp104) + +(+(fTemp104) + +(fTemp105)))))) + +(+(+(HEAPF32[dsp + 13926320 + (3 << 2) >> 2]) * +(fTemp106)) + +(+(+(+(HEAPF32[dsp + 13926320 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp105)))) + +(+(HEAPF32[dsp + 13926320 + (1 << 2) >> 2]) * +(fTemp106))) + +(+(HEAPF32[dsp + 13926320 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp89) + +(0. - +(+(fTemp87) + +(60.9739 * +(fTemp81))))))))))) / +(fTemp103)) - +(+(+(+(+(+(HEAPF32[dsp + 13926340 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp85) + +(fTemp107)))) - +(64. + +(fTemp108)))) + +(+(HEAPF32[dsp + 13926340 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp89) + +(0. - +(+(fTemp87) + +(8.55487 * +(fTemp81))))))))) + +(+(HEAPF32[dsp + 13926340 + (3 << 2) >> 2]) * +(+(+(fTemp108) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp79) * +(+(fTemp85) - +(fTemp107))))) - 64.))) + +(+(HEAPF32[dsp + 13926340 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp109) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp79) * +(+(fTemp92) - +(fTemp110))))))) - +(fTemp111)))) / +(fTemp112)));
			fTemp113 = +(+(fTemp90) + +(214.145 * +(fTemp81)));
			fTemp114 = +(+(+(fTemp75) * +(1. - +(HEAPF32[dsp + 13927240 + (0 << 2) >> 2]))) + +(50. * +(+(+(HEAPF32[dsp + 13927240 + (0 << 2) >> 2]) * +(+(+(+(+(+(HEAPF32[dsp + 13926340 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp113)))) + +(+(HEAPF32[dsp + 13926340 + (1 << 2) >> 2]) * +(fTemp106))) + +(+(HEAPF32[dsp + 13926340 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp89) + +(0. - +(+(fTemp87) + +(428.289 * +(fTemp81))))))))) + +(+(HEAPF32[dsp + 13926340 + (3 << 2) >> 2]) * +(fTemp106))) + +(+(HEAPF32[dsp + 13926340 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp104) + +(+(fTemp104) + +(fTemp113)))))))) / +(fTemp112))));
			HEAPF32[dsp + 10937200 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp114);
			HEAPF32[dsp + 13927272 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13927272 + (1 << 2) >> 2]) % +(fSlow41)) + +(fSlow42));
			HEAPF32[dsp + 13927280 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13927272 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13927272 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13927280 + (1 << 2) >> 2]));
			fTemp115 = +(+(+(1. - +(HEAPF32[dsp + 13927184 + (0 << 2) >> 2])) * +(fTemp114)) + +(+(+(HEAPF32[dsp + 13927184 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 10937200 + (~~(+(+(HEAPF32[dsp + 13927272 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13927280 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow43) * +(HEAPF32[dsp + 13927272 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 13927288 + (0 << 2) >> 2] = +(+(fSlow45) + +(0.99 * +(HEAPF32[dsp + 13927288 + (1 << 2) >> 2])));
			fTemp116 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13927288 + (0 << 2) >> 2]))))));
			fTemp117 = +(1. / +(fTemp116));
			fTemp118 = +(1. + +(+(+(fSlow46) + +(fTemp117)) / +(fTemp116)));
			HEAPF32[dsp + 13926648 + (0 << 2) >> 2] = +(+(fTemp115) - +(+(+(+(HEAPF32[dsp + 13926648 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp117) - +(fSlow46)) / +(fTemp116)))) + +(2. * +(+(HEAPF32[dsp + 13926648 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp116)))))))) / +(fTemp118)));
			fTemp119 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13927288 + (0 << 2) >> 2])))));
			fTemp120 = +(1. / +(fTemp119));
			fTemp121 = +(1. + +(+(+(fSlow46) + +(fTemp120)) / +(fTemp119)));
			HEAPF32[dsp + 13926660 + (0 << 2) >> 2] = +(+(fTemp115) - +(+(+(+(HEAPF32[dsp + 13926660 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp120) - +(fSlow46)) / +(fTemp119)))) + +(2. * +(+(HEAPF32[dsp + 13926660 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp119)))))))) / +(fTemp121)));
			fTemp122 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13927288 + (0 << 2) >> 2]))))));
			fTemp123 = +(1. / +(fTemp122));
			fTemp124 = +(1. + +(+(+(fTemp123) + +(fSlow46)) / +(fTemp122)));
			HEAPF32[dsp + 13926672 + (0 << 2) >> 2] = +(+(fTemp115) - +(+(+(+(HEAPF32[dsp + 13926672 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp123) - +(fSlow46)) / +(fTemp122)))) + +(2. * +(+(1. - +(1. / +(faustpower2_f(+(fTemp122))))) * +(HEAPF32[dsp + 13926672 + (1 << 2) >> 2])))) / +(fTemp124)));
			fTemp125 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13927288 + (0 << 2) >> 2]))))));
			fTemp126 = +(1. / +(fTemp125));
			fTemp127 = +(1. + +(+(+(fSlow46) + +(fTemp126)) / +(fTemp125)));
			HEAPF32[dsp + 13926684 + (0 << 2) >> 2] = +(+(fTemp115) - +(+(+(+(HEAPF32[dsp + 13926684 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp126) - +(fSlow46)) / +(fTemp125)))) + +(2. * +(+(HEAPF32[dsp + 13926684 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp125)))))))) / +(fTemp127)));
			HEAPF32[dsp + 13927296 + (0 << 2) >> 2] = +(+(fSlow47) + +(0.999 * +(HEAPF32[dsp + 13927296 + (1 << 2) >> 2])));
			fTemp128 = +(+(+(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 13926648 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926648 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926648 + (2 << 2) >> 2]))) / +(fTemp118)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926660 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926660 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926660 + (2 << 2) >> 2]))) / +(fTemp121))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926672 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926672 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926672 + (2 << 2) >> 2]))) / +(fTemp124))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926684 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926684 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926684 + (2 << 2) >> 2]))) / +(fTemp127))) * +(HEAPF32[dsp + 13927296 + (0 << 2) >> 2])) + +(+(1. - +(HEAPF32[dsp + 13927296 + (0 << 2) >> 2])) * +(fTemp115)));
			HEAPF32[dsp + 13927304 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927304 + (1 << 2) >> 2])) + +(fSlow48));
			HEAPF32[dsp + 13927312 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13927312 + (1 << 2) >> 2]) + +(fSlow50)), 1.));
			HEAPF32[dsp + 13927320 + (0 << 2) >> 2] = +(+(+(fSlow49) * +(HEAPF32[dsp + 13927320 + (1 << 2) >> 2])) + +(+(fTemp128) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13927312 + (0 << 2) >> 2]))))));
			fTemp129 = +(+(+(fTemp128) * +(1. - +(HEAPF32[dsp + 13927304 + (0 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13927304 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13927320 + (0 << 2) >> 2])));
			HEAPF32[dsp + 13927328 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927328 + (1 << 2) >> 2])) + +(fSlow51));
			HEAPF32[dsp + 13927336 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927336 + (1 << 2) >> 2])) + +(fSlow52));
			fTemp130 = +(0.2 * +(fTemp129));
			fTemp131 = +(+(fTemp130) + +(0.764 * +(HEAPF32[dsp + 13927344 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13800512 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp131);
			HEAPF32[dsp + 13927344 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13800512 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927352 + (0 << 2) >> 2] = +(fTemp131);
			fTemp132 = +(+(fTemp130) + +(0.783 * +(HEAPF32[dsp + 13927360 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13853760 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp132);
			HEAPF32[dsp + 13927360 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13853760 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927368 + (0 << 2) >> 2] = +(fTemp132);
			fTemp133 = +(+(fTemp130) + +(0.805 * +(HEAPF32[dsp + 13927376 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13857856 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp133);
			HEAPF32[dsp + 13927376 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13857856 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927384 + (0 << 2) >> 2] = +(fTemp133);
			fTemp134 = +(+(0.827 * +(HEAPF32[dsp + 13927392 + (1 << 2) >> 2])) + +(fTemp130));
			HEAPF32[dsp + 13861952 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp134);
			HEAPF32[dsp + 13927392 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13861952 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927400 + (0 << 2) >> 2] = +(fTemp134);
			fTemp135 = +(+(HEAPF32[dsp + 13927352 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927368 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927384 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13927408 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927400 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13917760 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp135);
			HEAPF32[dsp + 13927408 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13917760 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec83 = +(0. - +(0.7 * +(fTemp135)));
			fTemp136 = +(+(+(0.7 * +(HEAPF32[dsp + 13927416 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927408 + (1 << 2) >> 2])) + +(fRec83));
			HEAPF32[dsp + 13924672 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp136);
			HEAPF32[dsp + 13927416 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13924672 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec81 = +(0. - +(0.7 * +(fTemp136)));
			fTemp137 = +(+(+(0.7 * +(HEAPF32[dsp + 13927424 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927416 + (1 << 2) >> 2])) + +(fRec81));
			HEAPF32[dsp + 13926000 + (0 << 2) >> 2] = +(fTemp137);
			HEAPF32[dsp + 13927424 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13926000 + (11 << 2) >> 2]);
			fRec79 = +(0. - +(0.7 * +(fTemp137)));
			HEAPF32[dsp + 13927432 + (0 << 2) >> 2] = +(+(fSlow53) + +(0.999 * +(HEAPF32[dsp + 13927432 + (1 << 2) >> 2])));
			fTemp138 = +(0. - +(HEAPF32[dsp + 13927432 + (0 << 2) >> 2]));
			HEAPF32[dsp + 13927440 + (0 << 2) >> 2] = +(+(fSlow54) + +(0.999 * +(HEAPF32[dsp + 13927440 + (1 << 2) >> 2])));
			fTemp139 = +(powf(+(+(faustpower2_f(+(fTemp138))) + +(faustpower2_f(+(HEAPF32[dsp + 13927440 + (0 << 2) >> 2])))), 0.5));
			iTemp140 = ((+(fTemp139) > 1.) | 0);
			iTemp141 = ((+(fTemp139) < 1.) | 0);
			fTemp142 = +(+((iTemp140 | 0)) + +(+(fTemp139) * +((iTemp141 | 0))));
			HEAPF32[dsp + 13927448 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927448 + (1 << 2) >> 2])) + +(fSlow55));
			fTemp143 = +(+(+(+(+(fTemp129) * +(1. - +(HEAPF32[dsp + 13927328 + (0 << 2) >> 2]))) + +(+(+(+(fTemp129) * +(1. - +(HEAPF32[dsp + 13927336 + (0 << 2) >> 2]))) + +(+(+(HEAPF32[dsp + 13927424 + (1 << 2) >> 2]) + +(fRec79)) * +(HEAPF32[dsp + 13927336 + (0 << 2) >> 2]))) * +(HEAPF32[dsp + 13927328 + (0 << 2) >> 2]))) * +(1. + +(1.38629 * +(0. - +(+(fTemp142) - 1.))))) * +(HEAPF32[dsp + 13927448 + (0 << 2) >> 2]));
			fTemp144 = +(+(+(faustpower2_f(+(fTemp139))) * +((iTemp140 | 0))) + +((iTemp141 | 0)));
			HEAPF32[dsp + 13927456 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927456 + (1 << 2) >> 2])) + +(fSlow56));
			HEAPF32[dsp + 13927464 + (0 << 2) >> 2] = +(+(fSlow57) + +(0.999 * +(HEAPF32[dsp + 13927464 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927472 + (0 << 2) >> 2] = +(+(fSlow58) + +(0.999 * +(HEAPF32[dsp + 13927472 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927480 + (0 << 2) >> 2] = +(+(fSlow59) + +(0.999 * +(HEAPF32[dsp + 13927480 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927488 + (0 << 2) >> 2] = +(+(fSlow60) + +(0.999 * +(HEAPF32[dsp + 13927488 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927496 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13927496 + (1 << 2) >> 2])) + +(fSlow63));
			HEAP32[dsp + 13918272 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow65 | 0):(HEAP32[dsp + 13918272 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp145 = (imul(((1 - (HEAP32[dsp + 13918272 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13918272 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927504 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow66 | 0):(HEAP32[dsp + 13927504 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927512 + (0 << 2) >> 2] = (((((((iTemp145 | 0)?0:(HEAP32[dsp + 13927512 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0) + (HEAP32[dsp + 13927504 + (0 << 2) >> 2] | 0)) | 0);
			HEAPF32[dsp + 3528000 + ((HEAP32[dsp + 13927512 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow62) * +(fTemp0));
			HEAP32[dsp + 13918784 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow67 | 0):(HEAP32[dsp + 13918784 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927520 + (0 << 2) >> 2] = (((((iTemp145 | 0)?0:(HEAP32[dsp + 13927520 + (1 << 2) >> 2] | 0)) | 0) + (HEAP32[dsp + 13927504 + (0 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927528 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow68 | 0):(HEAP32[dsp + 13927528 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927536 + (0 << 2) >> 2] = (((((((imul(((1 - (HEAP32[dsp + 13918784 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0), (HEAP32[dsp + 13918784 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)?0:(HEAP32[dsp + 13927536 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13927520 + (0 << 2) >> 2] | 0))) | 0)) | 0) + (HEAP32[dsp + 13927528 + (0 << 2) >> 2] | 0)) | 0);
			fTemp146 = +(+(+(fSlow62) * +(+(fTemp0) * +(HEAPF32[dsp + 13927496 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 3528000 + ((HEAP32[dsp + 13927536 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAP32[dsp + 13555168 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow69 | 0);
			HEAPF32[dsp + 13927544 + (0 << 2) >> 2] = +(+(fSlow70) + +(0.999 * +(HEAPF32[dsp + 13927544 + (1 << 2) >> 2])));
			iTemp147 = (imul((iSlow69 | 0), ((1 - (HEAP32[dsp + 13555168 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13927552 + (0 << 2) >> 2] = ((1 + (((iTemp147 | 0)?0:(HEAP32[dsp + 13927552 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13721600 + (((min(4410, (HEAP32[dsp + 13927552 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp146) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13927552 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13927560 + (0 << 2) >> 2] = +(+((iTemp147 | 0)?0.:+(HEAPF32[dsp + 13927560 + (1 << 2) >> 2])) + +(fSlow71));
			HEAPF32[dsp + 12965344 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13721600 + (~~(+(+(HEAPF32[dsp + 13927560 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			HEAPF32[dsp + 13927568 + (0 << 2) >> 2] = +(+(fSlow72) + +(0.999 * +(HEAPF32[dsp + 13927568 + (1 << 2) >> 2])));
			fTemp148 = +(15.873 * +(HEAPF32[dsp + 13927568 + (0 << 2) >> 2]));
			fTemp149 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp148)))));
			fTemp150 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp148))))) * +(fTemp149)))));
			fTemp151 = +(faustpower2_f(+(fTemp150)));
			fTemp152 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp149)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp151) / +(fTemp149))));
			fTemp153 = +(3.12965 * +(fTemp152));
			fTemp154 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp151));
			fTemp155 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp152));
			fTemp156 = +(faustpower2_f(+(fTemp152)));
			fTemp157 = +(16. * +(fTemp151));
			fTemp158 = +(faustpower4_f(+(fTemp150)));
			fTemp159 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp158));
			fTemp160 = +(8. * +(fTemp151));
			fTemp161 = +(+(fTemp160) + +(0.981166 * +(fTemp156)));
			fTemp162 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp151));
			fTemp163 = +(1.56483 * +(fTemp152));
			fTemp164 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp152));
			fTemp165 = +(16. + +(+(fTemp164) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp161) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) + +(fTemp163))))))));
			HEAPF32[dsp + 13926360 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 12965344 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13721600 + (~~(+(+(HEAPF32[dsp + 13927560 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 12965344 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926360 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp153) + +(fTemp154)))) - +(64. + +(fTemp155)))) + +(+(HEAPF32[dsp + 13926360 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp156)) + +(fTemp157))) + +(fTemp159)))))) + +(+(HEAPF32[dsp + 13926360 + (3 << 2) >> 2]) * +(+(+(fTemp155) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp154) - +(fTemp153))))) - 64.))) + +(+(HEAPF32[dsp + 13926360 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp161) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) - +(fTemp163))))))) - +(fTemp164)))) / +(fTemp165)));
			fTemp166 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp158));
			fTemp167 = +(+(0.0008 * +(fTemp151)) + +(0.00173291 * +(fTemp156)));
			fTemp168 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp158)) - 0.0064);
			fTemp169 = +(2.04991 * +(fTemp152));
			fTemp170 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp152));
			fTemp171 = +(+(fTemp160) + +(2.75849 * +(fTemp156)));
			fTemp172 = +(1.02496 * +(fTemp152));
			fTemp173 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp152));
			fTemp174 = +(16. + +(+(fTemp173) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp171) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) + +(fTemp172))))))));
			HEAPF32[dsp + 13926380 + (0 << 2) >> 2] = +(+(+(+(+(HEAPF32[dsp + 13926360 + (4 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp166) + +(+(fTemp167) + +(fTemp166)))) + 0.0016)) + +(+(+(+(+(HEAPF32[dsp + 13926360 + (0 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp167)) + 0.0016)) + +(+(HEAPF32[dsp + 13926360 + (1 << 2) >> 2]) * +(fTemp168))) + +(+(HEAPF32[dsp + 13926360 + (2 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp156)) + +(0.0016 * +(fTemp151)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp158)))) + 0.0096))) + +(+(HEAPF32[dsp + 13926360 + (3 << 2) >> 2]) * +(fTemp168)))) / +(fTemp165)) - +(+(+(+(+(+(HEAPF32[dsp + 13926380 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp154) + +(fTemp169)))) - +(64. + +(fTemp170)))) + +(+(HEAPF32[dsp + 13926380 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp159) + +(0. - +(+(fTemp157) + +(5.51697 * +(fTemp156))))))))) + +(+(HEAPF32[dsp + 13926380 + (3 << 2) >> 2]) * +(+(+(fTemp170) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp154) - +(fTemp169))))) - 64.))) + +(+(HEAPF32[dsp + 13926380 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp171) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) - +(fTemp172))))))) - +(fTemp173)))) / +(fTemp174)));
			fTemp175 = +(+(fTemp160) + +(30.4869 * +(fTemp156)));
			fTemp176 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp158)) - 64.);
			fTemp177 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp158));
			fTemp178 = +(0.67362 * +(fTemp152));
			fTemp179 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp152));
			fTemp180 = +(+(fTemp160) + +(4.27743 * +(fTemp156)));
			fTemp181 = +(0.33681 * +(fTemp152));
			fTemp182 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp152));
			fTemp183 = +(16. + +(+(fTemp182) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp180) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) + +(fTemp181))))))));
			HEAPF32[dsp + 13926400 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926380 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp175)))) + +(+(HEAPF32[dsp + 13926380 + (1 << 2) >> 2]) * +(fTemp176))) + +(+(HEAPF32[dsp + 13926380 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp159) + +(0. - +(+(fTemp157) + +(60.9739 * +(fTemp156))))))))) + +(+(HEAPF32[dsp + 13926380 + (3 << 2) >> 2]) * +(fTemp176))) + +(+(HEAPF32[dsp + 13926380 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp177) + +(+(fTemp177) + +(fTemp175))))))) / +(fTemp174)) - +(+(+(+(+(+(HEAPF32[dsp + 13926400 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp154) + +(fTemp178)))) - +(64. + +(fTemp179)))) + +(+(HEAPF32[dsp + 13926400 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp159) + +(0. - +(+(fTemp157) + +(8.55487 * +(fTemp156))))))))) + +(+(HEAPF32[dsp + 13926400 + (3 << 2) >> 2]) * +(+(+(fTemp179) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp151) * +(+(fTemp154) - +(fTemp178))))) - 64.))) + +(+(HEAPF32[dsp + 13926400 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp180) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp151) * +(+(fTemp162) - +(fTemp181))))))) - +(fTemp182)))) / +(fTemp183)));
			fTemp184 = +(+(fTemp160) + +(214.145 * +(fTemp156)));
			fTemp185 = +(+(+(fTemp146) * +(1. - +(HEAPF32[dsp + 13927544 + (0 << 2) >> 2]))) + +(50. * +(+(+(HEAPF32[dsp + 13927544 + (0 << 2) >> 2]) * +(+(+(+(+(+(HEAPF32[dsp + 13926400 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp184)))) + +(+(fTemp176) * +(HEAPF32[dsp + 13926400 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926400 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp159) + +(0. - +(+(fTemp157) + +(428.289 * +(fTemp156))))))))) + +(+(fTemp176) * +(HEAPF32[dsp + 13926400 + (3 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926400 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp177) + +(+(fTemp177) + +(fTemp184)))))))) / +(fTemp183))));
			HEAPF32[dsp + 11290400 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp185);
			HEAPF32[dsp + 13927576 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13927576 + (1 << 2) >> 2]) % +(fSlow73)) + +(fSlow74));
			HEAPF32[dsp + 13927584 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13927576 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13927576 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13927584 + (1 << 2) >> 2]));
			fTemp186 = +(+(+(1. - +(HEAPF32[dsp + 13927488 + (0 << 2) >> 2])) * +(fTemp185)) + +(+(+(HEAPF32[dsp + 13927488 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11290400 + (~~(+(+(HEAPF32[dsp + 13927576 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13927584 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow75) * +(HEAPF32[dsp + 13927576 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 13927592 + (0 << 2) >> 2] = +(+(fSlow77) + +(0.99 * +(HEAPF32[dsp + 13927592 + (1 << 2) >> 2])));
			fTemp187 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13927592 + (0 << 2) >> 2])))));
			fTemp188 = +(1. / +(fTemp187));
			fTemp189 = +(1. + +(+(+(fSlow78) + +(fTemp188)) / +(fTemp187)));
			HEAPF32[dsp + 13926696 + (0 << 2) >> 2] = +(+(fTemp186) - +(+(+(+(HEAPF32[dsp + 13926696 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp188) - +(fSlow78)) / +(fTemp187)))) + +(2. * +(+(HEAPF32[dsp + 13926696 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp187)))))))) / +(fTemp189)));
			fTemp190 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13927592 + (0 << 2) >> 2]))))));
			fTemp191 = +(1. / +(fTemp190));
			fTemp192 = +(1. + +(+(+(fSlow78) + +(fTemp191)) / +(fTemp190)));
			HEAPF32[dsp + 13926708 + (0 << 2) >> 2] = +(+(fTemp186) - +(+(+(+(HEAPF32[dsp + 13926708 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp191) - +(fSlow78)) / +(fTemp190)))) + +(2. * +(+(HEAPF32[dsp + 13926708 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp190)))))))) / +(fTemp192)));
			fTemp193 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13927592 + (0 << 2) >> 2]))))));
			fTemp194 = +(1. / +(fTemp193));
			fTemp195 = +(1. + +(+(+(fSlow78) + +(fTemp194)) / +(fTemp193)));
			HEAPF32[dsp + 13926720 + (0 << 2) >> 2] = +(+(fTemp186) - +(+(+(+(HEAPF32[dsp + 13926720 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp194) - +(fSlow78)) / +(fTemp193)))) + +(2. * +(+(HEAPF32[dsp + 13926720 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp193)))))))) / +(fTemp195)));
			fTemp196 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13927592 + (0 << 2) >> 2]))))));
			fTemp197 = +(1. / +(fTemp196));
			fTemp198 = +(1. + +(+(+(fSlow78) + +(fTemp197)) / +(fTemp196)));
			HEAPF32[dsp + 13926732 + (0 << 2) >> 2] = +(+(fTemp186) - +(+(+(+(HEAPF32[dsp + 13926732 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp197) - +(fSlow78)) / +(fTemp196)))) + +(2. * +(+(HEAPF32[dsp + 13926732 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp196)))))))) / +(fTemp198)));
			fTemp199 = +(+(+(1. - +(HEAPF32[dsp + 13927480 + (0 << 2) >> 2])) * +(fTemp186)) + +(+(HEAPF32[dsp + 13927480 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 13926696 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926696 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926696 + (2 << 2) >> 2]))) / +(fTemp189)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926708 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926708 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926708 + (2 << 2) >> 2]))) / +(fTemp192))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926720 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926720 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926720 + (2 << 2) >> 2]))) / +(fTemp195))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926732 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926732 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926732 + (2 << 2) >> 2]))) / +(fTemp198)))));
			HEAPF32[dsp + 13927600 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13927600 + (1 << 2) >> 2]) + +(fSlow80)), 1.));
			HEAPF32[dsp + 13927608 + (0 << 2) >> 2] = +(+(+(fSlow79) * +(HEAPF32[dsp + 13927608 + (1 << 2) >> 2])) + +(+(fTemp199) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13927600 + (0 << 2) >> 2]))))));
			fTemp200 = +(+(+(1. - +(HEAPF32[dsp + 13927472 + (0 << 2) >> 2])) * +(fTemp199)) + +(+(HEAPF32[dsp + 13927472 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13927608 + (0 << 2) >> 2])));
			HEAPF32[dsp + 13927616 + (0 << 2) >> 2] = +(+(fSlow81) + +(0.999 * +(HEAPF32[dsp + 13927616 + (1 << 2) >> 2])));
			fTemp201 = +(0.2 * +(fTemp200));
			fTemp202 = +(+(fTemp201) + +(0.764 * +(HEAPF32[dsp + 13927624 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13808704 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp202);
			HEAPF32[dsp + 13927624 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13808704 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927632 + (0 << 2) >> 2] = +(fTemp202);
			fTemp203 = +(+(fTemp201) + +(0.783 * +(HEAPF32[dsp + 13927640 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13866048 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp203);
			HEAPF32[dsp + 13927640 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13866048 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927648 + (0 << 2) >> 2] = +(fTemp203);
			fTemp204 = +(+(fTemp201) + +(0.805 * +(HEAPF32[dsp + 13927656 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13870144 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp204);
			HEAPF32[dsp + 13927656 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13870144 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927664 + (0 << 2) >> 2] = +(fTemp204);
			fTemp205 = +(+(0.827 * +(HEAPF32[dsp + 13927672 + (1 << 2) >> 2])) + +(fTemp201));
			HEAPF32[dsp + 13874240 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp205);
			HEAPF32[dsp + 13927672 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13874240 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927680 + (0 << 2) >> 2] = +(fTemp205);
			fTemp206 = +(+(HEAPF32[dsp + 13927632 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927648 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927664 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13927688 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927680 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13919296 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp206);
			HEAPF32[dsp + 13927688 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13919296 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec130 = +(0. - +(0.7 * +(fTemp206)));
			fTemp207 = +(+(HEAPF32[dsp + 13927688 + (1 << 2) >> 2]) + +(+(fRec130) + +(0.7 * +(HEAPF32[dsp + 13927696 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13924928 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp207);
			HEAPF32[dsp + 13927696 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13924928 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec128 = +(0. - +(0.7 * +(fTemp207)));
			fTemp208 = +(+(HEAPF32[dsp + 13927696 + (1 << 2) >> 2]) + +(+(fRec128) + +(0.7 * +(HEAPF32[dsp + 13927704 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13926048 + (0 << 2) >> 2] = +(fTemp208);
			HEAPF32[dsp + 13927704 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13926048 + (11 << 2) >> 2]);
			fRec126 = +(0. - +(0.7 * +(fTemp208)));
			HEAPF32[dsp + 13927712 + (0 << 2) >> 2] = +(+(fSlow82) + +(0.999 * +(HEAPF32[dsp + 13927712 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927720 + (0 << 2) >> 2] = +(+(fSlow83) + +(0.999 * +(HEAPF32[dsp + 13927720 + (1 << 2) >> 2])));
			fTemp209 = +(0. - +(HEAPF32[dsp + 13927720 + (0 << 2) >> 2]));
			fTemp210 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 13927712 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp209)))), 0.5));
			iTemp211 = ((+(fTemp210) > 1.) | 0);
			iTemp212 = ((+(fTemp210) < 1.) | 0);
			fTemp213 = +(+((iTemp211 | 0)) + +(+(fTemp210) * +((iTemp212 | 0))));
			fTemp214 = +(+(+(HEAPF32[dsp + 13927456 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13927464 + (0 << 2) >> 2])) * +(fTemp200)) + +(+(HEAPF32[dsp + 13927464 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13927616 + (0 << 2) >> 2])) * +(fTemp200)) + +(+(HEAPF32[dsp + 13927616 + (0 << 2) >> 2]) * +(+(fRec126) + +(HEAPF32[dsp + 13927704 + (1 << 2) >> 2]))))))) * +(1. + +(1.38629 * +(0. - +(+(fTemp213) - 1.)))));
			fTemp215 = +(+(+(faustpower2_f(+(fTemp210))) * +((iTemp211 | 0))) + +((iTemp212 | 0)));
			HEAPF32[dsp + 13927728 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13927728 + (1 << 2) >> 2])) + +(fSlow84));
			HEAPF32[dsp + 13927736 + (0 << 2) >> 2] = +(+(fSlow85) + +(0.999 * +(HEAPF32[dsp + 13927736 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927744 + (0 << 2) >> 2] = +(+(fSlow86) + +(0.999 * +(HEAPF32[dsp + 13927744 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927752 + (0 << 2) >> 2] = +(+(fSlow87) + +(0.999 * +(HEAPF32[dsp + 13927752 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927760 + (0 << 2) >> 2] = +(+(fSlow88) + +(0.999 * +(HEAPF32[dsp + 13927760 + (1 << 2) >> 2])));
			HEAP32[dsp + 13587936 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow89 | 0);
			HEAPF32[dsp + 13927768 + (0 << 2) >> 2] = +(+(fSlow90) + +(0.999 * +(HEAPF32[dsp + 13927768 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927776 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13927776 + (1 << 2) >> 2])) + +(fSlow93));
			HEAP32[dsp + 13927784 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow95 | 0):(HEAP32[dsp + 13927784 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13919808 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow96 | 0):(HEAP32[dsp + 13919808 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp216 = (imul((HEAP32[dsp + 13919808 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13919808 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13927792 + (0 << 2) >> 2] = (((HEAP32[dsp + 13927784 + (0 << 2) >> 2] | 0) + (((((iTemp216 | 0)?0:(HEAP32[dsp + 13927792 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 5292000 + ((HEAP32[dsp + 13927792 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow92) * +(fTemp0));
			HEAP32[dsp + 13927800 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow97 | 0):(HEAP32[dsp + 13927800 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13920320 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow98 | 0):(HEAP32[dsp + 13920320 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13927808 + (0 << 2) >> 2] = (((HEAP32[dsp + 13927784 + (0 << 2) >> 2] | 0) + (((iTemp216 | 0)?0:(HEAP32[dsp + 13927808 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13927816 + (0 << 2) >> 2] = (((HEAP32[dsp + 13927800 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 13920320 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13920320 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 13927816 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13927808 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp217 = +(+(+(fSlow92) * +(+(fTemp0) * +(HEAPF32[dsp + 13927776 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 5292000 + ((HEAP32[dsp + 13927816 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 13927824 + (0 << 2) >> 2] = +(+(fSlow99) + +(0.999 * +(HEAPF32[dsp + 13927824 + (1 << 2) >> 2])));
			fTemp218 = +(15.873 * +(HEAPF32[dsp + 13927824 + (0 << 2) >> 2]));
			fTemp219 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp218)))));
			fTemp220 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp218))))) * +(fTemp219)))));
			fTemp221 = +(faustpower4_f(+(fTemp220)));
			fTemp222 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp221)) - 64.);
			iTemp223 = (imul((iSlow89 | 0), ((1 - (HEAP32[dsp + 13587936 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13927832 + (0 << 2) >> 2] = ((1 + (((iTemp223 | 0)?0:(HEAP32[dsp + 13927832 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13739280 + (((min(4410, (HEAP32[dsp + 13927832 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp217) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13927832 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13927840 + (0 << 2) >> 2] = +(+((iTemp223 | 0)?0.:+(HEAPF32[dsp + 13927840 + (1 << 2) >> 2])) + +(fSlow100));
			HEAPF32[dsp + 13096416 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13739280 + (~~(+(+(HEAPF32[dsp + 13927840 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			fTemp224 = +(faustpower2_f(+(fTemp220)));
			fTemp225 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp219)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp224) / +(fTemp219))));
			fTemp226 = +(3.12965 * +(fTemp225));
			fTemp227 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp224));
			fTemp228 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp225));
			fTemp229 = +(faustpower2_f(+(fTemp225)));
			fTemp230 = +(16. * +(fTemp224));
			fTemp231 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp221));
			fTemp232 = +(8. * +(fTemp224));
			fTemp233 = +(+(0.981166 * +(fTemp229)) + +(fTemp232));
			fTemp234 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp224));
			fTemp235 = +(1.56483 * +(fTemp225));
			fTemp236 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp225));
			fTemp237 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp233) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) + +(fTemp235)))))) + +(fTemp236)));
			HEAPF32[dsp + 13926420 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13096416 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13739280 + (~~(+(+(HEAPF32[dsp + 13927840 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 13096416 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926420 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp226) + +(fTemp227)))) - +(64. + +(fTemp228)))) + +(+(HEAPF32[dsp + 13926420 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp229)) + +(fTemp230))) + +(fTemp231)))))) + +(+(HEAPF32[dsp + 13926420 + (3 << 2) >> 2]) * +(+(+(fTemp228) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp227) - +(fTemp226))))) - 64.))) + +(+(HEAPF32[dsp + 13926420 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp233) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) - +(fTemp235))))))) - +(fTemp236)))) / +(fTemp237)));
			fTemp238 = +(+(0.0008 * +(fTemp224)) + +(0.00173291 * +(fTemp229)));
			fTemp239 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp221)) - 0.0064);
			fTemp240 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp221));
			fTemp241 = +(2.04991 * +(fTemp225));
			fTemp242 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp225));
			fTemp243 = +(+(fTemp232) + +(2.75849 * +(fTemp229)));
			fTemp244 = +(1.02496 * +(fTemp225));
			fTemp245 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp225));
			fTemp246 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp243) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) + +(fTemp244)))))) + +(fTemp245)));
			HEAPF32[dsp + 13926440 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926420 + (0 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp238)) + 0.0016)) + +(+(HEAPF32[dsp + 13926420 + (1 << 2) >> 2]) * +(fTemp239))) + +(+(HEAPF32[dsp + 13926420 + (2 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp229)) + +(0.0016 * +(fTemp224)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp221)))) + 0.0096))) + +(+(HEAPF32[dsp + 13926420 + (3 << 2) >> 2]) * +(fTemp239))) + +(+(HEAPF32[dsp + 13926420 + (4 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp240) + +(+(fTemp238) + +(fTemp240)))) + 0.0016))) / +(fTemp237)) - +(+(+(+(+(+(HEAPF32[dsp + 13926440 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp227) + +(fTemp241)))) - +(64. + +(fTemp242)))) + +(+(HEAPF32[dsp + 13926440 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp231) + +(0. - +(+(fTemp230) + +(5.51697 * +(fTemp229))))))))) + +(+(HEAPF32[dsp + 13926440 + (3 << 2) >> 2]) * +(+(+(fTemp242) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp227) - +(fTemp241))))) - 64.))) + +(+(HEAPF32[dsp + 13926440 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp243) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) - +(fTemp244))))))) - +(fTemp245)))) / +(fTemp246)));
			fTemp247 = +(+(fTemp232) + +(30.4869 * +(fTemp229)));
			fTemp248 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp221));
			fTemp249 = +(0.67362 * +(fTemp225));
			fTemp250 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp225));
			fTemp251 = +(+(fTemp232) + +(4.27743 * +(fTemp229)));
			fTemp252 = +(0.33681 * +(fTemp225));
			fTemp253 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp225));
			fTemp254 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp251) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) + +(fTemp252)))))) + +(fTemp253)));
			HEAPF32[dsp + 13926460 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926440 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp247)))) + +(+(HEAPF32[dsp + 13926440 + (1 << 2) >> 2]) * +(fTemp222))) + +(+(HEAPF32[dsp + 13926440 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp231) + +(0. - +(+(fTemp230) + +(60.9739 * +(fTemp229))))))))) + +(+(HEAPF32[dsp + 13926440 + (3 << 2) >> 2]) * +(fTemp222))) + +(+(HEAPF32[dsp + 13926440 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp248) + +(+(fTemp248) + +(fTemp247))))))) / +(fTemp246)) - +(+(+(+(+(+(HEAPF32[dsp + 13926460 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp227) + +(fTemp249)))) - +(64. + +(fTemp250)))) + +(+(HEAPF32[dsp + 13926460 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp231) + +(0. - +(+(fTemp230) + +(8.55487 * +(fTemp229))))))))) + +(+(HEAPF32[dsp + 13926460 + (3 << 2) >> 2]) * +(+(+(fTemp250) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp224) * +(+(fTemp227) - +(fTemp249))))) - 64.))) + +(+(HEAPF32[dsp + 13926460 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp251) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp224) * +(+(fTemp234) - +(fTemp252))))))) - +(fTemp253)))) / +(fTemp254)));
			fTemp255 = +(+(fTemp232) + +(214.145 * +(fTemp229)));
			fTemp256 = +(+(+(1. - +(HEAPF32[dsp + 13927768 + (0 << 2) >> 2])) * +(fTemp217)) + +(50. * +(+(+(HEAPF32[dsp + 13927768 + (0 << 2) >> 2]) * +(+(+(+(fTemp222) * +(HEAPF32[dsp + 13926460 + (3 << 2) >> 2])) + +(+(+(+(HEAPF32[dsp + 13926460 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp255)))) + +(+(fTemp222) * +(HEAPF32[dsp + 13926460 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926460 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp231) + +(0. - +(+(fTemp230) + +(428.289 * +(fTemp229)))))))))) + +(+(HEAPF32[dsp + 13926460 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp248) + +(+(fTemp248) + +(fTemp255)))))))) / +(fTemp254))));
			HEAPF32[dsp + 11643600 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp256);
			HEAPF32[dsp + 13927848 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13927848 + (1 << 2) >> 2]) % +(fSlow101)) + +(fSlow102));
			HEAPF32[dsp + 13927856 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13927848 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13927848 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13927856 + (1 << 2) >> 2]));
			fTemp257 = +(+(+(1. - +(HEAPF32[dsp + 13927760 + (0 << 2) >> 2])) * +(fTemp256)) + +(+(+(HEAPF32[dsp + 13927760 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11643600 + (~~(+(+(HEAPF32[dsp + 13927848 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13927856 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow103) * +(HEAPF32[dsp + 13927848 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 13927864 + (0 << 2) >> 2] = +(+(fSlow105) + +(0.99 * +(HEAPF32[dsp + 13927864 + (1 << 2) >> 2])));
			fTemp258 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13927864 + (0 << 2) >> 2])))));
			fTemp259 = +(1. / +(fTemp258));
			fTemp260 = +(1. + +(+(+(fSlow106) + +(fTemp259)) / +(fTemp258)));
			HEAPF32[dsp + 13926744 + (0 << 2) >> 2] = +(+(fTemp257) - +(+(+(+(HEAPF32[dsp + 13926744 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp259) - +(fSlow106)) / +(fTemp258)))) + +(2. * +(+(HEAPF32[dsp + 13926744 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp258)))))))) / +(fTemp260)));
			fTemp261 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13927864 + (0 << 2) >> 2]))))));
			fTemp262 = +(1. / +(fTemp261));
			fTemp263 = +(1. + +(+(+(fSlow106) + +(fTemp262)) / +(fTemp261)));
			HEAPF32[dsp + 13926756 + (0 << 2) >> 2] = +(+(fTemp257) - +(+(+(+(HEAPF32[dsp + 13926756 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp262) - +(fSlow106)) / +(fTemp261)))) + +(2. * +(+(HEAPF32[dsp + 13926756 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp261)))))))) / +(fTemp263)));
			fTemp264 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13927864 + (0 << 2) >> 2]))))));
			fTemp265 = +(1. / +(fTemp264));
			fTemp266 = +(1. + +(+(+(fSlow106) + +(fTemp265)) / +(fTemp264)));
			HEAPF32[dsp + 13926768 + (0 << 2) >> 2] = +(+(fTemp257) - +(+(+(+(HEAPF32[dsp + 13926768 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp265) - +(fSlow106)) / +(fTemp264)))) + +(2. * +(+(HEAPF32[dsp + 13926768 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp264)))))))) / +(fTemp266)));
			fTemp267 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13927864 + (0 << 2) >> 2]))))));
			fTemp268 = +(1. / +(fTemp267));
			fTemp269 = +(1. + +(+(+(fSlow106) + +(fTemp268)) / +(fTemp267)));
			HEAPF32[dsp + 13926780 + (0 << 2) >> 2] = +(+(fTemp257) - +(+(+(+(HEAPF32[dsp + 13926780 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp268) - +(fSlow106)) / +(fTemp267)))) + +(2. * +(+(HEAPF32[dsp + 13926780 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp267)))))))) / +(fTemp269)));
			fTemp270 = +(+(+(1. - +(HEAPF32[dsp + 13927752 + (0 << 2) >> 2])) * +(fTemp257)) + +(+(HEAPF32[dsp + 13927752 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 13926744 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926744 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926744 + (2 << 2) >> 2]))) / +(fTemp260)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926756 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926756 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926756 + (2 << 2) >> 2]))) / +(fTemp263))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926768 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926768 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926768 + (2 << 2) >> 2]))) / +(fTemp266))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926780 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926780 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926780 + (2 << 2) >> 2]))) / +(fTemp269)))));
			HEAPF32[dsp + 13927872 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13927872 + (1 << 2) >> 2]) + +(fSlow108)), 1.));
			HEAPF32[dsp + 13927880 + (0 << 2) >> 2] = +(+(+(fSlow107) * +(HEAPF32[dsp + 13927880 + (1 << 2) >> 2])) + +(+(fTemp270) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13927872 + (0 << 2) >> 2]))))));
			fTemp271 = +(+(+(1. - +(HEAPF32[dsp + 13927744 + (0 << 2) >> 2])) * +(fTemp270)) + +(+(HEAPF32[dsp + 13927744 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13927880 + (0 << 2) >> 2])));
			HEAPF32[dsp + 13927888 + (0 << 2) >> 2] = +(+(fSlow109) + +(0.999 * +(HEAPF32[dsp + 13927888 + (1 << 2) >> 2])));
			fTemp272 = +(0.2 * +(fTemp271));
			fTemp273 = +(+(fTemp272) + +(0.764 * +(HEAPF32[dsp + 13927896 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13816896 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp273);
			HEAPF32[dsp + 13927896 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13816896 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927904 + (0 << 2) >> 2] = +(fTemp273);
			fTemp274 = +(+(fTemp272) + +(0.783 * +(HEAPF32[dsp + 13927912 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13878336 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp274);
			HEAPF32[dsp + 13927912 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13878336 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927920 + (0 << 2) >> 2] = +(fTemp274);
			fTemp275 = +(+(fTemp272) + +(0.805 * +(HEAPF32[dsp + 13927928 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13882432 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp275);
			HEAPF32[dsp + 13927928 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13882432 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927936 + (0 << 2) >> 2] = +(fTemp275);
			fTemp276 = +(+(0.827 * +(HEAPF32[dsp + 13927944 + (1 << 2) >> 2])) + +(fTemp272));
			HEAPF32[dsp + 13886528 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp276);
			HEAPF32[dsp + 13927944 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13886528 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13927952 + (0 << 2) >> 2] = +(fTemp276);
			fTemp277 = +(+(HEAPF32[dsp + 13927904 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927920 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13927936 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13927960 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13927952 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13920832 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp277);
			HEAPF32[dsp + 13927960 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13920832 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec176 = +(0. - +(0.7 * +(fTemp277)));
			fTemp278 = +(+(HEAPF32[dsp + 13927960 + (1 << 2) >> 2]) + +(+(fRec176) + +(0.7 * +(HEAPF32[dsp + 13927968 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13925184 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp278);
			HEAPF32[dsp + 13927968 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13925184 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec174 = +(0. - +(0.7 * +(fTemp278)));
			fTemp279 = +(+(HEAPF32[dsp + 13927968 + (1 << 2) >> 2]) + +(+(fRec174) + +(0.7 * +(HEAPF32[dsp + 13927976 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13926096 + (0 << 2) >> 2] = +(fTemp279);
			HEAPF32[dsp + 13927976 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13926096 + (11 << 2) >> 2]);
			fRec172 = +(0. - +(0.7 * +(fTemp279)));
			HEAPF32[dsp + 13927984 + (0 << 2) >> 2] = +(+(fSlow110) + +(0.999 * +(HEAPF32[dsp + 13927984 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13927992 + (0 << 2) >> 2] = +(+(fSlow111) + +(0.999 * +(HEAPF32[dsp + 13927992 + (1 << 2) >> 2])));
			fTemp280 = +(0. - +(HEAPF32[dsp + 13927992 + (0 << 2) >> 2]));
			fTemp281 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 13927984 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp280)))), 0.5));
			iTemp282 = ((+(fTemp281) > 1.) | 0);
			iTemp283 = ((+(fTemp281) < 1.) | 0);
			fTemp284 = +(+((iTemp282 | 0)) + +(+(fTemp281) * +((iTemp283 | 0))));
			fTemp285 = +(+(+(HEAPF32[dsp + 13927728 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13927736 + (0 << 2) >> 2])) * +(fTemp271)) + +(+(HEAPF32[dsp + 13927736 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13927888 + (0 << 2) >> 2])) * +(fTemp271)) + +(+(HEAPF32[dsp + 13927888 + (0 << 2) >> 2]) * +(+(fRec172) + +(HEAPF32[dsp + 13927976 + (1 << 2) >> 2]))))))) * +(1. + +(1.38629 * +(0. - +(+(fTemp284) - 1.)))));
			fTemp286 = +(+(+(faustpower2_f(+(fTemp281))) * +((iTemp282 | 0))) + +((iTemp283 | 0)));
			HEAPF32[dsp + 13928000 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13928000 + (1 << 2) >> 2])) + +(fSlow112));
			HEAPF32[dsp + 13928008 + (0 << 2) >> 2] = +(+(fSlow113) + +(0.999 * +(HEAPF32[dsp + 13928008 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928016 + (0 << 2) >> 2] = +(+(fSlow114) + +(0.999 * +(HEAPF32[dsp + 13928016 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928024 + (0 << 2) >> 2] = +(+(fSlow115) + +(0.999 * +(HEAPF32[dsp + 13928024 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928032 + (0 << 2) >> 2] = +(+(fSlow116) + +(0.999 * +(HEAPF32[dsp + 13928032 + (1 << 2) >> 2])));
			HEAP32[dsp + 13620704 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow117 | 0);
			HEAPF32[dsp + 13928040 + (0 << 2) >> 2] = +(+(fSlow118) + +(0.999 * +(HEAPF32[dsp + 13928040 + (1 << 2) >> 2])));
			HEAP32[dsp + 13928048 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow121 | 0):(HEAP32[dsp + 13928048 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13921344 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow122 | 0):(HEAP32[dsp + 13921344 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp287 = (imul((HEAP32[dsp + 13921344 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13921344 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928056 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928048 + (0 << 2) >> 2] | 0) + (((((iTemp287 | 0)?0:(HEAP32[dsp + 13928056 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 7056000 + ((HEAP32[dsp + 13928056 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow123) * +(fTemp0));
			HEAP32[dsp + 13928064 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow124 | 0):(HEAP32[dsp + 13928064 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13921856 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow125 | 0):(HEAP32[dsp + 13921856 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13928072 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928048 + (0 << 2) >> 2] | 0) + (((iTemp287 | 0)?0:(HEAP32[dsp + 13928072 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928080 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928064 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 13921856 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13921856 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 13928080 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13928072 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			HEAPF32[dsp + 13928088 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13928088 + (1 << 2) >> 2])) + +(fSlow126));
			fTemp288 = +(+(HEAPF32[dsp + 7056000 + ((HEAP32[dsp + 13928080 + (0 << 2) >> 2] | 0) << 2) >> 2]) + +(+(fSlow123) * +(+(HEAPF32[dsp + 13928088 + (0 << 2) >> 2]) * +(fTemp0))));
			iTemp289 = (imul((iSlow117 | 0), ((1 - (HEAP32[dsp + 13620704 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928096 + (0 << 2) >> 2] = ((1 + (((iTemp289 | 0)?0:(HEAP32[dsp + 13928096 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13756960 + (((min(4410, (HEAP32[dsp + 13928096 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp288) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13928096 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13928104 + (0 << 2) >> 2] = +(+((iTemp289 | 0)?0.:+(HEAPF32[dsp + 13928104 + (1 << 2) >> 2])) + +(fSlow127));
			HEAPF32[dsp + 13227488 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13756960 + (~~(+(+(HEAPF32[dsp + 13928104 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			HEAPF32[dsp + 13928112 + (0 << 2) >> 2] = +(+(fSlow128) + +(0.999 * +(HEAPF32[dsp + 13928112 + (1 << 2) >> 2])));
			fTemp290 = +(15.873 * +(HEAPF32[dsp + 13928112 + (0 << 2) >> 2]));
			fTemp291 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp290)))));
			fTemp292 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp290))))) * +(fTemp291)))));
			fTemp293 = +(faustpower2_f(+(fTemp292)));
			fTemp294 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp291)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp293) / +(fTemp291))));
			fTemp295 = +(3.12965 * +(fTemp294));
			fTemp296 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp293));
			fTemp297 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp294));
			fTemp298 = +(faustpower2_f(+(fTemp294)));
			fTemp299 = +(16. * +(fTemp293));
			fTemp300 = +(faustpower4_f(+(fTemp292)));
			fTemp301 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp300));
			fTemp302 = +(8. * +(fTemp293));
			fTemp303 = +(+(0.981166 * +(fTemp298)) + +(fTemp302));
			fTemp304 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp293));
			fTemp305 = +(1.56483 * +(fTemp294));
			fTemp306 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp294));
			fTemp307 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp303) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) + +(fTemp305)))))) + +(fTemp306)));
			HEAPF32[dsp + 13926480 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13227488 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13756960 + (~~(+(+(HEAPF32[dsp + 13928104 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 13227488 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926480 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp295) + +(fTemp296)))) - +(64. + +(fTemp297)))) + +(+(HEAPF32[dsp + 13926480 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp298)) + +(fTemp299))) + +(fTemp301)))))) + +(+(HEAPF32[dsp + 13926480 + (3 << 2) >> 2]) * +(+(+(fTemp297) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp296) - +(fTemp295))))) - 64.))) + +(+(HEAPF32[dsp + 13926480 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp303) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) - +(fTemp305))))))) - +(fTemp306)))) / +(fTemp307)));
			fTemp308 = +(+(0.00173291 * +(fTemp298)) + +(0.0008 * +(fTemp293)));
			fTemp309 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp300)) - 0.0064);
			fTemp310 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp300));
			fTemp311 = +(2.04991 * +(fTemp294));
			fTemp312 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp294));
			fTemp313 = +(+(fTemp302) + +(2.75849 * +(fTemp298)));
			fTemp314 = +(1.02496 * +(fTemp294));
			fTemp315 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp294));
			fTemp316 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp313) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) + +(fTemp314)))))) + +(fTemp315)));
			HEAPF32[dsp + 13926500 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926480 + (0 << 2) >> 2]) * +(0.0016 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp308)))) + +(+(HEAPF32[dsp + 13926480 + (1 << 2) >> 2]) * +(fTemp309))) + +(+(HEAPF32[dsp + 13926480 + (2 << 2) >> 2]) * +(0.0096 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp298)) + +(0.0016 * +(fTemp293)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp300))))))) + +(+(HEAPF32[dsp + 13926480 + (3 << 2) >> 2]) * +(fTemp309))) + +(+(HEAPF32[dsp + 13926480 + (4 << 2) >> 2]) * +(0.0016 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp310) + +(+(fTemp308) + +(fTemp310))))))) / +(fTemp307)) - +(+(+(+(+(+(HEAPF32[dsp + 13926500 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp296) + +(fTemp311)))) - +(64. + +(fTemp312)))) + +(+(HEAPF32[dsp + 13926500 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp301) + +(0. - +(+(fTemp299) + +(5.51697 * +(fTemp298))))))))) + +(+(HEAPF32[dsp + 13926500 + (3 << 2) >> 2]) * +(+(+(fTemp312) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp296) - +(fTemp311))))) - 64.))) + +(+(HEAPF32[dsp + 13926500 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp313) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) - +(fTemp314))))))) - +(fTemp315)))) / +(fTemp316)));
			fTemp317 = +(+(fTemp302) + +(30.4869 * +(fTemp298)));
			fTemp318 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp300)) - 64.);
			fTemp319 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp300));
			fTemp320 = +(0.67362 * +(fTemp294));
			fTemp321 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp294));
			fTemp322 = +(+(fTemp302) + +(4.27743 * +(fTemp298)));
			fTemp323 = +(0.33681 * +(fTemp294));
			fTemp324 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp294));
			fTemp325 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp322) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) + +(fTemp323)))))) + +(fTemp324)));
			HEAPF32[dsp + 13926520 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926500 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp317)))) + +(+(HEAPF32[dsp + 13926500 + (1 << 2) >> 2]) * +(fTemp318))) + +(+(HEAPF32[dsp + 13926500 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp301) + +(0. - +(+(fTemp299) + +(60.9739 * +(fTemp298))))))))) + +(+(HEAPF32[dsp + 13926500 + (3 << 2) >> 2]) * +(fTemp318))) + +(+(HEAPF32[dsp + 13926500 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp319) + +(+(fTemp319) + +(fTemp317))))))) / +(fTemp316)) - +(+(+(+(+(+(HEAPF32[dsp + 13926520 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp296) + +(fTemp320)))) - +(64. + +(fTemp321)))) + +(+(HEAPF32[dsp + 13926520 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp301) + +(0. - +(+(fTemp299) + +(8.55487 * +(fTemp298))))))))) + +(+(HEAPF32[dsp + 13926520 + (3 << 2) >> 2]) * +(+(+(fTemp321) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp293) * +(+(fTemp296) - +(fTemp320))))) - 64.))) + +(+(HEAPF32[dsp + 13926520 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp322) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp293) * +(+(fTemp304) - +(fTemp323))))))) - +(fTemp324)))) / +(fTemp325)));
			fTemp326 = +(+(fTemp302) + +(214.145 * +(fTemp298)));
			fTemp327 = +(+(+(1. - +(HEAPF32[dsp + 13928040 + (0 << 2) >> 2])) * +(fTemp288)) + +(50. * +(+(+(HEAPF32[dsp + 13928040 + (0 << 2) >> 2]) * +(+(+(+(+(+(HEAPF32[dsp + 13926520 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp326)))) + +(+(fTemp318) * +(HEAPF32[dsp + 13926520 + (1 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926520 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp301) + +(0. - +(+(fTemp299) + +(428.289 * +(fTemp298))))))))) + +(+(fTemp318) * +(HEAPF32[dsp + 13926520 + (3 << 2) >> 2]))) + +(+(HEAPF32[dsp + 13926520 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp319) + +(+(fTemp319) + +(fTemp326)))))))) / +(fTemp325))));
			HEAPF32[dsp + 11996800 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp327);
			HEAPF32[dsp + 13928120 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13928120 + (1 << 2) >> 2]) % +(fSlow129)) + +(fSlow130));
			HEAPF32[dsp + 13928128 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13928120 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13928120 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13928128 + (1 << 2) >> 2]));
			fTemp328 = +(+(+(1. - +(HEAPF32[dsp + 13928032 + (0 << 2) >> 2])) * +(fTemp327)) + +(+(+(HEAPF32[dsp + 13928032 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 11996800 + (~~(+(+(HEAPF32[dsp + 13928120 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13928128 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow131) * +(HEAPF32[dsp + 13928120 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 13928136 + (0 << 2) >> 2] = +(+(fSlow133) + +(0.99 * +(HEAPF32[dsp + 13928136 + (1 << 2) >> 2])));
			fTemp329 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13928136 + (0 << 2) >> 2])))));
			fTemp330 = +(1. / +(fTemp329));
			fTemp331 = +(1. + +(+(+(fSlow134) + +(fTemp330)) / +(fTemp329)));
			HEAPF32[dsp + 13926792 + (0 << 2) >> 2] = +(+(fTemp328) - +(+(+(+(HEAPF32[dsp + 13926792 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp330) - +(fSlow134)) / +(fTemp329)))) + +(2. * +(+(HEAPF32[dsp + 13926792 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp329)))))))) / +(fTemp331)));
			fTemp332 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13928136 + (0 << 2) >> 2]))))));
			fTemp333 = +(1. / +(fTemp332));
			fTemp334 = +(1. + +(+(+(fSlow134) + +(fTemp333)) / +(fTemp332)));
			HEAPF32[dsp + 13926804 + (0 << 2) >> 2] = +(+(fTemp328) - +(+(+(+(HEAPF32[dsp + 13926804 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp333) - +(fSlow134)) / +(fTemp332)))) + +(2. * +(+(HEAPF32[dsp + 13926804 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp332)))))))) / +(fTemp334)));
			fTemp335 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13928136 + (0 << 2) >> 2]))))));
			fTemp336 = +(1. / +(fTemp335));
			fTemp337 = +(1. + +(+(+(fSlow134) + +(fTemp336)) / +(fTemp335)));
			HEAPF32[dsp + 13926816 + (0 << 2) >> 2] = +(+(fTemp328) - +(+(+(+(HEAPF32[dsp + 13926816 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp336) - +(fSlow134)) / +(fTemp335)))) + +(2. * +(+(HEAPF32[dsp + 13926816 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp335)))))))) / +(fTemp337)));
			fTemp338 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13928136 + (0 << 2) >> 2]))))));
			fTemp339 = +(1. / +(fTemp338));
			fTemp340 = +(1. + +(+(+(fSlow134) + +(fTemp339)) / +(fTemp338)));
			HEAPF32[dsp + 13926828 + (0 << 2) >> 2] = +(+(fTemp328) - +(+(+(+(HEAPF32[dsp + 13926828 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp339) - +(fSlow134)) / +(fTemp338)))) + +(2. * +(+(HEAPF32[dsp + 13926828 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp338)))))))) / +(fTemp340)));
			fTemp341 = +(+(+(1. - +(HEAPF32[dsp + 13928024 + (0 << 2) >> 2])) * +(fTemp328)) + +(+(HEAPF32[dsp + 13928024 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 13926792 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926792 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926792 + (2 << 2) >> 2]))) / +(fTemp331)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926804 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926804 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926804 + (2 << 2) >> 2]))) / +(fTemp334))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926816 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926816 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926816 + (2 << 2) >> 2]))) / +(fTemp337))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926828 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926828 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926828 + (2 << 2) >> 2]))) / +(fTemp340)))));
			HEAPF32[dsp + 13928144 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13928144 + (1 << 2) >> 2]) + +(fSlow136)), 1.));
			HEAPF32[dsp + 13928152 + (0 << 2) >> 2] = +(+(+(fSlow135) * +(HEAPF32[dsp + 13928152 + (1 << 2) >> 2])) + +(+(fTemp341) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13928144 + (0 << 2) >> 2]))))));
			fTemp342 = +(+(+(1. - +(HEAPF32[dsp + 13928016 + (0 << 2) >> 2])) * +(fTemp341)) + +(+(HEAPF32[dsp + 13928016 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13928152 + (0 << 2) >> 2])));
			HEAPF32[dsp + 13928160 + (0 << 2) >> 2] = +(+(fSlow137) + +(0.999 * +(HEAPF32[dsp + 13928160 + (1 << 2) >> 2])));
			fTemp343 = +(0.2 * +(fTemp342));
			fTemp344 = +(+(fTemp343) + +(0.764 * +(HEAPF32[dsp + 13928168 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13825088 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp344);
			HEAPF32[dsp + 13928168 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13825088 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928176 + (0 << 2) >> 2] = +(fTemp344);
			fTemp345 = +(+(fTemp343) + +(0.783 * +(HEAPF32[dsp + 13928184 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13890624 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp345);
			HEAPF32[dsp + 13928184 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13890624 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928192 + (0 << 2) >> 2] = +(fTemp345);
			fTemp346 = +(+(fTemp343) + +(0.805 * +(HEAPF32[dsp + 13928200 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13894720 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp346);
			HEAPF32[dsp + 13928200 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13894720 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928208 + (0 << 2) >> 2] = +(fTemp346);
			fTemp347 = +(+(0.827 * +(HEAPF32[dsp + 13928216 + (1 << 2) >> 2])) + +(fTemp343));
			HEAPF32[dsp + 13898816 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp347);
			HEAPF32[dsp + 13928216 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13898816 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928224 + (0 << 2) >> 2] = +(fTemp347);
			fTemp348 = +(+(HEAPF32[dsp + 13928176 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13928192 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13928208 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13928232 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13928224 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13922368 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp348);
			HEAPF32[dsp + 13928232 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13922368 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec222 = +(0. - +(0.7 * +(fTemp348)));
			fTemp349 = +(+(HEAPF32[dsp + 13928232 + (1 << 2) >> 2]) + +(+(fRec222) + +(0.7 * +(HEAPF32[dsp + 13928240 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13925440 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp349);
			HEAPF32[dsp + 13928240 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13925440 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec220 = +(0. - +(0.7 * +(fTemp349)));
			fTemp350 = +(+(HEAPF32[dsp + 13928240 + (1 << 2) >> 2]) + +(+(fRec220) + +(0.7 * +(HEAPF32[dsp + 13928248 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13926144 + (0 << 2) >> 2] = +(fTemp350);
			HEAPF32[dsp + 13928248 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13926144 + (11 << 2) >> 2]);
			fRec218 = +(0. - +(0.7 * +(fTemp350)));
			HEAPF32[dsp + 13928256 + (0 << 2) >> 2] = +(+(fSlow138) + +(0.999 * +(HEAPF32[dsp + 13928256 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928264 + (0 << 2) >> 2] = +(+(fSlow139) + +(0.999 * +(HEAPF32[dsp + 13928264 + (1 << 2) >> 2])));
			fTemp351 = +(0. - +(HEAPF32[dsp + 13928264 + (0 << 2) >> 2]));
			fTemp352 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 13928256 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp351)))), 0.5));
			iTemp353 = ((+(fTemp352) > 1.) | 0);
			iTemp354 = ((+(fTemp352) < 1.) | 0);
			fTemp355 = +(+((iTemp353 | 0)) + +(+(fTemp352) * +((iTemp354 | 0))));
			fTemp356 = +(+(+(HEAPF32[dsp + 13928000 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13928008 + (0 << 2) >> 2])) * +(fTemp342)) + +(+(HEAPF32[dsp + 13928008 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13928160 + (0 << 2) >> 2])) * +(fTemp342)) + +(+(HEAPF32[dsp + 13928160 + (0 << 2) >> 2]) * +(+(fRec218) + +(HEAPF32[dsp + 13928248 + (1 << 2) >> 2]))))))) * +(1. + +(1.38629 * +(0. - +(+(fTemp355) - 1.)))));
			fTemp357 = +(+(+(faustpower2_f(+(fTemp352))) * +((iTemp353 | 0))) + +((iTemp354 | 0)));
			HEAPF32[dsp + 13928272 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 13928272 + (1 << 2) >> 2])) + +(fSlow140));
			HEAPF32[dsp + 13928280 + (0 << 2) >> 2] = +(+(fSlow141) + +(0.999 * +(HEAPF32[dsp + 13928280 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928288 + (0 << 2) >> 2] = +(+(fSlow142) + +(0.999 * +(HEAPF32[dsp + 13928288 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928296 + (0 << 2) >> 2] = +(+(fSlow143) + +(0.999 * +(HEAPF32[dsp + 13928296 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928304 + (0 << 2) >> 2] = +(+(fSlow144) + +(0.999 * +(HEAPF32[dsp + 13928304 + (1 << 2) >> 2])));
			HEAP32[dsp + 13653472 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 8191) | 0) << 2) >> 2] = (iSlow145 | 0);
			HEAPF32[dsp + 13928312 + (0 << 2) >> 2] = +(+(fSlow146) + +(0.999 * +(HEAPF32[dsp + 13928312 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928320 + (0 << 2) >> 2] = +(+(0.99 * +(HEAPF32[dsp + 13928320 + (1 << 2) >> 2])) + +(fSlow149));
			HEAP32[dsp + 13928328 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow151 | 0):(HEAP32[dsp + 13928328 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13922880 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow152 | 0):(HEAP32[dsp + 13922880 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			iTemp358 = (imul((HEAP32[dsp + 13922880 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13922880 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928336 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928328 + (0 << 2) >> 2] | 0) + (((((iTemp358 | 0)?0:(HEAP32[dsp + 13928336 + (1 << 2) >> 2] | 0)) | 0) % 441000) | 0)) | 0);
			HEAPF32[dsp + 8820000 + ((HEAP32[dsp + 13928336 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(+(fSlow148) * +(fTemp0));
			HEAP32[dsp + 13928344 + (0 << 2) >> 2] = (((iTemp1 | 0)?(iSlow153 | 0):(HEAP32[dsp + 13928344 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13923392 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = (((iTemp1 | 0)?(iSlow154 | 0):(HEAP32[dsp + 13923392 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 13928352 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928328 + (0 << 2) >> 2] | 0) + (((iTemp358 | 0)?0:(HEAP32[dsp + 13928352 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928360 + (0 << 2) >> 2] = (((HEAP32[dsp + 13928344 + (0 << 2) >> 2] | 0) + (((((imul((HEAP32[dsp + 13923392 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 0) | 0) & 127) | 0) << 2) >> 2] | 0), ((1 - (HEAP32[dsp + 13923392 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 100) | 0) & 127) | 0) << 2) >> 2] | 0)) | 0)) | 0)?0:(HEAP32[dsp + 13928360 + (1 << 2) >> 2] | 0)) | 0) % ((max(100, (HEAP32[dsp + 13928352 + (0 << 2) >> 2] | 0))) | 0)) | 0)) | 0);
			fTemp359 = +(+(+(fSlow148) * +(+(fTemp0) * +(HEAPF32[dsp + 13928320 + (0 << 2) >> 2]))) + +(HEAPF32[dsp + 8820000 + ((HEAP32[dsp + 13928360 + (0 << 2) >> 2] | 0) << 2) >> 2]));
			HEAPF32[dsp + 13928368 + (0 << 2) >> 2] = +(+(fSlow155) + +(0.999 * +(HEAPF32[dsp + 13928368 + (1 << 2) >> 2])));
			fTemp360 = +(15.873 * +(HEAPF32[dsp + 13928368 + (0 << 2) >> 2]));
			fTemp361 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(1000. + +(fTemp360)))));
			fTemp362 = +(sqrtf(+(+(HEAPF32[dsp + 13928584 >> 2]) * +(+(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(50. + +(fTemp360))))) * +(fTemp361)))));
			fTemp363 = +(faustpower2_f(+(fTemp362)));
			fTemp364 = +(+(+(HEAPF32[dsp + 13928596 >> 2]) * +(fTemp361)) - +(+(HEAPF32[dsp + 13928600 >> 2]) * +(+(fTemp363) / +(fTemp361))));
			fTemp365 = +(faustpower2_f(+(fTemp364)));
			fTemp366 = +(8. * +(fTemp363));
			fTemp367 = +(+(214.145 * +(fTemp365)) + +(fTemp366));
			iTemp368 = (imul((iSlow145 | 0), ((1 - (HEAP32[dsp + 13653472 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 4410) | 0) & 8191) | 0) << 2) >> 2] | 0)) | 0)) | 0);
			HEAP32[dsp + 13928376 + (0 << 2) >> 2] = ((1 + (((iTemp368 | 0)?0:(HEAP32[dsp + 13928376 + (1 << 2) >> 2] | 0)) | 0)) | 0);
			HEAPF32[dsp + 13774640 + (((min(4410, (HEAP32[dsp + 13928376 + (0 << 2) >> 2] | 0))) | 0) << 2) >> 2] = +(+(fTemp359) * +(sinf(+(0.000712018 * +((((HEAP32[dsp + 13928376 + (0 << 2) >> 2] | 0) % 4410) | 0))))));
			HEAPF32[dsp + 13928384 + (0 << 2) >> 2] = +(+((iTemp368 | 0)?0.:+(HEAPF32[dsp + 13928384 + (1 << 2) >> 2])) + +(fSlow156));
			HEAPF32[dsp + 13358560 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(HEAPF32[dsp + 13774640 + (~~(+(+(HEAPF32[dsp + 13928384 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]);
			fTemp369 = +(3.12965 * +(fTemp364));
			fTemp370 = +(+(HEAPF32[dsp + 13928604 >> 2]) * +(fTemp363));
			fTemp371 = +(+(HEAPF32[dsp + 13928608 >> 2]) * +(fTemp364));
			fTemp372 = +(16. * +(fTemp363));
			fTemp373 = +(faustpower4_f(+(fTemp362)));
			fTemp374 = +(+(HEAPF32[dsp + 13928616 >> 2]) * +(fTemp373));
			fTemp375 = +(+(0.981166 * +(fTemp365)) + +(fTemp366));
			fTemp376 = +(+(HEAPF32[dsp + 13928576 >> 2]) * +(fTemp363));
			fTemp377 = +(1.56483 * +(fTemp364));
			fTemp378 = +(+(HEAPF32[dsp + 13928620 >> 2]) * +(fTemp364));
			fTemp379 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp375) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp363) * +(+(fTemp376) + +(fTemp377)))))) + +(fTemp378)));
			HEAPF32[dsp + 13926540 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13358560 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 19000) | 0) & 32767) | 0) << 2) >> 2]) + +(+(HEAPF32[dsp + 13774640 + (~~(+(+(HEAPF32[dsp + 13928384 + (0 << 2) >> 2]) % 4410.)) << 2) >> 2]) + +(HEAPF32[dsp + 13358560 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 9500) | 0) & 32767) | 0) << 2) >> 2]))) - +(+(+(+(+(+(HEAPF32[dsp + 13926540 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp363) * +(+(fTemp369) + +(fTemp370)))) - +(64. + +(fTemp371)))) + +(+(HEAPF32[dsp + 13926540 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(1.96233 * +(fTemp365)) + +(fTemp372))) + +(fTemp374)))))) + +(+(HEAPF32[dsp + 13926540 + (3 << 2) >> 2]) * +(+(+(fTemp371) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp363) * +(+(fTemp370) - +(fTemp369))))) - 64.))) + +(+(HEAPF32[dsp + 13926540 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp375) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp363) * +(+(fTemp376) - +(fTemp377))))))) - +(fTemp378)))) / +(fTemp379)));
			fTemp380 = +(+(0.0008 * +(fTemp363)) + +(0.00173291 * +(fTemp365)));
			fTemp381 = +(+(+(HEAPF32[dsp + 13928628 >> 2]) * +(fTemp373)) - 0.0064);
			fTemp382 = +(+(HEAPF32[dsp + 13928636 >> 2]) * +(fTemp373));
			fTemp383 = +(2.04991 * +(fTemp364));
			fTemp384 = +(+(HEAPF32[dsp + 13928640 >> 2]) * +(fTemp364));
			fTemp385 = +(+(fTemp366) + +(2.75849 * +(fTemp365)));
			fTemp386 = +(1.02496 * +(fTemp364));
			fTemp387 = +(+(HEAPF32[dsp + 13928644 >> 2]) * +(fTemp364));
			fTemp388 = +(16. + +(+(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp385) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp363) * +(+(fTemp376) + +(fTemp386)))))) + +(fTemp387)));
			HEAPF32[dsp + 13926560 + (0 << 2) >> 2] = +(+(+(+(+(+(+(+(HEAPF32[dsp + 13926540 + (0 << 2) >> 2]) * +(0.0016 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp380)))) + +(+(HEAPF32[dsp + 13926540 + (1 << 2) >> 2]) * +(fTemp381))) + +(+(HEAPF32[dsp + 13926540 + (2 << 2) >> 2]) * +(0.0096 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(0.00346582 * +(fTemp365)) + +(0.0016 * +(fTemp363)))) + +(+(HEAPF32[dsp + 13928632 >> 2]) * +(fTemp373))))))) + +(+(HEAPF32[dsp + 13926540 + (3 << 2) >> 2]) * +(fTemp381))) + +(+(HEAPF32[dsp + 13926540 + (4 << 2) >> 2]) * +(0.0016 + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp382) + +(+(fTemp380) + +(fTemp382))))))) / +(fTemp379)) - +(+(+(+(+(+(HEAPF32[dsp + 13926560 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp363) * +(+(fTemp370) + +(fTemp383)))) - +(64. + +(fTemp384)))) + +(+(HEAPF32[dsp + 13926560 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp374) + +(0. - +(+(fTemp372) + +(5.51697 * +(fTemp365))))))))) + +(+(HEAPF32[dsp + 13926560 + (3 << 2) >> 2]) * +(+(+(fTemp384) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(fTemp363) * +(+(fTemp370) - +(fTemp383))))) - 64.))) + +(+(HEAPF32[dsp + 13926560 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp385) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(fTemp363) * +(+(fTemp376) - +(fTemp386))))))) - +(fTemp387)))) / +(fTemp388)));
			fTemp389 = +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp373));
			fTemp390 = +(+(fTemp366) + +(30.4869 * +(fTemp365)));
			fTemp391 = +(+(+(HEAPF32[dsp + 13928648 >> 2]) * +(fTemp373)) - 64.);
			fTemp392 = +(0.67362 * +(fTemp364));
			fTemp393 = +(+(HEAPF32[dsp + 13928652 >> 2]) * +(fTemp364));
			fTemp394 = +(+(4.27743 * +(fTemp365)) + +(fTemp366));
			fTemp395 = +(0.33681 * +(fTemp364));
			fTemp396 = +(+(HEAPF32[dsp + 13928656 >> 2]) * +(fTemp364));
			fTemp397 = +(16. + +(+(fTemp396) + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp394) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(+(fTemp395) + +(fTemp376)) * +(fTemp363)))))));
			HEAPF32[dsp + 13926580 + (0 << 2) >> 2] = +(+(+(+(+(HEAPF32[dsp + 13926560 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp389) + +(+(fTemp389) + +(fTemp390)))))) + +(+(+(+(+(HEAPF32[dsp + 13926560 + (0 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp390)))) + +(+(HEAPF32[dsp + 13926560 + (1 << 2) >> 2]) * +(fTemp391))) + +(+(HEAPF32[dsp + 13926560 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp374) + +(0. - +(+(fTemp372) + +(60.9739 * +(fTemp365))))))))) + +(+(HEAPF32[dsp + 13926560 + (3 << 2) >> 2]) * +(fTemp391)))) / +(fTemp388)) - +(+(+(+(+(+(HEAPF32[dsp + 13926580 + (1 << 2) >> 2]) * +(+(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(+(fTemp392) + +(fTemp370)) * +(fTemp363))) - +(64. + +(fTemp393)))) + +(+(HEAPF32[dsp + 13926580 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(8.55487 * +(fTemp365)) + +(fTemp372))) + +(fTemp374)))))) + +(+(HEAPF32[dsp + 13926580 + (3 << 2) >> 2]) * +(+(+(fTemp393) + +(+(HEAPF32[dsp + 13928580 >> 2]) * +(+(+(fTemp370) - +(fTemp392)) * +(fTemp363)))) - 64.))) + +(+(HEAPF32[dsp + 13926580 + (4 << 2) >> 2]) * +(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp394) + +(+(HEAPF32[dsp + 13928576 >> 2]) * +(+(+(fTemp376) - +(fTemp395)) * +(fTemp363)))))) - +(fTemp396)))) / +(fTemp397)));
			fTemp398 = +(+(+(1. - +(HEAPF32[dsp + 13928312 + (0 << 2) >> 2])) * +(fTemp359)) + +(50. * +(+(+(HEAPF32[dsp + 13928312 + (0 << 2) >> 2]) * +(+(+(+(+(+(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(fTemp367))) * +(HEAPF32[dsp + 13926580 + (0 << 2) >> 2])) + +(+(HEAPF32[dsp + 13926580 + (1 << 2) >> 2]) * +(fTemp391))) + +(+(HEAPF32[dsp + 13926580 + (2 << 2) >> 2]) * +(96. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(0. - +(+(428.289 * +(fTemp365)) + +(fTemp372))) + +(fTemp374)))))) + +(+(HEAPF32[dsp + 13926580 + (3 << 2) >> 2]) * +(fTemp391))) + +(+(HEAPF32[dsp + 13926580 + (4 << 2) >> 2]) * +(16. + +(+(HEAPF32[dsp + 13928612 >> 2]) * +(+(fTemp389) + +(+(fTemp367) + +(fTemp389)))))))) / +(fTemp397))));
			HEAPF32[dsp + 12350000 + ((HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0) << 2) >> 2] = +(fTemp398);
			HEAPF32[dsp + 13928392 + (0 << 2) >> 2] = +(+(+(HEAPF32[dsp + 13928392 + (1 << 2) >> 2]) % +(fSlow157)) + +(fSlow158));
			HEAPF32[dsp + 13928400 + (0 << 2) >> 2] = +(((+(HEAPF32[dsp + 13928392 + (0 << 2) >> 2]) < +(HEAPF32[dsp + 13928392 + (1 << 2) >> 2])) | 0)?+(fTemp43):+(HEAPF32[dsp + 13928400 + (1 << 2) >> 2]));
			fTemp399 = +(+(+(1. - +(HEAPF32[dsp + 13928304 + (0 << 2) >> 2])) * +(fTemp398)) + +(+(+(HEAPF32[dsp + 13928304 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 12350000 + (~~(+(+(HEAPF32[dsp + 13928392 + (0 << 2) >> 2]) + +(max(1000., +(min(70000., +(HEAPF32[dsp + 13928400 + (0 << 2) >> 2]))))))) << 2) >> 2])) * +(sinf(+(+(fSlow159) * +(HEAPF32[dsp + 13928392 + (0 << 2) >> 2]))))));
			HEAPF32[dsp + 13928408 + (0 << 2) >> 2] = +(+(fSlow161) + +(0.99 * +(HEAPF32[dsp + 13928408 + (1 << 2) >> 2])));
			fTemp400 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(HEAPF32[dsp + 13928408 + (0 << 2) >> 2])))));
			fTemp401 = +(1. / +(fTemp400));
			fTemp402 = +(1. + +(+(+(fSlow162) + +(fTemp401)) / +(fTemp400)));
			HEAPF32[dsp + 13926840 + (0 << 2) >> 2] = +(+(fTemp399) - +(+(+(+(HEAPF32[dsp + 13926840 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp401) - +(fSlow162)) / +(fTemp400)))) + +(2. * +(+(HEAPF32[dsp + 13926840 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp400)))))))) / +(fTemp402)));
			fTemp403 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(2. * +(HEAPF32[dsp + 13928408 + (0 << 2) >> 2]))))));
			fTemp404 = +(1. / +(fTemp403));
			fTemp405 = +(1. + +(+(+(fSlow162) + +(fTemp404)) / +(fTemp403)));
			HEAPF32[dsp + 13926852 + (0 << 2) >> 2] = +(+(fTemp399) - +(+(+(+(HEAPF32[dsp + 13926852 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp404) - +(fSlow162)) / +(fTemp403)))) + +(2. * +(+(HEAPF32[dsp + 13926852 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp403)))))))) / +(fTemp405)));
			fTemp406 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(3. * +(HEAPF32[dsp + 13928408 + (0 << 2) >> 2]))))));
			fTemp407 = +(1. / +(fTemp406));
			fTemp408 = +(1. + +(+(+(fSlow162) + +(fTemp407)) / +(fTemp406)));
			HEAPF32[dsp + 13926864 + (0 << 2) >> 2] = +(+(fTemp399) - +(+(+(+(HEAPF32[dsp + 13926864 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp407) - +(fSlow162)) / +(fTemp406)))) + +(2. * +(+(HEAPF32[dsp + 13926864 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp406)))))))) / +(fTemp408)));
			fTemp409 = +(tanf(+(+(HEAPF32[dsp + 13928588 >> 2]) * +(200. + +(4. * +(HEAPF32[dsp + 13928408 + (0 << 2) >> 2]))))));
			fTemp410 = +(1. / +(fTemp409));
			fTemp411 = +(1. + +(+(+(fSlow162) + +(fTemp410)) / +(fTemp409)));
			HEAPF32[dsp + 13926876 + (0 << 2) >> 2] = +(+(fTemp399) - +(+(+(+(HEAPF32[dsp + 13926876 + (2 << 2) >> 2]) * +(1. + +(+(+(fTemp410) - +(fSlow162)) / +(fTemp409)))) + +(2. * +(+(HEAPF32[dsp + 13926876 + (1 << 2) >> 2]) * +(1. - +(1. / +(faustpower2_f(+(fTemp409)))))))) / +(fTemp411)));
			fTemp412 = +(+(+(1. - +(HEAPF32[dsp + 13928296 + (0 << 2) >> 2])) * +(fTemp399)) + +(+(HEAPF32[dsp + 13928296 + (0 << 2) >> 2]) * +(+(+(+(+(+(+(0.6 * +(HEAPF32[dsp + 13926840 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926840 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926840 + (2 << 2) >> 2]))) / +(fTemp402)) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926852 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926852 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926852 + (2 << 2) >> 2]))) / +(fTemp405))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926864 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926864 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926864 + (2 << 2) >> 2]))) / +(fTemp408))) + +(+(+(+(0.6 * +(HEAPF32[dsp + 13926876 + (0 << 2) >> 2])) + +(1.2 * +(HEAPF32[dsp + 13926876 + (1 << 2) >> 2]))) + +(0.6 * +(HEAPF32[dsp + 13926876 + (2 << 2) >> 2]))) / +(fTemp411)))));
			HEAPF32[dsp + 13928416 + (0 << 2) >> 2] = +(fmodf(+(+(HEAPF32[dsp + 13928416 + (1 << 2) >> 2]) + +(fSlow164)), 1.));
			HEAPF32[dsp + 13928424 + (0 << 2) >> 2] = +(+(+(fSlow163) * +(HEAPF32[dsp + 13928424 + (1 << 2) >> 2])) + +(+(fTemp412) * +(sinf(+(6.28 * +(HEAPF32[dsp + 13928416 + (0 << 2) >> 2]))))));
			fTemp413 = +(+(+(1. - +(HEAPF32[dsp + 13928288 + (0 << 2) >> 2])) * +(fTemp412)) + +(+(HEAPF32[dsp + 13928288 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 13928424 + (0 << 2) >> 2])));
			HEAPF32[dsp + 13928432 + (0 << 2) >> 2] = +(+(fSlow165) + +(0.999 * +(HEAPF32[dsp + 13928432 + (1 << 2) >> 2])));
			fTemp414 = +(0.2 * +(fTemp413));
			fTemp415 = +(+(fTemp414) + +(0.764 * +(HEAPF32[dsp + 13928440 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13833280 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp415);
			HEAPF32[dsp + 13928440 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13833280 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1122) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928448 + (0 << 2) >> 2] = +(fTemp415);
			fTemp416 = +(+(fTemp414) + +(0.783 * +(HEAPF32[dsp + 13928456 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13902912 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp416);
			HEAPF32[dsp + 13928456 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13902912 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 1010) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928464 + (0 << 2) >> 2] = +(fTemp416);
			fTemp417 = +(+(fTemp414) + +(0.805 * +(HEAPF32[dsp + 13928472 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13907008 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp417);
			HEAPF32[dsp + 13928472 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13907008 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 900) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928480 + (0 << 2) >> 2] = +(fTemp417);
			fTemp418 = +(+(0.827 * +(HEAPF32[dsp + 13928488 + (1 << 2) >> 2])) + +(fTemp414));
			HEAPF32[dsp + 13911104 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp418);
			HEAPF32[dsp + 13928488 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13911104 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 777) | 0) & 1023) | 0) << 2) >> 2]);
			HEAPF32[dsp + 13928496 + (0 << 2) >> 2] = +(fTemp418);
			fTemp419 = +(+(HEAPF32[dsp + 13928448 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13928464 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 13928480 + (1 << 2) >> 2]) + +(+(0.7 * +(HEAPF32[dsp + 13928504 + (1 << 2) >> 2])) + +(HEAPF32[dsp + 13928496 + (1 << 2) >> 2])))));
			HEAPF32[dsp + 13923904 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 127) | 0) << 2) >> 2] = +(fTemp419);
			HEAPF32[dsp + 13928504 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13923904 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 124) | 0) & 127) | 0) << 2) >> 2]);
			fRec268 = +(0. - +(0.7 * +(fTemp419)));
			fTemp420 = +(+(HEAPF32[dsp + 13928504 + (1 << 2) >> 2]) + +(+(fRec268) + +(0.7 * +(HEAPF32[dsp + 13928512 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13925696 + ((((HEAP32[dsp + 13928552 >> 2] | 0) & 63) | 0) << 2) >> 2] = +(fTemp420);
			HEAPF32[dsp + 13928512 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13925696 + ((((((HEAP32[dsp + 13928552 >> 2] | 0) - 41) | 0) & 63) | 0) << 2) >> 2]);
			fRec266 = +(0. - +(0.7 * +(fTemp420)));
			fTemp421 = +(+(HEAPF32[dsp + 13928512 + (1 << 2) >> 2]) + +(+(fRec266) + +(0.7 * +(HEAPF32[dsp + 13928520 + (1 << 2) >> 2]))));
			HEAPF32[dsp + 13926192 + (0 << 2) >> 2] = +(fTemp421);
			HEAPF32[dsp + 13928520 + (0 << 2) >> 2] = +(HEAPF32[dsp + 13926192 + (11 << 2) >> 2]);
			fRec264 = +(0. - +(0.7 * +(fTemp421)));
			fTemp422 = +(+(+(1. - +(HEAPF32[dsp + 13928280 + (0 << 2) >> 2])) * +(fTemp413)) + +(+(HEAPF32[dsp + 13928280 + (0 << 2) >> 2]) * +(+(+(1. - +(HEAPF32[dsp + 13928432 + (0 << 2) >> 2])) * +(fTemp413)) + +(+(HEAPF32[dsp + 13928432 + (0 << 2) >> 2]) * +(+(fRec264) + +(HEAPF32[dsp + 13928520 + (1 << 2) >> 2]))))));
			HEAPF32[dsp + 13928528 + (0 << 2) >> 2] = +(+(fSlow166) + +(0.999 * +(HEAPF32[dsp + 13928528 + (1 << 2) >> 2])));
			HEAPF32[dsp + 13928536 + (0 << 2) >> 2] = +(+(fSlow167) + +(0.999 * +(HEAPF32[dsp + 13928536 + (1 << 2) >> 2])));
			fTemp423 = +(0. - +(HEAPF32[dsp + 13928536 + (0 << 2) >> 2]));
			fTemp424 = +(powf(+(+(faustpower2_f(+(HEAPF32[dsp + 13928528 + (0 << 2) >> 2]))) + +(faustpower2_f(+(fTemp423)))), 0.5));
			iTemp425 = ((+(fTemp424) > 1.) | 0);
			iTemp426 = ((+(fTemp424) < 1.) | 0);
			fTemp427 = +(+((iTemp425 | 0)) + +(+(fTemp424) * +((iTemp426 | 0))));
			fTemp428 = +(1. + +(1.38629 * +(0. - +(+(fTemp427) - 1.))));
			fTemp429 = +(+(+(faustpower2_f(+(fTemp424))) * +((iTemp425 | 0))) + +((iTemp426 | 0)));
			HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(fTemp72) / +(fTemp73)) + +(+(fTemp143) / +(fTemp144))) + +(+(fTemp214) / +(fTemp215))) + +(+(fTemp285) / +(fTemp286))) + +(+(fTemp356) / +(fTemp357))) + +(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))));
			fTemp430 = +(atan2f(+(fTemp67), +(HEAPF32[dsp + 13927168 + (0 << 2) >> 2])));
			fTemp431 = +(2. * +(fTemp71));
			fTemp432 = +(+(2. * +(+(+(fTemp71) * +(((+(fTemp431) > 0.) | 0))) * +(((+(fTemp431) <= 1.) | 0)))) + +(((+(fTemp431) > 1.) | 0)));
			fTemp433 = +(atan2f(+(fTemp138), +(HEAPF32[dsp + 13927440 + (0 << 2) >> 2])));
			fTemp434 = +(2. * +(fTemp142));
			fTemp435 = +(+(2. * +(+(+(fTemp142) * +(((+(fTemp434) > 0.) | 0))) * +(((+(fTemp434) <= 1.) | 0)))) + +(((+(fTemp434) > 1.) | 0)));
			fTemp436 = +(atan2f(+(fTemp209), +(HEAPF32[dsp + 13927712 + (0 << 2) >> 2])));
			fTemp437 = +(2. * +(fTemp213));
			fTemp438 = +(+(2. * +(+(+(fTemp213) * +(((+(fTemp437) > 0.) | 0))) * +(((+(fTemp437) <= 1.) | 0)))) + +(((+(fTemp437) > 1.) | 0)));
			fTemp439 = +(atan2f(+(fTemp280), +(HEAPF32[dsp + 13927984 + (0 << 2) >> 2])));
			fTemp440 = +(2. * +(fTemp284));
			fTemp441 = +(+(2. * +(+(+(fTemp284) * +(((+(fTemp440) > 0.) | 0))) * +(((+(fTemp440) <= 1.) | 0)))) + +(((+(fTemp440) > 1.) | 0)));
			fTemp442 = +(atan2f(+(fTemp423), +(HEAPF32[dsp + 13928528 + (0 << 2) >> 2])));
			fTemp443 = +(2. * +(fTemp427));
			fTemp444 = +(+(2. * +(+((imul(((+(fTemp443) > 0.) | 0), ((+(fTemp443) <= 1.) | 0)) | 0)) * +(fTemp427))) + +(((+(fTemp443) > 1.) | 0)));
			fTemp445 = +(atan2f(+(fTemp351), +(HEAPF32[dsp + 13928256 + (0 << 2) >> 2])));
			fTemp446 = +(2. * +(fTemp355));
			fTemp447 = +(+(2. * +(+(+(fTemp355) * +(((+(fTemp446) > 0.) | 0))) * +(((+(fTemp446) <= 1.) | 0)))) + +(((+(fTemp446) > 1.) | 0)));
			HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(sinf(+(fTemp430)))) * +(fTemp432)) / +(fTemp73)) + +(+(+(+(fTemp143) * +(sinf(+(fTemp433)))) * +(fTemp435)) / +(fTemp144))) + +(+(+(+(fTemp214) * +(sinf(+(fTemp436)))) * +(fTemp438)) / +(fTemp215))) + +(+(+(+(fTemp285) * +(sinf(+(fTemp439)))) * +(fTemp441)) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(sinf(+(fTemp442)))) * +(fTemp444)) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(sinf(+(fTemp445)))) * +(fTemp447)) / +(fTemp357))));
			HEAPF32[output2 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(fTemp432)) * +(cosf(+(fTemp430)))) / +(fTemp73)) + +(+(+(+(fTemp143) * +(fTemp435)) * +(cosf(+(fTemp433)))) / +(fTemp144))) + +(+(+(+(fTemp214) * +(fTemp438)) * +(cosf(+(fTemp436)))) / +(fTemp215))) + +(+(+(+(fTemp285) * +(fTemp441)) * +(cosf(+(fTemp439)))) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(fTemp444)) * +(cosf(+(fTemp442)))) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(fTemp447)) * +(cosf(+(fTemp445)))) / +(fTemp357))));
			fTemp448 = +(2. * +(fTemp430));
			fTemp449 = +(1.38629 * +(fTemp71));
			fTemp450 = +(+(fTemp449) - 0.693147);
			fTemp451 = +(2.4663 * +(fTemp450));
			fTemp452 = +(+(2.4663 * +(+(+(fTemp450) * +(((+(fTemp451) > 0.) | 0))) * +(((+(fTemp451) <= 1.) | 0)))) + +(((+(fTemp451) > 1.) | 0)));
			fTemp453 = +(2. * +(fTemp433));
			fTemp454 = +(1.38629 * +(fTemp142));
			fTemp455 = +(+(fTemp454) - 0.693147);
			fTemp456 = +(2.4663 * +(fTemp455));
			fTemp457 = +(+(2.4663 * +(+(+(fTemp455) * +(((+(fTemp456) > 0.) | 0))) * +(((+(fTemp456) <= 1.) | 0)))) + +(((+(fTemp456) > 1.) | 0)));
			fTemp458 = +(2. * +(fTemp436));
			fTemp459 = +(1.38629 * +(fTemp213));
			fTemp460 = +(+(fTemp459) - 0.693147);
			fTemp461 = +(2.4663 * +(fTemp460));
			fTemp462 = +(+(2.4663 * +(+(+(fTemp460) * +(((+(fTemp461) > 0.) | 0))) * +(((+(fTemp461) <= 1.) | 0)))) + +(((+(fTemp461) > 1.) | 0)));
			fTemp463 = +(2. * +(fTemp439));
			fTemp464 = +(1.38629 * +(fTemp284));
			fTemp465 = +(+(fTemp464) - 0.693147);
			fTemp466 = +(2.4663 * +(fTemp465));
			fTemp467 = +(+(2.4663 * +(+(+(fTemp465) * +(((+(fTemp466) > 0.) | 0))) * +(((+(fTemp466) <= 1.) | 0)))) + +(((+(fTemp466) > 1.) | 0)));
			fTemp468 = +(2. * +(fTemp442));
			fTemp469 = +(1.38629 * +(fTemp427));
			fTemp470 = +(+(fTemp469) - 0.693147);
			fTemp471 = +(2.4663 * +(fTemp470));
			fTemp472 = +(+(2.4663 * +(+(+(fTemp470) * +(((+(fTemp471) > 0.) | 0))) * +(((+(fTemp471) <= 1.) | 0)))) + +(((+(fTemp471) > 1.) | 0)));
			fTemp473 = +(2. * +(fTemp445));
			fTemp474 = +(1.38629 * +(fTemp355));
			fTemp475 = +(+(fTemp474) - 0.693147);
			fTemp476 = +(2.4663 * +(fTemp475));
			fTemp477 = +(+(2.4663 * +(+(+(fTemp475) * +(((+(fTemp476) > 0.) | 0))) * +(((+(fTemp476) <= 1.) | 0)))) + +(((+(fTemp476) > 1.) | 0)));
			HEAPF32[output3 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(sinf(+(fTemp448)))) * +(fTemp452)) / +(fTemp73)) + +(+(+(+(fTemp143) * +(sinf(+(fTemp453)))) * +(fTemp457)) / +(fTemp144))) + +(+(+(+(fTemp214) * +(sinf(+(fTemp458)))) * +(fTemp462)) / +(fTemp215))) + +(+(+(+(fTemp285) * +(sinf(+(fTemp463)))) * +(fTemp467)) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(sinf(+(fTemp468)))) * +(fTemp472)) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(sinf(+(fTemp473)))) * +(fTemp477)) / +(fTemp357))));
			HEAPF32[output4 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(fTemp452)) * +(cosf(+(fTemp448)))) / +(fTemp73)) + +(+(+(+(fTemp143) * +(fTemp457)) * +(cosf(+(fTemp453)))) / +(fTemp144))) + +(+(+(+(fTemp214) * +(fTemp462)) * +(cosf(+(fTemp458)))) / +(fTemp215))) + +(+(+(+(fTemp285) * +(fTemp467)) * +(cosf(+(fTemp463)))) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(fTemp472)) * +(cosf(+(fTemp468)))) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(fTemp477)) * +(cosf(+(fTemp473)))) / +(fTemp357))));
			fTemp478 = +(3. * +(fTemp430));
			fTemp479 = +(+(fTemp449) - 1.09861);
			fTemp480 = +(3.47606 * +(fTemp479));
			fTemp481 = +(+(3.47606 * +(+(+(fTemp479) * +(((+(fTemp480) > 0.) | 0))) * +(((+(fTemp480) <= 1.) | 0)))) + +(((+(fTemp480) > 1.) | 0)));
			fTemp482 = +(3. * +(fTemp433));
			fTemp483 = +(+(fTemp454) - 1.09861);
			fTemp484 = +(3.47606 * +(fTemp483));
			fTemp485 = +(+(3.47606 * +(+(+(fTemp483) * +(((+(fTemp484) > 0.) | 0))) * +(((+(fTemp484) <= 1.) | 0)))) + +(((+(fTemp484) > 1.) | 0)));
			fTemp486 = +(3. * +(fTemp436));
			fTemp487 = +(+(fTemp459) - 1.09861);
			fTemp488 = +(3.47606 * +(fTemp487));
			fTemp489 = +(+(3.47606 * +(+(+(fTemp487) * +(((+(fTemp488) > 0.) | 0))) * +(((+(fTemp488) <= 1.) | 0)))) + +(((+(fTemp488) > 1.) | 0)));
			fTemp490 = +(3. * +(fTemp439));
			fTemp491 = +(+(fTemp464) - 1.09861);
			fTemp492 = +(3.47606 * +(fTemp491));
			fTemp493 = +(+(3.47606 * +(+(+(fTemp491) * +(((+(fTemp492) > 0.) | 0))) * +(((+(fTemp492) <= 1.) | 0)))) + +(((+(fTemp492) > 1.) | 0)));
			fTemp494 = +(3. * +(fTemp442));
			fTemp495 = +(+(fTemp469) - 1.09861);
			fTemp496 = +(3.47606 * +(fTemp495));
			fTemp497 = +(+(3.47606 * +(+(+(fTemp495) * +(((+(fTemp496) > 0.) | 0))) * +(((+(fTemp496) <= 1.) | 0)))) + +(((+(fTemp496) > 1.) | 0)));
			fTemp498 = +(3. * +(fTemp445));
			fTemp499 = +(+(fTemp474) - 1.09861);
			fTemp500 = +(3.47606 * +(fTemp499));
			fTemp501 = +(+(3.47606 * +(+(+(fTemp499) * +(((+(fTemp500) > 0.) | 0))) * +(((+(fTemp500) <= 1.) | 0)))) + +(((+(fTemp500) > 1.) | 0)));
			HEAPF32[output5 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(sinf(+(fTemp478)))) * +(fTemp481)) / +(fTemp73)) + +(+(+(+(fTemp143) * +(sinf(+(fTemp482)))) * +(fTemp485)) / +(fTemp144))) + +(+(+(+(fTemp214) * +(sinf(+(fTemp486)))) * +(fTemp489)) / +(fTemp215))) + +(+(+(+(fTemp285) * +(sinf(+(fTemp490)))) * +(fTemp493)) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(sinf(+(fTemp494)))) * +(fTemp497)) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(sinf(+(fTemp498)))) * +(fTemp501)) / +(fTemp357))));
			HEAPF32[output6 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(+(+(+(fTemp72) * +(fTemp481)) * +(cosf(+(fTemp478)))) / +(fTemp73)) + +(+(+(+(fTemp143) * +(fTemp485)) * +(cosf(+(fTemp482)))) / +(fTemp144))) + +(+(+(+(fTemp214) * +(fTemp489)) * +(cosf(+(fTemp486)))) / +(fTemp215))) + +(+(+(+(fTemp285) * +(fTemp493)) * +(cosf(+(fTemp490)))) / +(fTemp286))) + +(+(+(+(+(+(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]) * +(fTemp497)) * +(cosf(+(fTemp494)))) * +(fTemp422)) * +(fTemp428)) / +(fTemp429))) + +(+(+(+(fTemp356) * +(fTemp501)) * +(cosf(+(fTemp498)))) / +(fTemp357))));
			HEAPF32[dsp + 13926888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926888 + (0 << 2) >> 2]);
			HEAP32[dsp + 13926896 + (1 << 2) >> 2] = (HEAP32[dsp + 13926896 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13926904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926912 + (0 << 2) >> 2]);
			HEAP32[dsp + 13928552 >> 2] = (((HEAP32[dsp + 13928552 >> 2] | 0) + 1) | 0);
			HEAP32[dsp + 13926920 + (1 << 2) >> 2] = (HEAP32[dsp + 13926920 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13926928 + (1 << 2) >> 2] = (HEAP32[dsp + 13926928 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13926936 + (1 << 2) >> 2] = (HEAP32[dsp + 13926936 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13926944 + (1 << 2) >> 2] = (HEAP32[dsp + 13926944 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13926952 + (1 << 2) >> 2] = (HEAP32[dsp + 13926952 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13926960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926960 + (0 << 2) >> 2]);
			HEAP32[dsp + 13926968 + (1 << 2) >> 2] = (HEAP32[dsp + 13926968 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13926976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926984 + (0 << 2) >> 2]);
			for (j0 = 4; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926240 + ((j0 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926240 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j1 = 4; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926260 + ((j1 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926260 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j2 = 4; (((j2 | 0) > 0) | 0); j2 = (((j2 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926280 + ((j2 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926280 + ((((j2 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13926992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926992 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927000 + (1 << 2) >> 2] = (HEAP32[dsp + 13927000 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926600 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926600 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926612 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926612 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926612 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926612 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926624 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926624 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926636 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926636 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926636 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926636 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927040 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927048 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927048 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927056 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927056 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927064 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927064 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927072 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927072 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927080 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927080 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927088 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927096 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927096 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927112 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927128 + (0 << 2) >> 2]);
			for (j3 = 11; (((j3 | 0) > 0) | 0); j3 = (((j3 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13925952 + ((j3 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13925952 + ((((j3 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927192 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927200 + (1 << 2) >> 2] = (HEAP32[dsp + 13927200 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927208 + (1 << 2) >> 2] = (HEAP32[dsp + 13927208 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927216 + (1 << 2) >> 2] = (HEAP32[dsp + 13927216 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927224 + (1 << 2) >> 2] = (HEAP32[dsp + 13927224 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927232 + (1 << 2) >> 2] = (HEAP32[dsp + 13927232 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927240 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927248 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927256 + (1 << 2) >> 2] = (HEAP32[dsp + 13927256 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927264 + (0 << 2) >> 2]);
			for (j4 = 4; (((j4 | 0) > 0) | 0); j4 = (((j4 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926300 + ((j4 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926300 + ((((j4 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j5 = 4; (((j5 | 0) > 0) | 0); j5 = (((j5 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926320 + ((j5 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926320 + ((((j5 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j6 = 4; (((j6 | 0) > 0) | 0); j6 = (((j6 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926340 + ((j6 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926340 + ((((j6 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926648 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926648 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926660 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926660 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926660 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926660 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926672 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926672 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926684 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926684 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926684 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926684 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927320 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927328 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927328 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927336 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927336 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927344 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927344 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927352 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927352 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927360 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927360 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927368 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927376 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927376 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927384 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927416 + (0 << 2) >> 2]);
			for (j7 = 11; (((j7 | 0) > 0) | 0); j7 = (((j7 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926000 + ((j7 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926000 + ((((j7 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927496 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927504 + (1 << 2) >> 2] = (HEAP32[dsp + 13927504 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927512 + (1 << 2) >> 2] = (HEAP32[dsp + 13927512 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927520 + (1 << 2) >> 2] = (HEAP32[dsp + 13927520 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927528 + (1 << 2) >> 2] = (HEAP32[dsp + 13927528 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927536 + (1 << 2) >> 2] = (HEAP32[dsp + 13927536 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927544 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927544 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927552 + (1 << 2) >> 2] = (HEAP32[dsp + 13927552 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927560 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927560 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927568 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927568 + (0 << 2) >> 2]);
			for (j8 = 4; (((j8 | 0) > 0) | 0); j8 = (((j8 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926360 + ((j8 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926360 + ((((j8 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j9 = 4; (((j9 | 0) > 0) | 0); j9 = (((j9 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926380 + ((j9 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926380 + ((((j9 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j10 = 4; (((j10 | 0) > 0) | 0); j10 = (((j10 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926400 + ((j10 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926400 + ((((j10 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927576 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927576 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927584 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927584 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927592 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927592 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926696 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926696 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926696 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926708 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926708 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926708 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926708 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926720 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926720 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926732 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926732 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926732 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926732 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927600 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927600 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927608 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927608 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927616 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927616 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927624 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927624 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927632 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927632 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927640 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927640 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927648 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927648 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927656 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927656 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927664 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927664 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927672 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927672 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927680 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927680 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927688 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927688 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927696 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927696 + (0 << 2) >> 2]);
			for (j11 = 11; (((j11 | 0) > 0) | 0); j11 = (((j11 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926048 + ((j11 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926048 + ((((j11 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927704 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927704 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927712 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927712 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927720 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927720 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927728 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927728 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927736 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927736 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927752 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927752 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927760 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927760 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927776 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927776 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927784 + (1 << 2) >> 2] = (HEAP32[dsp + 13927784 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927792 + (1 << 2) >> 2] = (HEAP32[dsp + 13927792 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927800 + (1 << 2) >> 2] = (HEAP32[dsp + 13927800 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927808 + (1 << 2) >> 2] = (HEAP32[dsp + 13927808 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13927816 + (1 << 2) >> 2] = (HEAP32[dsp + 13927816 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927824 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927824 + (0 << 2) >> 2]);
			HEAP32[dsp + 13927832 + (1 << 2) >> 2] = (HEAP32[dsp + 13927832 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13927840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927840 + (0 << 2) >> 2]);
			for (j12 = 4; (((j12 | 0) > 0) | 0); j12 = (((j12 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926420 + ((j12 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926420 + ((((j12 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j13 = 4; (((j13 | 0) > 0) | 0); j13 = (((j13 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926440 + ((j13 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926440 + ((((j13 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j14 = 4; (((j14 | 0) > 0) | 0); j14 = (((j14 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926460 + ((j14 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926460 + ((((j14 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927848 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927848 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927856 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927856 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926744 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926744 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926744 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926744 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926756 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926756 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926756 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926756 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926768 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926768 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926768 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926768 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926780 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926780 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926780 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926780 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927872 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927872 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927880 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927880 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927888 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927888 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927896 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927896 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927904 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927904 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927912 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927912 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927920 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927920 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927928 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927928 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927936 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927936 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927944 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927944 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927952 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927952 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927960 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927960 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927968 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927968 + (0 << 2) >> 2]);
			for (j15 = 11; (((j15 | 0) > 0) | 0); j15 = (((j15 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926096 + ((j15 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926096 + ((((j15 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13927976 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927976 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927984 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927984 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13927992 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13927992 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928000 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928000 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928008 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928008 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928016 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928016 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928024 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928024 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928032 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928032 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928040 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928040 + (0 << 2) >> 2]);
			HEAP32[dsp + 13928048 + (1 << 2) >> 2] = (HEAP32[dsp + 13928048 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928056 + (1 << 2) >> 2] = (HEAP32[dsp + 13928056 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928064 + (1 << 2) >> 2] = (HEAP32[dsp + 13928064 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928072 + (1 << 2) >> 2] = (HEAP32[dsp + 13928072 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928080 + (1 << 2) >> 2] = (HEAP32[dsp + 13928080 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13928088 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928088 + (0 << 2) >> 2]);
			HEAP32[dsp + 13928096 + (1 << 2) >> 2] = (HEAP32[dsp + 13928096 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13928104 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928104 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928112 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928112 + (0 << 2) >> 2]);
			for (j16 = 4; (((j16 | 0) > 0) | 0); j16 = (((j16 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926480 + ((j16 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926480 + ((((j16 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j17 = 4; (((j17 | 0) > 0) | 0); j17 = (((j17 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926500 + ((j17 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926500 + ((((j17 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j18 = 4; (((j18 | 0) > 0) | 0); j18 = (((j18 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926520 + ((j18 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926520 + ((((j18 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13928120 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928120 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928128 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928128 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928136 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928136 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926792 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926792 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926792 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926792 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926804 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926804 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926804 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926804 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926816 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926816 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926816 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926816 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926828 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926828 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926828 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926828 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928144 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928152 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928160 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928160 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928168 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928168 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928176 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928176 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928184 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928184 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928192 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928192 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928200 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928200 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928208 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928208 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928216 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928216 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928224 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928224 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928232 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928232 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928240 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928240 + (0 << 2) >> 2]);
			for (j19 = 11; (((j19 | 0) > 0) | 0); j19 = (((j19 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926144 + ((j19 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926144 + ((((j19 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13928248 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928248 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928256 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928256 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928264 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928264 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928272 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928272 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928280 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928280 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928288 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928288 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928296 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928296 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928304 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928304 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928312 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928312 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928320 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928320 + (0 << 2) >> 2]);
			HEAP32[dsp + 13928328 + (1 << 2) >> 2] = (HEAP32[dsp + 13928328 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928336 + (1 << 2) >> 2] = (HEAP32[dsp + 13928336 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928344 + (1 << 2) >> 2] = (HEAP32[dsp + 13928344 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928352 + (1 << 2) >> 2] = (HEAP32[dsp + 13928352 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 13928360 + (1 << 2) >> 2] = (HEAP32[dsp + 13928360 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13928368 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928368 + (0 << 2) >> 2]);
			HEAP32[dsp + 13928376 + (1 << 2) >> 2] = (HEAP32[dsp + 13928376 + (0 << 2) >> 2] | 0);
			HEAPF32[dsp + 13928384 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928384 + (0 << 2) >> 2]);
			for (j20 = 4; (((j20 | 0) > 0) | 0); j20 = (((j20 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926540 + ((j20 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926540 + ((((j20 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j21 = 4; (((j21 | 0) > 0) | 0); j21 = (((j21 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926560 + ((j21 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926560 + ((((j21 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			for (j22 = 4; (((j22 | 0) > 0) | 0); j22 = (((j22 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926580 + ((j22 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926580 + ((((j22 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13928392 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928392 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928400 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928400 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928408 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928408 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926840 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926840 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926840 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926840 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926852 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926852 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926852 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926852 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926864 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926864 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926864 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926864 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13926876 + (2 << 2) >> 2] = +(HEAPF32[dsp + 13926876 + (1 << 2) >> 2]);
			HEAPF32[dsp + 13926876 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13926876 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928416 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928416 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928424 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928424 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928432 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928432 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928440 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928440 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928448 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928448 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928456 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928456 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928464 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928464 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928472 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928472 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928480 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928480 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928488 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928488 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928496 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928496 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928504 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928504 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928512 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928512 + (0 << 2) >> 2]);
			for (j23 = 11; (((j23 | 0) > 0) | 0); j23 = (((j23 | 0) - 1) | 0)) {
				HEAPF32[dsp + 13926192 + ((j23 | 0) << 2) >> 2] = +(HEAPF32[dsp + 13926192 + ((((j23 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF32[dsp + 13928520 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928520 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928528 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928528 + (0 << 2) >> 2]);
			HEAPF32[dsp + 13928536 + (1 << 2) >> 2] = +(HEAPF32[dsp + 13928536 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };
}

function getSizeeffet2v200() {
	return 13929076;
}

function getPathTableeffet2v200() {
	var pathTable = [];
	pathTable["/0x00/RinB0"] = 13928544;
	pathTable["/0x00/FreB0"] = 13928556;
	pathTable["/0x00/RevB2"] = 13928792;
	pathTable["/0x00/RinB2"] = 13928796;
	pathTable["/0x00/ResB2"] = 13928800;
	pathTable["/0x00/MunB2"] = 13928804;
	pathTable["/0x00/FreB2"] = 13928812;
	pathTable["/0x00/RevB3"] = 13928864;
	pathTable["/0x00/RinB3"] = 13928868;
	pathTable["/0x00/ResB3"] = 13928872;
	pathTable["/0x00/MunB3"] = 13928876;
	pathTable["/0x00/FreB3"] = 13928880;
	pathTable["/0x00/MunB0"] = 13928668;
	pathTable["/0x00/RevB5"] = 13928936;
	pathTable["/0x00/RinB5"] = 13928940;
	pathTable["/0x00/ResB5"] = 13928944;
	pathTable["/0x00/MunB5"] = 13928948;
	pathTable["/0x00/FreB5"] = 13928952;
	pathTable["/0x00/RevB4"] = 13929008;
	pathTable["/0x00/RinB4"] = 13929012;
	pathTable["/0x00/ResB4"] = 13929016;
	pathTable["/0x00/MunB4"] = 13929020;
	pathTable["/0x00/FreB4"] = 13929024;
	pathTable["/0x00/ResB0"] = 13928672;
	pathTable["/0x00/RevB0"] = 13928700;
	pathTable["/0x00/MunB1"] = 13928716;
	pathTable["/0x00/FreB1"] = 13928724;
	pathTable["/0x00/ResB1"] = 13928748;
	pathTable["/0x00/RinB1"] = 13928752;
	pathTable["/0x00/RevB1"] = 13928764;
	pathTable["/0x00/opt0"] = 13928548;
	pathTable["/0x00/FreY0"] = 13928560;
	pathTable["/0x00/MovX0"] = 13928704;
	pathTable["/0x00/MovY0"] = 13928708;
	pathTable["/0x00/Vol0"] = 13928712;
	pathTable["/0x00/opt1"] = 13928720;
	pathTable["/0x00/FreX1"] = 13928728;
	pathTable["/0x00/FreY1"] = 13928732;
	pathTable["/0x00/MunX1"] = 13928736;
	pathTable["/0x00/MunY1"] = 13928740;
	pathTable["/0x00/ResX1"] = 13928744;
	pathTable["/0x00/RinY1"] = 13928756;
	pathTable["/0x00/FreX0"] = 13928592;
	pathTable["/0x00/RinX1"] = 13928760;
	pathTable["/0x00/RevX1"] = 13928768;
	pathTable["/0x00/RevY1"] = 13928772;
	pathTable["/0x00/MovX1"] = 13928776;
	pathTable["/0x00/MovY1"] = 13928780;
	pathTable["/0x00/Vol1"] = 13928784;
	pathTable["/0x00/Vol2"] = 13928788;
	pathTable["/0x00/opt2"] = 13928808;
	pathTable["/0x00/FreY2"] = 13928816;
	pathTable["/0x00/FreX2"] = 13928820;
	pathTable["/0x00/MunX0"] = 13928660;
	pathTable["/0x00/MunX2"] = 13928824;
	pathTable["/0x00/MunY2"] = 13928828;
	pathTable["/0x00/ResX2"] = 13928832;
	pathTable["/0x00/RinY2"] = 13928836;
	pathTable["/0x00/RinX2"] = 13928840;
	pathTable["/0x00/RevX2"] = 13928844;
	pathTable["/0x00/RevY2"] = 13928848;
	pathTable["/0x00/MovY2"] = 13928852;
	pathTable["/0x00/MovX2"] = 13928856;
	pathTable["/0x00/Vol3"] = 13928860;
	pathTable["/0x00/MunY0"] = 13928664;
	pathTable["/0x00/opt3"] = 13928884;
	pathTable["/0x00/FreX3"] = 13928888;
	pathTable["/0x00/FreY3"] = 13928892;
	pathTable["/0x00/MunX3"] = 13928896;
	pathTable["/0x00/MunY3"] = 13928900;
	pathTable["/0x00/ResX3"] = 13928904;
	pathTable["/0x00/RinY3"] = 13928908;
	pathTable["/0x00/RinX3"] = 13928912;
	pathTable["/0x00/RevX3"] = 13928916;
	pathTable["/0x00/RevY3"] = 13928920;
	pathTable["/0x00/ResX0"] = 13928676;
	pathTable["/0x00/MovY3"] = 13928924;
	pathTable["/0x00/MovX3"] = 13928928;
	pathTable["/0x00/Vol5"] = 13928932;
	pathTable["/0x00/opt5"] = 13928956;
	pathTable["/0x00/FreY5"] = 13928960;
	pathTable["/0x00/FreX5"] = 13928964;
	pathTable["/0x00/MunX5"] = 13928968;
	pathTable["/0x00/MunY5"] = 13928972;
	pathTable["/0x00/ResX5"] = 13928976;
	pathTable["/0x00/RinY5"] = 13928980;
	pathTable["/0x00/RinY0"] = 13928680;
	pathTable["/0x00/RinX5"] = 13928984;
	pathTable["/0x00/RevX5"] = 13928988;
	pathTable["/0x00/RevY5"] = 13928992;
	pathTable["/0x00/MovY5"] = 13928996;
	pathTable["/0x00/MovX5"] = 13929000;
	pathTable["/0x00/Vol4"] = 13929004;
	pathTable["/0x00/opt4"] = 13929028;
	pathTable["/0x00/FreX4"] = 13929032;
	pathTable["/0x00/FreY4"] = 13929036;
	pathTable["/0x00/MunX4"] = 13929040;
	pathTable["/0x00/RinX0"] = 13928688;
	pathTable["/0x00/MunY4"] = 13929044;
	pathTable["/0x00/ResX4"] = 13929048;
	pathTable["/0x00/RinY4"] = 13929052;
	pathTable["/0x00/RinX4"] = 13929056;
	pathTable["/0x00/RevX4"] = 13929060;
	pathTable["/0x00/RevY4"] = 13929064;
	pathTable["/0x00/MovY4"] = 13929068;
	pathTable["/0x00/MovX4"] = 13929072;
	pathTable["/0x00/RevX0"] = 13928692;
	pathTable["/0x00/RevY0"] = 13928696;
	return pathTable;
}

function getJSONeffet2v200() {
	return "{  \"name\": \"\",  \"inputs\": \"1\",  \"outputs\": \"7\",  \"meta\": [    { \"effect.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"effect.lib/copyright\": \"Julius O. Smith III\" },   { \"effect.lib/exciter_author\": \"Priyanka Shekar (pshekar@ccrma.stanford.edu)\" },   { \"effect.lib/exciter_copyright\": \"Copyright (c) 2013 Priyanka Shekar\" },   { \"effect.lib/exciter_license\": \"MIT License (MIT)\" },   { \"effect.lib/exciter_name\": \"Harmonic Exciter\" },   { \"effect.lib/exciter_version\": \"1.0\" },   { \"effect.lib/license\": \"STK-4.3\" },   { \"effect.lib/name\": \"Faust Audio Effect Library\" },   { \"effect.lib/version\": \"1.33\" },   { \"filter.lib/author\": \"Julius O. Smith (jos at ccrma.stanford.edu)\" },   { \"filter.lib/copyright\": \"Julius O. Smith III\" },   { \"filter.lib/license\": \"STK-4.3\" },   { \"filter.lib/name\": \"Faust Filter Library\" },   { \"filter.lib/reference\": \"https://ccrma.stanford.edu/~jos/filters/\" },   { \"filter.lib/version\": \"1.29\" },   { \"hoa.lib/author\": \"Pierre Guillot\" },   { \"hoa.lib/copyright\": \"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\" },   { \"hoa.lib/name\": \"HOA\" },   { \"hoa.lib/title\": \"High Order Ambisonics library\" },   { \"instrument.lib/author\": \"Romain Michon (rmichon@ccrma.stanford.edu)\" },   { \"instrument.lib/copyright\": \"Romain Michon\" },   { \"instrument.lib/licence\": \"STK-4.3\" },   { \"instrument.lib/name\": \"Faust-STK Tools Library\" },   { \"instrument.lib/version\": \"1.0\" },   { \"math.lib/author\": \"GRAME\" },   { \"math.lib/copyright\": \"GRAME\" },   { \"math.lib/license\": \"LGPL with exception\" },   { \"math.lib/name\": \"Math Library\" },   { \"math.lib/version\": \"1.0\" },   { \"music.lib/author\": \"GRAME\" },   { \"music.lib/copyright\": \"GRAME\" },   { \"music.lib/license\": \"LGPL with exception\" },   { \"music.lib/name\": \"Music Library\" },   { \"music.lib/version\": \"1.0\" }  ],  \"ui\": [    {    \"type\": \"vgroup\",    \"label\": \"0x00\",    \"items\": [      {      \"type\": \"button\",      \"label\": \"FreB0\",      \"address\": \"/0x00/FreB0\"     },     {      \"type\": \"button\",      \"label\": \"FreB1\",      \"address\": \"/0x00/FreB1\"     },     {      \"type\": \"button\",      \"label\": \"FreB2\",      \"address\": \"/0x00/FreB2\"     },     {      \"type\": \"button\",      \"label\": \"FreB3\",      \"address\": \"/0x00/FreB3\"     },     {      \"type\": \"button\",      \"label\": \"FreB4\",      \"address\": \"/0x00/FreB4\"     },     {      \"type\": \"button\",      \"label\": \"FreB5\",      \"address\": \"/0x00/FreB5\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX0\",      \"address\": \"/0x00/FreX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX1\",      \"address\": \"/0x00/FreX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX2\",      \"address\": \"/0x00/FreX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX3\",      \"address\": \"/0x00/FreX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX4\",      \"address\": \"/0x00/FreX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreX5\",      \"address\": \"/0x00/FreX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY0\",      \"address\": \"/0x00/FreY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY1\",      \"address\": \"/0x00/FreY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY2\",      \"address\": \"/0x00/FreY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY3\",      \"address\": \"/0x00/FreY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY4\",      \"address\": \"/0x00/FreY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"FreY5\",      \"address\": \"/0x00/FreY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX0\",      \"address\": \"/0x00/MovX0\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX1\",      \"address\": \"/0x00/MovX1\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX2\",      \"address\": \"/0x00/MovX2\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX3\",      \"address\": \"/0x00/MovX3\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX4\",      \"address\": \"/0x00/MovX4\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovX5\",      \"address\": \"/0x00/MovX5\",      \"init\": \"0\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY0\",      \"address\": \"/0x00/MovY0\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY1\",      \"address\": \"/0x00/MovY1\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY2\",      \"address\": \"/0x00/MovY2\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY3\",      \"address\": \"/0x00/MovY3\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY4\",      \"address\": \"/0x00/MovY4\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"hslider\",      \"label\": \"MovY5\",      \"address\": \"/0x00/MovY5\",      \"init\": \"5\",      \"min\": \"-15\",      \"max\": \"15\",      \"step\": \"0.01\"     },     {      \"type\": \"button\",      \"label\": \"MunB0\",      \"address\": \"/0x00/MunB0\"     },     {      \"type\": \"button\",      \"label\": \"MunB1\",      \"address\": \"/0x00/MunB1\"     },     {      \"type\": \"button\",      \"label\": \"MunB2\",      \"address\": \"/0x00/MunB2\"     },     {      \"type\": \"button\",      \"label\": \"MunB3\",      \"address\": \"/0x00/MunB3\"     },     {      \"type\": \"button\",      \"label\": \"MunB4\",      \"address\": \"/0x00/MunB4\"     },     {      \"type\": \"button\",      \"label\": \"MunB5\",      \"address\": \"/0x00/MunB5\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX0\",      \"address\": \"/0x00/MunX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX1\",      \"address\": \"/0x00/MunX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX2\",      \"address\": \"/0x00/MunX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX3\",      \"address\": \"/0x00/MunX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX4\",      \"address\": \"/0x00/MunX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunX5\",      \"address\": \"/0x00/MunX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY0\",      \"address\": \"/0x00/MunY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY1\",      \"address\": \"/0x00/MunY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY2\",      \"address\": \"/0x00/MunY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY3\",      \"address\": \"/0x00/MunY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY4\",      \"address\": \"/0x00/MunY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"MunY5\",      \"address\": \"/0x00/MunY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"ResB0\",      \"address\": \"/0x00/ResB0\"     },     {      \"type\": \"button\",      \"label\": \"ResB1\",      \"address\": \"/0x00/ResB1\"     },     {      \"type\": \"button\",      \"label\": \"ResB2\",      \"address\": \"/0x00/ResB2\"     },     {      \"type\": \"button\",      \"label\": \"ResB3\",      \"address\": \"/0x00/ResB3\"     },     {      \"type\": \"button\",      \"label\": \"ResB4\",      \"address\": \"/0x00/ResB4\"     },     {      \"type\": \"button\",      \"label\": \"ResB5\",      \"address\": \"/0x00/ResB5\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX0\",      \"address\": \"/0x00/ResX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX1\",      \"address\": \"/0x00/ResX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX2\",      \"address\": \"/0x00/ResX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX3\",      \"address\": \"/0x00/ResX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX4\",      \"address\": \"/0x00/ResX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"ResX5\",      \"address\": \"/0x00/ResX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"RevB0\",      \"address\": \"/0x00/RevB0\"     },     {      \"type\": \"button\",      \"label\": \"RevB1\",      \"address\": \"/0x00/RevB1\"     },     {      \"type\": \"button\",      \"label\": \"RevB2\",      \"address\": \"/0x00/RevB2\"     },     {      \"type\": \"button\",      \"label\": \"RevB3\",      \"address\": \"/0x00/RevB3\"     },     {      \"type\": \"button\",      \"label\": \"RevB4\",      \"address\": \"/0x00/RevB4\"     },     {      \"type\": \"button\",      \"label\": \"RevB5\",      \"address\": \"/0x00/RevB5\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX0\",      \"address\": \"/0x00/RevX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX1\",      \"address\": \"/0x00/RevX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX2\",      \"address\": \"/0x00/RevX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX3\",      \"address\": \"/0x00/RevX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX4\",      \"address\": \"/0x00/RevX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevX5\",      \"address\": \"/0x00/RevX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY0\",      \"address\": \"/0x00/RevY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY1\",      \"address\": \"/0x00/RevY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY2\",      \"address\": \"/0x00/RevY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY3\",      \"address\": \"/0x00/RevY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY4\",      \"address\": \"/0x00/RevY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RevY5\",      \"address\": \"/0x00/RevY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"button\",      \"label\": \"RinB0\",      \"address\": \"/0x00/RinB0\"     },     {      \"type\": \"button\",      \"label\": \"RinB1\",      \"address\": \"/0x00/RinB1\"     },     {      \"type\": \"button\",      \"label\": \"RinB2\",      \"address\": \"/0x00/RinB2\"     },     {      \"type\": \"button\",      \"label\": \"RinB3\",      \"address\": \"/0x00/RinB3\"     },     {      \"type\": \"button\",      \"label\": \"RinB4\",      \"address\": \"/0x00/RinB4\"     },     {      \"type\": \"button\",      \"label\": \"RinB5\",      \"address\": \"/0x00/RinB5\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX0\",      \"address\": \"/0x00/RinX0\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX1\",      \"address\": \"/0x00/RinX1\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX2\",      \"address\": \"/0x00/RinX2\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX3\",      \"address\": \"/0x00/RinX3\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX4\",      \"address\": \"/0x00/RinX4\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinX5\",      \"address\": \"/0x00/RinX5\",      \"init\": \"100\",      \"min\": \"80\",      \"max\": \"200\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY0\",      \"address\": \"/0x00/RinY0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY1\",      \"address\": \"/0x00/RinY1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY2\",      \"address\": \"/0x00/RinY2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY3\",      \"address\": \"/0x00/RinY3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY4\",      \"address\": \"/0x00/RinY4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"RinY5\",      \"address\": \"/0x00/RinY5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol0\",      \"address\": \"/0x00/Vol0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol1\",      \"address\": \"/0x00/Vol1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol2\",      \"address\": \"/0x00/Vol2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol3\",      \"address\": \"/0x00/Vol3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol4\",      \"address\": \"/0x00/Vol4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"Vol5\",      \"address\": \"/0x00/Vol5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"100\",      \"step\": \"0.1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt0\",      \"address\": \"/0x00/opt0\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt1\",      \"address\": \"/0x00/opt1\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt2\",      \"address\": \"/0x00/opt2\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt3\",      \"address\": \"/0x00/opt3\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt4\",      \"address\": \"/0x00/opt4\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     },     {      \"type\": \"hslider\",      \"label\": \"opt5\",      \"address\": \"/0x00/opt5\",      \"init\": \"0\",      \"min\": \"0\",      \"max\": \"4\",      \"step\": \"1\"     }    ]   }  ] } ";
}

function metadataeffet2v200(m) {
	m.declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("effect.lib/copyright", "Julius O. Smith III");
	m.declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
	m.declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("effect.lib/exciter_license", "MIT License (MIT)");
	m.declare("effect.lib/exciter_name", "Harmonic Exciter");
	m.declare("effect.lib/exciter_version", "1.0");
	m.declare("effect.lib/license", "STK-4.3");
	m.declare("effect.lib/name", "Faust Audio Effect Library");
	m.declare("effect.lib/version", "1.33");
	m.declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m.declare("filter.lib/copyright", "Julius O. Smith III");
	m.declare("filter.lib/license", "STK-4.3");
	m.declare("filter.lib/name", "Faust Filter Library");
	m.declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
	m.declare("filter.lib/version", "1.29");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "HOA");
	m.declare("hoa.lib/title", "High Order Ambisonics library");
	m.declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
	m.declare("instrument.lib/copyright", "Romain Michon");
	m.declare("instrument.lib/licence", "STK-4.3");
	m.declare("instrument.lib/name", "Faust-STK Tools Library");
	m.declare("instrument.lib/version", "1.0");
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
}


// Standard Faust DSP

faust.effet2v200 = function (context, buffer_size) {

    var handler = null;
    var ins, outs;
    var numIn, numOut;
    
    var scriptProcessor;
    
    var dspInChannnels = [];
    var dspOutChannnels = [];
   
    // Keep JSON parsed object
    var jon_object = JSON.parse(getJSONeffet2v200());
    
    function getNumInputsAux () 
    {
        return (jon_object.inputs !== undefined) ? parseInt(jon_object.inputs) : 0;
    }
    
    function getNumOutputsAux () 
    {
        return (jon_object.outputs !== undefined) ? parseInt(jon_object.outputs) : 0;
    }
     
    // Memory allocator
    var ptr_size = 4; 
    var sample_size = 4;
    
    function pow2limit (x)
    {
        var n = 2;
        while (n < x) { n = 2 * n; }
        return (n < 65536) ? 65536 : n; // Minimum = 64 kB
    }
     
    var memory_size = pow2limit(getSizeeffet2v200() + (getNumInputsAux() + getNumOutputsAux()) * (ptr_size + (buffer_size * sample_size)));
   
    var HEAP = new ArrayBuffer(memory_size);
    var HEAP32 = new Int32Array(HEAP);
    var HEAPF32 = new Float32Array(HEAP);
     
    console.log(HEAP);
    console.log(HEAP32);
    console.log(HEAPF32);
 
    // bargraph
    var ouputs_timer = 5;
    var ouputs_items = [];
     
    // input items
    var inputs_items = [];
     
    // Start of HEAP index
    var audio_heap_ptr = 0;
     
    // Setup pointers offset
    var audio_heap_ptr_inputs = audio_heap_ptr; 
    var audio_heap_ptr_outputs = audio_heap_ptr_inputs + (getNumInputsAux() * ptr_size);
     
    // Setup buffer offset
    var audio_heap_inputs = audio_heap_ptr_outputs + (getNumOutputsAux() * ptr_size);
    var audio_heap_outputs = audio_heap_inputs + (getNumInputsAux() * buffer_size * sample_size);
    
    // Setup DSP offset
    var dsp_start = audio_heap_outputs + (getNumOutputsAux() * buffer_size * sample_size);
     
    // Start of DSP memory
    var dsp = dsp_start;
 
    // ASM module
    var factory = effet2v200Module(window, null, HEAP);
    console.log(factory);
 
    var pathTable = getPathTableeffet2v200();
    
    // Allocate table for 'setValue'
    var value_table = [];
        
    function update_outputs () 
    {
        if (ouputs_items.length > 0 && handler && ouputs_timer-- === 0) {
            ouputs_timer = 5;
            for (var i = 0; i < ouputs_items.length; i++) {
                handler(ouputs_items[i], factory.getValue(dsp, pathTable[ouputs_items[i]]));
            }
        }
    }
    
    function compute (e) 
    {
        var i, j;
        
        // Read inputs
        for (i = 0; i < numIn; i++) {
            var input = e.inputBuffer.getChannelData(i);
            var dspInput = dspInChannnels[i];
            for (j = 0; j < input.length; j++) {
                dspInput[j] = input[j];
            }
        }
        
        // Update control state
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = value_table[path];
            factory.setValue(dsp, pathTable[path], values[0]);
            values[0] = values[1];
        }
        
        // Compute
        factory.compute(dsp, buffer_size, ins, outs);
       
        // Update bargraph
        update_outputs();
        
        // Write outputs
        for (i = 0; i < numOut; i++) {
            var output = e.outputBuffer.getChannelData(i);
            var dspOutput = dspOutChannnels[i];
            for (j = 0; j < output.length; j++) {
                output[j] = dspOutput[j];
            }
        }
    };
         
    // JSON parsing
    function parse_ui (ui) 
    {
        for (var i = 0; i < ui.length; i++) {
            console.log(ui[i]);
            parse_group(ui[i]);
        }
    }
    
    function parse_group (group) 
    {
        if (group.items) {
            parse_items(group.items);
        }
    }
    
    function parse_items (items) 
    {
        var i;
        for (i = 0; i < items.length; i++) {
            parse_item(items[i]);
        }
    }
    
    function parse_item (item) 
    {
        if (item.type === "vgroup" || item.type === "hgroup" || item.type === "tgroup") {
            parse_items(item.items);
        } else if (item.type === "hbargraph" || item.type === "vbargraph") {
            // Keep bargraph adresses
            ouputs_items.push(item.address);
        } else if (item.type === "vslider" || item.type === "hslider" || item.type === "button" || item.type === "checkbox" || item.type === "nentry") {
            // Keep inputs adresses
            inputs_items.push(item.address);
        }
    }
      
    function init ()
    {
        var i;
        
        // Get input / output counts
        numIn = getNumInputsAux();
        numOut = getNumOutputsAux();
         
        // Setup web audio context
        console.log("buffer_size %d", buffer_size);
        scriptProcessor = context.createScriptProcessor(buffer_size, numIn, numOut);
        scriptProcessor.onaudioprocess = compute;
        
        if (numIn > 0) {
            ins = audio_heap_ptr_inputs; 
            for (i = 0; i < numIn; i++) { 
                HEAP32[(ins >> 2) + i] = audio_heap_inputs + ((buffer_size * sample_size) * i);
            }
     
            var dspInChans = HEAP32.subarray(ins >> 2, (ins + numIn * ptr_size) >> 2);
            for (i = 0; i < numIn; i++) {
                dspInChannnels[i] = HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + buffer_size * sample_size) >> 2);
            }
        }
        
        if (numOut > 0) {
            outs = audio_heap_ptr_outputs; 
            for (i = 0; i < numOut; i++) { 
                HEAP32[(outs >> 2) + i] = audio_heap_outputs + ((buffer_size * sample_size) * i);
            }
          
            var dspOutChans = HEAP32.subarray(outs >> 2, (outs + numOut * ptr_size) >> 2);
            for (i = 0; i < numOut; i++) {
                dspOutChannnels[i] = HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + buffer_size * sample_size) >> 2);
            }
        }
                                
        // bargraph
        parse_ui(jon_object.ui);
        
        // Init DSP
        factory.init(dsp, context.sampleRate);
        
        // Init 'value' table
        for (i = 0; i < inputs_items.length; i++) {
            var path = inputs_items[i];
            var values = new Float32Array(2);
            values[0] = values[1] = factory.getValue(dsp, pathTable[path]);
            value_table[path] = values;
        }
    }
    
    init();
    
    // External API
    return {
    
        getNumInputs : function () 
        {
            return getNumInputsAux();
        },
        
        getNumOutputs : function() 
        {
            return getNumOutputsAux();
        },
    
        destroy : function  ()
        {
            // Nothing to do
        },
        
        // Connect/disconnect to another node
        connect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.connect(node.getProcessor());
            } else {
                scriptProcessor.connect(node);
            }
        },

        disconnect : function (node) 
        {
            if (node.getProcessor !== undefined) {
                scriptProcessor.disconnect(node.getProcessor());
            } else {
                scriptProcessor.disconnect(node);
            }
        },
        
        setHandler : function (hd)
        {
            handler = hd;
        },
        
        start : function () 
        {
            scriptProcessor.connect(context.destination);
        },

        stop : function () 
        {
            scriptProcessor.disconnect(context.destination);
        },

        setValue : function (path, val) 
        {
            var values = value_table[path];
            if (values) {
                if (factory.getValue(dsp, pathTable[path]) == values[0]) {
                    values[0] = val;
                } 
                values[1] = val;
            }
        },

        getValue : function (path) 
        {
            return factory.getValue(dsp, pathTable[path]);
        },
        
        controls : function()
        {
            return inputs_items;
        },
        
        json : function ()
        {
            return getJSONeffet2v200();
        },
        
        getProcessor : function ()
        {
            return scriptProcessor;
        }
    };
};

